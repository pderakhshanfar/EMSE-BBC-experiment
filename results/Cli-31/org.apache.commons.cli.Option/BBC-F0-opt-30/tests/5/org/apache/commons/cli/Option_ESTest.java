/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:27:46 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", true, "+-Of)/Am.w}J");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-1731));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1731), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      String string0 = option0.toString();
      assertEquals("[ option:  +-Of)/Am.w}J  :: +-Of)/Am.w}J ]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(1118);
      option0.setValueSeparator(']');
      option0.addValueForProcessing("eVbmVHq]w");
      assertEquals(']', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("tyTNr", "tyTNr", true, "tyTNr");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('2');
      char char0 = option0.getValueSeparator();
      assertEquals('2', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('e');
      char char0 = option0.getValueSeparator();
      assertEquals('e', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getValue("");
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(1118);
      option0.addValueForProcessing("eVbmVHq]w");
      option0.getValue(0);
      assertEquals(1118, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      option0.setType("");
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals("+-Of)/Am.w}J", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("+-Of)/Am.w}J", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, true, "^0a,Pf*T");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("LR6HFwZTWWO65", "LR6HFwZTWWO65");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt(" ");
      option0.getLongOpt();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("U", "U", true, "");
      assertEquals("U", option0.getLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("U", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, true, "^0a,Pf*T");
      String string0 = option0.getKey();
      assertTrue(option0.hasArgName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("WV69jZ", "", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      String string0 = option0.getKey();
      assertEquals("WV69jZ", string0);
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "U+Xs[5x,/|`/l6", true, " ]");
      String string0 = option0.getKey();
      assertEquals("", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("U+Xs[5x,/|`/l6", option0.getLongOpt());
      assertEquals(" ]", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "Cannot add value, list full.");
      String string0 = option0.getDescription();
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertEquals("Cannot add value, list full.", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getDescription();
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("2Jf", "=KTg&yj[", true, "=KTg&yj[");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("n", "U+Xs[5x,/|`/l6", true, " ]");
      int int0 = option0.getArgs();
      assertEquals("U+Xs[5x,/|`/l6", option0.getLongOpt());
      assertEquals(" ]", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("n", option0.getOpt());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "WB|g^Ep*&>Jql");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(1118);
      option0.addValueForProcessing("eVbmVHq]w");
      try { 
        option0.getValue(33);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 33, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "U", true, "U");
      option0.addValueForProcessing("t;&ge,gF}), M]9T;q");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(388);
      option0.setValueSeparator(' ');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("5W @A<iox)tHUyth", false, "5W @A<iox)tHUyth");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '5W @A<iox)tHUyth' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("^0a,Pf*T", "^0a,Pf*T", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '^0a,Pf*T' contains an illegal character : '^'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("org.apache.commons.cli.OptionValidator", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'org.apache.commons.cli.OptionValidator' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('2');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('2', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("WV69jZ", "", false, "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      boolean boolean0 = option0.hasArgs();
      assertEquals("", option0.getLongOpt());
      assertEquals("WV69jZ", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option((String) null, true, "^0a,Pf*T");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArgs();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "U", true, "U");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArg();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("n", "U+Xs[5x,/|`/l6", true, " ]");
      option0.getValueSeparator();
      assertTrue(option0.hasArgName());
      assertEquals("U+Xs[5x,/|`/l6", option0.getLongOpt());
      assertEquals(" ]", option0.getDescription());
      assertEquals("n", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("LR6HFwZTWWO65", "LR6HFwZTWWO65");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("1", "U", true, "U");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hashCode();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("n", "U+Xs[5x,/|`/l6", true, " ]");
      option0.hashCode();
      assertEquals("U+Xs[5x,/|`/l6", option0.getLongOpt());
      assertEquals(110, option0.getId());
      assertEquals(" ]", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, " [ARG]", true, (String) null);
      option0.hashCode();
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = (Option)option0.clone();
      assertFalse(option1.hasLongOpt());
      
      option1.setLongOpt("}I^:*X-z]V");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      Option option1 = (Option)option0.clone();
      assertEquals("", option1.getLongOpt());
      
      option1.setLongOpt("S");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("U", "U", true, "");
      Option option1 = new Option((String) null, "U");
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option0.getDescription());
      assertTrue(option1.hasArgName());
      assertEquals("U", option0.getOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("tyTNr", "tyTNr", true, "tyTNr");
      Option option1 = new Option("", (String) null, true, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      Option option1 = new Option((String) null, "");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("2Jf", "=KTg&yj[", true, "=KTg&yj[");
      boolean boolean0 = option0.equals("arg");
      assertFalse(boolean0);
      assertEquals("=KTg&yj[", option0.getLongOpt());
      assertEquals(50, option0.getId());
      assertEquals("=KTg&yj[", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("4PR", "4PR");
      boolean boolean0 = option0.equals(option0);
      assertTrue(option0.hasArgName());
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      option0.setType("R");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option:  +-Of)/Am.w}J  :: +-Of)/Am.w}J :: R ]", string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      String string0 = option0.toString();
      assertEquals("[ option: null  :: null ]", string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option:    [ARG] :: S ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      String[] stringArray0 = option0.getValues();
      assertEquals((-1), option0.getArgs());
      assertNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      option0.addValueForProcessing("S");
      String[] stringArray0 = option0.getValues();
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("S", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "U+Xs[5x,/|`/l6", true, " ]");
      option0.addValueForProcessing(")k05PsY");
      String string0 = option0.getValue(" ]");
      assertTrue(option0.hasArgName());
      assertEquals(")k05PsY", string0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("U+Xs[5x,/|`/l6", option0.getLongOpt());
      assertEquals(" ]", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("2Jf", "=KTg&yj[", true, "=KTg&yj[");
      option0.getValue(50);
      assertEquals("=KTg&yj[", option0.getLongOpt());
      assertEquals("=KTg&yj[", option0.getDescription());
      assertEquals("2Jf", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("1", "U", true, "U");
      option0.getValue();
      assertEquals("U", option0.getDescription());
      assertEquals("U", option0.getLongOpt());
      assertEquals(49, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("U", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertEquals("", option0.getDescription());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("U", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('r');
      option0.addValueForProcessing(",1");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Y7oU7Z:(#rGdDZK&4C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("U", "U", true, "");
      option0.setValueSeparator('c');
      option0.addValueForProcessing("ci,6$y; \"");
      assertEquals('c', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option((String) null, true, "^0a,Pf*T");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertEquals("S", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "WB|g^Ep*&>Jql");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "U", true, "U");
      option0.setArgs((-2));
      option0.addValueForProcessing("t;&ge,gF}), M]9T;q");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "+-Of)/Am.w}J", false, "+-Of)/Am.w}J");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
      assertEquals("+-Of)/Am.w}J", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("+-Of)/Am.w}J", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "WB|g^Ep*&>Jql");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("WB|g^Ep*&>Jql", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("2Jf", "=KTg&yj[", true, "=KTg&yj[");
      int int0 = option0.getId();
      assertEquals("=KTg&yj[", option0.getLongOpt());
      assertEquals("=KTg&yj[", option0.getDescription());
      assertEquals(1, option0.getArgs());
      assertEquals(50, int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("2Jf", "=KTg&yj[", true, "=KTg&yj[");
      option0.clearValues();
      assertEquals("arg", option0.getArgName());
      assertEquals("=KTg&yj[", option0.getLongOpt());
      assertEquals(50, option0.getId());
      assertEquals("=KTg&yj[", option0.getDescription());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "WB|g^Ep*&>Jql");
      String string0 = option0.getOpt();
      assertEquals("WB|g^Ep*&>Jql", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("h4i_", "V#X&,ST-X6[.");
      assertEquals("V#X&,ST-X6[.", option0.getDescription());
      
      option0.setDescription("Wzfy b3sRq");
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      option0.getType();
      assertEquals("S", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertEquals("", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertEquals("", option1.getOpt());
      assertEquals("S", option1.getDescription());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
      assertEquals(1, option1.getArgs());
      assertEquals("", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "U", true, "U");
      // Undeclared exception!
      try { 
        option0.addValue("t;&ge,gF}), M]9T;q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "S");
      option0.getValuesList();
      assertEquals("", option0.getLongOpt());
      assertEquals("S", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("tyTNr", "tyTNr", true, "tyTNr");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("h4i_", "V#X&,ST-X6[.");
      option0.setArgs(4333);
      option0.addValueForProcessing("Evcea");
      option0.addValueForProcessing("FlpW{");
      option0.setArgs(1);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Evcea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }
}
