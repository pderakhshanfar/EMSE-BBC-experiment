/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:59:42 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-1463));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1463), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", true, "A CloneNotSupportedException was thrown: ");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      option0.addValueForProcessing("D");
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("u", "u");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("Kpst", "", true, "Kpst");
      option0.setValueSeparator('.');
      option0.setArgs((-1018));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("B.usAhKq.va1Sq|a~/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      String string0 = option0.toString();
      assertEquals("[ option: null  :: null ]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('6');
      char char0 = option0.getValueSeparator();
      assertEquals('6', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setValueSeparator('E');
      char char0 = option0.getValueSeparator();
      assertEquals('E', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("S", true, "*.(8Q`y8^W]nSY6n%");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertEquals("*.(8Q`y8^W]nSY6n%", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("S", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setArgs(43);
      option0.addValueForProcessing("B");
      option0.getValue(0);
      assertEquals(43, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setType("");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("g", "z6");
      String string0 = option0.getOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("g", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("z6", option0.getDescription());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", true, "f~x;U8tvUlA A");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("l", true, "A CloneNotSupportedException was thrown: ");
      String string0 = option0.getKey();
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("l", string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.getKey();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("g", "z6");
      int int0 = option0.getId();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("z6", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals(103, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      String string0 = option0.getDescription();
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("g", "z6");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertEquals("g", option0.getOpt());
      assertEquals("z6", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("#");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(4622);
      option0.addValueForProcessing("X0*J)IkH~@*IP$ts?[");
      try { 
        option0.getValue((-3883));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('/');
      option0.setArgs(4077);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(")hY|", false, "'N[avi;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')hY|' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("q&[o", "", true, "g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'q&[o' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(":[j}Oa", ":[j}Oa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ':[j}Oa' contains an illegal character : ':'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", ":jnH", true, ":jnH");
      option0.getValue();
      assertEquals(":jnH", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals(":jnH", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setValueSeparator('<');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('<', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "AoB.&%", true, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals("AoB.&%", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "{GZh_>C^ya", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "{GZh_>C^ya", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals("{GZh_>C^ya", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("s", "s");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      option0.addValueForProcessing("!-~V8/O+1z5&=g");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertTrue(option0.hasArg());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "{GZh_>C^ya", false, "");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("#");
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "c+\".l@<h>o:oU", true, "");
      option0.hashCode();
      assertEquals("", option0.getOpt());
      assertEquals("c+\".l@<h>o:oU", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "c+\".l@<h>o:oU", true, "");
      Option option1 = new Option("", "c+\".l@<h>o:oU", true, "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals("c+\".l@<h>o:oU", option1.getLongOpt());
      assertEquals("", option1.getOpt());
      assertTrue(option1.hasArgName());
      assertEquals("", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("g", "z6");
      Option option1 = new Option("g", "g", false, "z6");
      boolean boolean0 = option1.equals(option0);
      assertEquals("z6", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertEquals("g", option1.getOpt());
      assertEquals("arg", option1.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("g", "z6");
      Option option1 = new Option("B", "g", false, "z6");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals(66, option1.getId());
      assertEquals("z6", option1.getDescription());
      assertEquals("g", option1.getLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, "g", false, "");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertEquals((-1), option1.getArgs());
      assertEquals("", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals("]'JcIEv|");
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("[ option:   ::  ::  ]", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  [ARG...] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("Kpst", "", true, "Kpst");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option: Kpst   [ARG] :: Kpst ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", "");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(stringArray0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(4077);
      option0.addValueForProcessing("");
      option0.getValues();
      assertEquals(4077, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", true, "A CloneNotSupportedException was thrown: ");
      option0.addValueForProcessing("D");
      String string0 = option0.getValue("A CloneNotSupportedException was thrown: ");
      assertEquals("D", string0);
      assertEquals("A CloneNotSupportedException was thrown: ", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getValue((-1065));
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("arg", "arg");
      option0.setArgs(43);
      option0.addValueForProcessing("");
      option0.getValue(0);
      assertEquals(43, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", ":jnH", true, ":jnH");
      String string0 = option0.getValue("");
      assertEquals(":jnH", option0.getDescription());
      assertNotNull(string0);
      assertEquals(":jnH", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, true, "Illegal option name '");
      option0.addValueForProcessing("g");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("Kpst", "", true, "Kpst");
      option0.setValueSeparator('.');
      option0.addValueForProcessing("B.usAhKq.va1Sq|a~/");
      assertEquals('.', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('/');
      option0.setArgs(4077);
      option0.addValueForProcessing("B.usAhKq.va1Sq|a~/");
      assertEquals(4077, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("olO%7JnnrJY<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("z6", "z6");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setArgs(4077);
      boolean boolean0 = option0.hasArgs();
      assertEquals(4077, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "c+\".l@<h>o:oU", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "c+\".l@<h>o:oU", true, "");
      boolean boolean0 = option0.hasArgName();
      assertEquals("", option0.getDescription());
      assertTrue(boolean0);
      assertTrue(option0.hasArg());
      assertEquals("c+\".l@<h>o:oU", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("z6", "z6");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing(",l~[/AlkZ");
      option0.getValuesList();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", ":jnH", true, ":jnH");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getOpt());
      assertEquals(":jnH", option0.getDescription());
      assertTrue(boolean0);
      assertEquals(":jnH", option0.getLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, "s");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("u", "u");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "AoB.&%", true, "");
      int int0 = option0.getArgs();
      assertEquals("", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("AoB.&%", option0.getLongOpt());
      assertEquals(1, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getOpt();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("u", "u");
      option0.setDescription("NO_ARGS_ALLOWED");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", ":jnH", true, ":jnH");
      // Undeclared exception!
      try { 
        option0.addValue("Vb4Q4wLT]qv]=\t");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "c+\".l@<h>o:oU", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals("c+\".l@<h>o:oU", string0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("z6", "z6");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("S", true, "*.(8Q`y8^W]nSY6n%");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("S", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("*.(8Q`y8^W]nSY6n%", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", false, "QWk;4QF]RuRdT=Nk\"F");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("QWk;4QF]RuRdT=Nk\"F", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("", "");
      Object object0 = option0.getType();
      option0.setType(object0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }
}
