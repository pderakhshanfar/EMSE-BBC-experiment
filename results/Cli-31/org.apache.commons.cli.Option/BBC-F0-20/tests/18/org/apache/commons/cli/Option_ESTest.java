/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:59:58 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("djyhbew", "org.apache.commons.cli.OptionValidator", false, "d} ?mqGt:K^'G=vy[cG");
      option0.setArgs(96);
      option0.addValueForProcessing("d} ?mqGt:K^'G=vy[cG");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      option0.setArgs(1);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("djyhbew");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("7xdRz3", "O2,{3#IjPF", false, "O2,{3#IjPF");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("O2,{3#IjPF", option0.getDescription());
      assertEquals("O2,{3#IjPF", option0.getLongOpt());
      assertEquals(55, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.setValueSeparator('p');
      option0.setArgs((-745));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("The option '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-567));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-567), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("7xdRz3", false, "@d?~b1re'MjAqq@d");
      option0.setValueSeparator('7');
      char char0 = option0.getValueSeparator();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('Y');
      char char0 = option0.getValueSeparator();
      assertEquals('Y', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "@Qki;!Sib", true, "SX7^t\"2XPdMdL");
      option0.getValue((String) null);
      assertEquals("SX7^t\"2XPdMdL", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("@Qki;!Sib", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.addValueForProcessing("b(");
      String string0 = option0.getValue(0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.addValueForProcessing(",v");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.setType("m");
      option0.getType();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, false, " _G%s:OiR;");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("7xdRz3", "", false, "vOpah`o#A^:-Cn");
      String string0 = option0.getOpt();
      assertEquals("7xdRz3", string0);
      assertEquals("", option0.getLongOpt());
      assertEquals("vOpah`o#A^:-Cn", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "NO_ARGS_ALLOWED");
      String string0 = option0.getKey();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("7xdRz3", "O2,{3#IjPF", false, "O2,{3#IjPF");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertEquals("7xdRz3", string0);
      assertEquals("O2,{3#IjPF", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("O2,{3#IjPF", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.getKey();
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.getId();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("7xdRz3", "O2,{3#IjPF", false, "O2,{3#IjPF");
      assertEquals("O2,{3#IjPF", option0.getDescription());
      
      option0.setDescription((String) null);
      option0.getDescription();
      assertEquals("O2,{3#IjPF", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals(55, option0.getId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getDescription();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", false, "7xdRz3");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", false, "6T");
      option0.setArgs(3);
      int int0 = option0.getArgs();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", false, "7xdRz3");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasArgs());
      assertFalse(option0.hasArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.acceptsArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(2210);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2210, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      try { 
        option0.getValue((-1840700267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("", false, "7xdRz3");
      option0.setValueSeparator('v');
      option0.setArgs(0);
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("I4[PN`x[0Z(X:lAI", true, "u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'I4[PN`x[0Z(X:lAI' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("FO3 Q", "FO3 Q", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'FO3 Q' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: ", "[ option: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: ' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", "^[AK5Yzo\"mL@,zf@5>", true, "^[AK5Yzo\"mL@,zf@5>");
      option0.addValueForProcessing("E8#\"5!9suz=ZYBD7]7");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      String string0 = option0.toString();
      assertEquals("[ option:   :: Cannot add value, list full. ]", string0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "^[AK5Yzo\"mL@,zf@5>", true, "^[AK5Yzo\"mL@,zf@5>");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "@Qki;!Sib", true, "SX7^t\"2XPdMdL");
      option0.setValueSeparator('-');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('-', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "bk");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("bk", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "UxIR.b", true, "UxIR.b");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs(63);
      boolean boolean0 = option0.hasArgs();
      assertEquals(63, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-567));
      boolean boolean0 = option0.hasArg();
      assertEquals((-567), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("7xdRz3", false, "@d?~b1re'MjAqq@d");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(55, option0.getId());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("bY", true, "bY");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("bY", true, "bY");
      option0.addValueForProcessing("bY");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      option0.setArgs(0);
      option0.setOptionalArg(true);
      assertTrue(option0.hasOptionalArg());
      
      option0.addValueForProcessing("");
      assertEquals("Cannot add value, list full.", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "\"j\tQU0GFdjDDtC#Y", true, "' contains an illegal character : '");
      option0.hashCode();
      assertEquals("' contains an illegal character : '", option0.getDescription());
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(34, option0.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "co<*:", true, "bk");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertFalse(boolean0);
      assertEquals("bk", option1.getDescription());
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("co<*:", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      Option option1 = new Option("", "", true, "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, "m", true, "cpdO{=I<");
      Option option1 = new Option((String) null, true, (String) null);
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals(109, option0.getId());
      assertEquals("arg", option1.getArgName());
      assertEquals("cpdO{=I<", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      Option option1 = new Option("7xdRz3", "' contains an illegal character : '", false, "g162#B6o]}qaHP.eB");
      boolean boolean0 = option0.equals(option1);
      assertEquals("' contains an illegal character : '", option1.getLongOpt());
      assertEquals("g162#B6o]}qaHP.eB", option1.getDescription());
      assertEquals("arg", option1.getArgName());
      assertEquals("7xdRz3", option1.getOpt());
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      Option option1 = new Option((String) null, "m", true, "cpdO{=I<");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertTrue(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
      assertEquals("cpdO{=I<", option1.getDescription());
      assertEquals(109, option1.getId());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "");
      boolean boolean0 = option1.equals(option0);
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("m", "m", false, "m");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      boolean boolean0 = option0.equals("arg");
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      Option option1 = new Option((String) null, (String) null);
      option0.setType(option1);
      assertEquals((-1), option1.getArgs());
      
      String string0 = option0.toString();
      assertEquals("[ option: null  [ARG] :: null :: [ option: null  :: null ] ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNull(stringArray0);
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("djyhbew", "org.apache.commons.cli.OptionValidator", false, "d} ?mqGt:K^'G=vy[cG");
      option0.setArgs(96);
      option0.addValueForProcessing("d} ?mqGt:K^'G=vy[cG");
      option0.getValues();
      assertEquals(96, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.getValue((-436));
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValue();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.addValueForProcessing("7xdRz3");
      String string0 = option0.getValue("[ARG...]");
      assertEquals("7xdRz3", string0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("Z", "Z");
      option0.setValueSeparator('p');
      option0.setArgs(128);
      option0.addValueForProcessing("obk`-vx@p");
      assertEquals(128, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "^[AK5Yzo\"mL@,zf@5>", true, "^[AK5Yzo\"mL@,zf@5>");
      option0.setValueSeparator('E');
      option0.addValueForProcessing("E8#\"5!9suz=ZYBD7]7");
      assertEquals('E', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("iS_", "", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("`o`jBf4; oBZE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("bY", true, "bY");
      option0.setArgs((-2));
      option0.toString();
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "bk");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", false, "7xdRz3");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "@Qki;!Sib", true, "SX7^t\"2XPdMdL");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("SX7^t\"2XPdMdL", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("@Qki;!Sib", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", false, (String) null);
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      option0.clearValues();
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      int int0 = option0.getArgs();
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("Cannot add value, list full.", option0.getDescription());
      assertEquals((-1), int0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("[ option: ");
      String string0 = option0.toString();
      assertEquals("[ option: null [ option:   [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("m", "m", true, "m");
      option0.getType();
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      Option option1 = (Option)option0.clone();
      assertEquals("arg", option1.getArgName());
      assertNotSame(option1, option0);
      assertFalse(option1.hasLongOpt());
      assertEquals(1, option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("7xdRz3", "", false, "vOpah`o#A^:-Cn");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "@Qki;!Sib", true, "SX7^t\"2XPdMdL");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getOpt());
      assertEquals(1, option0.getArgs());
      assertEquals("SX7^t\"2XPdMdL", option0.getDescription());
      assertEquals("@Qki;!Sib", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("7xdRz3", false, "@d?~b1re'MjAqq@d");
      option0.getValuesList();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals(55, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertEquals(1, option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option("", false, "Cannot add value, list full.");
      String string0 = option0.getDescription();
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("Cannot add value, list full.", string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }
}
