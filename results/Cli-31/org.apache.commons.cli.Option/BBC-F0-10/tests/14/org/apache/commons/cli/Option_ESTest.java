/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:54:49 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, (String) null);
      option0.setArgs((-1089));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1089), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", true, " :: ");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("Cannot add value, list full.");
      option0.hashCode();
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("Z", "4mO2sxK");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(90, option0.getId());
      assertEquals("4mO2sxK", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("L", "L");
      option0.setArgs((-1051));
      option0.setValueSeparator('6');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("<6*VBs|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("L", "L");
      option0.setArgs((-1051));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("<6*VBs|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("Z", "4mO2sxK");
      option0.setValueSeparator('9');
      char char0 = option0.getValueSeparator();
      assertEquals('9', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", false, (String) null);
      option0.setValueSeparator('C');
      char char0 = option0.getValueSeparator();
      assertEquals('C', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      option0.getValue((String) null);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("m", false, "a");
      String string0 = option0.getValue("a");
      assertEquals("a", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertEquals(109, option0.getId());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setType(";u1j?b`,8kcj5u!*f6f");
      option0.getType();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "'");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("L", "L", true, "L");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.setLongOpt("H!");
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "h<)?YWu,?");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("h<)?YWu,?", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("L", "L");
      option0.getId();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("", "?:>w");
      String string0 = option0.getDescription();
      assertEquals("?:>w", string0);
      assertEquals("", option0.getOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("Z_", "Z_");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", true, "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(1014);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1014, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing(";,3@?06jgwL_");
      try { 
        option0.getValue((-1287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("L", "", true, "L");
      option0.setValueSeparator('6');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option:    [ARG] ::  ]", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option:    [ARG] ::  ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("[ option: L  :: L ]", "[ option: L  :: L ]", true, "<6*VBs|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '[ option: L  :: L ]' contains an illegal character : '['
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(".$[i8F%}BrPbuCMW`gj", ".$[i8F%}BrPbuCMW`gj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '.$[i8F%}BrPbuCMW`gj' contains an illegal character : '.'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", false, "Illegal option name '");
      assertFalse(option0.hasArg());
      
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals("[ option:  [ARG...] :: Illegal option name ' ]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("L", "", true, "L");
      option0.setValueSeparator('6');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('6', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "?:>w");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals("?:>w", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(1361);
      boolean boolean0 = option0.hasArgs();
      assertEquals(1361, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", true, " :: ");
      option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals(" :: ", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", true, " :: ");
      option0.getValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals(" :: ", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      assertEquals((-2), option0.getArgs());
      
      option0.addValueForProcessing("");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("L", "L");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("L", "L");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", false, "g-4`WH~#RO-8:ru;");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("L", "L");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("L");
      Option option1 = new Option("L", "L", false, "L");
      boolean boolean0 = option0.equals(option1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, "T5<B^A(I");
      Option option1 = new Option((String) null, true, "a");
      boolean boolean0 = option0.equals(option1);
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, "T5<B^A(I");
      Option option1 = new Option("g", "'", true, "<");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals("<", option1.getDescription());
      assertEquals("'", option1.getLongOpt());
      assertEquals(103, option1.getId());
      assertEquals("arg", option1.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("L", "L");
      Option option1 = new Option("L", "L", false, "L");
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.equals((Object)option0));
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option((String) null, "T5<B^A(I");
      Option option1 = new Option("L", "Q$k-&9", true, "g");
      boolean boolean0 = option0.equals(option1);
      assertEquals("g", option1.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("Q$k-&9", option1.getLongOpt());
      assertEquals("L", option1.getOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals("[ option:    [ARG] ::  ]");
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("L", "L");
      boolean boolean0 = option0.equals(option0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      String string0 = option0.toString();
      assertTrue(option0.hasArgName());
      assertEquals("[ option:    [ARG] ::  ]", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      String[] stringArray0 = option0.getValues();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertNotNull(stringArray0);
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("uWg##@)");
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("", string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue(63);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("e'5>rm)IbZnLj");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("L", "L", true, "L");
      option0.addValueForProcessing("[ option: L L  :: L ]");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("L", "", true, "L");
      option0.setValueSeparator('6');
      option0.setArgs(80);
      option0.addValueForProcessing("<6*VBs|");
      assertEquals(80, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", true, "[ARG...]");
      option1.setArgs(1255);
      option0.setType(option1);
      assertEquals(1255, option1.getArgs());
      
      String string0 = option0.toString();
      assertEquals("[ option:   ::  :: [ option:  [ARG...] :: [ARG...] ] ]", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("L", "L");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("po32o", "po32o", true, "po32o");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(option0.hasArgName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "h<)?YWu,?");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("h<)?YWu,?", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option((String) null, false, "");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("Z_", "Z_");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("L", "L", true, "L");
      option0.setValueSeparator('6');
      option0.addValueForProcessing("<6*VBs|");
      assertEquals('6', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("K", "X", false, "");
      String string0 = option0.getOpt();
      assertEquals("", option0.getDescription());
      assertEquals("X", option0.getLongOpt());
      assertEquals("K", string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setDescription("");
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("Z_", "Z_");
      Option option1 = (Option)option0.clone();
      assertNotSame(option1, option0);
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      // Undeclared exception!
      try { 
        option0.addValue("c");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "The option '");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("L", "L");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("L", "L");
      option0.getValuesList();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.isRequired();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, " :: ");
      String string0 = option0.getArgName();
      assertEquals("", option0.getOpt());
      assertEquals(" :: ", option0.getDescription());
      assertEquals("arg", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }
}
