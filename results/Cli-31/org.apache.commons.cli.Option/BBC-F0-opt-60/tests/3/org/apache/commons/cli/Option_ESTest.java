/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:27:12 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, (String) null);
      option0.addValueForProcessing("8");
      option0.setArgs(34);
      option0.addValueForProcessing("8");
      option0.setArgs(1);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(1, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("qT", true, "qT");
      option0.setArgs((-1971));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1971), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.setValueSeparator('e');
      option0.setArgs(2147483645);
      option0.addValueForProcessing("Illegal option name '");
      assertEquals(2147483645, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("_gbpR", "_gbpR", true, " ]");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.addValueForProcessing("[GGo,kM}{tQ:cU");
      option0.getValuesList();
      assertEquals("[GGo,kM}{tQ:cU", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("[GGo,kM}{tQ:cU", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.setValueSeparator('4');
      char char0 = option0.getValueSeparator();
      assertEquals('4', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('U');
      char char0 = option0.getValueSeparator();
      assertEquals('U', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", false, "GQ<C1qI=1");
      String string0 = option0.getValue("I84)]@y^");
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertEquals("GQ<C1qI=1", option0.getDescription());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("GX", "_tlb", true, "6");
      option0.addValueForProcessing("NKps-:");
      String string0 = option0.getValue(0);
      assertEquals("_tlb", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("6", option0.getDescription());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("6", true, "LA");
      option0.addValueForProcessing("f9mA");
      String string0 = option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertNotNull(string0);
      assertEquals("LA", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, false, "FJjg}Yo0vi 3'n");
      Object object0 = new Object();
      option0.setType(object0);
      option0.getType();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, false, ",Ug'DhPkc2V.5foX$");
      option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("N7", "$i^_JmKv");
      option0.getOpt();
      assertEquals("$i^_JmKv", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", ">%=d)(", true, ">%=d)(");
      String string0 = option0.getLongOpt();
      assertEquals(">%=d)(", string0);
      assertTrue(option0.hasArgName());
      assertEquals(">%=d)(", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{(tQ:cU", true, "[GGo,kM}{(tQ:cU");
      assertEquals("[GGo,kM}{(tQ:cU", option0.getLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option((String) null, false, "FJjg}Yo0vi 3'n");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, "arg", true, (String) null);
      String string0 = option0.getKey();
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.getKey();
      assertEquals("[GGo,kM}{tQ:cU", option0.getLongOpt());
      assertEquals("[GGo,kM}{tQ:cU", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, "", true, (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("s", true, "s");
      option0.setDescription("");
      option0.getDescription();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertEquals((-1), int0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgName((String) null);
      String string0 = option0.getArgName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("N7", "$i^_JmKv");
      assertTrue(option0.hasArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.addValueForProcessing("B");
      try { 
        option0.getValue((-1166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('Q');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("yu*IHkykH~o}Si@M", false, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'yu*IHkykH~o}Si@M' contains an illegal character : '*'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(" [ARG]", "q.T>($p3uZfY[[", false, " [ARG]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ' [ARG]' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("k3B%~`W'8G", "k3B%~`W'8G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'k3B%~`W'8G' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("JN6", false, "JN6");
      option0.getValue();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("s", true, "s");
      option0.setValueSeparator(']');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals(']', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option("", false, "org.apache.commons.cli.Option");
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("org.apache.commons.cli.Option", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("JN6", false, "JN6");
      option0.setArgs(64);
      boolean boolean0 = option0.hasArgs();
      assertEquals(64, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "", true, "\"yiKr%>sJ/*a");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "Ki\"6=5I", false, "");
      boolean boolean0 = option0.hasArg();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getDescription());
      assertEquals("Ki\"6=5I", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getValueSeparator();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("JN6", "", false, "{");
      option0.hasOptionalArg();
      assertEquals("{", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("9Q(,2%>}j:.?fKICu");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasArgName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgs(0);
      option0.setOptionalArg(true);
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("s", true, "s");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("-naAawKjDf[(qAg9");
      option0.hashCode();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("s", true, "s");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, "VITkeN!Gj\"YSZam");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      Option option1 = new Option("2", "8", true, "2");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertTrue(option1.hasArgName());
      assertEquals("2", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, "VITkeN!Gj\"YSZam");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertEquals("arg", option1.getArgName());
      assertTrue(boolean0);
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("x5W", "x5W");
      Option option1 = new Option("", "=b%s");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("=b%s", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, "Illegal option name '");
      Option option1 = new Option("8", "I0'wTIV\"7+nMS");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.equals((Object)option0));
      assertEquals("arg", option1.getArgName());
      assertFalse(option1.hasLongOpt());
      assertEquals("I0'wTIV\"7+nMS", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", false, "GQ<C1qI=1");
      boolean boolean0 = option0.equals("GQ<C1qI=1");
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("GQ<C1qI=1", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("_gbpR", true, ":o!.[kQ>");
      option0.setType("_gbpR");
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option: _gbpR  [ARG] :: :o!.[kQ> :: _gbpR ]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.setArgs(0);
      option0.toString();
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, (String) null);
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("8");
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED 8  [ARG] :: null ]", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      String[] stringArray0 = option0.getValues();
      assertEquals("arg", option0.getArgName());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue("[ option:   [ARG] ::  :: x5W ]");
      assertFalse(option0.hasValueSeparator());
      assertEquals("", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("_gbpR", true, ":o!.[kQ>");
      option0.getValue(1165);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals(":o!.[kQ>", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.setValueSeparator('e');
      option0.addValueForProcessing("[GGo,kM}{tQ:cU");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Illegal option name '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "[GGo,kM}{tQ:cU", true, "[GGo,kM}{tQ:cU");
      option0.setValueSeparator('e');
      option0.addValueForProcessing("Illegal option name '");
      assertEquals('e', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, false, ",Ug'DhPkc2V.5foX$");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("0n)I[4P>E)O9Wd~)d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("JN6", false, "JN6");
      option0.setArgs(64);
      option0.toString();
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      boolean boolean0 = option0.hasArgName();
      assertTrue(boolean0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("", "", false, "wp.eI<^FVYEOp ~XkS");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("wp.eI<^FVYEOp ~XkS", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasLongOpt();
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, (String) null);
      int int0 = option0.getId();
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertEquals(78, int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.clearValues();
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      int int0 = option0.getArgs();
      assertTrue(option0.hasArgName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, (String) null);
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertEquals(1, option1.getArgs());
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("_gbpR", "_gbpR", true, " ]");
      // Undeclared exception!
      try { 
        option0.addValue((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("JN6", false, "JN6");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", true, (String) null);
      option0.getValuesList();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", false, "GQ<C1qI=1");
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertEquals("GQ<C1qI=1", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      assertTrue(option0.hasArg());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("GX", "_tlb", true, "6");
      String string0 = option0.getArgName();
      assertEquals("arg", string0);
      assertEquals(1, option0.getArgs());
      assertEquals(71, option0.getId());
      assertEquals("6", option0.getDescription());
      assertEquals("_tlb", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("s", true, "s");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals(1, option0.getArgs());
  }
}
