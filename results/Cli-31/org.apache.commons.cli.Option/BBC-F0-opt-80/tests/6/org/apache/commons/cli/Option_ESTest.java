/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:28:35 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("h", "h");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      option0.setArgs((-903));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-903), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('o');
      option0.setArgs(64);
      option0.addValueForProcessing("org.apache.commons.cli.Option");
      assertEquals(64, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "M^i+?<Nx~PQ@&E", false, "##pVK7y@0C~Vv7");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.addValueForProcessing("The option '");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('7');
      char char0 = option0.getValueSeparator();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,t )RZD'`");
      option0.setValueSeparator('o');
      char char0 = option0.getValueSeparator();
      assertEquals('o', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      option0.getValue((String) null);
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("WaCmiajZ", true, "umY:^qOmTv");
      option0.addValueForProcessing("WaCmiajZ");
      String string0 = option0.getValue();
      assertEquals("umY:^qOmTv", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
      assertEquals("WaCmiajZ", option0.getOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setType(option0);
      Option option1 = (Option)option0.getType();
      assertTrue(option1.hasArgName());
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,te )RZD'`");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("M", "The option '", true, "<A[FP-HQ~715i'");
      String string0 = option0.getOpt();
      assertEquals("The option '", option0.getLongOpt());
      assertEquals("M", string0);
      assertEquals("<A[FP-HQ~715i'", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "");
      String string0 = option0.getLongOpt();
      assertEquals("", option0.getDescription());
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", string0);
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("M", "The option '", true, "<A[FP-HQ~715i'");
      String string0 = option0.getKey();
      assertEquals("M", string0);
      assertEquals("<A[FP-HQ~715i'", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals("The option '", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getKey();
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("", "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", true, "");
      assertEquals("", option0.getDescription());
      
      option0.setDescription("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
      option0.getDescription();
      assertEquals("The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("h", "h");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,t )RZD'`");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-2));
      option0.addValueForProcessing("");
      try { 
        option0.getValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", true, "C[9- clwDA");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,te )RZD'`");
      option0.setValueSeparator('u');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("h|ET8|8?mxwD+ddT/{", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'h|ET8|8?mxwD+ddT/{' contains an illegal character : '|'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("fV>FRY?Mde", "_4iu8$dd+sZ8", false, "_4iu8$dd+sZ8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'fV>FRY?Mde' contains an illegal character : '>'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("Cannot add value, list full.", "Cannot add value, list full.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'Cannot add value, list full.' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setValueSeparator('u');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('u', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", true, "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.setArgs(24);
      boolean boolean0 = option0.hasArgs();
      assertEquals(24, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("7", "7");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.setArgs(24);
      option0.hasArg();
      assertEquals(24, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValueSeparator();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      option0.addValueForProcessing("");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option((String) null, true, "y&bw|#E5E2[p_nC");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      boolean boolean0 = option0.requiresArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "^H7w!6HW=", false, "^H7w!6HW=");
      option0.hashCode();
      assertEquals("^H7w!6HW=", option0.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("^H7w!6HW=", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,t )RZD'`");
      option0.hashCode();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", " ", false, "[ option:   ::  ]");
      Option option2 = (Option)option1.clone();
      boolean boolean0 = option0.equals(option2);
      assertEquals(" ", option2.getLongOpt());
      assertEquals("", option2.getOpt());
      assertEquals("[ option:   ::  ]", option2.getDescription());
      assertTrue(option2.equals((Object)option1));
      assertEquals((-1), option2.getArgs());
      assertTrue(option2.hasArgName());
      assertNotSame(option2, option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", "^H7w!6HW=", false, "^H7w!6HW=");
      boolean boolean0 = option1.equals(option0);
      assertFalse(boolean0);
      assertEquals((-1), option1.getArgs());
      assertEquals("", option1.getOpt());
      assertEquals("^H7w!6HW=", option1.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", true, "C[9- clwDA");
      Option option1 = new Option((String) null, "[ARG...]");
      boolean boolean0 = option1.equals(option0);
      assertEquals((-1), option1.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option1.getArgName());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("C[9- clwDA", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", false, "(");
      Option option1 = new Option("NO_ARGS_ALLOWED", false, "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("", option1.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option1.getOpt());
      assertTrue(option1.hasArgName());
      assertEquals((-1), option1.getArgs());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option((String) null, "arg", true, "y&bw|#E5E2[p_nC");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertTrue(option1.hasLongOpt());
      assertTrue(boolean0);
      assertEquals(97, option1.getId());
      assertEquals("y&bw|#E5E2[p_nC", option1.getDescription());
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      boolean boolean0 = option0.equals("BKq");
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertTrue(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      boolean boolean0 = option0.equals(option0);
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "");
      Option option1 = new Option("", true, "BY](rSv#~%U");
      boolean boolean0 = option1.equals(option0);
      assertTrue(boolean0);
      assertTrue(option1.hasArgName());
      assertEquals("BY](rSv#~%U", option1.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "V6qbD<0O1;;9it$`a", false, "");
      option0.setType("V6qbD<0O1;;9it$`a");
      String string0 = option0.toString();
      assertEquals("[ option:  V6qbD<0O1;;9it$`a  ::  :: V6qbD<0O1;;9it$`a ]", string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("[ option:   ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      String[] stringArray0 = option0.getValues();
      assertTrue(option0.hasLongOpt());
      assertNull(stringArray0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "");
      assertFalse(option0.hasArg());
      
      option0.setArgs(1);
      option0.addValueForProcessing("");
      option0.getValues();
      assertFalse(option0.hasArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("WaCmiajZ", true, "umY:^qOmTv");
      assertEquals(1, option0.getArgs());
      
      option0.addValueForProcessing("WaCmiajZ");
      String string0 = option0.getValue(" ");
      assertEquals("WaCmiajZ", string0);
      assertFalse(option0.hasLongOpt());
      assertFalse(option0.hasValueSeparator());
      assertEquals("WaCmiajZ", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("umY:^qOmTv", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValue((-2147483645));
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      option0.getValue();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,t )RZD'`");
      option0.setValueSeparator('o');
      option0.addValueForProcessing("[ option: null  [ARG] :: q/<,t )RZD'` ]");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("The option '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "V6qbD<0O1;;9it$`a", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("+-{M;L4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option((String) null, "y&bw|#E5E2[p_nC", true, "y&bw|#E5E2[p_nC");
      assertEquals(1, option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      String string0 = option0.toString();
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option: Xw0hXVyJDM Xw0hXVyJDM  [ARG] :: null ]", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "", false, (String) null);
      option0.setArgs(24);
      option0.toString();
      assertEquals(24, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,t )RZD'`");
      boolean boolean0 = option0.hasArgName();
      assertFalse(option0.hasLongOpt());
      assertTrue(boolean0);
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(1);
      option0.addValueForProcessing("");
      option0.getValue();
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, "q/<,te )RZD'`");
      String string0 = option0.getKey();
      assertTrue(option0.hasArgName());
      assertEquals(1, option0.getArgs());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      int int0 = option0.getArgs();
      assertEquals(1, int0);
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "org.apache.commons.cli.OptionValidator");
      String string0 = option0.getOpt();
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals("", string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hasOptionalArg();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      option0.getType();
      assertTrue(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "", false, " [ARG]");
      // Undeclared exception!
      try { 
        option0.addValue("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      int int0 = option0.getId();
      assertTrue(option0.hasLongOpt());
      assertEquals(88, int0);
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("Xw0hXVyJDM", "Xw0hXVyJDM", true, (String) null);
      option0.getValuesList();
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasLongOpt());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.isRequired();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("2", "2");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("2");
      option0.getValue(0);
      assertEquals((-2), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getArgName();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, true, (String) null);
      option0.getDescription();
      assertEquals(1, option0.getArgs());
      assertTrue(option0.hasArgName());
  }
}
