/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:59:59 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs((-1123));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1123), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("kTo", "Cn4}\"v[R@j|C_NP", true, "Cn4}\"v[R@j|C_NP");
      option0.setArgs((-2));
      option0.setValueSeparator('N');
      option0.addValueForProcessing("Cn4}\"v[R@j|C_NP");
      assertEquals('N', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setOptionalArg(true);
      option0.hasOptionalArg();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("7)L3RNZ+bR[!8");
      option0.getValuesList();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('7');
      char char0 = option0.getValueSeparator();
      assertEquals('7', char0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('b');
      char char0 = option0.getValueSeparator();
      assertEquals('b', char0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getValue((String) null);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getOpt();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", false, "T");
      String string0 = option0.getOpt();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("T", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", false, "T");
      String string0 = option0.getLongOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertEquals("T", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      String string0 = option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
      assertEquals("'2uiN0{;ag:<", string0);
      assertEquals("B<|/", option0.getDescription());
      assertEquals(97, option0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("o", "o");
      String string0 = option0.getKey();
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      int int0 = option0.getId();
      assertEquals("'2uiN0{;ag:<", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(97, int0);
      assertEquals("B<|/", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      String string0 = option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("H}", string0);
      assertEquals(97, option0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getDescription();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertFalse(option0.hasArg());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      int int0 = option0.getArgs();
      assertEquals("", option0.getOpt());
      assertEquals("PPk", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertFalse(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      option0.acceptsArg();
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      option0.addValueForProcessing((String) null);
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      option0.addValueForProcessing("pw Ye}Zo@OwK3t@Ins");
      try { 
        option0.getValue((-628));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option("", true, "");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setValueSeparator('b');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("!", true, ";s>F'Rql");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal option name '!'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("+GenQ;1)3YAL4~}<{a", "i7Ci!M!iwurOEZR", false, "8Z]`#\"(IVk@@'?FpH~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '+GenQ;1)3YAL4~}<{a' contains an illegal character : '+'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("d j1#c", "d j1#c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'd j1#c' contains an illegal character : ' '
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      option0.getValue();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      option0.addValueForProcessing("'2uiN0{;ag:<");
      String string0 = option0.getValue();
      assertEquals("B<|/", option0.getDescription());
      assertEquals("arg", option0.getOpt());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
      assertEquals("'2uiN0{;ag:<", option0.getLongOpt());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('(');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('(', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasArgs();
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(623);
      boolean boolean0 = option0.hasArgs();
      assertEquals(623, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      boolean boolean0 = option0.hasArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
      assertEquals("PPk", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getValueSeparator();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.hasOptionalArg();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      boolean boolean0 = option0.requiresArg();
      assertEquals("", option0.getOpt());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
      assertEquals("PPk", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("?");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(option0.hasValueSeparator());
      assertFalse(boolean0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      option0.addValueForProcessing("'2uiN0{;ag:<");
      option0.addValueForProcessing("'2uiN0{;ag:<");
      option0.getValue(1);
      assertEquals(0, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("o", "o", false, "o");
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.hashCode();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.hashCode();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("ag", "PPk");
      Option option1 = new Option("ag", "i#{0?eU07k|EI", true, "ag");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
      assertEquals("PPk", option0.getDescription());
      assertEquals("ag", option1.getDescription());
      assertEquals(97, option1.getId());
      assertEquals("i#{0?eU07k|EI", option1.getLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option1.getArgName());
      assertEquals(97, option0.getId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Object object0 = option0.clone();
      boolean boolean0 = option0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      Option option1 = new Option("", "");
      boolean boolean0 = option0.equals(option1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option((String) null, "' contains an illegal character : '", true, (String) null);
      Option option1 = new Option("", "h", true, "' contains an illegal character : '");
      boolean boolean0 = option0.equals(option1);
      assertEquals("' contains an illegal character : '", option1.getDescription());
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals("h", option1.getLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      Option option1 = new Option("", false, "cC");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertEquals("cC", option1.getDescription());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertFalse(option1.hasLongOpt());
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
      assertTrue(boolean0);
      assertEquals(97, option1.getId());
      assertEquals((-1), option1.getArgs());
      assertEquals("H}", option1.getDescription());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      boolean boolean0 = option0.equals("PPk");
      assertEquals("arg", option0.getArgName());
      assertEquals("PPk", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      boolean boolean0 = option0.equals((Object) null);
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("PPk", option0.getDescription());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      boolean boolean0 = option0.equals(option0);
      assertEquals((-1), option0.getArgs());
      assertEquals(97, option0.getId());
      assertTrue(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals("H}", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option1.getArgs());
      assertNotSame(option1, option0);
      assertEquals("arg", option1.getArgName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("[ option:    [ARG] ::  ::  ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("arg", "'2uiN0{;ag:<", true, "B<|/");
      String string0 = option0.toString();
      assertEquals("[ option: arg '2uiN0{;ag:<  [ARG] :: B<|/ ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      String string0 = option0.toString();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
      assertEquals("[ option:   :: PPk ]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      String[] stringArray0 = option0.getValues();
      assertEquals("dD", option0.getLongOpt());
      assertEquals("arg", option0.getDescription());
      assertNull(stringArray0);
      assertEquals(100, option0.getId());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("kTo", "Cn4}\"v[R@j|C_NP", true, "Cn4}\"v[R@j|C_NP");
      option0.addValueForProcessing("Cn4}\"v[R@j|C_NP");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertEquals("arg", option0.getArgName());
      assertEquals("kTo", option0.getOpt());
      assertEquals("Cn4}\"v[R@j|C_NP", option0.getLongOpt());
      assertNotNull(stringArray0);
      assertEquals("Cn4}\"v[R@j|C_NP", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      option0.getValue(63);
      assertEquals("dD", option0.getLongOpt());
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals(100, option0.getId());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertTrue(option0.hasArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option((String) null, false, (String) null);
      String string0 = option0.getValue("ET}7mMu}");
      assertEquals((-1), option0.getArgs());
      assertNotNull(string0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(623);
      option0.addValueForProcessing("yO4");
      option0.getValue("(#-:");
      assertEquals(623, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option("kTo", "Cn4}\"v[R@j|C_NP", true, "Cn4}\"v[R@j|C_NP");
      option0.setArgs((-3953));
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("Cn4}\"v[R@j|C_NP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("kTo", "fO_ARGS_ALLOWAD", true, "fO_ARGS_ALLOWAD");
      option0.setArgs(664);
      option0.setValueSeparator('k');
      option0.addValueForProcessing("kTo");
      assertEquals(664, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("kTo", "fO_ARGS_ALLOWAD", true, "fO_ARGS_ALLOWAD");
      option0.setValueSeparator('k');
      option0.addValueForProcessing("kTo");
      assertEquals('k', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option("ezJmlE", "ezJmlE");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("ezJmlE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("kTo", "fO_ARGS_ALLOWAD", true, "fO_ARGS_ALLOWAD");
      option0.setArgs(664);
      option0.toString();
      assertEquals(664, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      boolean boolean0 = option0.hasArgName();
      assertEquals("dD", option0.getLongOpt());
      assertTrue(boolean0);
      assertEquals("arg", option0.getDescription());
      assertTrue(option0.hasArg());
      assertEquals(100, option0.getId());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      assertFalse(option0.hasArgs());
      
      option0.setArgs((-2));
      option0.addValueForProcessing("?");
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("", "PPk");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option("", "");
      boolean boolean0 = option0.hasLongOpt();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.clearValues();
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      int int0 = option0.getArgs();
      assertTrue(option0.hasArgName());
      assertEquals("dD", option0.getLongOpt());
      assertEquals("dD", option0.getOpt());
      assertEquals("arg", option0.getDescription());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option("arg", "H}");
      String string0 = option0.getOpt();
      assertEquals("H}", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("arg", string0);
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      assertEquals("arg", option0.getDescription());
      
      option0.setDescription("dD");
      assertEquals("dD", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", ".iHz^cujc<#Q4315#iO");
      option0.getType();
      assertEquals("", option0.getOpt());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(".iHz^cujc<#Q4315#iO", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("", "");
      // Undeclared exception!
      try { 
        option0.addValue("ds`9D");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getLongOpt();
      assertEquals(1, option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("dD", "dD", true, "arg");
      option0.getValuesList();
      assertEquals("dD", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("arg", option0.getDescription());
      assertEquals(100, option0.getId());
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.isRequired();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getKey();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArg());
      assertNotNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      String string0 = option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null);
      option0.getDescription();
      assertTrue(option0.hasArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Option option0 = new Option("", ".iHz^cujc<#Q4315#iO");
      option0.setType("^5f+0~U~&5P%OtF/[\"");
      option0.getType();
      assertEquals(".iHz^cujc<#Q4315#iO", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
  }
}
