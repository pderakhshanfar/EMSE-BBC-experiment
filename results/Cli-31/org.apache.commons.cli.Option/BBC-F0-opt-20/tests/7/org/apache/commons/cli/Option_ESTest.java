/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 18:29:15 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.cli.Option;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Option_ESTest extends Option_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Option option0 = new Option("2", false, "`Z+_oE");
      option0.setArgs((-1970071798));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-1970071798), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setOptionalArg(true);
      option0.setArgs(0);
      boolean boolean0 = option0.acceptsArg();
      assertEquals(0, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Option option0 = new Option("9", "/", true, "/");
      option0.hashCode();
      assertEquals("9", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("/", option0.getDescription());
      assertEquals("/", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.setArgs(0);
      boolean boolean0 = option0.hasArg();
      assertEquals(0, option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Option option0 = new Option("2", true, "2");
      option0.setValueSeparator('I');
      option0.setArgs(62);
      option0.addValueForProcessing("7I)f>2]AH(#");
      assertEquals(62, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setRequired(true);
      boolean boolean0 = option0.isRequired();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Option option0 = new Option("", "5W%hZSFSSVH$oiQDYM");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.hasOptionalArg();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Option option0 = new Option("2", true, "/");
      option0.addValueForProcessing("2");
      option0.getValuesList();
      assertEquals("/", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasValueSeparator());
      assertEquals("2", option0.getOpt());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.setValueSeparator('0');
      char char0 = option0.getValueSeparator();
      assertEquals('0', char0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setValueSeparator('E');
      char char0 = option0.getValueSeparator();
      assertEquals('E', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      option0.getValue((String) null);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Option option0 = new Option("", false, "5Z3Yr3SyK+&PU)v");
      String string0 = option0.getValue("");
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("", option0.getOpt());
      assertEquals("5Z3Yr3SyK+&PU)v", option0.getDescription());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Option option0 = new Option("", true, "8f");
      option0.addValueForProcessing("");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("8f", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Option option0 = new Option("2", true, "/");
      option0.addValueForProcessing("2");
      String string0 = option0.getValue();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals("2", option0.getOpt());
      assertEquals("/", option0.getDescription());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Option option0 = new Option("", false, "5Z3Yr3SyK+&PU)v");
      option0.setType("");
      option0.getType();
      assertEquals("5Z3Yr3SyK+&PU)v", option0.getDescription());
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Option option0 = new Option("rwy$", "rwy$", false, "QQ%poIklY{^YPR");
      String string0 = option0.getOpt();
      assertEquals("rwy$", option0.getLongOpt());
      assertEquals("rwy$", string0);
      assertEquals("QQ%poIklY{^YPR", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.getOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Option option0 = new Option("Lftdvf", "'", true, "org.apache.commons.cli.OptionValidator");
      String string0 = option0.getLongOpt();
      assertTrue(option0.hasArgName());
      assertEquals("'", string0);
      assertEquals("Lftdvf", option0.getOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Option option0 = new Option("", true, "");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("");
      option0.getLongOpt();
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getKey();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "7K>2]AH(#");
      String string0 = option0.getKey();
      assertEquals("arg", option0.getArgName());
      assertEquals("p", option0.getLongOpt());
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertEquals("p", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Option option0 = new Option("", true, "");
      String string0 = option0.getKey();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Option option0 = new Option("2", false, (String) null);
      String string0 = option0.getDescription();
      assertNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Option option0 = new Option("", false, "");
      String string0 = option0.getDescription();
      assertEquals("arg", option0.getArgName());
      assertFalse(option0.hasLongOpt());
      assertNotNull(string0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Option option0 = new Option("", false, "5Z3Yr3SyK+&PU)v");
      assertEquals((-1), option0.getArgs());
      
      option0.setArgs(0);
      int int0 = option0.getArgs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      int int0 = option0.getArgs();
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertTrue(option0.hasArgName());
      assertEquals(1, int0);
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      option0.getArgName();
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Option option0 = new Option("L82Zj", "L82Zj");
      boolean boolean0 = option0.acceptsArg();
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Option option0 = new Option("", "", true, "7KJ2U]A#(f");
      option0.addValueForProcessing("");
      try { 
        option0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
      option0.addValueForProcessing("NO_ARGS_ALLOWED");
      try { 
        option0.getValue((-587));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Option option0 = new Option("", true, "/");
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Option option0 = new Option("", true, ";");
      option0.setValueSeparator('U');
      // Undeclared exception!
      try { 
        option0.addValueForProcessing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option(")lO^b'DNBkkb", true, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option ')lO^b'DNBkkb' contains an illegal character : ')'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("&@SmM7uznC+6s (7zkB", "/", true, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '&@SmM7uznC+6s (7zkB' contains an illegal character : '&'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Option option0 = null;
      try {
        option0 = new Option("PXJ(", "PXJ(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'PXJ(' contains an illegal character : '('
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Option option0 = new Option("p", "p", true, "7K>2]AH(#");
      option0.getValue();
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertEquals("p", option0.getOpt());
      assertEquals("p", option0.getLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Option option0 = new Option("", true, "/");
      option0.addValueForProcessing("");
      String string0 = option0.getValue();
      assertNotNull(string0);
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertEquals("", option0.getOpt());
      assertEquals("/", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Option option0 = new Option("", "w_^<0J/");
      option0.setValueSeparator('Z');
      boolean boolean0 = option0.hasValueSeparator();
      assertEquals('Z', option0.getValueSeparator());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Option option0 = new Option((String) null, "R`|");
      boolean boolean0 = option0.hasValueSeparator();
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      boolean boolean0 = option0.hasArgs();
      assertEquals((-1), option0.getArgs());
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.hasArg();
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertTrue(option0.hasArgName());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.getValueSeparator();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Option option0 = new Option("", "5W%hZSFSSVH$oiQDYM");
      option0.hasOptionalArg();
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("5W%hZSFSSVH$oiQDYM", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      option0.addValueForProcessing("2");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.setOptionalArg(true);
      boolean boolean0 = option0.requiresArg();
      assertTrue(option0.hasOptionalArg());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.setOptionalArg(true);
      option0.setArgs((-2147483645));
      boolean boolean0 = option0.acceptsArg();
      assertTrue(option0.hasOptionalArg());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.hashCode();
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.hashCode();
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Option option0 = new Option("", true, "");
      Option option1 = new Option("", ",", false, "[ option:   [ARG] ::  ]");
      boolean boolean0 = option0.equals(option1);
      assertEquals("", option1.getOpt());
      assertEquals("[ option:   [ARG] ::  ]", option1.getDescription());
      assertEquals(",", option1.getLongOpt());
      assertEquals((-1), option1.getArgs());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertFalse(option1.hasLongOpt());
      assertEquals((-1), option1.getArgs());
      assertTrue(boolean0);
      assertNotSame(option1, option0);
      assertTrue(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Option option0 = new Option((String) null, "|8U*D+n]:Aw7A@:#", true, "879>Sk{");
      Option option1 = (Option)option0.clone();
      boolean boolean0 = option0.equals(option1);
      assertNotSame(option1, option0);
      assertTrue(option1.hasLongOpt());
      assertEquals("879>Sk{", option1.getDescription());
      assertTrue(option1.hasArgName());
      assertTrue(boolean0);
      assertEquals(124, option1.getId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Option option0 = new Option("", true, "/");
      Option option1 = new Option((String) null, "&@SmM7uznC+6s (7zkB", true, "|8U*D+n]:Aw7A@:#");
      boolean boolean0 = option0.equals(option1);
      assertEquals("/", option0.getDescription());
      assertEquals("|8U*D+n]:Aw7A@:#", option1.getDescription());
      assertTrue(option1.hasLongOpt());
      assertFalse(boolean0);
      assertEquals("arg", option1.getArgName());
      assertEquals(38, option1.getId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      Option option1 = new Option("", "|8U*D+n]:Aw7A@:#", false, "7K>2]AH(#");
      boolean boolean0 = option1.equals(option0);
      assertTrue(option1.hasArgName());
      assertFalse(boolean0);
      assertEquals("", option1.getOpt());
      assertEquals((-1), option1.getArgs());
      assertEquals("7K>2]AH(#", option1.getDescription());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Option option0 = new Option((String) null, "|8U*D+n]:Aw7A@~#", false, (String) null);
      Option option1 = new Option("arg", "|8U*D+n]:Aw7A@~#", true, "|8U*D+n]:Aw7A@:#");
      boolean boolean0 = option0.equals(option1);
      assertEquals((-1), option0.getArgs());
      assertEquals("|8U*D+n]:Aw7A@:#", option1.getDescription());
      assertFalse(boolean0);
      assertFalse(option1.equals((Object)option0));
      assertTrue(option1.hasArgName());
      assertEquals(97, option1.getId());
      assertEquals("|8U*D+n]:Aw7A@~#", option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      boolean boolean0 = option0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Option option0 = new Option((String) null, "|8U*D+n]:Aw7A@:#", true, "{\"%tmQTD1r0zDKmS*");
      boolean boolean0 = option0.equals(option0);
      assertTrue(boolean0);
      assertTrue(option0.hasArgName());
      assertEquals(124, option0.getId());
      assertTrue(option0.hasLongOpt());
      assertEquals("{\"%tmQTD1r0zDKmS*", option0.getDescription());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Option option0 = new Option("2", true, "2");
      boolean boolean0 = option0.equals("2");
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Option option0 = new Option("", false, "5Z3Yr3SyK+&PU)v");
      option0.setType("");
      String string0 = option0.toString();
      assertEquals("[ option:   :: 5Z3Yr3SyK+&PU)v ::  ]", string0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Option option0 = new Option("NO_ARGS_ALLOWED", "NO_ARGS_ALLOWED", true, "NO_ARGS_ALLOWED");
      String string0 = option0.toString();
      assertEquals("[ option: NO_ARGS_ALLOWED NO_ARGS_ALLOWED  [ARG] :: NO_ARGS_ALLOWED ]", string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Option option0 = new Option("", "#-76%>]Vud");
      option0.setArgs(2147483645);
      option0.toString();
      assertEquals(2147483645, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      String[] stringArray0 = option0.getValues();
      assertNull(stringArray0);
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.addValueForProcessing("UsT1");
      String[] stringArray0 = option0.getValues();
      assertFalse(option0.hasValueSeparator());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.getValue((-1755));
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      String string0 = option0.getValue("7K>2]AH(#");
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", option0.getArgName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.addValueForProcessing("7K>2]AH(#");
      String string0 = option0.getValue("[ option:    [ARG] :: 7K>2]AH(# ]");
      assertEquals("7K>2]AH(#", string0);
      assertEquals("", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertTrue(option0.hasArgName());
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertFalse(option0.hasValueSeparator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Option option0 = new Option("2", true, "2");
      option0.setValueSeparator('I');
      option0.addValueForProcessing("2");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("7I)f>2]AH(#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Option option0 = new Option("", "", false, "");
      // Undeclared exception!
      try { 
        option0.addValueForProcessing("m,7mZWK9LZ] ||9w:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // NO_ARGS_ALLOWED
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Option option0 = new Option("2", true, "kdO[%8aAY#");
      option0.addValueForProcessing("org.apache.commons.cli.OptionValidator");
      String string0 = option0.getValue(0);
      assertFalse(option0.hasValueSeparator());
      assertEquals("kdO[%8aAY#", option0.getDescription());
      assertNotNull(string0);
      assertEquals("2", option0.getOpt());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArgs();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.setArgs(85);
      boolean boolean0 = option0.hasArgs();
      assertEquals(85, option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "");
      boolean boolean0 = option0.hasArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertTrue(boolean0);
      assertEquals("", option0.getOpt());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      assertTrue(option0.hasArgName());
      
      option0.setArgName((String) null);
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Option option0 = new Option("", "", true, "");
      option0.setArgs((-2));
      boolean boolean0 = option0.hasArg();
      assertTrue(option0.hasArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Option option0 = new Option("", false, "5Z3Yr3SyK+&PU)v");
      assertFalse(option0.hasLongOpt());
      
      option0.setLongOpt("5Z3Yr3SyK+&PU)v");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Option option0 = new Option("", (String) null, false, "");
      boolean boolean0 = option0.hasLongOpt();
      assertTrue(option0.hasArgName());
      assertFalse(boolean0);
      assertEquals((-1), option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Option option0 = new Option((String) null, true, (String) null);
      // Undeclared exception!
      try { 
        option0.getId();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Option option0 = new Option("", "");
      option0.clearValues();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), option0.getArgs());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Option option0 = new Option("", "");
      int int0 = option0.getArgs();
      assertFalse(option0.hasLongOpt());
      assertEquals((-1), int0);
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "7I)f>2]AH(#");
      option0.setValueSeparator('I');
      option0.addValueForProcessing("7I)f>2]AH(#");
      assertEquals('I', option0.getValueSeparator());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Option option0 = new Option((String) null, "' contains an illegal character : '");
      String string0 = option0.getOpt();
      assertNull(string0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Option option0 = new Option("2", false, "`Z+_oE");
      boolean boolean0 = option0.requiresArg();
      assertEquals("`Z+_oE", option0.getDescription());
      assertFalse(boolean0);
      assertEquals(50, option0.getId());
      assertEquals("arg", option0.getArgName());
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "");
      assertEquals("arg", option0.getArgName());
      
      option0.setArgName("");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Option option0 = new Option((String) null, (String) null, false, (String) null);
      option0.setDescription("*^mlibmd+f?gMZ");
      assertEquals((-1), option0.getArgs());
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Option option0 = new Option("", true, "");
      option0.getType();
      assertFalse(option0.hasLongOpt());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      // Undeclared exception!
      try { 
        option0.addValue("Z]X3'}MH[R^");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Option option0 = new Option("0TTs", "0TTs", true, "0TTs");
      int int0 = option0.getId();
      assertEquals("arg", option0.getArgName());
      assertEquals(48, int0);
      assertEquals(1, option0.getArgs());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Option option0 = new Option("", "");
      String string0 = option0.getLongOpt();
      assertEquals((-1), option0.getArgs());
      assertNull(string0);
      assertTrue(option0.hasArgName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Option option0 = new Option("Lftdvf", "'", true, "org.apache.commons.cli.OptionValidator");
      option0.getValuesList();
      assertEquals("'", option0.getLongOpt());
      assertEquals("org.apache.commons.cli.OptionValidator", option0.getDescription());
      assertEquals("arg", option0.getArgName());
      assertTrue(option0.hasArg());
      assertEquals(76, option0.getId());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Option option0 = new Option("", "", true, "7K>2]AH(#");
      option0.isRequired();
      assertEquals(1, option0.getArgs());
      assertEquals("7K>2]AH(#", option0.getDescription());
      assertEquals("", option0.getOpt());
      assertEquals("", option0.getLongOpt());
      assertEquals("arg", option0.getArgName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Option option0 = new Option("2", "2", true, "2");
      option0.setArgs((-2));
      boolean boolean0 = option0.requiresArg();
      assertEquals((-2), option0.getArgs());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Option option0 = new Option("", "NO_ARGS_ALLOWED", false, "");
      String string0 = option0.getArgName();
      assertEquals((-1), option0.getArgs());
      assertEquals("", option0.getDescription());
      assertEquals("NO_ARGS_ALLOWED", option0.getLongOpt());
      assertEquals("", option0.getOpt());
      assertEquals("arg", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Option option0 = new Option("2", true, "2");
      String string0 = option0.getDescription();
      assertNotNull(string0);
      assertTrue(option0.hasArg());
      assertFalse(option0.hasLongOpt());
      assertTrue(option0.hasArgName());
  }
}
