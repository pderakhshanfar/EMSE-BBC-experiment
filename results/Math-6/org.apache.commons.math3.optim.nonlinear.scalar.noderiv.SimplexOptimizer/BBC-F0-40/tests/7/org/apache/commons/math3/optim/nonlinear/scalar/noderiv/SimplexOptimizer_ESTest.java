/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 22:01:52 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimplexOptimizer_ESTest extends SimplexOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(1.0, 0.0);
      ConvergenceChecker<PointValuePair> convergenceChecker0 = simplexOptimizer0.getConvergenceChecker();
      SimplexOptimizer simplexOptimizer1 = new SimplexOptimizer(convergenceChecker0);
      assertFalse(simplexOptimizer1.equals((Object)simplexOptimizer0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(934.6253, 934.6253);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[1];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-977.1329149647062), (-977.1329149647062));
      // Undeclared exception!
      try { 
        simplexOptimizer0.parseOptimizationData((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-977.1329149647062), (-977.1329149647062));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(24, (-977.1329149647062));
      optimizationDataArray0[1] = (OptimizationData) multiDirectionalSimplex0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(24);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-403.6200144782582), (-403.6200144782582));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(29, 29);
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      double[] doubleArray0 = new double[9];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 29 != 9
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(21, 1.1386950016021729, 34.0, 34.0, 2.391857624053955, 34.0);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(34.0, (-2519.916824974));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        simplexOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 21 != 8
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-847.6976814253), (-847.6976814253));
      // Undeclared exception!
      try { 
        simplexOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-967.2326891835754), (-967.2326891835754));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(18, 18, (-967.2326891835754), (-0.33333333333333287), 18);
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        simplexOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-2021.0095538829703), (-1350L));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1350L);
      doubleArray0[1] = (-2021.0095538829703);
      doubleArray0[2] = (double) (-1350L);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, 2889.62402169, 3.2813537149653483E-9, (-1350.0), (-2021.0095538829703));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        simplexOptimizer0.doOptimize();
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-980.7220863300188), (-980.7220863300188));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-980.7220863300188);
      doubleArray0[1] = (-980.7220863300188);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-980.7220863300188), (-980.7220863300188));
      optimizationDataArray0[1] = (OptimizationData) multiDirectionalSimplex0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-980.7220863300188), (-980.7220863300188));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-980.7220863300188);
      doubleArray0[1] = (-980.7220863300188);
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(doubleArray0, (-980.7220863300188), (-980.7220863300188));
      optimizationDataArray0[1] = (OptimizationData) multiDirectionalSimplex0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-980.7220863300188), (-980.7220863300188));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-1), (-1));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) nelderMeadSimplex0;
      simplexOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        simplexOptimizer0.doOptimize();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }
}
