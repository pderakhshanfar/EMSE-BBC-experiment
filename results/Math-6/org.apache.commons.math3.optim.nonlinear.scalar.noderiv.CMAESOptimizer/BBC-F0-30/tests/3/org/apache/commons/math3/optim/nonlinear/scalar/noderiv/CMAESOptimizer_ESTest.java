/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 20:42:04 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -959 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[9];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(24, 24, false, 1529, 1529, mersenneTwister0, true, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(7, optimizationDataArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[5];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.0, 1.0);
      int[] intArray0 = new int[5];
      Well44497b well44497b0 = new Well44497b(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2144154215, (-558.2074180868002), false, 1, 10, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      ISAACRandom iSAACRandom0 = new ISAACRandom(773);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 976.7798247671872);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(773, 976.7798247671872, false, (-1057), 773, iSAACRandom0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-3488.20823), 5, 4);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1336, 162, false, 0, 1181, well19937c0, true, simplePointChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(1529);
      int int0 = cMAESOptimizer_PopulationSize0.getPopulationSize();
      assertEquals(1529, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(808);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(808, 808, true, 808, 808, well19937c0, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[10];
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 808;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 808 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(532);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(532, 532, false, 532, 532, well19937c0, false, (ConvergenceChecker<PointValuePair>) null);
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(1);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1494));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1916), (-1494), false, 16, (-1494), well19937c0, true, (ConvergenceChecker<PointValuePair>) null);
      double[] doubleArray0 = new double[7];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[2];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-592.883);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -592.883 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 4);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(779.64222, 4);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(4, 4, true, 4, 4, well1024a0, true, simplePointChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, false, 0, 0, well1024a0, false, (ConvergenceChecker<PointValuePair>) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well19937c well19937c0 = new Well19937c(intArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.2, 0.0, 9);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, true, (-517), 9, well19937c0, true, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 4);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(779.64222, 4);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(4, 4, true, 4, 4, well1024a0, true, simplePointChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertFalse(list0.contains(779.64222));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(808);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(808, 808, true, 808, 808, well19937c0, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[10];
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(808);
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
}
