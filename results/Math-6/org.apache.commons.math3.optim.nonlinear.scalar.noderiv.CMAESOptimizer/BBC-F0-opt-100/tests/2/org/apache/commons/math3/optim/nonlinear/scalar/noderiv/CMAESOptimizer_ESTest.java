/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 18:18:07 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1122);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 0.0, 1122);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1122, 1122, false, 1122, 1122, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[4];
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[4] = (OptimizationData) simpleBounds0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      doubleArray0[1] = (double) 1122;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      OptimizationData[] optimizationDataArray1 = new OptimizationData[3];
      optimizationDataArray1[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,122 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1122);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 0.0, 1122);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1122, 1122, false, 1122, 1122, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[3] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[6] = (OptimizationData) initialGuess0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertNull(cMAESOptimizer0.getGoalType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2857.0, 2857.0, 5);
      double[] doubleArray1 = new double[2];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      Well1024a well1024a0 = new Well1024a();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(5, 420, false, 420, 17, well1024a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[7] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497b well44497b0 = new Well44497b(intArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(720, (-2094.59420682));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(720, 720, true, 720, 0, well44497b0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[1];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1020);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1487.85238817), 1386.984, 1020);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1122, 1122, false, 1020, 1020, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1386.984;
      double[] doubleArray1 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray1);
      optimizationDataArray0[6] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (1,386.984)
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 2195);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(2195, 126, 2390);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2195, Double.NEGATIVE_INFINITY, false, 126, 32, mersenneTwister0, false, simpleValueChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1122, (-2483.772966773781), 3);
      Well19937a well19937a0 = new Well19937a(4);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(3, 0.0, false, 3, 2146226905, well19937a0, false, simplePointChecker0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1122;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[6] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,122 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2, 2, 2);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, 2, true, 2, 2, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[2];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(2);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertNull(cMAESOptimizer0.getGoalType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1122);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 0.0, 1122);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1122, 1122, false, 1122, 1122, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = new double[1];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2, 2, 2);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, 2, true, 2, 2, well19937a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[2];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1811));
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1814), (-1.0), 128);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 1089.23, false, 0, (-1814), well512a0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(1538);
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -246 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-4669.960239);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,669.96 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 2195);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(2195, 126, 2390);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2195, Double.NEGATIVE_INFINITY, false, 126, 32, mersenneTwister0, false, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(475);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 93.814);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-32768), (-1862.09109), false, (-32768), 475, well44497b0, false, simplePointChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1122);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, 0.0, 1122);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1122, 1122, false, 1122, 1122, well19937a0, true, simplePointChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 2195);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(2195, 126, 2390);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2195, Double.NEGATIVE_INFINITY, false, 126, 32, mersenneTwister0, false, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(2195);
      int int0 = cMAESOptimizer_PopulationSize0.getPopulationSize();
      assertEquals(2195, int0);
  }
}
