/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 15:40:02 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2115431653);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-2166.419), 1090.871826405341);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-507.0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[1];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray1);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(195, (-507.0), true, (-2920), (-2920), well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[3] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[6] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[7] = (OptimizationData) simpleBounds0;
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[8] = (OptimizationData) maxEval0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-740));
      double[] doubleArray0 = new double[0];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[12];
      doubleArray1[0] = 1255.594018626;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 1255.594018626;
      doubleArray2[1] = 1255.594018626;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray2);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-8.833499967268279E225), 1255.594018626);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-740), 9.026991921214922E30, false, (-740), (-1), well19937c0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0, 46);
      Well1024a well1024a0 = new Well1024a((long) 2304);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(46, 0.0, true, 2304, 734, well1024a0, true, simpleValueChecker0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 734;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2304;
      doubleArray0[4] = (double) 734;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[0];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray1);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      MaxEval maxEval0 = new MaxEval(2304);
      SimpleBounds simpleBounds1 = new SimpleBounds(doubleArray0, doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[1] = (OptimizationData) simpleBounds1;
      optimizationDataArray0[2] = (OptimizationData) simpleBounds1;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well512a well512a0 = new Well512a((-5034868814120038111L));
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1842.0, (-3115.404));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(3456, 1.4, false, 1250, 1132, well512a0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(3456);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,456 != 1
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 46);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(46, 46, true, 46, 46, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = 0.0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(46);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer0.getGoalType();
      optimizationDataArray0[4] = (OptimizationData) null;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(46, 46, true, 46, 1444, well44497b0, true, simpleValueChecker0);
      cMAESOptimizer1.getGoalType();
      optimizationDataArray0[5] = (OptimizationData) null;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma1 = new CMAESOptimizer.Sigma(doubleArray0);
      cMAESOptimizer_Sigma1.getSigma();
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 46 != 3
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(46, 46, true, 46, 46, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      MaxIter.unlimited();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(46, 0.0, true, 46, 1444, well44497b0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer1.getGoalType();
      optimizationDataArray0[5] = (OptimizationData) null;
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(1444);
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 46);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(46, 46, true, 46, 46, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = 0.0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer0.getGoalType();
      optimizationDataArray0[4] = (OptimizationData) null;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(46, 46, true, 46, 1444, well44497b0, true, simpleValueChecker0);
      cMAESOptimizer1.getGoalType();
      optimizationDataArray0[5] = (OptimizationData) null;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma1 = new CMAESOptimizer.Sigma(doubleArray0);
      cMAESOptimizer_Sigma1.getSigma();
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 46 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(46, 46, true, 46, 46, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer0.getGoalType();
      optimizationDataArray0[4] = (OptimizationData) null;
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(46, 0.0, true, 46, 1444, well44497b0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer1.getGoalType();
      optimizationDataArray0[5] = (OptimizationData) null;
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(1444);
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2793;
      intArray0[4] = 0;
      intArray0[5] = 0;
      Well44497b well44497b0 = new Well44497b(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 2.0, false, 0, 0, well44497b0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer0.getMaxEvaluations();
      well44497b0.setSeed(intArray0);
      cMAESOptimizer0.getMaxIterations();
      cMAESOptimizer0.getStatisticsMeanHistory();
      well44497b0.nextBoolean();
      cMAESOptimizer0.getStatisticsFitnessHistory();
      cMAESOptimizer0.getStatisticsMeanHistory();
      cMAESOptimizer0.getMaxEvaluations();
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(2793);
      cMAESOptimizer_PopulationSize0.getPopulationSize();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1944.6304772;
      doubleArray0[3] = 2909.55;
      doubleArray0[4] = 1.0E-11;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well19937a well19937a0 = new Well19937a(0L);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(2909.55, (-1.0), 14);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(835, 0.0, false, 835, (-754), well19937a0, false, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-3518));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,518 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(iSAACRandom0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2.0, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, (-1077.38211), true, 0, 0, randomAdaptor0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[1] = (OptimizationData) maxEval0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2094.1012;
      doubleArray0[5] = (-1077.38211);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,077.382 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(2108L);
      iSAACRandom0.nextBoolean();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(18, 2.147483647E9);
      iSAACRandom0.nextLong();
      iSAACRandom0.nextBoolean();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(18, 2.147483647E9, true, 4, 1025, iSAACRandom0, false, simplePointChecker0);
      iSAACRandom0.setSeed(1025);
      iSAACRandom0.nextLong();
      cMAESOptimizer0.getStatisticsFitnessHistory();
      cMAESOptimizer0.getStatisticsFitnessHistory();
      cMAESOptimizer0.getStatisticsMeanHistory();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma1 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma1;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      InitialGuess initialGuess1 = new InitialGuess(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) initialGuess1;
      // Undeclared exception!
      try { 
        SimpleBounds.unbounded((-3359));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.SimpleBounds", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 10);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(800.6387187985425, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(10, 10, true, (-1931), (-1931), well19937c0, true, simplePointChecker0);
      cMAESOptimizer0.getStatisticsSigmaHistory();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(886, 10, true, 0, 0, well19937c0, true, simplePointChecker0);
      cMAESOptimizer1.getGoalType();
      optimizationDataArray0[0] = (OptimizationData) null;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[2] = (OptimizationData) maxEval0;
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[3] = (OptimizationData) maxIter0;
      MaxEval maxEval1 = new MaxEval(31);
      optimizationDataArray0[4] = (OptimizationData) maxEval1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1931);
      doubleArray0[1] = (double) 886;
      SimpleBounds simpleBounds1 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[5] = (OptimizationData) simpleBounds1;
      MaxEval maxEval2 = MaxEval.unlimited();
      optimizationDataArray0[6] = (OptimizationData) maxEval2;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-1455.00239);
      doubleArray0[0] = (-1455.00239);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 495.1605;
      double double1 = (-2794.0);
      doubleArray0[3] = (-2794.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1000.0;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,455.002 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0, 0.2);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3825), (-2560.816029), false, 0, 0, (RandomGenerator) null, false, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, (-0.5), false, (-3070), 0, well1024a0, true, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma1 = new CMAESOptimizer.Sigma(doubleArray0);
      Well19937c well19937c0 = new Well19937c((-1L));
      well19937c0.clear();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-634), (-634), true, 0, 0, well19937c0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer_Sigma1.getSigma();
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-2413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,413 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1397;
      intArray0[1] = (-276);
      Well19937c well19937c0 = new Well19937c(intArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(313.60505131196, (-1438.7089789683125));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1397, 1397, false, 1397, (-276), well19937c0, false, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      double double0 = 2.220446049250313E-16;
      Well44497a well44497a0 = new Well44497a();
      double double1 = (-269.09739247244);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(3368, (-269.09739247244));
      well44497a0.nextLong();
      well44497a0.nextInt(3368);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 2.220446049250313E-16, true, 0, 3368, well44497a0, true, simpleValueChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
}
