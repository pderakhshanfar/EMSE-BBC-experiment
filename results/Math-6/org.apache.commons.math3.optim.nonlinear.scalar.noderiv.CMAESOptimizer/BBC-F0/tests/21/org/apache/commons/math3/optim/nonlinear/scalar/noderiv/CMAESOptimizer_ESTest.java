/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:13:26 GMT 2020
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((long) 2);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(66, 349.70050719);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(66, 66, true, 2, 2, well19937a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      Well19937a well19937a0 = new Well19937a();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 26);
      double[] doubleArray1 = new double[9];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-3282), (-3282), true, (-3282), 637, well19937a0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1.0), 0.5, 31);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(31, 0.5, true, 31, 31, (RandomGenerator) null, true, simplePointChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(820);
      int int0 = cMAESOptimizer_PopulationSize0.getPopulationSize();
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1091566003;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0, 3159.96, 236);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1482, 820.0, true, 1482, 1091566003, well19937a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,091,566,003 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.4, 2.144858362E9);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(30, 4.985137671479376E-20, true, 1, 821, (RandomGenerator) null, false, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(4, optimizationDataArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = new double[2];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1.0E-13, 0.15);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(797, 0.46914875507354736, true, 0, 797, (RandomGenerator) null, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0, 3159.96, 236);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1482, 820.0, true, 1482, 1091566003, well19937a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -356 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[6] = (-603.856084);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -603.856 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1.0), 0.5, 31);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(31, 0.5, true, 31, 31, (RandomGenerator) null, true, simplePointChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(820, 0.5, false, 820, 820, (RandomGenerator) null, false, (ConvergenceChecker<PointValuePair>) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2646);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1551.36163595), Double.POSITIVE_INFINITY, 1781);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, (-1551.36163595), false, (-2754), (-2754), well44497a0, false, simplePointChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0.0, 22, 22);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1081), 2213.2883200628244, false, 0, 22, well44497b0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(820, 0.5, false, 820, 820, (RandomGenerator) null, false, (ConvergenceChecker<PointValuePair>) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertFalse(list0.contains(0.5));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(820);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(820, 0.5, false, 820, 820, (RandomGenerator) null, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(5, optimizationDataArray0.length);
  }
}
