/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 18:19:15 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister(30);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(3404.3808065898, 40.0, 89);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(89, 30, true, 89, (-3262), mersenneTwister0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      MaxIter maxIter1 = MaxIter.unlimited();
      optimizationDataArray0[3] = (OptimizationData) maxIter1;
      optimizationDataArray0[4] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 89;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma1 = new CMAESOptimizer.Sigma(doubleArray1);
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_Sigma1;
      optimizationDataArray0[7] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 89 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 40;
      doubleArray1[1] = (double) 40;
      doubleArray1[2] = (double) 40;
      doubleArray1[3] = (double) 40;
      SimpleBounds simpleBounds1 = new SimpleBounds(doubleArray0, doubleArray1);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2424.764664952, 40.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(30, 40, true, 30, 30, mersenneTwister0, true, simplePointChecker0);
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(30, 30, false, 1261, 15, mersenneTwister0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds2 = new SimpleBounds(doubleArray0, doubleArray1);
      optimizationDataArray0[3] = (OptimizationData) simpleBounds2;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer1.parseOptimizationData(optimizationDataArray0);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1759), 34, false, 2094, 1298, well19937c0, false, (ConvergenceChecker<PointValuePair>) null);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1759);
      doubleArray1[1] = (double) 34;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[6] = (OptimizationData) initialGuess0;
      optimizationDataArray0[7] = (OptimizationData) cMAESOptimizer_Sigma0;
      cMAESOptimizer0.getGoalType();
      optimizationDataArray0[8] = (OptimizationData) null;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 2
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 31;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(31, 31, 31);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-587), 2177.62149502527, true, 243, 32, mersenneTwister0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      SimpleBounds simpleBounds1 = SimpleBounds.unbounded(4235);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds1;
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 31 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 31;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1744), 2177.62149502527);
      int int0 = 843;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(31, (-343.0), true, (-2145955081), 843, mersenneTwister0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 31 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      mersenneTwister0.setSeed((long) 31);
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray1 = new OptimizationData[6];
      optimizationDataArray1[0] = (OptimizationData) initialGuess0;
      optimizationDataArray1[1] = (OptimizationData) initialGuess0;
      optimizationDataArray1[2] = (OptimizationData) initialGuess0;
      optimizationDataArray1[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray1[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(4);
      optimizationDataArray1[5] = (OptimizationData) simpleBounds0;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1575), 4, true, 1766, (-1575), mersenneTwister0, false, (ConvergenceChecker<PointValuePair>) null);
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      MersenneTwister mersenneTwister1 = new MersenneTwister();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(4383, 4760, false, (-1612), 4383, mersenneTwister1, false, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer0.getStatisticsDHistory();
      mersenneTwister1.setSeed(5251L);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 5251L;
      doubleArray1[1] = (double) (-2772);
      doubleArray1[2] = 0.33999999999999997;
      doubleArray1[3] = (double) 4760;
      doubleArray1[4] = (-3943.09);
      InitialGuess initialGuess1 = new InitialGuess(doubleArray1);
      optimizationDataArray0[0] = (OptimizationData) initialGuess1;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-343), (-341), true, (-341), (-457), mersenneTwister0, false, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer0.getStatisticsDHistory();
      mersenneTwister0.setSeed((long) (-341));
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[5] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[7] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[8] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      ConvergenceChecker<PointValuePair> convergenceChecker0 = null;
      int int0 = 1766;
      int int1 = 4;
      boolean boolean0 = true;
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1766, 4760, false, 4, (-1), mersenneTwister0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer0.getStatisticsDHistory();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      mersenneTwister0.setSeed((long) 31);
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray1 = new OptimizationData[6];
      optimizationDataArray1[0] = (OptimizationData) initialGuess0;
      optimizationDataArray1[1] = (OptimizationData) initialGuess0;
      optimizationDataArray1[2] = (OptimizationData) initialGuess0;
      optimizationDataArray1[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray1[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(4);
      optimizationDataArray1[5] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.optim.BaseMultivariateOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) 31;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 808;
      intArray0[1] = 15;
      intArray0[2] = 1746;
      intArray0[3] = 15;
      intArray0[4] = 808;
      intArray0[5] = 15;
      intArray0[6] = 808;
      intArray0[7] = 808;
      intArray0[8] = 31;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(3108.53718434208, 808);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(808, 983.94719, false, 15, 31, mersenneTwister0, false, simplePointChecker0);
      cMAESOptimizer0.getStatisticsDHistory();
      mersenneTwister0.setSeed((long) 808);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1766, 4760, false, 4, (-1), mersenneTwister0, true, (ConvergenceChecker<PointValuePair>) null);
      cMAESOptimizer0.getStatisticsDHistory();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      mersenneTwister0.setSeed((long) 31);
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[7] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[8] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(31);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 31;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      cMAESOptimizer_Sigma0.getSigma();
      cMAESOptimizer_PopulationSize0.getPopulationSize();
      Well512a well512a0 = new Well512a(1771L);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(3959.64020066, 0.0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-291), 31, false, 32, 31, well512a0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[7];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[5] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[6] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(2075);
      Well44497a well44497a0 = new Well44497a((-2948));
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(449, 449);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2843, (-2948), true, 1647, (-2175), well44497a0, false, simplePointChecker0);
      MaxIter maxIter0 = MaxIter.unlimited();
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      optimizationDataArray0[1] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      optimizationDataArray0[2] = (OptimizationData) maxIter0;
      optimizationDataArray0[3] = (OptimizationData) maxIter0;
      optimizationDataArray0[4] = (OptimizationData) maxIter0;
      optimizationDataArray0[5] = (OptimizationData) maxIter0;
      optimizationDataArray0[6] = (OptimizationData) maxIter0;
      optimizationDataArray0[7] = (OptimizationData) maxIter0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1316);
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = (-1316);
      intArray0[6] = 30;
      Well44497b well44497b0 = new Well44497b(intArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1467.90376377861, 30);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1316), (-1316), false, 4, (-1316), well44497b0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      MaxEval maxEval0 = new MaxEval(30);
      optimizationDataArray0[0] = (OptimizationData) maxEval0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertNull(cMAESOptimizer0.getGoalType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextGaussian();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1009, 1009, 1009);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-1670), (-1670), false, 1009, (-1670), well44497b0, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = null;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1922L);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-1.0));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1922L;
      PointValuePair pointValuePair0 = new PointValuePair(doubleArray0, 3749.0, true);
      simplePointChecker0.converged(2540, pointValuePair0, pointValuePair0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2540, 9.223372036854776E18, true, 2540, 7, well44497b0, true, simplePointChecker0);
      cMAESOptimizer0.getStatisticsSigmaHistory();
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(32);
      cMAESOptimizer_PopulationSize0.getPopulationSize();
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-124);
      int int1 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(0, 579);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(579, 579, false, (-124), 0, well512a0, false, simpleValueChecker0);
      cMAESOptimizer0.getStatisticsDHistory();
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2293;
      int int1 = 0;
      int int2 = 0;
      Well44497a well44497a0 = new Well44497a(0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2293, 2293, true, 2293, 0, well44497a0, true, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[9];
      MaxEval maxEval0 = new MaxEval(2293);
      optimizationDataArray0[0] = (OptimizationData) maxEval0;
      cMAESOptimizer0.getGoalType();
      optimizationDataArray0[1] = (OptimizationData) null;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2234.7575;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) initialGuess0;
      int int3 = 26;
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(26);
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      MaxEval maxEval1 = MaxEval.unlimited();
      optimizationDataArray0[5] = (OptimizationData) maxEval1;
      MaxIter maxIter0 = new MaxIter(26);
      optimizationDataArray0[6] = (OptimizationData) maxIter0;
      MaxIter maxIter1 = null;
      try {
        maxIter1 = new MaxIter(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.MaxIter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1));
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(548.3831, (-1));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, 2, false, (-2948), 449, well44497a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-1655);
      Well19937a well19937a0 = new Well19937a();
      well19937a0.nextInt();
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(2279.568, 0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, true, (-1655), 255, well19937a0, false, simplePointChecker0);
      cMAESOptimizer0.getStatisticsFitnessHistory();
      cMAESOptimizer0.getStatisticsMeanHistory();
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-2991.991307605738);
      doubleArray0[0] = (-2991.991307605738);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,991.991 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(1420, 19650218, 3208);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(332, 0.0, true, 1420, 19650218, (RandomGenerator) null, true, simplePointChecker0);
      ConvergenceChecker<PointValuePair> convergenceChecker0 = cMAESOptimizer0.getConvergenceChecker();
      CMAESOptimizer cMAESOptimizer1 = new CMAESOptimizer(1420, 0.0, true, 1420, 1420, (RandomGenerator) null, true, convergenceChecker0);
      assertFalse(cMAESOptimizer1.equals((Object)cMAESOptimizer0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      int int0 = 0;
      boolean boolean0 = false;
      int int1 = 1829;
      int int2 = 0;
      RandomGenerator randomGenerator0 = null;
      SimplePointChecker<PointValuePair> simplePointChecker0 = null;
      try {
        simplePointChecker0 = new SimplePointChecker<PointValuePair>(0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.SimplePointChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-111);
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -111 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }
}
