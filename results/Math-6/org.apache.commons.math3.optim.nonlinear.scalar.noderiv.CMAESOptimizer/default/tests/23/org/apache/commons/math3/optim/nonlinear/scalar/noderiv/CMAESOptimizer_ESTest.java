/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:09:36 GMT 2021
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CMAESOptimizer_ESTest extends CMAESOptimizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(6, 6);
      Well44497a well44497a0 = new Well44497a(6);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(6, 6, true, 6, 6, well44497a0, true, simpleValueChecker0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[2] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((long) 2);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      double[] doubleArray0 = new double[4];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      double[] doubleArray1 = new double[12];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, 2.0, false, 2, 32, synchronizedRandomGenerator0, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 12 != 4
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-1649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,649 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.5, (-3115.038045));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(24, (-3115.038045), false, 24, 49, (RandomGenerator) null, false, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[0];
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertEquals(0, optimizationDataArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(8);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(8, 8, true, 8, 8, well19937a0, true, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[18];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[7] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[5] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(22);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(22, 22);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(22, 22, false, 22, 22, well19937a0, false, simpleValueChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.parseOptimizationData((OptimizationData[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(22);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(22, 22);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(22, 22, false, 22, 22, well19937a0, false, simpleValueChecker0);
      // Undeclared exception!
      try { 
        cMAESOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(2247);
      int int0 = cMAESOptimizer_PopulationSize0.getPopulationSize();
      assertEquals(2247, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = cMAESOptimizer_Sigma0.getSigma();
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-624), (-624), true, 2, 6, well19937a0, true, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[3] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(2);
      double[] doubleArray0 = new double[2];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2, 2, false, 2, 2, well19937a0, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[16];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(2);
      optimizationDataArray0[7] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[6] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(14, 14, 14);
      Well44497a well44497a0 = new Well44497a(14);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(14, 14, true, 14, 14, well44497a0, true, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      double[] doubleArray0 = new double[5];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      double[] doubleArray1 = new double[0];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray1);
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2017.51552089176);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,017.516 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(6, 6, 6);
      Well44497a well44497a0 = new Well44497a();
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(6, 6, true, 6, 6, well44497a0, true, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker((-19), (-19));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-19), (-19), true, (-19), (-19), well19937a0, true, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(22, 22);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(22, 22, false, 22, 22, well19937a0, false, simpleValueChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(1220, 1220, 1220);
      Well44497a well44497a0 = new Well44497a(1220);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(1220, 1220, true, 1220, 1220, well44497a0, true, simpleValueChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(2247);
      Well19937a well19937a0 = new Well19937a(1338);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(2247, 2247, false, 1338, 1338, well19937a0, false, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
}
