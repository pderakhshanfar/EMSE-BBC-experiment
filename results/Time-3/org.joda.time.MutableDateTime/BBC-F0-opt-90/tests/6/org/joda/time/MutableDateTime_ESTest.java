/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 23:02:30 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.addSeconds(89);
      assertEquals(89000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      mutableDateTime0.addDays(Integer.MAX_VALUE);
      assertEquals(185542587100800000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.setWeekyear((-2354));
      assertEquals((-136451952000000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      Locale locale0 = Locale.KOREA;
      mutableDateTime_Property0.set("2014", locale0);
      assertEquals(1388620800000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(8L);
      mutableDateTime0.setDate(558L);
      assertEquals(8L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MutableDateTime.Property mutableDateTime_Property0 = new MutableDateTime.Property((MutableDateTime) null, (DateTimeField) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      mutableDateTime_Property0.set(4);
      assertEquals((-62040988800000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setWeekyear(0);
      assertEquals((-62162998718680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setWeekOfWeekyear(1);
      assertEquals(1388780481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setSecondOfDay(4);
      assertEquals(1392336004320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1837L));
      mutableDateTime0.setMonthOfYear(1);
      assertEquals((-28857601837L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMinuteOfHour(4);
      assertEquals(1392408261320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1566).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      mutableDateTime0.setMillisOfSecond(0);
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setHourOfDay(5);
      assertEquals(18000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0, 1, 5, 0, 1, 1, 5, dateTimeZone0);
      mutableDateTime0.setDayOfYear(5);
      assertEquals((-62166877138995L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(10000000L);
      mutableDateTime0.setDateTime((-982), 4, 1, 3, 5, 1, 5);
      assertEquals((-93148347298995L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setDate(1144, 4, 2);
      assertEquals((-26058153600000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      mutableDateTime0.set(dateTimeFieldType0, 4);
      assertEquals(4L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addYears(63);
      assertEquals(3380559681320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.addWeekyears(3);
      assertEquals(94953600000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      Days days0 = Days.THREE;
      Weeks weeks0 = days0.toStandardWeeks();
      mutableDateTime0.add((ReadablePeriod) weeks0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      mutableDateTime0.add(durationFieldType0, 623158436);
      assertEquals(53840888870400000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      String string0 = mutableDateTime0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3917));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 4);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(islamicChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("1970-01-01T00:00:00.000Z");
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("2014-02-14T20:21:21.320Z");
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1287));
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      System.setCurrentTimeMillis((-1243L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(24);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      System.setCurrentTimeMillis((-2435L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      System.setCurrentTimeMillis((-2478L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1837L));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals((-60000L), mutableDateTime0.getMillis());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.getRoundingField();
      assertEquals(3, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.copy();
      assertEquals(3, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1837L));
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertNotSame(mutableDateTime1, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      mutableDateTime0.setRounding((DateTimeField) delegatedDateTimeField0, 1);
      // Undeclared exception!
      try { 
        mutableDateTime0.setYear((-2951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      MutableDateTime mutableDateTime2 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime1.setTime((ReadableInstant) mutableDateTime2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73281320 for millisOfDay is not supported: Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-17T05:55:29.704 (Etc/UTC)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime(1855, 183, 183, 2464);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1855 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(276L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfMinute(2044);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2044 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(329);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000+00:00:00.329 (BuddhistChronology[+00:00:00.329])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // centuryOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.years();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfWeek field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfDay((-3998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3998 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfDay((-1483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1483 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfWeek((-982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -982 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfMonth(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483647 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) copticChronology0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(40, 2, 4);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate((ReadableInstant) dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, 2436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2436 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        MutableDateTime.parse("Clone error", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("+00:00", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(mutableDateTime0, dateTimeZone0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        MutableDateTime.parse("bXi1RlB{n", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"bXi1RlB{n\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutablePeriod mutablePeriod0 = new MutablePeriod(4, (-1237), 5, 2, 0, (-292269337), 2910, 1963);
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) mutablePeriod0, (-292269337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1169075334 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Period period0 = Period.months((-3198));
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) period0, 86400000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -276307200000
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) months0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      DateTime dateTime1 = new DateTime(913L, (DateTimeZone) null);
      Duration duration0 = new Duration(dateTime1, dateTime0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadableDuration) duration0, (-853));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Weeks weeks0 = Weeks.MIN_VALUE;
      Duration duration0 = weeks0.toStandardDuration();
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadableDuration) duration0, (-541));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -1298798110310400000 * -541
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1837L));
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, 5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-292275054));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -29227505400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(object0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      MutableDateTime mutableDateTime1 = null;
      try {
        mutableDateTime1 = new MutableDateTime((Object) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.GJChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(2472, 932, 4, (-3998), 0, 932, 1533, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3998 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(0, 0, (-851), 4, 999, (-1948), (-2354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 999 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime("");
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) hours0, (-4053));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -8703751221291 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0);
      mutableDateTime0.setMillis(0L);
      assertEquals(1, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMillis(2814L);
      assertEquals(2814L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Object object0 = mutableDateTime0.clone();
      assertNotSame(object0, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      mutableDateTime0.setChronology((Chronology) null);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Instant instant0 = mutableDateTime0.toInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 2);
      MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, gJChronology0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73281320 for millisOfDay is not supported: Illegal instant due to time zone offset transition (daylight savings time 'gap'): -292275055-05-17T05:55:29.704 (Etc/UTC)
         //
         verifyException("org.joda.time.chrono.ZonedChronology$ZonedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.add((long) 4);
      assertEquals(1392409281324L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1566).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      mutableDateTime0.setTime(736L);
      assertEquals(736L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Instant instant0 = new Instant();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(536, 3079, 536, 536, 2318, 119, 3079, lenientChronology0);
      mutableDateTime0.setDate((ReadableInstant) null);
      assertEquals(1392417602079L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-2465L));
      // Undeclared exception!
      try { 
        mutableDateTime0.add((DurationFieldType) null, (-2374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Years years0 = Years.MAX_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, 1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1073743838 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        mutableDateTime0.set((DateTimeFieldType) null, 1638);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setZoneRetainFields(fixedDateTimeZone0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      mutableDateTime0.setZoneRetainFields(fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      mutableDateTime0.add((ReadablePeriod) null, (-982));
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadableDuration) null, 2751);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      mutableDateTime0.setRounding(dateTimeField0, 5);
      mutableDateTime0.setMillis((-1L));
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 4);
      mutableDateTime0.setMillis(1336L);
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.setMillis(0L);
      assertEquals(3, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      mutableDateTime0.setRounding(dateTimeField0, 2);
      mutableDateTime0.setMillis((-4459L));
      assertEquals(2, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(2686L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 973
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, (-1591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -1591
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setRounding((DateTimeField) null, (-668));
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime_Property0.addWrapField(4);
      assertEquals(4L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0, 1, 5, 0, 1, 1, 5, dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertEquals((-62166877138995L), mutableDateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set(3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      int int0 = mutableDateTime_Property0.get();
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      mutableDateTime_Property0.add(4);
      assertEquals(4L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      Chronology chronology0 = mutableDateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfEven();
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Instant instant0 = new Instant((Object) null);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      mutableDateTime_Property0.add(2331L);
      assertEquals(1593807681320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1566).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfHour(86400000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 86400000 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.addWeeks(2436);
      assertEquals(1473292800000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Duration duration0 = new Duration(1235L);
      mutableDateTime0.add((ReadableDuration) duration0);
      assertEquals(1392409282555L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(536, 3079, 536, 536, 2318, 119, 3079, lenientChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMonths((-292269337));
      assertEquals((-768592727609918680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      mutableDateTime0.setMillis((ReadableInstant) instant0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1287));
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime(0, (-804), 0, (-982), 581, 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -982 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1693L);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMillis(366);
      assertEquals(1392409281686L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null, dateTimeZone0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(0, 1, 1, 0, 1, 1, 1, dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setHourOfDay((-1191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1191 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      MutableDateTime mutableDateTime2 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      MutableDateTime mutableDateTime3 = mutableDateTime1.toMutableDateTime((Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime3.setTime((ReadableInstant) mutableDateTime2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 9223372036854775807 + 47305513
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfSecond((-482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -482 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setMillisOfDay(2);
      assertEquals(1392336000002L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("9");
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(8L);
      mutableDateTime0.setDayOfMonth(2);
      assertEquals(86400008L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.setDayOfWeek(3);
      assertEquals((-86400000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.setSecondOfMinute(4);
      assertEquals(4000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      mutableDateTime0.setMinuteOfDay(89);
      assertEquals(5340000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1287));
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.addMinutes(2436);
      assertEquals(146160000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate(1610, 1890, 955);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1890 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(4000, 5, 2, (-982), 1, 4000, 1, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -982 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(5, 5, 1, 0, 5, 0, 5);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(islamicChronology0, islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.IslamicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addHours((-2129));
      assertEquals(1384744881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(4185L, (Chronology) gJChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481634 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.addYears(352831696);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 352833710 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setTime(1, 2, 5, 0);
      assertEquals(1392339725000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (DateTimeZone) null);
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      mutableDateTime_Property0.set("3");
      assertEquals(1045254081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(276L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 12);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) strictChronology0);
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setYear((-2951));
      assertEquals((-155287856318680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      mutableDateTime0.setRounding(dateTimeField0);
      // Undeclared exception!
      try { 
        mutableDateTime0.addMonths((-292269337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfDay(17971875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 17971875 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.addWeekyears(623158436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623160450 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
