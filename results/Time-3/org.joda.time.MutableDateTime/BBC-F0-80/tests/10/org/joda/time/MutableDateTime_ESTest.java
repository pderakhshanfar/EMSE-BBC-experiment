/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 10:13:41 GMT 2021
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MutableDateTime_ESTest extends MutableDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime(5, 5, 5, 4596, 4596, 5, 4596);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4596 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setTime(0, 5, 7, 5);
      assertEquals(1392336307005L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addHours(1023);
      assertEquals(1396092081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeeks(354);
      assertEquals(1606508481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      Locale locale0 = new Locale("");
      // Undeclared exception!
      try { 
        mutableDateTime_Property0.set("_|$", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"_|$\" for secondOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      mutableDateTime0.setYear(7);
      assertEquals((-61691254718680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setWeekyear(1546);
      assertEquals((-13376201918680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 5, (Chronology) gJChronology0);
      mutableDateTime0.setSecondOfDay(39);
      assertEquals(39005L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      mutableDateTime0.setRounding(dateTimeField0);
      assertEquals(1392408000000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMonthOfYear(5);
      assertEquals(1400098881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setMillisOfSecond(2);
      assertEquals(1392409281002L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setDayOfYear(3);
      assertEquals(1388780481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setDayOfMonth(3);
      assertEquals(1391458881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setDateTime(4, 4, 4, 4, 4, 8, 4);
      assertEquals((-62032852551996L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 5, (Chronology) gJChronology0);
      mutableDateTime0.setDate(5, 3, 3);
      assertEquals((-62004268799995L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      mutableDateTime0.set(dateTimeFieldType0, 3);
      assertEquals(1045254081320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addWeekyears(1);
      assertEquals(1423858881320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      mutableDateTime0.add((ReadablePeriod) seconds0);
      assertEquals(3539892928320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      mutableDateTime0.add(durationFieldType0, 0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2408));
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(5, 2);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("", dateTimeFormatter1);
      assertEquals((-18120000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("2014-02-14T20:21:21.320Z");
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.parse("69");
      assertEquals((-59989680000000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(213);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      System.setCurrentTimeMillis((-1801L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3157);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) buddhistChronology0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) strictChronology0);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      System.setCurrentTimeMillis((-5669L));
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals((-5669L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 3, 3, 4);
      mutableDateTime0.setRounding((DateTimeField) offsetDateTimeField0, 2);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(2777068800000L, mutableDateTime0.getMillis());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      mutableDateTime0.getRoundingField();
      assertEquals(1, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      mutableDateTime0.copy();
      assertEquals(1, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) null);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-873));
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime((-873), (-873), (-873), (-873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -873 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfMinute(1221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1221 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.MIN_VALUE;
      Duration duration0 = hours0.toStandardDuration();
      mutableDateTime0.add((ReadableDuration) duration0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, unsupportedDurationField0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // dayOfMonth field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding((DateTimeField) unsupportedDateTimeField0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // monthOfYear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfHour(3320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3320 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMinuteOfDay(12740625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12740625 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfDay((-1064));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1064 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setHourOfDay((-2167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2167 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfWeek((-3787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3787 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((long) 5);
      LimitChronology limitChronology0 = LimitChronology.getInstance(iSOChronology0, dateTime0, mutableDateTime0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) limitChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime1.setDate((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2014-02-15T01:21:21.320+05:00 (ISOChronology[+05:00])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("org.joda.time.field.ScaledDurationField", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(strictChronology0, dateTimeFieldTypeArray0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      // Undeclared exception!
      try { 
        MutableDateTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime1.addYears((-2738));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime((Chronology) copticChronology0);
      Period period0 = new Period((long) 1);
      Period period1 = period0.withWeeks(1354);
      // Undeclared exception!
      try { 
        mutableDateTime1.add((ReadablePeriod) period1, (-2219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) seconds0, 1073741824);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 2305843008139952128 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481634 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-292269337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 837839386 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      Object object0 = new Object();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(object0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(buddhistChronology0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-2596), 1597, 1, (-866), 1597, 3, 1813, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -866 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(4, 4, 0, 5, 4, 2, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) months0, (-1750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -3758096382250
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Duration duration0 = Duration.standardSeconds(1073741823L);
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadableDuration) duration0, 292272984);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1073741823000 * 292272984
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 1);
      mutableDateTime0.setMillis(669L);
      assertEquals(1, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      mutableDateTime0.setRounding(dateTimeField0, 4);
      mutableDateTime0.setMillis((long) 4);
      assertEquals(4, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setMillis((long) 4);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime mutableDateTime1 = (MutableDateTime)mutableDateTime0.clone();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        MutableDateTime.parse("(PS^\u0003O=VXm", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setDate(0L);
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((long) 5);
      assertEquals(1392409281325L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime(7, 7, 5, 4, 0, 3, 4, fixedDateTimeZone0);
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setTime((-697L));
      assertEquals(1392422399303L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Instant instant0 = new Instant((long) 2);
      mutableDateTime0.setDate((ReadableInstant) instant0);
      assertEquals(73281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.add((DurationFieldType) null, 697);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, (-292269337));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -29226933700
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        mutableDateTime0.set((DateTimeFieldType) null, (-4932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        mutableDateTime0.set(dateTimeFieldType0, (-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -93 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setZoneRetainFields(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      mutableDateTime0.setZone(fixedDateTimeZone0);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setZone(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadablePeriod) null, 2307);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.add((ReadableDuration) null, 3);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 5);
      mutableDateTime0.setMillis((long) 1);
      assertEquals((-259200000L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField((Chronology) null);
      mutableDateTime0.setRounding(dateTimeField0, 3);
      mutableDateTime0.setMillis((long) 3);
      assertEquals(3, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      mutableDateTime0.setRounding(dateTimeField0, 2);
      mutableDateTime0.setMillis(99999993L);
      assertEquals(2, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      mutableDateTime0.setRounding(dateTimeField0, 0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, 292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 292
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding(dateTimeField0, (-1508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -1508
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setRounding((DateTimeField) null, (-1629));
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.MutableDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      mutableDateTime_Property0.addWrapField(4);
      assertEquals(1402777281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1477L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      mutableDateTime_Property0.add((long) 5);
      assertEquals(1392409286320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      mutableDateTime_Property0.set(4);
      assertEquals((-49098713918680L), mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      DateTime dateTime0 = mutableDateTime0.toDateTimeISO();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      int int0 = mutableDateTime_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      mutableDateTime_Property0.add(2);
      assertEquals(1392409281322L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set("3");
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      Chronology chronology0 = mutableDateTime_Property0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfEven();
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      DateTimeField dateTimeField0 = mutableDateTime_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertEquals(2, MutableDateTime.ROUND_CEILING);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 5, (Chronology) gJChronology0);
      mutableDateTime0.setMinuteOfHour(4);
      assertEquals(240005L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      MutableDateTime mutableDateTime0 = new MutableDateTime(5, 153692453, 2738, 2738, 2264, (-1508), (-160), lenientChronology0);
      assertEquals(404093212355931840L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.addMonths(636);
      assertEquals(3064940481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      mutableDateTime0.setMillis((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setWeekOfWeekyear(1);
      assertEquals(1388780481320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDateTime(1086, 512, 4, (-706), (-1969), 4, 512);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -706 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime((long) 5);
      LimitChronology limitChronology0 = LimitChronology.getInstance(iSOChronology0, dateTime0, mutableDateTime0);
      Chronology chronology0 = limitChronology0.withZone(dateTimeZone0);
      //  // Unstable assertion: assertFalse(chronology0.equals((Object)limitChronology0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMonthOfYear((-532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -532 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      mutableDateTime0.addMillis((-1850));
      assertEquals(1392409279470L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(5);
      MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, dateTimeZone0);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfYear((-108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -108 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 5, (Chronology) gJChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      mutableDateTime_Property0.roundCeiling();
      assertEquals(1000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      mutableDateTime0.setHourOfDay(4);
      assertEquals(14400000L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setMillisOfSecond(28181250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 28181250 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      String string0 = mutableDateTime0.toString();
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-873));
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      mutableDateTime0.setMillisOfDay(2);
      assertEquals(1392336000875L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableDateTime.parse("Illegal rounding mode: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Illegal rounding mode: \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      Instant instant0 = gJChronology0.getGregorianCutover();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.setDayOfMonth(3246);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3246 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      mutableDateTime0.setDayOfWeek(1);
      assertEquals(1392063681320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.setSecondOfMinute(2);
      assertEquals(1392409262320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setMinuteOfDay(5);
      assertEquals(1392336321320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      mutableDateTime0.addMinutes((-2167));
      assertEquals(1392279261320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 5, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setDate((-570), (-819), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -819 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(4, (-3457), 4954, 4954, 1743, (-2292), 4954, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4954 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      mutableDateTime0.addSeconds(3479);
      assertEquals(1392412760320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(4, 3, 4, 0, 1, 2, 3);
      assertEquals(0, MutableDateTime.ROUND_NONE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0, 5);
      MutableDateTime mutableDateTime1 = new MutableDateTime(mutableDateTime0, gJChronology0);
      assertEquals(0, mutableDateTime1.getRoundingMode());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        mutableDateTime0.add((ReadablePeriod) years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setWeekyear(623191204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623191204 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) null);
      mutableDateTime0.addYears(2);
      assertEquals(1455481281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      mutableDateTime0.setTime(7, 2, 7, 4);
      assertEquals(1392361327004L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        mutableDateTime0.add(durationFieldType0, 4);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertNotNull(mutableDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0, 5);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      mutableDateTime0.addDays(23118750);
      assertEquals(1998852409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((-3976L), (Chronology) buddhistChronology0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(buddhistChronology0, dateTime0, mutableDateTime0);
      mutableDateTime0.setChronology(limitChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 2557-02-14T20:21:21.320Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((-1L), (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setYear((-336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        mutableDateTime0.setRounding((DateTimeField) delegatedDateTimeField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      // Undeclared exception!
      try { 
        mutableDateTime0.setSecondOfDay((-799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -799 for secondOfDay must be in the range [0,86399]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      // Undeclared exception!
      try { 
        mutableDateTime0.addWeekyears(623191204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623193218 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
