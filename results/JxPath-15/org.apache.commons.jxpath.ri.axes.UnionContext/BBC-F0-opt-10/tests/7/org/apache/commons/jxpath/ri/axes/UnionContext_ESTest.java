/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:07:22 GMT 2021
 */

package org.apache.commons.jxpath.ri.axes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.Functions;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UnionContext_ESTest extends UnionContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName(",}\"O-YY", ",}\"O-YY");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(variablePointer0);
      InitialContext initialContext1 = new InitialContext(initialContext0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[2], coreOperationDivide0);
      evalContextArray0[4] = (EvalContext) predicateContext0;
      evalContextArray0[5] = (EvalContext) initialContext1;
      evalContextArray0[6] = (EvalContext) rootContext1;
      UnionContext unionContext0 = new UnionContext(initialContext1, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.setPosition(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ',}\"O-YY:,}\"O-YY'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      QName qName0 = new QName("", "org.apache.commons.jxpath.JXPathException");
      nodeSetContext0.toString();
      nodeSetContext0.getValue();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "org.apache.commons.jxpath.JXPathException");
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, true, nodeNameTest1);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) ancestorContext0;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      unionContext0.reset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 870;
      // Undeclared exception!
      try { 
        unionContext0.setPosition(870);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[4];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(step0).getAxis();
      doReturn((NodeTest) null, (NodeTest) null, (NodeTest) null, (NodeTest) null, (NodeTest) null).when(step0).getNodeTest();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(step0).getPredicates();
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      Step[] stepArray1 = new Step[3];
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      stepArray1[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationNotEqual0);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(931, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getPointer("HP5?>NYr9T", expression0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      Pointer pointer0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = evalContext0;
      String string0 = "8^mdz[x.";
      JXPathContextReferenceImpl.allocateConditionally("8^mdz[x.", ";dxBd/v%|:p");
      EvalContext[] evalContextArray1 = new EvalContext[8];
      jXPathContext0.setFunctions((Functions) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, nodeTypeTest0);
      evalContextArray1[0] = (EvalContext) descendantContext0;
      evalContextArray1[1] = evalContext0;
      evalContextArray1[2] = evalContext0;
      evalContextArray1[3] = evalContext0;
      evalContextArray1[4] = evalContext0;
      evalContextArray1[5] = evalContext0;
      evalContextArray1[6] = evalContext0;
      evalContextArray1[7] = evalContext0;
      UnionContext unionContext0 = new UnionContext(evalContextArray0[0], evalContextArray1);
      // Undeclared exception!
      unionContext0.setPosition(6);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) initialContext0;
      evalContextArray0[3] = (EvalContext) initialContext0;
      evalContextArray0[4] = (EvalContext) initialContext0;
      evalContextArray0[5] = (EvalContext) initialContext0;
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "W1^te|$l");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl1);
      InitialContext initialContext1 = (InitialContext)rootContext1.getAbsoluteRootContext();
      UnionContext unionContext0 = new UnionContext(initialContext1, evalContextArray0);
      evalContextArray0[6] = (EvalContext) unionContext0;
      evalContextArray0[7] = (EvalContext) initialContext0;
      evalContextArray0[8] = (EvalContext) initialContext0;
      UnionContext unionContext1 = new UnionContext(initialContext0, evalContextArray0);
      unionContext0.setPosition((-777));
      unionContext0.setPosition(92);
      unionContext0.setPosition(34);
      assertEquals(34, unionContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[5];
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      RootContext rootContext0 = unionContext0.getRootContext();
      evalContextArray0[0] = (EvalContext) rootContext0;
      int int0 = (-1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      SelfContext selfContext0 = new SelfContext(initialContext0, nodeTypeTest0);
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = (EvalContext) initialContext0;
      InitialContext initialContext1 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      evalContextArray0[3] = (EvalContext) initialContext1;
      evalContextArray0[4] = (EvalContext) initialContext0;
      UnionContext unionContext1 = new UnionContext(initialContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.setPosition((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = evalContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      unionContext0.setPosition(0);
      evalContext0.getSingleNodePointer();
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(1);
      unionContext0.setPosition(1);
      unionContext0.setPosition(1);
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(1);
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(0);
      Variables variables0 = jXPathContextReferenceImpl0.getVariables();
      jXPathContext1.setVariables(variables0);
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(2);
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(0);
      unionContext0.getDocumentOrder();
      unionContext0.setPosition(1);
      int int0 = unionContext0.getDocumentOrder();
      assertEquals(1, unionContext0.getPosition());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        unionContext0.getDocumentOrder();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.reset();
      int int0 = 0;
      unionContext0.getContextNodePointer();
      unionContext0.setPosition(0);
      unionContext0.getCurrentNodePointer();
      unionContext0.getDocumentOrder();
      // Undeclared exception!
      try { 
        unionContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getDocumentOrder();
      unionContext0.getDocumentOrder();
      // Undeclared exception!
      try { 
        unionContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "k");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "k");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = evalContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      unionContext0.setPosition(0);
      // Undeclared exception!
      try { 
        jXPathContext0.createPathAndSetValue("k", jXPathContextReferenceImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot set property: 'k'/k - no such property
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) nodeSetContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.setPosition((-4668));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Step[] stepArray0 = new Step[3];
      Step step0 = mock(Step.class, new ViolatedAssumptionAnswer());
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) attributeContext0;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = (EvalContext) ancestorContext0;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext(attributeContext0, evalContextArray0);
      assertTrue(unionContext0.isChildOrderingRequired());
  }
}
