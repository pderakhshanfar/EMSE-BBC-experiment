/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:45:16 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JCheckBox;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, (double) 59);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.addOrUpdate(2787.712, 0.0);
      xYSeries0.addOrUpdate((-492.0), (double) 0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.setMaximumItemCount(6);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(6, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(999, 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 999
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      xYSeries0.update(59, 0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1012, 1012);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1012, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 999, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((Number) 53, (Number) 1, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, 0.0);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 999, true);
      xYSeries0.updateByIndex(0, 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.remove((Number) 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 999, (double) 999);
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 999);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.getItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      xYSeries0.add((double) 0, (double) 999, true);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (double) millisecond0.LAST_MILLISECOND_IN_SECOND);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add(3508.0, 3508.0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(3508.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(3508.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((-1351.384301945596), (-1351.384301945596));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1351.384301945596), xYDataItem0.getYValue(), 0.01);
      assertEquals((-1351.384301945596), xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("/", true);
      xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(999, 1);
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((-1351.384301945596), (-1351.384301945596));
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Integer integer0 = new Integer(760);
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer1);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-30000.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((Number) 59, (Number) 0, true);
      xYSeries0.addOrUpdate((Number) 59, (Number) minute0.FIRST_MINUTE_IN_HOUR);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.addOrUpdate(Double.NaN, (double) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((Number) 999, (Number) 0, true);
      xYSeries0.addOrUpdate(Double.NaN, (double) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((-3827.78879225618), (Number) 0);
      xYSeries0.addOrUpdate((-3827.78879225618), 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      Second second0 = millisecond0.getSecond();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1773), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Object[] objectArray0 = new Object[4];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2553));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-275));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      java.util.Vector<XYDataItem> vector0 = new java.util.Vector<XYDataItem>();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-38));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedList<XYSeries> linkedList0 = new LinkedList<XYSeries>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      byte[] byteArray0 = new byte[9];
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) minute0.FIRST_MINUTE_IN_HOUR);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove(1430);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2559), (-2559), (-2559));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      Stack<JCheckBox> stack0 = new Stack<JCheckBox>();
      xYSeries0.data = (List) stack0;
      JCheckBox jCheckBox0 = new JCheckBox("%kS&fXSU+ij6 1g=<");
      stack0.add(jCheckBox0);
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JCheckBox cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-509));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-445));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2559), (-1632), (-1632));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-789), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.addOrUpdate((Number) minute0.LAST_MINUTE_IN_HOUR, (Number) minute0.LAST_MINUTE_IN_HOUR);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-2027), (-611));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 59, (Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.add(defaultTableModel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 59, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1009.723), 2959.30058993);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1.5, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((-1350.9495540142148), (-1350.9495540142148));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1350.9495540142148), 3344.469939);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem((double) 59, 1245.5374);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      vector0.add((DefaultTableModel) null);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1354, 1354, 1354);
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      Integer integer0 = new Integer((-2001));
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(59, true, false);
      xYSeries0.add((Number) 59, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) minute0.FIRST_MINUTE_IN_HOUR, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(0.0, (Number) 999, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) 59);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add(0.0, (Number) week0.FIRST_WEEK_IN_YEAR);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add(0.0, (double) 59);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy(59, 0);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.add(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      xYSeries0.add((Number) 53, (Number) 53, false);
      xYSeries0.indexOf(53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      xYSeries0.add((Number) 1, (Number) null, false);
      int int0 = xYSeries0.indexOf(53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.add(defaultTableModel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      Byte byte0 = new Byte((byte) (-1));
      xYSeries0.addOrUpdate((Number) byte0, (Number) 59);
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((-2813.31522241362), (double) 59);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, (double) 0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, 142.431203057);
      xYSeries0.add(694.6720319269098, (Number) 0, true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (double) millisecond0.FIRST_MILLISECOND_IN_SECOND);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (double) millisecond0.FIRST_MILLISECOND_IN_SECOND);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(515L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, (double) 59);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.addOrUpdate((Number) 0, (Number) 0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      XYSeries xYSeries1 = new XYSeries(minute0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      XYSeries xYSeries1 = new XYSeries(week0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      Object object0 = xYSeries0.clone();
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries0.equals(object0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("/");
      Date date0 = mockSimpleDateFormat0.parse("/");
      Month month0 = new Month(date0);
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      XYSeries xYSeries1 = new XYSeries("/", true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(59, 0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.delete(859, 0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      Double double0 = new Double((-1.0));
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) double0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, 54.431134512);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false);
      xYSeries0.add(1752.2509609851, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, doubleArray0.length);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add(Double.NaN, 0.0);
      xYSeries0.add((double) 0, 2843.459);
      xYSeries0.add((double) 59, 0.0);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, false);
      xYSeries0.add((double) 0, (Number) 59);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((Number) 59, (Number) 59);
      xYSeries0.add((-3827.78879225618), (Number) 0);
      xYSeries0.addOrUpdate((-3827.78879225618), 0.0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 999, (double) 999);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2553));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("/");
      Date date0 = mockSimpleDateFormat0.parse("/");
      Month month0 = new Month(date0);
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 59, 1245.5374);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((double) 999, (double) 999);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2559), (-1632), (-1632));
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Week week0 = new Week(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.add((-2337.3302349866), (-1.7976931348623157E308), false);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-2337.3302349866), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }
}
