/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:59:38 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Panel;
import java.math.BigInteger;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.chrono.MinguoDate;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (-0.8986387383194511), false);
      xYSeries0.add(0.31442526303511414, (double) 0, false);
      XYDataItem xYDataItem0 = new XYDataItem((-0.8986387383194511), (double) 999);
      xYSeries0.add((Number) 0, (Number) millisecond0.FIRST_MILLISECOND_IN_SECOND, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries0.setMaximumItemCount(3142);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(3142, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(0.8, (-579.64410711), false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(0.0, 0.1447917307081239);
      xYSeries0.addOrUpdate((-3785.5356), 0.0);
      xYSeries0.update(0, 999);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.addOrUpdate(Double.POSITIVE_INFINITY, 1.0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(Double.NaN, (-1.0), true);
      xYSeries0.add((double) 0, 2878.7886836, true);
      Double double0 = new Double((-1.0));
      XYDataItem xYDataItem0 = new XYDataItem((Number) 999, (Number) double0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.add(247.610284, 2362.0, true);
      xYSeries0.add(2362.0, (-165.92203), false);
      XYDataItem xYDataItem0 = new XYDataItem(247.610284, (-1.0));
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(0.0, 0.1447917307081239);
      Number number0 = xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(Double.NaN, (-1.0), true);
      xYSeries0.updateByIndex(0, 999);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (Number) 999);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add((Number) 59, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 59);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, true);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add((double) 0, 1.5);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1.5, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(Double.NaN, (-1.0), false);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYDataItem xYDataItem0 = new XYDataItem((-0.8986387383194511), (double) 999);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (-859.852340707251));
      xYSeries0.add(Double.NaN, (-1.0), true);
      int int0 = xYSeries0.indexOf(999);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(Double.NaN, (-1.0), true);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate(0.0, (double) 0L);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 999, (-1.0), false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(999.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      Clock clock0 = MockClock.tickMinutes(zoneOffset0);
      MinguoDate minguoDate0 = MockMinguoDate.now(clock0);
      XYSeries xYSeries0 = new XYSeries(minguoDate0, false, false);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 59, (-343L));
      XYSeries xYSeries0 = new XYSeries(instant0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 1503);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(3383, 3437);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.addOrUpdate(Double.NaN, (double) 0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      Short short0 = new Short((short) (-1872));
      xYSeries0.addOrUpdate((Number) 999, (Number) short0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 999, 0.0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add(0.0, (double) 59, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(0.8, (-579.64410711), false);
      xYSeries0.addOrUpdate(0.8, 0.8);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, false);
      xYSeries0.addOrUpdate(Double.NEGATIVE_INFINITY, (double) 999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-772), 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = Integer.getInteger("=H<-", (-1230));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1230), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0, 0);
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-3302));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1940, 1600);
      LinkedList<XYDataItem> linkedList0 = new LinkedList<XYDataItem>();
      xYSeries1.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries1.remove((Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1613));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      stack0.add((Object) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Millisecond cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = xYSeries0.createCopy(999, 999);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1009));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = xYSeries0.createCopy(999, 999);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      stack0.add((Object) millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-2029));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(999, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2525), 872);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(999, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      stack0.add(xYSeries0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(Double.NaN, (-1.0), false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1938), 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      stack0.add((Object) millisecond0);
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 999, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      stack0.add(xYSeries0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1478.940338445, (double) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 999);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((Number) 999, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((Number) 999, (Number) 999, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1497, "X-value already exists.");
      Year year0 = new Year(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.addElement((Integer) millisecond0.FIRST_MILLISECOND_IN_SECOND);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 999, (Number) 999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 999, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      java.util.Vector<XYDataItem> vector0 = new java.util.Vector<XYDataItem>();
      xYSeries0.data = (List) vector0;
      vector0.setSize(999);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      LinkedList<Panel> linkedList0 = new LinkedList<Panel>();
      xYSeries0.data = (List) linkedList0;
      Panel panel0 = new Panel();
      linkedList0.add(panel0);
      // Undeclared exception!
      try { 
        xYSeries0.add(375.58291858, (Number) 999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add(0.0, (double) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, 1586.72, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add((-271.2228098766), (-271.2228098766));
      int int0 = xYSeries0.indexOf(0);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      int int0 = xYSeries0.indexOf(999);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, true);
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, (double) 59);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add(1706.1, Double.NEGATIVE_INFINITY, true);
      XYDataItem xYDataItem0 = new XYDataItem(1706.1, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(2098.7223, Double.NEGATIVE_INFINITY);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate(193, 193, 193);
      TimeZone timeZone0 = TimeZone.getTimeZone("sC2:}Gg+{jl}");
      Second second0 = new Second(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(second0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      xYSeries0.add(0.0, (double) 999, false);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      arrayList0.add((ChronoLocalDate) japaneseDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (-1.0), false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries(millisecond0, false, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = new XYSeries(millisecond0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(53, 53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(1);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = new XYSeries(millisecond0.FIRST_MILLISECOND_IN_SECOND, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      boolean boolean0 = xYSeries0.equals(millisecond0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(53, 53);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      xYSeries0.add((double) 0, 2469.334095, true);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, (-1200.92945022164));
      xYSeries0.add(xYDataItem0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 0, (-2.147483648E9));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((long) 59, (-343L));
      XYSeries xYSeries0 = new XYSeries(instant0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (-0.8986387383194511), false);
      xYSeries0.update(0, (Number) null);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 0, false);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (double) 0);
      xYSeries0.delete(0, 0);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 999, (double) 0);
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((Number) 0, (Number) 999);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 999);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((-2228.4969276360257), (double) 999, false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((Number) 0, (Number) 999);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, 438.51);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 999, (Number) 999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 690, (-758), 690, (-758));
      TimeZone timeZone0 = TimeZone.getDefault();
      Week week0 = new Week(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 999);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale locale0 = new Locale("@[73%Z^", "@[73%Z^", "@[73%Z^");
      linkedHashSet0.add(locale0);
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>(linkedHashSet0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-838));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.getItems();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add(0.0, (Number) 999, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 0, (double) 0, false);
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, (-1200.92945022164));
      xYSeries0.add(xYDataItem0);
      xYSeries0.setMaximumItemCount(1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(2407.469378438082, (Number) 999);
      xYSeries0.add((Number) millisecond0.FIRST_MILLISECOND_IN_SECOND, (Number) millisecond0.FIRST_MILLISECOND_IN_SECOND);
      xYSeries0.addOrUpdate((Number) millisecond0.FIRST_MILLISECOND_IN_SECOND, (Number) 0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }
}
