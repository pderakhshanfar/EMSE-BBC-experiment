/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:21:13 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.EnumSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      xYSeries0.add((Number) 9999, (Number) 9999);
      xYSeries0.add((Number) (-9999), (Number) (-9999), true);
      xYSeries0.add((double) (short) (-2), (Number) (-9999), false);
      Short short0 = new Short((short) (-2));
      xYSeries0.add((Number) 9999, (Number) short0, true);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-9999), (-9999));
      xYSeries0.setMaximumItemCount(1);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) year0.MAXIMUM_YEAR);
      xYSeries0.add(Double.NaN, (double) 9999, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries("[0.0, 0.0]", false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.add((double) 0, (Number) float0);
      xYSeries0.addOrUpdate((double) 0.0F, Double.NaN);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.add((Number) 9999, (Number) 9999, false);
      xYSeries0.update(9999, (-9999));
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((double) (-9999), (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) 9999, (Number) year0.MINIMUM_YEAR);
      xYSeries0.add((Number) (-9999), (Number) (-9999), false);
      Number number0 = xYSeries0.getY(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-9999), number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false);
      xYSeries0.addOrUpdate((double) 0, 2185.42342575135);
      xYSeries0.updateByIndex(0, bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.remove((Number) float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      xYSeries0.add((double) 1, 558.51785904);
      Long long0 = new Long(1);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) long0);
      assertEquals(558.51785904, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate(295.2631, 295.2631);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(295.2631, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(295.2631, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getEndX((-336), (-336));
      xYSeries0.add(number0, number0);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, false, true);
      xYSeries0.add(0.0, (double) 0.0F);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      int int0 = xYSeries0.indexOf(float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      xYSeries0.add((Number) float0, (Number) float0, true);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) (-9999));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries("[0.0, 0.0]", false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999, false);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((Number) (-9999), (Number) (-9999), false);
      xYSeries0.add((Number) (-9999), (Number) 9999, false);
      assertEquals(2, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      assertEquals(9999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, false, true);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1048), (-6));
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 2);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      Float float0 = new Float(0.0F);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) float0);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) float0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) null);
      xYSeries0.addOrUpdate((Number) integer0, (Number) null);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      xYSeries0.add(0.0, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 0, 0.0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      Byte byte0 = new Byte((byte) (-38));
      xYSeries0.addOrUpdate((Number) (-9999), (Number) byte0);
      xYSeries0.addOrUpdate((double) (-9999), (-423.0661));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-9999), 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      Integer integer0 = new Integer(2711);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(2711, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2711, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true);
      xYSeries0.data = null;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.update(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(16L, 16L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer(283);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-954));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("l", false);
      LinkedList<XYSeries> linkedList0 = new LinkedList<XYSeries>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      vector0.add((Object) xYSeries0.data);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>();
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-2301));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      ArrayList<java.time.Month> arrayList0 = new ArrayList<java.time.Month>();
      java.time.Month month0 = java.time.Month.FEBRUARY;
      arrayList0.add(month0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-322));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(1332);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-2792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-833));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(186);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 186, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(9999, 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1184), (-1184));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-9999), (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(1483.45644122, 6455.42889073);
      XYSeries xYSeries0 = new XYSeries(simpleHistogramBin0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>();
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.addOrUpdate(Double.NaN, (double) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) (-9999), (Number) year0.MAXIMUM_YEAR);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) year0.MAXIMUM_YEAR);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) (-9999), 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      ArrayList<java.time.Month> arrayList0 = new ArrayList<java.time.Month>();
      java.time.Month month0 = java.time.Month.FEBRUARY;
      arrayList0.add(month0);
      xYSeries0.data = (List) arrayList0;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((Number) (-9999), (Number) (-9999), true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) 9999, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>();
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 9999, (Number) 9999, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) (-9999), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      ArrayList<LinkedList<Locale.LanguageRange>> arrayList0 = new ArrayList<LinkedList<Locale.LanguageRange>>();
      xYSeries0.data = (List) arrayList0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      arrayList0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) (-9999), false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(216, mockRandom0);
      xYSeries0.add((Number) (-9999), (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>();
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>(vector0);
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 9999, (Number) (-9999));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      java.time.Month month0 = java.time.Month.SEPTEMBER;
      EnumSet<java.time.Month> enumSet0 = EnumSet.of(month0, month0, month0, month0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>(enumSet0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) (-9999));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      xYSeries0.add(0.0, 0.0);
      Number number0 = xYSeries0.getX(0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, number0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-9999), (Number) (-9999), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.addOrUpdate((double) (-1356), (double) 0.0F);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-1356), (Number) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((-2709.887719969), (Number) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>((java.util.Vector<? extends ChronoLocalDate>) null);
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(3851.133, 0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 9999, (double) (-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      java.util.Vector<java.time.Month> vector0 = new java.util.Vector<java.time.Month>();
      xYSeries0.data = (List) vector0;
      java.time.Month month0 = java.time.Month.OCTOBER;
      vector0.add(month0);
      // Undeclared exception!
      try { 
        xYSeries0.add((-620.1533688192819), (double) (-9999));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, false, true);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      int int0 = xYSeries0.indexOf(float0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYSeries xYSeries0 = new XYSeries(float0, false, true);
      xYSeries0.add(0.0, (double) 0.0F);
      int int0 = xYSeries0.indexOf(float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      xYSeries0.add((Number) float0, (Number) float0, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, 1284.536996424, (-1714.758459665), 0.0, 0.0, 1284.536996424);
      Number number0 = oHLCDataItem0.getOpen();
      xYSeries0.add(number0, (Number) float0, true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      xYSeries0.add((Number) float0, (Number) float0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((Number) float0, (Number) float0, true);
      xYSeries0.update(float0, float0);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(float0, true, false);
      xYSeries0.add((double) 0.0F, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-833));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      xYSeries0.add((Number) 9999, (Number) 9999);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) 1900, (Number) 2);
      XYSeries xYSeries1 = xYSeries0.createCopy(120, 29);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      XYSeries xYSeries1 = new XYSeries(year0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      XYSeries xYSeries1 = new XYSeries(simpleTimePeriod0);
      XYSeries xYSeries2 = xYSeries1.createCopy(92, (-3538));
      boolean boolean0 = xYSeries2.equals(xYSeries0);
      assertTrue(xYSeries2.equals((Object)xYSeries1));
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries2.getMaximumItemCount());
      assertNotSame(xYSeries2, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-9999));
      xYSeries1.setMaximumItemCount(9999);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(9999, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      XYSeries xYSeries1 = new XYSeries(float0, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, (-9999));
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(283);
      XYSeries xYSeries0 = new XYSeries(integer0);
      boolean boolean0 = xYSeries0.equals(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.createCopy(5, (-1946));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) (-9999));
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Float float0 = new Float(0.8496513F);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      xYSeries0.add((Number) float0, (Number) null, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      ArrayList<List<Object>> arrayList0 = new ArrayList<List<Object>>();
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      arrayList0.add((List<Object>) vector0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.setMaximumItemCount(4);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      assertEquals(4, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(Double.NaN, Double.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Float float0 = new Float(0.8496513F);
      XYSeries xYSeries0 = new XYSeries(float0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Week week0 = new Week((-1804), 1818);
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.update(week0.LAST_WEEK_IN_YEAR, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 53
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.delete(100, (-455));
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.setMaximumItemCount(4);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(4, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) integer0);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add(Double.NaN, Double.NaN);
      xYSeries0.addOrUpdate(Double.NaN, Double.NaN);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((-655.5920624), (double) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (-5407.009236247218));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(0.0F);
      XYDataItem xYDataItem0 = new XYDataItem((Number) float0, (Number) float0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add((Number) float0, (Number) float0, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(1L, 1L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("l", false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-9999), 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((double) (-9999), 143.10928563, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("l", false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("l", false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
  }
}
