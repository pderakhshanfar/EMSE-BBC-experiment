/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 12:08:16 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.format.ResolverStyle;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.add((-0.7645113992042899), (-0.7645113992042899));
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.add((Number) bigInteger0, (Number) integer0);
      xYSeries0.add((-0.7645113992042899), (-0.7645113992042899), false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.setMaximumItemCount(1600);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1600, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add(20.372, (Number) bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.add((Number) bigInteger0, (Number) integer0, false);
      XYDataItem xYDataItem0 = new XYDataItem(integer0, bigInteger0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.update(integer0, bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false);
      Byte byte0 = new Byte((byte)55);
      XYDataItem xYDataItem0 = new XYDataItem((Number) byte0, (Number) byte0);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.addOrUpdate(1289.6658370224911, (double) 0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.updateByIndex(0, integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.remove((Number) bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Description", (-1));
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      xYSeries0.add((double) 0, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, true);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      Long long0 = Long.valueOf((long) 59);
      xYSeries0.add((double) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(long0);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((double) 0, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add(20.372, (Number) bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(2, xYSeries0.getItemCount());
      
      xYSeries0.getY(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false);
      Byte byte0 = new Byte((byte)55);
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((-3592.5866256225), (-3592.5866256225), false);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-3592.5866256225), xYDataItem0.getYValue(), 0.01);
      assertEquals((-3592.5866256225), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-434), (-434));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(31, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.addOrUpdate(0.0, (double) 59);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, false);
      xYSeries0.addOrUpdate(324.48391, (double) (-2720));
      xYSeries0.addOrUpdate(324.48391, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1613), bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-2686), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      Number number0 = xYTaskDataset0.getEndX((byte)3, (byte)60);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, number0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(3228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem[] xYDataItemArray0 = new XYDataItem[4];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      JList<XYDataItem> jList0 = new JList<XYDataItem>(xYDataItemArray0);
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      linkedList0.offer((ChronoLocalDate) null);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Stack<XYDataItem> stack0 = new Stack<XYDataItem>();
      JList<XYDataItem> jList0 = new JList<XYDataItem>(stack0);
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1883));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3171));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Day day0 = new Day(mockDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add((Integer) null);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(3454.160273, (-491.1807791910805));
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1442));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 2644L, 0.0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(586);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Description", (-1));
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(117, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-3625), 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(4915, 4915);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 711);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Integer) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      xYSeries0.add((Number) 0, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-663), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(priorityQueue0);
      arrayList0.add((Object) priorityQueue0);
      xYSeries0.data = (List) arrayList0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = xYSeries0.createCopy(1800, 59);
      xYSeries1.data = list0;
      Double double0 = new Double(59);
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) double0, (Number) double0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(29, 29);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      Object[][] objectArray0 = new Object[0][4];
      Object[] objectArray1 = new Object[1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      stack0.addElement(defaultTableModel0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 59, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      java.util.Vector<XYSeries> vector0 = new java.util.Vector<XYSeries>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(1289.6658370224911, Double.POSITIVE_INFINITY);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(Double.NaN, (-1516.770585031));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 2644L, 0.0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      java.util.Vector<Integer> vector0 = new java.util.Vector<Integer>();
      vector0.add(integer0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = Integer.getInteger("Description", (-1));
      XYSeries xYSeries0 = new XYSeries(integer0, true, false);
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) integer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      java.util.Vector<XYSeries> vector0 = new java.util.Vector<XYSeries>();
      vector0.add(xYSeries0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) integer0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      JList<XYSeries> jList0 = new JList<XYSeries>();
      List<XYSeries> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      java.util.Vector<ResolverStyle> vector0 = new java.util.Vector<ResolverStyle>();
      xYSeries0.data = (List) vector0;
      ResolverStyle resolverStyle0 = ResolverStyle.STRICT;
      vector0.add(resolverStyle0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.format.ResolverStyle cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      xYSeries0.add(0.0, (double) (-2746));
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) integer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(1.7976931348623157E308, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false);
      Byte byte0 = new Byte((byte)55);
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      assertFalse(xYSeries0.getAutoSort());
      
      int int0 = xYSeries0.indexOf((Number) null);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      int int0 = xYSeries0.indexOf(bigInteger0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-584L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((Number) 59, (Number) 0, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 59, (Number) 59);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) (-584L), Double.NEGATIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      XYSeries xYSeries0 = new XYSeries(japaneseDate0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-954));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.add((-0.7645113992042899), (-0.7645113992042899));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Stack<LinkedList<XYSeries>> stack0 = new Stack<LinkedList<XYSeries>>();
      LinkedList<XYSeries> linkedList0 = new LinkedList<XYSeries>();
      stack0.add(linkedList0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, true);
      xYSeries1.addOrUpdate(0.0, 0.0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1, xYSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = new XYSeries(bigInteger0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = new XYSeries(bigInteger0, false, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = new XYSeries(bigInteger0);
      xYSeries1.setMaximumItemCount(143);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(143, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(1291.3177425356, (-1061.780081123));
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, false);
      XYSeries xYSeries2 = (XYSeries)xYSeries1.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries2);
      assertTrue(xYSeries2.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries2.getMaximumItemCount());
      assertFalse(boolean0);
      assertNotSame(xYSeries2, xYSeries1);
      assertFalse(xYSeries2.getAutoSort());
      assertTrue(xYSeries2.equals((Object)xYSeries1));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getEnd();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals(date0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 2644L, (-0.6534941253115801));
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = new XYSeries(bigInteger0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.add((Number) bigInteger0, (Number) integer0, false);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-1592.808949));
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate(0.0, 1961.15);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate(320, 320, 320);
      Hour hour0 = new Hour(mockDate0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 23);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem(integer0, bigInteger0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(integer0, bigInteger0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add(0.0, (-2.147483648E9), true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.delete(1772, 0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-621L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem(1.0, (-6566.5705));
      xYSeries0.add(xYDataItem0, false);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.addOrUpdate((double) 60026181L, 2561.273);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 60026181L, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, false);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-621L), 2644L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2016));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 255, (double) 255);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add(0.0, (Number) integer0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((-3271.7286), (double) 59);
      xYSeries0.addOrUpdate((-3271.7286), (-2.418078164689584));
      assertEquals(1, xYSeries0.getItemCount());
  }
}
