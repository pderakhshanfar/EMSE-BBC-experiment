/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:22:26 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.add((-159.95488679), (-159.95488679));
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(9999, 2);
      xYSeries0.setMaximumItemCount(3);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(3, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, true);
      BigInteger bigInteger1 = BigInteger.ONE;
      xYSeries0.update(bigInteger0, bigInteger1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(1900, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1900
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem((-2055.9332), Double.NaN);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, true);
      xYSeries0.update(bigInteger0, bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 1, (Number) 0, false);
      xYSeries0.addOrUpdate((Number) 1900, (Number) 3);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 0, (Number) 2, false);
      xYSeries0.updateByIndex(0, 2);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.remove((Number) bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add(0.0, (-1015.5607829444), false);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1015.5607829444), xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short)2063);
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      xYSeries0.add((Number) short0, (Number) short0);
      xYSeries0.remove((Number) short0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer((-844));
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(0.0, 0.0, true);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      XYDataItem xYDataItem1 = xYSeries0.remove(3);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYDataItem1.equals((Object)xYDataItem0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.add(3966.98, 3966.98);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(3966.98, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(3966.98, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303, (-3119), 37);
      Year year0 = new Year(mockDate0);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.add((Number) (-9999), (Number) (-9999), false);
      xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 2, (Number) 1900, false);
      xYSeries0.add((Number) 2958465, (Number) 6, true);
      int int0 = xYSeries0.indexOf(2958465);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.addOrUpdate((Number) 59, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger1, false);
      Number number0 = xYSeries0.getY(2);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      assertEquals(3, xYSeries0.getItemCount());
      
      xYSeries0.getY(2);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 7, Integer.MAX_VALUE, 92);
      Week week0 = new Week(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(week0, (Number) null);
      XYSeries xYSeries0 = new XYSeries(timeSeriesDataItem0);
      xYSeries0.add((double) 1, (-1119.0));
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      xYSeries0.add((Number) 2958465, (Number) 3, true);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(3.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2958465.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((-2.147483648E9), (-2.147483648E9));
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-2.147483648E9), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Second second0 = new Second(mockDate0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 59);
      XYSeries xYSeries0 = new XYSeries(timeSeriesDataItem0, true);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-80L));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1663, (-7));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYDataItem0.setY((-444.4));
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, false);
      Float float0 = new Float((-513.329153951378));
      xYSeries0.addOrUpdate((Number) float0, (Number) bigInteger0);
      xYSeries0.addOrUpdate((Number) float0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, true, false);
      BigInteger bigInteger0 = BigInteger.valueOf((-165L));
      xYSeries0.addOrUpdate((Number) 0, (Number) bigInteger0);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, true, false);
      Float float0 = new Float(0.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) bigInteger0);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      MockDate mockDate0 = new MockDate((-80L));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((double) 3, (Number) bigInteger0);
      xYSeries0.addOrUpdate((double) 3, (double) (-80L));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-843), bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedHashSet<XYSeries> linkedHashSet0 = new LinkedHashSet<XYSeries>();
      ArrayList<XYSeries> arrayList0 = new ArrayList<XYSeries>(linkedHashSet0);
      xYSeries0.data = (List) arrayList0;
      arrayList0.add(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)2063);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-131));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      java.util.Vector<Integer> vector0 = new java.util.Vector<Integer>();
      xYSeries0.data = (List) vector0;
      vector0.addElement((Integer) hour0.LAST_HOUR_IN_DAY);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) hour0.LAST_HOUR_IN_DAY);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      DefaultListModel<Object> defaultListModel0 = new DefaultListModel<Object>();
      JList<Object> jList0 = new JList<Object>(defaultListModel0);
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-422));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1961));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("EcBT", true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.add((Object) bigInteger0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.math.BigInteger cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1012));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX((-23));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-33), (-33), 2958465);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1257));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1215);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2147483612, 2147483612, 2147483612, 2147483612, 2147483612, 92);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-3080));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2457), (-2457));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      xYSeries0.add((Number) 1, (Number) 9999, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 2, (Number) 1900, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-2473), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2381, (-130));
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      JList<Object> jList0 = new JList<Object>();
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      java.util.Vector<Locale.Category> vector0 = new java.util.Vector<Locale.Category>();
      JList<Object> jList0 = new JList<Object>(vector0);
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      Object[] objectArray0 = new Object[2];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1491);
      vector0.add(defaultTableModel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) (-2111), (double) (-2111));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Short short0 = new Short((short)2063);
      XYSeries xYSeries0 = new XYSeries(short0, true, true);
      xYSeries0.add((double) 7, (double) 92);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 7, 3692.5760846013);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem((double) (-2111), 1.5);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 7, Integer.MAX_VALUE, 92);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(29, 29);
      JList<XYDataItem> jList0 = new JList<XYDataItem>();
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.add((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 59, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((-814.5673905116583), (Number) 59, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.add((double) 59, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Object[] objectArray0 = new Object[4];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, 643.1065727524074, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      Stack<XYDataItem> stack0 = new Stack<XYDataItem>();
      DefaultComboBoxModel<XYDataItem> defaultComboBoxModel0 = new DefaultComboBoxModel<XYDataItem>(stack0);
      JList<XYDataItem> jList0 = new JList<XYDataItem>(defaultComboBoxModel0);
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(715.560988728722, 0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2381, (-130));
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.add(0.5, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 2958465, (Number) 6, true);
      int int0 = xYSeries0.indexOf(2958465);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add((Number) 2, (Number) 1900, false);
      int int0 = xYSeries0.indexOf(2958465);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) serialDate0.SUNDAY);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.add(3131.534816, 3131.534816, true);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 3
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Short short0 = new Short((short)2063);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) short0);
      XYSeries xYSeries0 = new XYSeries(short0, true, false);
      xYSeries0.add((Number) short0, (Number) short0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 7, Integer.MAX_VALUE, 92);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, 7, Integer.MAX_VALUE, 92);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(Integer.MAX_VALUE, 1132);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(Double.NaN, Double.NaN);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      XYSeries xYSeries1 = new XYSeries(xYDataItem0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(1L);
      Date date0 = Date.from(instant0);
      SerialDate serialDate0 = SerialDate.createInstance(date0);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      XYSeries xYSeries1 = new XYSeries(serialDate0, false, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1545), (-2861));
      xYSeries1.setMaximumItemCount(59);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(59, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      XYSeries xYSeries1 = new XYSeries(mockDate0, false, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      boolean boolean0 = xYSeries0.equals("y0iU\"?)r,?:<nE");
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1545), (-2861));
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((Number) 3, (Number) 0);
      xYSeries0.addOrUpdate((Number) 6, (Number) 3);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.delete(5, 0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 29, 29);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (double) 3);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.addOrUpdate(3217.478017862459, 3217.478017862459);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.add(3217.478017862459, (Number) integer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) minute0);
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      xYSeries0.add((Number) 59, (Number) 59);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) (-1297));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 29, 29);
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      xYSeries0.add((Number) 7, (Number) 1, true);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2303, (-3119), 37);
      Year year0 = new Year(mockDate0);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SerialDate serialDate0 = SerialDate.createInstance((Date) mockDate0);
      XYSeries xYSeries0 = new XYSeries(serialDate0, true);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(2, bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer((-844));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.getItems();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.add(3217.478017862459, (Number) integer0, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
  }
}
