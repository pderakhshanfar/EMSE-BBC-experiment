/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 15:22:40 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.RenderingHints;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Year;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Cmi@hjx_asJ>9tR\"C ", false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(1.0, (Number) null, false);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@]=]xEG&", true);
      XYSeries xYSeries1 = new XYSeries("@]=]xEG&", true);
      xYSeries1.setMaximumItemCount(2513);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(2513, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.add((Number) 0, (Number) null);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      xYSeries0.setMaximumItemCount(1);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3317L);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) 3317L, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 0, (Number) null);
      xYSeries0.update(0, (Number) null);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(34L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.addOrUpdate((double) 34L, 0.0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.update(integer0, integer0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.update(0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 2613);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.add((-1.0), (Number) integer0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, false);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.updateByIndex(0, integer0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Float float0 = new Float(0.0F);
      xYSeries0.add((Number) float0, (Number) float0, false);
      xYSeries0.remove((Number) float0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.add((Number) integer0, (Number) integer0, false);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.add((Number) 0, (Number) null);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, false);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 0, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(999, mockRandom0);
      xYSeries0.addOrUpdate((Number) 999, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) bigInteger0, (Number) 0);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.add((Number) 0, (Number) null);
      xYSeries0.getItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((double) 0, (Number) 999);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(999.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, 0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.getDataItem(0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@]8=cxEGy");
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(234, 234);
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy((-2116), (-2116));
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0);
      xYSeries0.createCopy(2, 2);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1397.1070849720218));
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((double) 0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add((double) 37, 0.0, false);
      xYSeries0.addOrUpdate((double) 37, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1953L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-544), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(999, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add("");
      // Undeclared exception!
      try { 
        xYSeries0.update(integer0, integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) 999);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>();
      DefaultComboBoxModel<ChronoLocalDate> defaultComboBoxModel0 = new DefaultComboBoxModel<ChronoLocalDate>(vector0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>(defaultComboBoxModel0);
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2837));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(29);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = xYSeries0.createCopy(199, 1);
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.remove((Number) 2958465);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>();
      DefaultComboBoxModel<ChronoLocalDate> defaultComboBoxModel0 = new DefaultComboBoxModel<ChronoLocalDate>(vector0);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>(defaultComboBoxModel0);
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-903));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3260L);
      Millisecond millisecond0 = new Millisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(182, 182, 1608, 203, 199);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(mockDate0, 0.0, 199, 199, Double.NEGATIVE_INFINITY, 203);
      XYSeries xYSeries0 = new XYSeries(oHLCDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Year year0 = new Year(3078);
      Month month0 = new Month(8, year0);
      XYSeries xYSeries0 = new XYSeries(month0, false, true);
      ArrayList<XYSeries> arrayList0 = new ArrayList<XYSeries>();
      xYSeries0.data = (List) arrayList0;
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(3078);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      LinkedList<XYDatasetTableModel> linkedList0 = new LinkedList<XYDatasetTableModel>();
      xYSeries0.data = (List) linkedList0;
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      ArrayList<RenderingHints.Key> arrayList0 = new ArrayList<RenderingHints.Key>();
      xYSeries0.data = (List) arrayList0;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      arrayList0.add((RenderingHints.Key) sunHints_Key0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // sun.awt.SunHints$Key cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1387), (-1387));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(181, 613);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(999, 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Unable to add cloned data item.", false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2435, 2435);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries1.data = (List) vector0;
      vector0.add((Object) xYSeries1);
      // Undeclared exception!
      try { 
        xYSeries1.createCopy(0, 2059);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add("");
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((double) 0L, (Number) bigInteger0, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      XYSeries xYSeries1 = new XYSeries("@]8=cxEGy", false, false);
      List list0 = xYSeries0.getItems();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      ArrayList<XYDatasetTableModel> arrayList0 = new ArrayList<XYDatasetTableModel>();
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      arrayList0.add(xYDatasetTableModel0);
      xYSeries0.data = (List) arrayList0;
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 999, (Number) bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDatasetTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      xYSeries0.data = null;
      Stack<XYDatasetTableModel> stack0 = new Stack<XYDatasetTableModel>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((Number) 0, (Number) 999);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = xYSeries0.createCopy((-1720), (-1720));
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate(4102.03984746, (double) (-1720));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(2399);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((-2543.929953870256), Double.NaN, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-2543.929953870256), (-1.0));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3317L);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries1 = new XYSeries("@]8=cxEGy", false, false);
      List list0 = xYSeries0.getItems();
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add("Null 'dataset' argument.");
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      xYSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) bigInteger0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@]=]xEG&", true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@]8=cxEGy");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      xYSeries0.data = (List) vector0;
      vector0.add("|+qf>ZQY");
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.add(Double.NaN, Double.NaN);
      Double double0 = new Double((-878.1861157588));
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (Number) double0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 999, (Number) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) 999);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 999, (Number) 999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, false);
      xYSeries0.add((double) 999, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 999, (double) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add(0.0, (Number) integer0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>(999, 1519);
      JList<ChronoLocalDate> jList0 = new JList<ChronoLocalDate>(vector0);
      List<ChronoLocalDate> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.addOrUpdate((double) 23, (double) 23);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) null);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) 4);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (-1.7976931348623157E308));
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3317L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(1219.79503, 0.0, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1397.1070849720218));
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((-1397.1070849720218), 4102.03984746, true);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add(0.0, 4102.03984746, false);
      xYSeries0.hashCode();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      XYSeries xYSeries1 = new XYSeries("", true);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.data = null;
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries1.setMaximumItemCount(999);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(999, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.next();
      XYSeries xYSeries1 = new XYSeries(regularTimePeriod0, false);
      XYSeries xYSeries2 = (XYSeries)xYSeries1.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries2);
      assertEquals(Integer.MAX_VALUE, xYSeries2.getMaximumItemCount());
      assertTrue(xYSeries2.getAllowDuplicateXValues());
      assertNotSame(xYSeries2, xYSeries1);
      assertFalse(boolean0);
      assertFalse(xYSeries2.getAutoSort());
      assertTrue(xYSeries2.equals((Object)xYSeries1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("WB}I>!'_V", true);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      boolean boolean0 = xYSeries0.equals(xYDataItem0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1720), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.add((Number) 0, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@]=gxEG&", false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1387), (-1387));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.delete(59, (-512));
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      byte[] byteArray0 = new byte[6];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) bigInteger0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries("@]8=cxEGy", true, false);
      xYSeries0.add(0.0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add(0.0, 4102.03984746, false);
      xYSeries0.add(0.0, 2.0, true);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      Float float0 = new Float((float) 0);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2837));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(29);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 2958465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Cmi@hjx_asJ>9tR\"C ", true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add(0.0, 4102.03984746, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 4102.03984746, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, false);
      xYSeries0.add(0.0, (double) 999);
      xYSeries0.addOrUpdate(0.0, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
