/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:09:05 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.Month;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalField;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((double) 0, (-1266.076));
      xYSeries0.add((Number) 1900, (Number) 2);
      xYSeries0.add((double) 0, (double) 1152);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, 0.0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Month month0 = Month.NOVEMBER;
      XYSeries xYSeries0 = new XYSeries(month0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.setMaximumItemCount(1209);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1209, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Week week0 = new Week(1016, 1016);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((Number) 1, (Number) 53);
      xYSeries0.add((double) 1, (double) 1016);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 1016);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 3, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-430.19F));
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      xYSeries0.addOrUpdate((-2540.0211248557), (-2540.0211248557));
      xYSeries0.addOrUpdate((-2540.0211248557), 0.0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week(1016, 1016);
      XYSeries xYSeries0 = new XYSeries(week0.FIRST_WEEK_IN_YEAR);
      xYSeries0.add((Number) 53, (Number) week0.LAST_WEEK_IN_YEAR);
      xYSeries0.add((-792.694888837), 1978.5065783294);
      xYSeries0.update(53, week0.FIRST_WEEK_IN_YEAR);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week(1016, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((Number) 1, (Number) 53);
      xYSeries0.addOrUpdate((-1.0), 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((Number) 1, (Number) 6);
      xYSeries0.add((double) 2, (-576.0));
      xYSeries0.add((double) 2, (double) 0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 929, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.RegularTimePeriod");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 929, (Number) 0);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 929, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.RegularTimePeriod");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.addOrUpdate((Number) 23, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 23);
      xYSeries0.add(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add(711.039896778, (-1266.076));
      xYSeries0.add((Number) 1900, (Number) 2);
      xYSeries0.addOrUpdate((Number) spreadsheetDate0.NEAREST, (Number) 1);
      xYSeries0.updateByIndex(2, 2);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Month month0 = Month.FEBRUARY;
      XYSeries xYSeries0 = new XYSeries(month0);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      xYSeries0.add(xYDataItem0, true);
      Double double0 = new Double(Double.NaN);
      xYSeries0.remove((Number) double0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Week week0 = new Week(980, 980);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.add((Number) 1, (Number) 53);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      Float float0 = new Float((double) (-317));
      xYSeries0.add((double) (-317), (Number) float0);
      xYSeries0.remove((Number) float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((double) 0, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((double) 0, (-1266.076));
      xYSeries0.add((double) 0, (double) 1152);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(1152.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((double) 23, (-1205.5238382831744));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1205.5238382831744), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      Float float0 = new Float((-843.2857F));
      xYSeries0.addOrUpdate((Number) float0, (Number) 4);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.add((-3208.092890213929), (-3208.092890213929), false);
      int int0 = xYSeries0.indexOf(bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.addOrUpdate((Number) 0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) 0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.addOrUpdate((double) 1, (-484.0));
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      arrayList0.add((ChronoLocalDate) null);
      xYSeries0.data = (List) arrayList0;
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Week week0 = new Week(1016, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((Number) 1, (Number) 53);
      xYSeries0.add((double) 1, (double) 1016);
      assertEquals(2, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      assertEquals(1016.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Fri Feb 14 20:21:21 GMT 2014", false, false);
      xYSeries0.add((double) 0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add(711.039896778, (-1266.076));
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(711.039896778, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1266.076), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.addOrUpdate((-2805.35877766027), (-2805.35877766027));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(3, 4);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Month month0 = Month.OCTOBER;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.addOrUpdate(353.8270791, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 353.8270791;
      xYSeries0.addOrUpdate((Number) doubleArray0[1], (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((Number) 0, (Number) 23);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Month month0 = Month.OCTOBER;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.addOrUpdate(353.8270791, (-3894.5));
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 353.8270791;
      xYSeries0.addOrUpdate((Number) doubleArray0[1], (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Year year0 = new Year(1152);
      org.jfree.data.time.Month month0 = new org.jfree.data.time.Month(2, year0);
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.addOrUpdate(0.0, (double) (-9999));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Month month0 = Month.FEBRUARY;
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      xYSeries0.addOrUpdate(1.0, 0.5);
      xYSeries0.addOrUpdate(1.0, 0.8);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-430.19F));
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-2848), float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("1QB>}~LP:D_#c3##G", true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.update(23, 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Month month0 = Month.APRIL;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.insertElementAt(defaultTableModel0, 0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      Stack<List<XYDataItem>> stack0 = new Stack<List<XYDataItem>>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1484));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 1807);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<LinkedList<TemporalField>> arrayList0 = new ArrayList<LinkedList<TemporalField>>();
      java.util.Vector<LinkedList<TemporalField>> vector0 = new java.util.Vector<LinkedList<TemporalField>>(arrayList0);
      xYSeries0.data = (List) vector0;
      LinkedList<TemporalField> linkedList0 = new LinkedList<TemporalField>();
      vector0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Week week0 = new Week(1016, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-166));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, (-1408));
      Byte byte0 = new Byte((byte)28);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.indexOf(byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY(2012);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 929, 0);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.getY(1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.LocalDate cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(2012);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-82), false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.LocalDate cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1018L));
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(mockDate0, mockDate0);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1150));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2269), 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week(1016, 0);
      XYSeries xYSeries0 = new XYSeries(week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-10013), (-3476));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(3, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.LocalDate cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@6[$+v1aK4RP*Avm9", false);
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      xYSeries0.data = (List) arrayList0;
      java.util.Vector<TemporalField> vector0 = new java.util.Vector<TemporalField>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      arrayList0.add(defaultTableModel0);
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) float0, (Number) float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((double) 0, (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(1016);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      xYSeries0.add((-593.64629), (-593.64629));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-593.64629), 753.823680250892);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(60);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      java.util.Vector<XYSeries> vector0 = new java.util.Vector<XYSeries>();
      vector0.add(xYSeries0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1, (-2203.7413204));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      xYSeries0.addOrUpdate(170.8447981543002, 1.5);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(170.8447981543002, (double) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem((Number) (byte) (-126), (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<LinkedList<TemporalField>> arrayList0 = new ArrayList<LinkedList<TemporalField>>();
      java.util.Vector<LinkedList<TemporalField>> vector0 = new java.util.Vector<LinkedList<TemporalField>>(arrayList0);
      xYSeries0.data = (List) vector0;
      LinkedList<TemporalField> linkedList0 = new LinkedList<TemporalField>();
      vector0.add(linkedList0);
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.add((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) float0, (Number) float0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      Byte byte0 = new Byte((byte) (-98));
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) byte0, (Number) 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-452L));
      arrayList0.add((ChronoLocalDate) localDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 23, (Number) 0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.add((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) float0, (Number) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 9999, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("1QB>}~LP:D_#c3##G", false);
      Byte byte0 = Byte.valueOf((byte)29);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Integer) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-430.19F));
      xYSeries0.add((double) (-430.19F), (Number) float0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-430.19F), (Number) float0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 23, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.insertElementAt(defaultTableModel0, 0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.addOrUpdate((-2816.980345345), (-2816.980345345));
      Integer integer0 = new Integer(335);
      // Undeclared exception!
      try { 
        xYSeries0.add((-2816.980345345), (Number) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add((Object) xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, (Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      xYSeries0.add(2.0, (-1420.687));
      // Undeclared exception!
      try { 
        xYSeries0.add(2.0, 967.389852, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, (double) 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((-1.0), (Number) bigInteger0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.0), (-2350.3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (-1265.6016880102013));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<LinkedList<TemporalField>> arrayList0 = new ArrayList<LinkedList<TemporalField>>();
      java.util.Vector<LinkedList<TemporalField>> vector0 = new java.util.Vector<LinkedList<TemporalField>>(arrayList0);
      xYSeries0.data = (List) vector0;
      LinkedList<TemporalField> linkedList0 = new LinkedList<TemporalField>();
      vector0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Week week0 = new Week(1016, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((Number) 1, (Number) 53);
      int int0 = xYSeries0.indexOf(1);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 929, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.RegularTimePeriod");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 929, (Number) 0);
      int int0 = xYSeries0.indexOf(0);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.add((double) (-430.19F), 0.0);
      XYDataItem xYDataItem0 = new XYDataItem((double) (-430.19F), 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-937.429));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add(Double.NaN, (Number) 0);
      xYSeries0.add((Number) 0, (Number) 23);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 23);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add(Double.NaN, (Number) 0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 23);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      Byte byte0 = new Byte((byte) (-98));
      xYSeries0.add((Number) byte0, (Number) 0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((double) 0, (-1266.076));
      xYSeries0.add((Number) 1900, (Number) 2);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      xYSeries0.data = (List) arrayList0;
      arrayList0.add((Object) xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      xYSeries1.addOrUpdate((double) 1, (-484.0));
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(1, xYSeries1.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("U/G1EeOg!(k{[E*^t", false);
      XYSeries xYSeries1 = new XYSeries("U/G1EeOg!(k{[E*^t", false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      XYSeries xYSeries1 = new XYSeries(spreadsheetDate0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      XYSeries xYSeries0 = new XYSeries(month0);
      XYSeries xYSeries1 = new XYSeries(month0);
      xYSeries1.setMaximumItemCount(32);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(32, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, (double) 1016);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      XYSeries xYSeries1 = new XYSeries(1);
      XYSeries xYSeries2 = (XYSeries)xYSeries1.clone();
      boolean boolean0 = xYSeries0.equals(xYSeries2);
      assertFalse(boolean0);
      assertTrue(xYSeries2.getAllowDuplicateXValues());
      assertTrue(xYSeries2.equals((Object)xYSeries1));
      assertEquals(Integer.MAX_VALUE, xYSeries2.getMaximumItemCount());
      assertNotSame(xYSeries2, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      boolean boolean0 = xYSeries0.equals(month0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("@6[$+v1aK4_2*Avm9", false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Month month0 = Month.AUGUST;
      XYSeries xYSeries0 = new XYSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-3452), (-3452));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((Number) 0, (Number) 23);
      xYSeries0.createCopy(60, 29);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(49, 49);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(boolean0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.addOrUpdate((Number) 1900, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Month month0 = Month.SEPTEMBER;
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.add((double) 1, (double) 1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((double) 0, (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      // Undeclared exception!
      try { 
        xYSeries0.update(1900, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1900
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((Number) 1, (Number) 6);
      assertEquals(1, xYSeries0.getItemCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.update(bigInteger0, 1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.add((Number) float0, (Number) float0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      xYSeries0.clear();
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Month month0 = Month.DECEMBER;
      XYSeries xYSeries0 = new XYSeries(month0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(306, 306);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 306, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 929, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("org.jfree.data.time.RegularTimePeriod");
      Hour hour0 = new Hour(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.delete(0, (-2097));
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.add((Number) float0, (Number) float0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(522.0, 2967.11349);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(522.0, 2967.11349);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, false);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 2);
      xYSeries0.add(xYDataItem0, false);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getDefault();
      Millisecond millisecond0 = new Millisecond(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(millisecond0, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("Null 'x' argument.", false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      Float float0 = new Float((-431.6976F));
      xYSeries0.add((Number) float0, (Number) float0);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-82), false);
      xYSeries0.getItems();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Month month0 = Month.MARCH;
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.remove(883);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(1152);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0);
      xYSeries0.add((double) 0, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }
}
