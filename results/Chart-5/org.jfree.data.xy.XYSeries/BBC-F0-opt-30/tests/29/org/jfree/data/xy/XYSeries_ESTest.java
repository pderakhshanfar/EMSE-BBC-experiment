/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 20:18:31 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Dialog;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import javax.swing.DefaultListModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(87);
      Date date0 = spreadsheetDate0.toDate();
      Quarter quarter0 = new Quarter(date0);
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.addOrUpdate((double) 0, (double) 1);
      xYSeries0.add((Number) 4, (Number) 7);
      xYSeries0.add(Double.NaN, (-1.7976931348623157E308));
      Short short0 = new Short((short)3242);
      XYDataItem xYDataItem0 = new XYDataItem((Number) short0, (Number) 1);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((-1.7976931348623157E308), 0.0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries(week0);
      xYSeries1.setMaximumItemCount(1377);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1377, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((Number) (-1836), (Number) 53);
      xYSeries0.add((double) 1, 2015.534);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 53, (double) 53);
      xYSeries0.add((Number) 1, (Number) 53, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1750.450885), 0.0);
      xYSeries0.add((Number) 1, (Number) 1, true);
      xYSeries0.update(1, 53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add(0.0, (double) 53);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 1, 2015.534);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2015.534, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 53, 1595.0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem1 = new XYDataItem((Number) integer0, (Number) integer0);
      xYSeries0.add(xYDataItem1);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 53, (-188.104974862369), false);
      Float float0 = new Float((-188.104974862369));
      xYSeries0.add(0.0, (Number) float0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-188.104974862369), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add(0.0, 0.0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 53, (-188.104974862369), false);
      xYSeries0.add((Number) 53, (Number) 1);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1048.856823984), 0.0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1048.856823984), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      xYSeries0.add((double) 1, 2015.534);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 1);
      xYSeries0.add(xYDataItem0);
      int int0 = xYSeries0.indexOf(1);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) bigInteger0, (Number) 1);
      xYSeries0.getX(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.add((Number) bigInteger0, (Number) 1);
      xYSeries0.getX(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 1, 2015.534);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add(0.0, (double) 53);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add(0.0, (double) 1);
      xYSeries0.add(447.6236, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockDate mockDate0 = new MockDate();
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(1.0, Double.NaN);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.add(Double.NaN, 0.0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.setNotify(false);
      xYSeries0.createCopy(1, 1);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(5473);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 29);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-1754), 1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) 1, (Number) integer0);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) 1, (Number) integer0);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      MatrixSeries matrixSeries0 = new MatrixSeries("", 1, 87);
      Number number0 = matrixSeries0.getItem(53);
      xYSeries0.add(number0, (Number) 1);
      xYSeries0.addOrUpdate(number0, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) 1);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add(554.7, (-1.7976931348623157E308));
      xYSeries0.addOrUpdate(554.7, (-1.7976931348623157E308));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add(0.0, (double) 53);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add((-1.0), 0.0);
      xYSeries0.addOrUpdate(Double.NaN, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      xYSeries0.data = (List) vector0;
      xYSeries0.addOrUpdate((-1753.9724209680044), 0.0);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 899);
      vector0.add(defaultTableModel0);
      Byte byte0 = new Byte((byte)72);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-9999), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(53, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      ArrayList<String> arrayList0 = new ArrayList<String>(set0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<ChronoLocalDate> vector0 = new java.util.Vector<ChronoLocalDate>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(vector0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<Integer> vector0 = new java.util.Vector<Integer>();
      xYSeries0.data = (List) vector0;
      vector0.add((Integer) week0.FIRST_WEEK_IN_YEAR);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate(Integer.MAX_VALUE, 4355, (-829), (-2849), Integer.MAX_VALUE, (-829));
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-1L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY(2260);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(30);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("U(iUuSH,;0>?(](", false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(2433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      Character character0 = new Character('A');
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(character0, (-2133));
      stack0.add((Object) keyStroke0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(30);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("U(iUuSH,;0>?(](", false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1529));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2389), 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(53, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      xYSeries0.data = (List) vector0;
      xYSeries0.addOrUpdate((-1751.0), 0.0);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 899);
      vector0.add(defaultTableModel0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.add((double) (-1268L), (Number) 4);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1754), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(14, 14);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      JList<XYDataItem> jList0 = new JList<XYDataItem>();
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((Number) 53, (Number) 53);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) week0.LAST_WEEK_IN_YEAR, (Number) 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate((Number) 1, (Number) week0.FIRST_WEEK_IN_YEAR);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week((-264), year0);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      DefaultListModel<XYDataItem> defaultListModel0 = new DefaultListModel<XYDataItem>();
      JList<XYDataItem> jList0 = new JList<XYDataItem>(defaultListModel0);
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1, 0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (double) 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 53, (double) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(1800);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      Short short0 = new Short((short)2);
      xYSeries0.add((Number) 53, (Number) short0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 53, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((Number) 53, (Number) 1, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      JList<XYDataItem> jList0 = new JList<XYDataItem>();
      List<XYDataItem> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      xYSeries0.data = (List) stack0;
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[1];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      stack0.add(defaultTableModel0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 23);
      TreeSet<Dialog.ModalExclusionType> treeSet0 = new TreeSet<Dialog.ModalExclusionType>((Comparator<? super Dialog.ModalExclusionType>) null);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.TOOLKIT_EXCLUDE;
      treeSet0.add(dialog_ModalExclusionType0);
      ArrayList<Dialog.ModalExclusionType> arrayList0 = new ArrayList<Dialog.ModalExclusionType>(treeSet0);
      xYSeries1.data = (List) arrayList0;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        xYSeries1.add((-1.0), (Number) bigInteger0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Enum
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2961, 0, 304, 556, 0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, 0.0);
      xYSeries0.add(xYDataItem0);
      Long long0 = new Long(556);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (Number) 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.add((Integer) 1);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(3109.7478931126284, (double) 53, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add(0.0, 0.0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (double) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      xYSeries0.data = (List) vector0;
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, 899);
      vector0.add(defaultTableModel0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 53, (double) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(30);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 3);
      xYSeries0.add(xYDataItem0);
      int int0 = xYSeries0.indexOf(1);
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 1);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.add(xYDataItem0);
      int int0 = xYSeries0.indexOf(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(273);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      xYSeries0.setMaximumItemCount(0);
      Long long0 = Long.valueOf(281L);
      xYSeries0.addOrUpdate((Number) long0, (Number) 6);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 1);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(30);
      XYDataItem xYDataItem0 = new XYDataItem(1.5, 0.5);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(273);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) (-1), (Number) 1);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(0.0, (-1.0), true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 4, (Number) 1);
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2621);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2958465, 0.0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(290);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1851));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 53, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 53, (Number) 53);
      Double double0 = new Double(0.0);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      Double double0 = new Double(0.0);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true);
      XYSeries xYSeries1 = new XYSeries(week0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.addOrUpdate((Number) 1, (Number) 53);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries(week0, true, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(273);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      XYSeries xYSeries1 = new XYSeries(serialDate0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 53);
      xYSeries1.setMaximumItemCount(53);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(53, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      XYSeries xYSeries1 = new XYSeries(mockDate0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 53);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeZone timeZone0 = TimeZone.getTimeZone("7!ZcS.JPbQU9'zC0#ix");
      Quarter quarter0 = new Quarter(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      boolean boolean0 = xYSeries0.equals(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      ArrayList<LinkedList<DefaultTableModel>> arrayList0 = new ArrayList<LinkedList<DefaultTableModel>>();
      xYSeries1.data = (List) arrayList0;
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      arrayList0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) 53, (Number) 53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true);
      xYSeries0.add((Number) 53, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 53);
      xYSeries0.add((Number) 1, (Number) null);
      Number number0 = xYSeries0.getY(1);
      assertNull(number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1268L));
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(273);
      XYSeries xYSeries0 = new XYSeries(serialDate0);
      // Undeclared exception!
      try { 
        xYSeries0.update(7, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 7
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((Number) 1, (Number) 1, true);
      xYSeries0.update(1, 53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((-305.84788), 0.0, false);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      Double double0 = new Double(0.0);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      xYSeries0.delete(1, 1);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((-305.84788), 0.0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((-305.84788), (Number) 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.add((-1.0), 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.0), (double) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week((-1836), (-1836));
      XYSeries xYSeries0 = new XYSeries(week0);
      XYDataItem xYDataItem0 = new XYDataItem(668.0, (double) 53);
      xYSeries0.add((Number) 53, (Number) 53);
      xYSeries0.add((double) 1, 2015.534);
      xYSeries0.add(xYDataItem0);
      xYSeries0.setMaximumItemCount(2);
      assertEquals(2, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate(0.0, (-142.6707767));
      XYDataItem xYDataItem0 = new XYDataItem((Number) 53, (Number) 53);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(0L, 0L);
      XYSeries xYSeries0 = new XYSeries(simpleTimePeriod0);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(30);
      XYSeries xYSeries0 = new XYSeries(serialDate0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      xYSeries0.add((double) 53, (double) 1);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 1);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.remove((Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate(Double.NaN, (-3762.16389677));
      xYSeries0.add(0.0, (-3762.16389677));
      xYSeries0.add((Number) 53, (Number) 53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.add((Number) 1, (Number) 1, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(2, xYSeries0.getItemCount());
      
      BigInteger bigInteger0 = BigInteger.valueOf(1);
      xYSeries0.updateByIndex(1, bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 53, (-188.104974862369), false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
  }
}
