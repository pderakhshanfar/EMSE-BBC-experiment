/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:07:21 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JRadioButton;
import javax.swing.TransferHandler;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SubSeriesDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((Number) 4, (Number) 1);
      xYSeries0.add((double) 4, (double) 4, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.add((double) 1, (Number) 4);
      xYSeries0.add(0.0, (double) 1, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("2\"$a\"*x$][", true);
      XYSeries xYSeries1 = xYSeries0.createCopy(2843, Integer.MAX_VALUE);
      xYSeries0.setMaximumItemCount(3745);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(3745, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("2\"$a\"*x$][", true);
      xYSeries0.add((-1325.808), 0.8, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((-1298.9553281805602), (-1.0));
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1805.873462873));
      xYSeries0.addOrUpdate(1.0, 2403.1260126352);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate(0.0, (-1805.873462873));
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2958465, "7HNbTr#[-==~l+'k#", 0, 0, 0, 0, 2958465, 0, 0, 2, 2958465);
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(1, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      xYSeries0.update(1, 53);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Week week0 = new Week((-4), (-4));
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      xYSeries0.add((Number) 4, (Number) 1);
      stack0.add((Integer) 4);
      assertEquals("[[4.0, 1.0], 4]", stack0.toString());
      
      xYSeries0.add((double) 4, (Number) 4);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.add(0.8, (Number) 23);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      xYSeries0.add((-1325.808), 0.8, true);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      xYSeries0.add(Double.NaN, (Number) integer0);
      xYSeries0.add(0.0, (Number) 0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      Number number0 = xYSeries0.getY(1);
      assertEquals(1, number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((Number) 4, (Number) 4);
      xYSeries0.addOrUpdate((Number) 1, (Number) 4);
      Number number0 = xYSeries0.getX(1);
      assertEquals(4, number0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, false);
      xYSeries0.add((Number) 1, (Number) 1, false);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      xYSeries0.add((-1055.86468660873), (double) 60L, true);
      xYSeries0.updateByIndex(0, 999);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-687), minute0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.addOrUpdate((Number) 59, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 59);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) integer0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove((Number) 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((double) (-9999), (-2848.155954), false);
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) (-9999));
      assertEquals((-2848.155954), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      xYSeries0.addOrUpdate((-1.0), (-1.0));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true);
      xYSeries0.add((double) 4, (double) 1, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 4);
      xYSeries0.add(xYDataItem0, true);
      XYDataItem xYDataItem1 = xYSeries0.remove(1);
      assertEquals(4.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      xYSeries0.add(2796.0, (Number) integer0);
      xYSeries0.add((Number) integer0, (Number) integer0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 29, 29);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      XYDataItem xYDataItem0 = new XYDataItem((-1.7976931348623157E308), (double) 1);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate(426.2572330653464, (-1.0));
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(1);
      assertEquals(426.2572330653464, xYDataItem1.getXValue(), 0.01);
      assertEquals((-1.0), xYDataItem1.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false, true);
      xYSeries0.add((-2720.04088453), (double) 1392409281320L);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(1.39240928132E12, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-2720.04088453), xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2958465, "7HNbTr#[-==~l+'k#", 0, 0, 0, 0, 2958465, 0, 0, 2, 2958465);
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-9999), (-4));
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(2263, 999);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Week week0 = new Week(16, 16);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.addOrUpdate((double) 53, (double) 53);
      xYSeries0.addOrUpdate((Number) 53, (Number) 53);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (-1006.60138703754));
      xYSeries0.addOrUpdate((Number) 23, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 1);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((double) 4, (double) 4);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      XYDataItem xYDataItem0 = new XYDataItem(2.0, 0.0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate(2.0, 3188.99630340803);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) (-5000), (double) (-5000));
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((double) (-5000), (double) (-5000));
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte)37, false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-3637), (byte)87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Week week0 = new Week(63, 23);
      XYSeries xYSeries0 = new XYSeries(week0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(23, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(4, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2344L));
      TimeZone timeZone0 = TimeZone.getDefault();
      Second second0 = new Second(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0);
      BigInteger bigInteger0 = BigInteger.TEN;
      java.util.Vector<Locale> vector0 = new java.util.Vector<Locale>();
      xYSeries0.data = (List) vector0;
      Locale locale0 = Locale.KOREAN;
      vector0.add(locale0);
      // Undeclared exception!
      try { 
        xYSeries0.update(bigInteger0, bigInteger0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      stack0.add((Integer) 4);
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(2996);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      LinkedList<SubSeriesDataset> linkedList0 = new LinkedList<SubSeriesDataset>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true, true);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      xYSeries0.data = (List) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.add(defaultTableModel0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-1791L));
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1137));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      Action action0 = TransferHandler.getCopyAction();
      JRadioButton jRadioButton0 = new JRadioButton(action0);
      vector0.add((Object) jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JRadioButton cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("2\"$a\"*x$][", true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("2\"$a\"*x$][", true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      ArrayList<JRadioButton> arrayList0 = new ArrayList<JRadioButton>();
      xYSeries0.data = (List) arrayList0;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      JRadioButton jRadioButton0 = new JRadioButton(icon0);
      arrayList0.add(jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0L);
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.from(localDate0);
      linkedList0.add((ChronoLocalDate) thaiBuddhistDate0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long((-1791L));
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY(152);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MockDate mockDate0 = new MockDate(29, 29, 29);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-2714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1286));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      Action action0 = TransferHandler.getCopyAction();
      JRadioButton jRadioButton0 = new JRadioButton(action0);
      vector0.add((Object) jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1358));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-63), false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.delete((byte)107, (byte)107);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long((-1791L));
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete(213, 213);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1061), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long((-1791L));
      XYDataItem xYDataItem0 = new XYDataItem((Number) long0, (Number) long0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      Action action0 = TransferHandler.getCopyAction();
      JRadioButton jRadioButton0 = new JRadioButton(action0);
      vector0.add((Object) jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 2959);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JRadioButton cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      xYSeries0.add((double) 60L, 0.8, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-524), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      JRadioButton jRadioButton0 = new JRadioButton();
      vector0.add((Object) jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 1, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Stack<Locale> stack0 = new Stack<Locale>();
      xYSeries0.data = (List) stack0;
      xYSeries0.add((double) 4, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 4);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      String[] stringArray0 = new String[2];
      JList<String> jList0 = new JList<String>(stringArray0);
      List<String> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1, 1.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 1, (double) 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      xYSeries0.add((-1325.808), (-1325.808), false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1325.808), (-738.33307));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Week week0 = new Week((-4), (-4));
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      LinkedList<JRadioButton> linkedList0 = new LinkedList<JRadioButton>();
      xYSeries0.data = (List) linkedList0;
      JRadioButton jRadioButton0 = new JRadioButton((Action) null);
      linkedList0.add(jRadioButton0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-88.176), 937.6557);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JRadioButton cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      xYSeries0.add((-1325.808), (-1325.808), false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1325.808), (-738.33307));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 4);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true, true);
      String[] stringArray0 = new String[2];
      JList<String> jList0 = new JList<String>(stringArray0);
      List<String> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Year year0 = new Year();
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, 0.2395692324238549);
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Week week0 = new Week((-12), (-12));
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.addOrUpdate(Double.NaN, (double) 53);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      stack0.add((Integer) 4);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 4, (Number) 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      JList<String> jList0 = new JList<String>();
      List<String> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) 4, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 4, (Number) 4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      stack0.add(xYSeries0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) 4, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Week week0 = new Week(1, 1);
      XYSeries xYSeries0 = new XYSeries(week0, true, false);
      xYSeries0.addOrUpdate((Number) 53, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(745.1868721669026, 745.1868721669026);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      String[] stringArray0 = new String[3];
      JList<String> jList0 = new JList<String>(stringArray0);
      List<String> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-480.9718550061), (Number) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Week week0 = new Week((-4), (-4));
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      LinkedList<JRadioButton> linkedList0 = new LinkedList<JRadioButton>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((JRadioButton) null);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Week week0 = new Week((-4), (-4));
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      LinkedList<JRadioButton> linkedList0 = new LinkedList<JRadioButton>();
      Action action0 = TransferHandler.getPasteAction();
      JRadioButton jRadioButton0 = new JRadioButton(action0);
      linkedList0.add(jRadioButton0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (Number) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JRadioButton cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0.0, (-1805.873462873));
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 4, (double) 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      Integer integer0 = Integer.valueOf((-915));
      stack0.add(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add((-1325.808), (-1325.808), false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((double) 0, Double.NaN);
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (-1006.60138703754));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 1, (-2031.313991953));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.indexOf(integer0);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      xYSeries0.add((double) 60L, (double) 60L, false);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 4, (Number) 4);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Month month0 = new Month();
      XYSeries xYSeries0 = new XYSeries(month0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((-512.959488), (-512.959488));
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, 0.2395692324238549);
      xYSeries0.add(xYDataItem0, false);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((double) 1, (Number) 1, true);
      xYSeries0.add((-2848.155954), (-1759.627745697709), false);
      XYDataItem xYDataItem0 = new XYDataItem((-2848.155954), (double) 9999);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, (double) 4);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(46L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-687), minute0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((Number) 4, (Number) 1);
      xYSeries0.add((double) 4, (double) 4, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      XYSeries xYSeries1 = xYSeries0.createCopy(59, 59);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries0.addOrUpdate(Double.NaN, 0.8);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      XYSeries xYSeries1 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      XYSeries xYSeries1 = new XYSeries(integer0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 4);
      xYSeries1.setMaximumItemCount(1);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      Date date0 = fixedMillisecond0.getEnd();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(322);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Hour hour0 = new Hour(date0, timeZone0);
      XYSeries xYSeries1 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      boolean boolean0 = xYSeries0.equals(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1, 4);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(121, day0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-2253), (-353));
      Stack<String> stack0 = new Stack<String>();
      xYSeries1.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries1.setMaximumItemCount((-2253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Week week0 = new Week((-4), (-4));
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((double) 1, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((Number) 4, (Number) 1);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 1);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(1);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.addOrUpdate((Number) 4, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 4, (Number) 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, false);
      Long long0 = new Long((-2718L));
      xYSeries0.add((Number) long0, (Number) long0);
      xYSeries0.addOrUpdate((Number) long0, (Number) long0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("");
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(1, 53);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((Number) 0, (Number) 23);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      XYSeries xYSeries0 = new XYSeries(integer0, true);
      xYSeries0.clear();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte)37, false, true);
      xYSeries0.delete((byte)37, (-94));
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 4, (double) 1);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 4, (Number) 1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, false);
      xYSeries0.addOrUpdate((double) 1, (double) 4);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 1, (Number) 4, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2064L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      xYSeries0.add((double) 60L, 0.8, false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(121, day0);
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2253));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true, true);
      xYSeries0.setMaximumItemCount(1);
      XYDataItem xYDataItem0 = new XYDataItem((double) 1, (double) 4);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(60L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-687), minute0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      xYSeries0.add((Number) 4, (Number) 1);
      xYSeries0.add((double) 4, (double) 4, false);
      xYSeries0.createCopy(1, 1);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte)37, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-3637), (byte)87);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second((-687), minute0);
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-63), false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) (byte)0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte)37, false, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
  }
}
