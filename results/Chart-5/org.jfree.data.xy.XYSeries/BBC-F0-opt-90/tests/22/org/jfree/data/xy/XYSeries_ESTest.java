/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 19:41:02 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Clock;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.plaf.synth.SynthProgressBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 59, (double) 59);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((double) 29, (-1065.640099));
      xYSeries0.add((double) (-430), (Number) 59, false);
      xYSeries0.add((Number) 0, (Number) 0, false);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)10, (double) (byte)10);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.addOrUpdate(2830.7379, (-535.99727));
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false, false);
      xYSeries0.setMaximumItemCount((byte)10);
      XYSeries xYSeries1 = new XYSeries(byte0);
      Object object0 = xYSeries0.clone();
      boolean boolean0 = xYSeries1.equals(object0);
      assertEquals(10, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)10, (double) (byte)10);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, (byte)10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.setMaximumItemCount((byte)2);
      xYSeries0.add(1.7976931348623157E308, (-7.910245169));
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      XYSeries xYSeries0 = new XYSeries(byte0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)0, (double) (byte)0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) byte0, (Number) integer0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2493L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Float float0 = new Float((-2.147483648E9));
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      xYSeries0.update(float0, integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.add(Double.NaN, (double) (byte)10);
      assertFalse(xYSeries0.getAutoSort());
      
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      xYSeries0.update(byte0, byte0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockDate mockDate0 = new MockDate(435, 435, 2691, 19, 0);
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, 1.7976931348623157E308);
      xYSeries0.add(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockDate mockDate0 = new MockDate(435, 435, 2691, 0, 0);
      XYSeries xYSeries0 = new XYSeries(mockDate0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, 4075.7585785198);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      xYSeries0.add((-140.4988), (Number) byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 2777, (-4878.164));
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.add((-1.7976931348623157E308), 0.0, true);
      xYSeries0.updateByIndex(0, byte0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2493L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Float float0 = new Float((double) 0);
      xYSeries0.add((Number) float0, (Number) float0);
      xYSeries0.remove((Number) float0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      Date date0 = fixedMillisecond0.getStart();
      XYSeries xYSeries0 = new XYSeries(date0, true, true);
      Byte byte0 = new Byte((byte) (-18));
      xYSeries0.add((Number) byte0, (Number) byte0, false);
      xYSeries0.remove((Number) byte0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add(0.0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MockDate mockDate0 = new MockDate(738, (-2519), (-2519), 738, 866, (-2519));
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, true);
      xYSeries0.add((Number) 1, (Number) 4, false);
      XYDataItem xYDataItem0 = new XYDataItem(324.23008770502, (double) 738);
      xYSeries0.add(xYDataItem0, true);
      XYDataItem xYDataItem1 = xYSeries0.remove(1);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(738.0, xYDataItem1.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-18));
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      xYSeries0.add((double) (byte) (-18), (double) (byte) (-18));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals((-18.0), xYDataItem0.getXValue(), 0.01);
      assertEquals((-18.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      xYSeries0.add((-140.4988), (Number) byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)19, (-4878.164));
      xYSeries0.add(xYDataItem0, false);
      int int0 = xYSeries0.indexOf(byte0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      Byte byte0 = new Byte((byte)72);
      xYSeries0.addOrUpdate((Number) byte0, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(number0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) 0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.add((Number) bigInteger0, (Number) 0, true);
      xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.add((double) (byte)10, 0.0);
      xYSeries0.getItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)10, (double) (byte)10);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((double) (byte)10, (double) (byte)10);
      assertEquals(3, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem1 = xYSeries0.getDataItem(2);
      assertNotSame(xYDataItem1, xYDataItem0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      Byte byte0 = new Byte((byte) (-18));
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false, true);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(2777, Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2413), 0, (-2413));
      Month month0 = new Month(mockDate0);
      XYSeries xYSeries0 = new XYSeries(month0, true, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, (-803));
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false, false);
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Byte byte0 = new Byte((byte) (-11));
      xYSeries0.add((Number) byte0, (Number) byte0, false);
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.addOrUpdate((-1914.5460623447468), (-1914.5460623447468));
      xYSeries0.addOrUpdate((-1914.5460623447468), 969.163928391075);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Week week0 = new Week(1998, (-131));
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1394, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-548), byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(byte0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-18));
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) 59);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.update(0, 59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("o`%rKv");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2493L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-2382));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("~ BH:");
      Stack<Object> stack0 = new Stack<Object>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-1348));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-121));
      XYSeries xYSeries0 = new XYSeries(byte0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) xYSeries0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((int) (byte) (-18));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-2493L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("o`%rKv");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-71));
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) second0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Second cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY((-3091));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-21));
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-103));
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("o`%rKv");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Minute minute0 = new Minute();
      Second second0 = new Second(1805, minute0);
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1348), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(999, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<ChronoUnit> vector0 = new java.util.Vector<ChronoUnit>();
      ChronoUnit chronoUnit0 = ChronoUnit.YEARS;
      vector0.add(chronoUnit0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.temporal.ChronoUnit cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      xYSeries0.add((-140.4988), (Number) byte0, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-3739), 2777);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      try { 
        xYSeries0.clone();
        fail("Expecting exception: CloneNotSupportedException");
      
      } catch(CloneNotSupportedException e) {
         //
         // Failed to clone.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0);
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) byte0, (Number) byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      ArrayList<ChronoLocalDate> arrayList0 = new ArrayList<ChronoLocalDate>();
      Clock clock0 = MockClock.systemDefaultZone();
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      arrayList0.add((ChronoLocalDate) hijrahDate0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.chrono.ChronoLocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<SynthProgressBarUI> vector0 = new java.util.Vector<SynthProgressBarUI>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add((Number) 0, (Number) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0, true, true);
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((-212.8139), (double) (byte)16);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-885.542259541), (double) 59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0, false);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      vector0.add((Object) millisecond0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, 0.0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.time.Millisecond cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<SynthProgressBarUI> vector0 = new java.util.Vector<SynthProgressBarUI>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add((Number) 0, (Number) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, 2266.0695);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0, true, true);
      xYSeries1.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((-212.8139), (double) (byte) (-18));
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)10, (double) (byte)10);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem(2721.107992782, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0, true, false);
      xYSeries0.add((double) (byte)2, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) byte0, (Number) byte0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      Byte byte0 = new Byte((byte) (-11));
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) byte0, (Number) byte0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<SynthProgressBarUI> vector0 = new java.util.Vector<SynthProgressBarUI>();
      SynthProgressBarUI synthProgressBarUI0 = new SynthProgressBarUI();
      vector0.add(synthProgressBarUI0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 59, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Byte byte0 = new Byte((byte) (-18));
      xYSeries0.add((Number) byte0, (Number) byte0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) byte0, (Number) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      JList<Integer> jList0 = new JList<Integer>();
      List<Integer> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 59, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 59, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<Integer> vector0 = new java.util.Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      List<Integer> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-292.7728572861185), (Number) 0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(1763.383528, (Number) byte0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.add((double) 59, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>();
      JList<Integer> jList0 = new JList<Integer>(defaultComboBoxModel0);
      List<Integer> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add(Double.NaN, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(217.4437776, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Object) xYSeries0.data);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) 59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (byte)10, (double) (byte)10, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("o`%rKv");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-2913.1979057), 854.608, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      xYSeries0.add((double) (byte)65, (Number) null, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (byte)65, (double) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 41684L, (-1.0));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (byte)2, (double) (byte) (-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      Integer integer0 = new Integer((byte)10);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.addOrUpdate((Number) integer0, (Number) bigInteger0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-68));
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      xYSeries0.add((double) (byte) (-68), (Number) byte0, false);
      int int0 = xYSeries0.indexOf(byte0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((Number) 0, (Number) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0.LAST_HOUR_IN_DAY, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((-1054.02), 2530.296176852539);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true, false);
      xYSeries0.add((Number) byte0, (Number) byte0, true);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) (byte)10, Double.NaN);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) 0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getY(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-103));
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, true);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)10, (double) (byte)10);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      Byte byte0 = new Byte((byte)72);
      xYSeries0.add((Number) byte0, (Number) null, false);
      xYSeries0.hashCode();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(738, (-2519), (-2519), 738, 866, (-2519));
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, true);
      xYSeries0.add((Number) 1, (Number) 4, false);
      XYSeries xYSeries1 = new XYSeries(mockDate0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(3666L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      XYSeries xYSeries1 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertFalse(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      Day day0 = new Day(mockDate0);
      XYSeries xYSeries0 = new XYSeries(day0, false);
      XYSeries xYSeries1 = new XYSeries(day0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 59);
      xYSeries1.setMaximumItemCount(59);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(59, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Byte byte0 = new Byte((byte)1);
      XYSeries xYSeries1 = new XYSeries(byte0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 59);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      XYDataItem xYDataItem0 = new XYDataItem((-1386.219843098), 0.0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, true);
      Byte byte0 = new Byte((byte)72);
      xYSeries0.add((Number) byte0, (Number) null, false);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      XYSeries xYSeries0 = new XYSeries(byte0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)0, (double) (byte)0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((Number) 0, (Number) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, 2266.0695);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2519), (-2519), (-2519), (-2519), 866, (-2519));
      XYSeries xYSeries0 = new XYSeries(mockDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-103));
      xYSeries0.add((double) (byte) (-103), (Number) (byte) (-103), false);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries((byte) (-103));
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1348), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      xYSeries0.setMaximumItemCount((byte)2);
      XYDataItem xYDataItem0 = new XYDataItem((double) (byte)2, (double) (byte)2);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(897.17496074, (double) 0);
      xYSeries0.add(897.17496074, 897.17496074);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      XYDataItem xYDataItem0 = new XYDataItem((-3333.723), (double) (byte)10);
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      xYSeries0.add((Number) 59, (Number) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 59, (Number) 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 59);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      XYSeries xYSeries0 = new XYSeries(byte0);
      xYSeries0.setMaximumItemCount((byte)2);
      xYSeries0.add(1.0, 0.0);
      xYSeries0.add(1.7976931348623157E308, (-7.910245169));
      xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertEquals(2, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(999L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      XYSeries xYSeries0 = new XYSeries(byte0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Week week0 = new Week(1998, (-131));
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(1394, 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1394, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, false);
      Byte byte0 = new Byte((byte)72);
      xYSeries0.add((Number) byte0, (Number) null, false);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }
}
