/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 11:07:50 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((double) 0, (Number) 0, true);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.add((-1.0), (-3653.80799), true);
      xYSeries0.add((double) 59, 0.0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1.0), (-1.0));
      xYSeries0.add(0.0, 2858.029189, false);
      xYSeries0.add(2858.029189, (Number) 53, false);
      xYSeries0.add((-1.0), 0.0);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1150, 59);
      xYSeries1.setMaximumItemCount(0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(0, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1.0), (-1.0));
      xYSeries0.add(0.0, 2858.029189, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((double) 1, (double) 1);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.add((double) 59, 0.0);
      xYSeries0.update(59, 59);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add(0.0, (Number) 0, true);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add(Double.NaN, (Number) 0, true);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.add((double) 0, (Number) 59);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.add((double) 59, 0.0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((double) 1, (double) 1);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.updateByIndex(0, 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((double) 0, (-2241.59448758));
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-2241.59448758), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      xYSeries0.add(0.0, 0.0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.addOrUpdate((Number) 1, (Number) 53);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 1);
      assertEquals(53.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add(1.0, (-1.0));
      xYSeries0.add((-2528.08825836261), (Number) 0, false);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1.0), xYDataItem0.getYValue(), 0.01);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1.0), (-1.0));
      xYSeries0.add(0.0, 2858.029189, false);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2858.029189, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-1.0), (-657.86));
      xYSeries0.add((-1.0), 0.0, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals((-1.0), xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 59, (Number) integer0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      MockRandom mockRandom0 = new MockRandom(0L);
      BigInteger bigInteger0 = new BigInteger(23, mockRandom0);
      xYSeries0.add((-2835.30752942397), (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      BigInteger bigInteger0 = BigInteger.ONE;
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) 0);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-220.0451125), (Number) 0, false);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((double) 0, (Number) integer0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-30000.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 0, (Number) hour0.LAST_HOUR_IN_DAY);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.addOrUpdate((double) 59, (double) 59);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(59.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(59.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockDate mockDate0 = new MockDate(45, 45, 0, 0, 0, 0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      xYSeries0.addOrUpdate((double) (-2324), Double.NaN);
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals((-2324.0), xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-1L));
      Date date0 = Date.from(instant0);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Second second0 = new Second(date0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", false, true);
      xYSeries0.getAllowDuplicateXValues();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1024, 0);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy((-2525), 1150);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add(29.218453568458926, 29.218453568458926);
      xYSeries0.add(0.0, 2874.942072579206, false);
      xYSeries0.createCopy(1, 1);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(335, (-414));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((double) 0, (-2911.6460907344826));
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add((double) 0, (Number) integer0);
      xYSeries0.addOrUpdate((double) 0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.addOrUpdate((double) 23, (double) 23);
      xYSeries0.addOrUpdate((double) 23, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((-4405.249), (Number) 0);
      xYSeries0.addOrUpdate((-4405.249), 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(23, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Integer) hour0.LAST_HOUR_IN_DAY);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(45, 0, 0, 0, 0, 0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((byte) (-48), 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(23, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      stack0.add(locale_Category0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Locale$Category cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(1629);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1629, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      xYSeries0.data = (List) stack0;
      stack0.add(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY(855);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY((byte) (-76));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MockDate mockDate0 = new MockDate(38, 38, 38, 1242, 567, 0);
      Week week0 = new Week(mockDate0);
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Week week0 = new Week(1374, 1374);
      XYSeries xYSeries0 = new XYSeries(week0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((byte)31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      linkedList0.add((Object) localDate0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.LocalDate cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-374), 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.add((Number) 0, (Number) 59, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-3712), (-414));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(1642, 23);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year((-1021));
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = xYSeries0.createCopy((-1), 45);
      xYSeries1.data = list0;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) 9999, (Number) 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 0);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.addOrUpdate((Number) 23, (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      xYSeries0.data = (List) stack0;
      stack0.add(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      xYSeries0.data = (List) stack0;
      xYSeries0.add((double) 0, (double) 59, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      ArrayList<DefaultTableModel> arrayList0 = new ArrayList<DefaultTableModel>();
      xYSeries0.data = (List) arrayList0;
      java.util.Vector<XYDataItem> vector0 = new java.util.Vector<XYDataItem>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      arrayList0.add(defaultTableModel0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 23, (double) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      Stack<KeyStroke> stack0 = new Stack<KeyStroke>();
      xYSeries0.data = (List) stack0;
      xYSeries0.addOrUpdate(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (-2026.4032694478562));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem(3149.85013603, 622.270473);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Week week0 = new Week();
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.add((Number) 53, (Number) 53, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 53, (Number) 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 0, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate(45, 45, 0, 0, 0, 0);
      Minute minute0 = new Minute(mockDate0);
      XYSeries xYSeries0 = new XYSeries(minute0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      ArrayList<KeyStroke> arrayList0 = new ArrayList<KeyStroke>();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-2394), (-654), true);
      arrayList0.add(keyStroke0);
      xYSeries0.data = (List) arrayList0;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 0, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Week week0 = new Week(1374, 1374);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(3805.07114040214, (Number) 53, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 0, (Number) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1638.8), (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      linkedList0.add((Object) localDate0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, (Number) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.time.chrono.ChronoLocalDate
         //
         verifyException("java.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0.FIRST_HOUR_IN_DAY, false, false);
      xYSeries0.add(0.0, Double.NaN);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, 0.0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Week week0 = new Week(1374, 1374);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(3805.07114040214, (-1117.0206962734085), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true, true);
      Stack<XYSeries> stack0 = new Stack<XYSeries>();
      xYSeries0.data = (List) stack0;
      stack0.add(xYSeries0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (double) 59, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.add((double) 0, (double) 59);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, 17.563776);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      XYSeries xYSeries0 = new XYSeries(mockDate0, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.addOrUpdate((Number) 59, (Number) 59);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Double double0 = new Double(0);
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.add(0.0, (Number) double0, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) double0, (Number) integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) integer0);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-692));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-374));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      xYSeries0.add((-1.0), (-1.0));
      xYSeries0.add(0.0, 2858.029189, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Integer) hour0.LAST_HOUR_IN_DAY);
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Week week0 = new Week(1374, 1374);
      XYSeries xYSeries0 = new XYSeries(week0);
      Object object0 = xYSeries0.clone();
      assertTrue(object0.equals((Object)xYSeries0));
      
      xYSeries0.add((double) (-1), (Number) (byte)31);
      boolean boolean0 = xYSeries0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries(week0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      XYSeries xYSeries1 = new XYSeries(week0);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.setMaximumItemCount(783);
      XYSeries xYSeries1 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(783, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      XYSeries xYSeries1 = new XYSeries((byte)31, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Week week0 = new Week(24, 24);
      XYSeries xYSeries0 = new XYSeries(week0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, Double.NEGATIVE_INFINITY);
      boolean boolean0 = xYSeries0.equals(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      Object[] objectArray0 = new Object[7];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 4);
      vector0.add((Object) defaultTableModel0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 13);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((double) 23, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      xYSeries0.addOrUpdate(0.0, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, (-2026.4032694478562));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((double) 0, (Number) 0, true);
      assertTrue(xYSeries0.getAutoSort());
      
      xYSeries0.update(0, second0.FIRST_SECOND_IN_MINUTE);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Year year0 = new Year((-1021));
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((Number) 9999, (Number) (-9999), false);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Year year0 = new Year((-1021));
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-374), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Year year0 = new Year((-1021));
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.delete(9999, (-9999));
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.setMaximumItemCount(0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 23, (double) 0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((Number) 23, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 23, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((double) 23, 908.423976657);
      xYSeries0.add(590.890710928, 908.423976657);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 23, (Number) 0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 23);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.addOrUpdate((double) 0, (double) 0);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-972));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, false, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((-561.958), (Number) 23);
      assertEquals(1, xYSeries0.getItemCount());
      
      Number number0 = xYSeries0.getX(0);
      XYDataItem xYDataItem0 = xYSeries0.remove(number0);
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(0.0, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, 23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Year year0 = new Year((-1021));
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      XYSeries xYSeries1 = xYSeries0.createCopy((-1), 45);
      xYSeries1.data = list0;
      XYDataItem xYDataItem0 = new XYDataItem((Number) 9999, (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries1.add(xYDataItem0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add(0.0, (double) 23, true);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 0, (Number) 0);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Minute minute0 = new Minute();
      XYSeries xYSeries0 = new XYSeries(minute0, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertFalse(xYSeries0.getAutoSort());
  }
}
