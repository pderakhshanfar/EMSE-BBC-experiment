/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 15:57:29 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.TimeZone;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((double) 3074, (Number) integer1);
      xYSeries0.add((-1.0), (Number) integer1, true);
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate((Number) integer1, (Number) integer1);
      Float float0 = new Float(Double.NEGATIVE_INFINITY);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.setMaximumItemCount(3074);
      XYSeries xYSeries1 = new XYSeries(integer0, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(3074, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.setMaximumItemCount(1);
      Float float0 = new Float(1748.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((double) 3074, (Number) integer0);
      xYSeries0.add(1210.1361745, (Number) integer0, true);
      Float float0 = new Float((-248.01985481935867));
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) integer0, (Number) float0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      xYSeries0.add((double) 3074, (Number) integer0);
      xYSeries0.update(integer0, integer1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((double) 3074, (Number) integer0);
      xYSeries0.add(1210.1361745, (Number) integer0, true);
      xYSeries0.update(integer0, integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(2, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true);
      xYSeries0.add(0.0, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 22);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.add((-1.0), (Number) integer0, true);
      XYDataItem xYDataItem0 = new XYDataItem((double) 3074, (-1.0));
      xYSeries0.add(xYDataItem0, true);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer(999);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add(2639.45008, 0.0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, true);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((double) 59, 770.97668693169);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add(xYDataItem0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Float float0 = new Float(2.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) 0);
      xYSeries0.updateByIndex(0, 23);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Float float0 = new Float(2.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) float0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Short short0 = new Short((short)2520);
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((double) 0, (Number) short0, false);
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2520.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("h\"~Vco7;14^bL; ", true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.remove((Number) integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Float float0 = new Float(2.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((-1.0), (Number) (-9999));
      xYSeries0.add(0.0, (Number) year0.MAXIMUM_YEAR, true);
      XYDataItem xYDataItem0 = xYSeries0.remove(1);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(9999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      xYSeries0.add(3901.0, (Number) integer0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3901.0, xYDataItem0.getXValue(), 0.01);
      assertEquals((-30000.0), xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) (-9999));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Short short0 = new Short((short)930);
      xYSeries0.add(1.7976931348623157E308, (Number) short0, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.addOrUpdate((Number) short0, (Number) integer0);
      int int0 = xYSeries0.indexOf(short0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      xYSeries0.add((Number) 0, (Number) 0, true);
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((double) 3074, (Number) integer0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(3074.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("8", true, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(3074, (-1845));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(4, 4930);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true, false);
      Integer integer0 = new Integer(0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer((-792));
      XYSeries xYSeries0 = new XYSeries("Null 'serialDate' argument.", false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate((Number) integer0, (Number) null);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((-3865.1), (Number) 9999, true);
      xYSeries0.addOrUpdate((-3865.1), 1.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(3074, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, true);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.update(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("8", true);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add("OY6pCYVCEMFV");
      // Undeclared exception!
      try { 
        xYSeries0.update(9999, 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(3074);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-935));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) (-9999));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      xYSeries0.data = (List) stack0;
      stack0.add((ChronoLocalDate) null);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) double0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0);
      LinkedList<AWTKeyStroke> linkedList0 = new LinkedList<AWTKeyStroke>();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-4117), (-9999), true);
      linkedList0.add((AWTKeyStroke) keyStroke0);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove(3814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1984), (-1984), (-412), (-365), (-2331));
      TimeZone timeZone0 = TimeZone.getTimeZone("X-value already exists.");
      Year year0 = new Year(mockDate0, timeZone0);
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy((-412), (-9999));
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.indexOf((-9999));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(3074, (-2147483626));
      java.util.Vector<AWTKeyStroke> vector0 = new java.util.Vector<AWTKeyStroke>();
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(8, 8);
      vector0.add(aWTKeyStroke0);
      xYSeries1.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries1.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getY((-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L, 0L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      XYSeries xYSeries0 = new XYSeries(month0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getY(2701);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2701, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1440));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1411, 1411);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0);
      xYSeries0.add((-291.5302015711), (Number) 59);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      xYSeries0.add((Number) 0, (Number) 0, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-894), (-894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>(linkedList0);
      xYSeries0.data = (List) vector0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      vector0.add(defaultTableModel0);
      Float float0 = new Float(1748.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) float0, (Number) float0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      LinkedList<DefaultTableModel> linkedList0 = new LinkedList<DefaultTableModel>();
      java.util.Vector<DefaultTableModel> vector0 = new java.util.Vector<DefaultTableModel>(linkedList0);
      xYSeries0.data = (List) vector0;
      Float float0 = new Float(1748.0);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) float0, (Number) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((-1500.8428567407643), (double) 3074);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      java.util.Vector<JInternalFrame.JDesktopIcon> vector0 = new java.util.Vector<JInternalFrame.JDesktopIcon>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add(Double.NaN, (Number) 9999, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(Double.NaN, (double) 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      XYDataItem xYDataItem0 = new XYDataItem((-1.0), (-1.0));
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(3072);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) integer0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) (-9999), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) (-9999), (Number) 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, true, true);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) integer0, (Number) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true, false);
      Short short0 = new Short((short)1);
      xYSeries0.add((double) (short)1, (Number) short0, true);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (short)1, (Number) integer0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.0), (Number) integer0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add(0.0, (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) (-9999));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 3074, (Number) integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      JInternalFrame jInternalFrame0 = new JInternalFrame("Couldn't clone XYDataItem!", true, true, true);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      vector0.add((Object) jInternalFrame_JDesktopIcon0);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 9999, (Number) 9999);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, false, false);
      Long long0 = new Long((-1L));
      xYSeries0.add(1214.23139946, (Number) long0);
      // Undeclared exception!
      try { 
        xYSeries0.add(1214.23139946, 1214.23139946, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-9999), (double) 9999);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Short short0 = new Short((short)930);
      xYSeries0.add(1.7976931348623157E308, (Number) short0, false);
      int int0 = xYSeries0.indexOf(short0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      int int0 = xYSeries0.indexOf(integer0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 9999);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      xYSeries0.add((-333.9439178), (Number) integer0, false);
      XYDataItem xYDataItem0 = new XYDataItem((-333.9439178), 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(674.881129801778, (-333.9439178));
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, true, false);
      xYSeries0.add((double) 3074, (Number) integer0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 3074, 1653.873);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      XYDataItem xYDataItem0 = new XYDataItem((-333.9439178), (-333.9439178));
      XYSeries xYSeries0 = new XYSeries(zoneOffset0);
      xYSeries0.add(xYDataItem0, true);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(300);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 300, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.getItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((double) 3074, (Number) integer0);
      xYSeries0.add((-1.0), (Number) integer0, true);
      xYSeries0.hashCode();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      XYSeries xYSeries1 = new XYSeries(integer0, true, true);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      xYSeries1.data = null;
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("8", true);
      XYSeries xYSeries1 = new XYSeries("8", true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      XYSeries xYSeries1 = new XYSeries(integer0, true, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(2, 60);
      xYSeries1.setMaximumItemCount(17);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(17, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      RegularTimePeriod regularTimePeriod0 = day0.next();
      XYSeries xYSeries0 = new XYSeries(regularTimePeriod0, true);
      XYSeries xYSeries1 = new XYSeries(day0, true, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      boolean boolean0 = xYSeries0.equals(integer0);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(23, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer(999);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      XYSeries xYSeries1 = xYSeries0.createCopy(2, 60);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.addOrUpdate((Number) 9999, (Number) null);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      // Undeclared exception!
      try { 
        xYSeries0.update(9999, 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 9999
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("", true);
      xYSeries0.setMaximumItemCount(0);
      Float float0 = new Float(1536.58);
      xYSeries0.addOrUpdate((Number) float0, (Number) float0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add(Double.NaN, (Number) 9999, true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(Double.NaN, (double) 9999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      Float float0 = new Float(0.9024805176865394);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Minute minute0 = new Minute(date0);
      XYSeries xYSeries0 = new XYSeries(minute0, false, true);
      // Undeclared exception!
      try { 
        xYSeries0.update(59, minute0.LAST_MINUTE_IN_HOUR);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 59
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.addOrUpdate((Number) integer0, (Number) integer0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Day day0 = new Day();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-9999), 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      XYSeries xYSeries0 = new XYSeries(zoneOffset0);
      xYSeries0.delete((-1), (-894));
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add((double) 9999, (Number) (-9999), false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 9999, (double) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Year year0 = new Year();
      XYDataItem xYDataItem0 = new XYDataItem((-2750.667), 4472.42771000286);
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.setMaximumItemCount(4);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((double) (-9999), (Number) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-9999), 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1160);
      Hour hour0 = new Hour(mockDate0);
      Minute minute0 = new Minute(1160, hour0);
      Day day0 = minute0.getDay();
      XYSeries xYSeries0 = new XYSeries(day0, true);
      xYSeries0.add((Number) 0, (Number) 23, false);
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-935));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      XYSeries xYSeries0 = new XYSeries(date0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(3074);
      XYSeries xYSeries0 = new XYSeries(integer0);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 9999, (double) (-9999));
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(52, (-9999));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 52, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add((Number) integer0, (Number) integer0);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      List list0 = xYSeries0.getItems();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) (-9999), (Number) 9999);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false, false);
      xYSeries0.add(0.0, (Number) integer0, true);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      xYSeries0.add((double) (-9999), (Number) 9999);
      xYSeries0.add((double) (-9999), (Number) 9999);
      assertEquals(2, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(1);
      assertEquals(9999.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true, false);
      xYSeries0.add((double) (-9999), 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
