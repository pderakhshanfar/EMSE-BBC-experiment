/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 15:57:27 GMT 2021
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.AttributedCharacterIterator;
import java.time.Clock;
import java.time.Instant;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, true);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Long long0 = new Long(0L);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.add((Number) integer0, (Number) integer0);
      xYSeries0.addOrUpdate(1.7976931348623157E308, 1.0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) long0);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.hashCode();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 0);
      xYSeries1.setMaximumItemCount(23);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(23, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0, true);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate((-2466.5198704), 244.72253365691907);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 23, (-2.147483648E9));
      xYSeries0.add((-126.243531), 2299.08);
      xYSeries0.addOrUpdate((-126.243531), 2299.08);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (double) 0);
      xYSeries0.addOrUpdate((-520.0), (-520.0));
      Byte byte0 = new Byte((byte) (-81));
      xYSeries0.update(23, byte0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.delete(0, 212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      Float float0 = new Float(1.0);
      xYSeries0.add((Number) float0, (Number) float0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, true);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Long long0 = new Long(0L);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.add((Number) integer0, (Number) integer0, true);
      xYSeries0.add((Number) integer0, (Number) integer0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) integer0, (Number) long0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(4, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((Number) 0, (Number) 0, true);
      xYSeries0.remove((Number) 0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (-2005.206044));
      xYSeries0.add(xYDataItem0, false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.remove((Number) bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (double) 23);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 23);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (-2.147483648E9));
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals((-2.147483648E9), xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      xYSeries0.addOrUpdate((double) 23, Double.POSITIVE_INFINITY);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(Double.POSITIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((-3280.1830889891585), (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((Number) 23, (Number) 23);
      xYSeries0.add((Number) 0, (Number) 0);
      int int0 = xYSeries0.indexOf(23);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((Number) 0, (Number) null);
      Number number0 = xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      MockRandom mockRandom0 = new MockRandom(0);
      xYSeries0.add(xYDataItem0);
      BigInteger bigInteger0 = BigInteger.probablePrime(11, mockRandom0);
      xYSeries0.updateByIndex(0, bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      xYSeries0.add((Number) bigInteger0, (Number) 0, false);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.add((Number) bigInteger0, (Number) 0, false);
      xYSeries0.getX(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      LinkedList<XYDataItem> linkedList0 = new LinkedList<XYDataItem>();
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      linkedList0.add(xYDataItem0);
      xYSeries0.data = (List) linkedList0;
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((double) 23, (double) 0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(23.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((double) 0, (-1.7976931348623157E308));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (double) 23);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(23.0, xYDataItem0.getYValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(0, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate(0.0, 0.0);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add(0.0, (double) 23);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add(0.0, 0.0);
      xYSeries0.addOrUpdate(0.0, 0.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      XYSeries xYSeries0 = new XYSeries(date0, false, false);
      Short short0 = Short.valueOf((short)1188);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, short0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HijrahDate hijrahDate0 = MockHijrahDate.now();
      XYSeries xYSeries0 = new XYSeries(hijrahDate0);
      java.util.Vector<XYSeries> vector0 = new java.util.Vector<XYSeries>();
      vector0.add(xYSeries0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYSeries cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(2014);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-33));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries0.data = (List) linkedList0;
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      xYSeries0.data = (List) linkedList0;
      linkedList0.add((Object) xYSeries0.data);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3506));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.remove(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.indexOf(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getX(23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(0);
      XYSeries xYSeries0 = new XYSeries(long0);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-1453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getItemCount();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(855);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-3269));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-2720), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (-2.147483648E9));
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      Stack<LinkedList<DropMode>> stack0 = new Stack<LinkedList<DropMode>>();
      LinkedList<DropMode> linkedList0 = new LinkedList<DropMode>();
      stack0.add(linkedList0);
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Day day0 = new Day();
      Hour hour0 = new Hour(0, day0);
      XYSeries xYSeries0 = new XYSeries(hour0, true);
      xYSeries0.addOrUpdate(43.62, (double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-1126), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'collection' argument.
         //
         verifyException("org.jfree.chart.util.ObjectUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 0, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      xYSeries0.data = (List) vector0;
      xYSeries0.add((double) 23, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 23, (Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 53, (double) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      XYSeries xYSeries0 = new XYSeries(date0, true, true);
      xYSeries0.add(Double.NaN, 0.0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(Double.NaN, Double.NaN);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      ArrayList<LinkedList<AttributedCharacterIterator.Attribute>> arrayList0 = new ArrayList<LinkedList<AttributedCharacterIterator.Attribute>>();
      xYSeries0.data = (List) arrayList0;
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      arrayList0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 0, (double) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      LinkedList<XYDataItem> linkedList0 = new LinkedList<XYDataItem>();
      java.util.Vector<XYDataItem> vector0 = new java.util.Vector<XYDataItem>(linkedList0);
      xYSeries0.data = (List) vector0;
      xYSeries0.addOrUpdate((Number) 23, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) 23, (double) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (-2.147483648E9));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) 23, (Number) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 0);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) float0, (Number) float0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond((-147L));
      Date date0 = Date.from(instant0);
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add(0.0, (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 0, (Number) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      ArrayList<LinkedList<AttributedCharacterIterator.Attribute>> arrayList0 = new ArrayList<LinkedList<AttributedCharacterIterator.Attribute>>();
      xYSeries0.data = (List) arrayList0;
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      arrayList0.add(linkedList0);
      // Undeclared exception!
      try { 
        xYSeries0.add((-1.7976931348623157E308), (Number) 0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      DefaultListModel<XYDatasetTableModel> defaultListModel0 = new DefaultListModel<XYDatasetTableModel>();
      JList<XYDatasetTableModel> jList0 = new JList<XYDatasetTableModel>(defaultListModel0);
      List<XYDatasetTableModel> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (Number) 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (Number) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<Object> vector0 = new java.util.Vector<Object>();
      vector0.add((Object) hour0.LAST_HOUR_IN_DAY);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 0, (Number) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.data.xy.XYDataItem cannot be cast to java.lang.Integer
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate(0.0, (-2.147483648E9));
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (-2.147483648E9), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, Double.NaN, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate(0.0, (-2.147483648E9));
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (double) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (double) 23);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      java.util.Vector<String> vector0 = new java.util.Vector<String>();
      vector0.add("");
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (double) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.add((double) 0, 37.26866579834);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((Number) 0, (Number) 23, false);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      xYSeries0.setMaximumItemCount(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      xYSeries0.addOrUpdate((Number) 23, (Number) bigInteger0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((-126.243531), 2299.08);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((-126.243531), 2299.08);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      XYDataItem xYDataItem0 = new XYDataItem((-467.623862), (-2005.206044));
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate(0.0, (-2.147483648E9));
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) 0, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((double) 0, (double) 23);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-3506));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (-2.147483648E9));
      xYSeries0.addOrUpdate(0.0, (-2.147483648E9));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      java.util.Vector<LinkedList<AttributedCharacterIterator.Attribute>> vector0 = new java.util.Vector<LinkedList<AttributedCharacterIterator.Attribute>>();
      LinkedList<AttributedCharacterIterator.Attribute> linkedList0 = new LinkedList<AttributedCharacterIterator.Attribute>();
      vector0.add(linkedList0);
      xYSeries0.data = (List) vector0;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long(0);
      XYSeries xYSeries0 = new XYSeries(long0);
      xYSeries0.add((Number) 0, (Number) 0, false);
      XYSeries xYSeries1 = new XYSeries(long0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      XYSeries xYSeries1 = new XYSeries(hour0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long(0);
      XYSeries xYSeries0 = new XYSeries(long0);
      XYSeries xYSeries1 = new XYSeries(long0, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries0.setMaximumItemCount(0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      Long long0 = new Long(913L);
      XYSeries xYSeries1 = new XYSeries(long0, true);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, true);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      boolean boolean0 = xYSeries0.equals(integer0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(23, 0);
      Stack<ChronoLocalDate> stack0 = new Stack<ChronoLocalDate>();
      xYSeries1.data = (List) stack0;
      LocalDate localDate0 = MockLocalDate.ofYearDay(29, 29);
      stack0.add((ChronoLocalDate) localDate0);
      // Undeclared exception!
      try { 
        xYSeries1.add((Number) 0, (Number) 23);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.time.LocalDate cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((Number) 0, (Number) null);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((double) 23, (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) 23, (Number) 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 23, (double) 23);
      xYSeries0.addOrUpdate((double) 23, (double) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("Sw");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Year year0 = new Year(29);
      XYSeries xYSeries0 = new XYSeries(year0);
      // Undeclared exception!
      try { 
        xYSeries0.update((-9999), 9999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = -9999
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) 23, (double) 0);
      assertTrue(xYSeries0.getAutoSort());
      
      Byte byte0 = new Byte((byte) (-81));
      xYSeries0.update(23, byte0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add((double) Integer.MAX_VALUE, (double) 0);
      xYSeries0.clear();
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      xYSeries0.add(xYDataItem0);
      xYSeries0.delete(0, 0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 23, (double) 23);
      // Undeclared exception!
      try { 
        xYSeries0.add((double) 23, (Number) 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      xYSeries0.add(0.0, (Number) integer0, false);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.addOrUpdate(0.0, (-2.147483648E9));
      // Undeclared exception!
      try { 
        xYSeries0.add(0.0, (Number) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add((-1.7976931348623157E308), (double) 23);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Day day0 = new Day(date0);
      XYSeries xYSeries0 = new XYSeries(day0);
      XYDataItem xYDataItem0 = new XYDataItem((-2005.206044), (-1614.8113));
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      XYSeries xYSeries0 = new XYSeries(integer0, false);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-33));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Week week0 = new Week(0, 0);
      XYSeries xYSeries0 = new XYSeries(week0, false, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0);
      assertFalse(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(clock0);
      XYSeries xYSeries0 = new XYSeries(thaiBuddhistDate0, true);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, false);
      xYSeries0.add((double) 23, 1264.218852094);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.getItems();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      xYSeries0.add(0.0, Double.NaN, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, true, false);
      xYSeries0.add(0.0, (Number) 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false);
      int int0 = xYSeries0.getMaximumItemCount();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Hour hour0 = new Hour();
      XYSeries xYSeries0 = new XYSeries(hour0, false, false);
      xYSeries0.add((double) 23, (double) 23);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }
}
