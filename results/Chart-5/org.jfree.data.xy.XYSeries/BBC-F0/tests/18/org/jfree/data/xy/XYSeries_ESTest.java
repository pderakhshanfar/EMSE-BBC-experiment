/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:13:28 GMT 2020
 */

package org.jfree.data.xy;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.temporal.ChronoField;
import java.util.ArrayList;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.Stack;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class XYSeries_ESTest extends XYSeries_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      xYSeries0.add((Number) 1900, (Number) 9999);
      xYSeries0.addOrUpdate((double) 2, (-1.7976931348623157E308));
      XYDataItem xYDataItem0 = new XYDataItem((Number) 6, (Number) 6);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.add((Number) 0, (Number) 9999, true);
      xYSeries0.addOrUpdate((Number) 9999, (Number) 1);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_YEAR;
      XYSeries xYSeries0 = new XYSeries(chronoField0);
      XYSeries xYSeries1 = new XYSeries(chronoField0, true);
      xYSeries1.setMaximumItemCount(645);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertEquals(645, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      xYSeries0.add((Number) 3, (Number) 9999, false);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy(0, 144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2978, 0, 2736, 7, 2978);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FREQUENCY");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      xYSeries0.setMaximumItemCount(1);
      xYSeries0.addOrUpdate(Double.NaN, 1.0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.add(0.0, (Number) 4, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) 2, (Number) 2);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 3, (Number) 6);
      xYSeries0.addOrUpdate((double) 212, (-3757.99));
      xYSeries0.add(xYDataItem0);
      xYSeries0.update(3, 2);
      assertFalse(xYSeries0.getAutoSort());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      xYSeries0.add((Number) 3, (Number) 9999, true);
      xYSeries0.add((Number) 2, (Number) 1);
      // Undeclared exception!
      try { 
        xYSeries0.delete(1, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.updateByIndex(0, 1);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove((Number) bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(91);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      xYSeries0.addOrUpdate((double) 2, Double.NEGATIVE_INFINITY);
      assertTrue(xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) 2);
      assertEquals(Double.NEGATIVE_INFINITY, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.add((Number) (-9999), (Number) 9999, true);
      XYDataItem xYDataItem0 = xYSeries0.remove((Number) (-9999));
      assertEquals(9999.0, xYDataItem0.getYValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.remove(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(240);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(1263.265343, 0.0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.remove(0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(240);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.addOrUpdate((-1962.351962196439), (double) 2);
      XYDataItem xYDataItem0 = xYSeries0.remove(0);
      assertEquals(2.0, xYDataItem0.getYValue(), 0.01);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals((-1962.351962196439), xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      xYSeries0.add((Number) 3, (Number) 9999, true);
      xYSeries0.add((Number) 2, (Number) 1);
      int int0 = xYSeries0.indexOf(3);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.getY(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.getX(0);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setMaximumItemCount(0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      xYSeries0.add((double) 212, (Number) 1, false);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2978);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      xYSeries0.addOrUpdate(0.0, 0.0);
      XYDataItem xYDataItem0 = xYSeries0.getDataItem(0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01);
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2978);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      xYSeries0.add((Number) 4, (Number) 1);
      xYSeries0.addOrUpdate(0.0, (double) 1);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 4);
      xYSeries0.add(xYDataItem0, true);
      assertEquals(3, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(2);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((-764.46139), (-764.46139));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.getDataItem(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("FREQUENCY", true);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-381L));
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false);
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.setNotify(false);
      XYSeries xYSeries1 = xYSeries0.createCopy((-683), (-683));
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYDataItem0.setY(0.0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) 2, (Number) 2);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(0, bigInteger0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) 0, (Number) 1900);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      XYSeries xYSeries0 = new XYSeries(chronoField0, false, false);
      Double double0 = new Double((-1408.66490776));
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) double0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((Number) double0, (Number) double0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.add(0.0, (Number) 4, false);
      xYSeries0.addOrUpdate(0.0, (double) 5);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(233);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.addOrUpdate((double) 2958465, 0.0);
      xYSeries0.addOrUpdate((double) 2958465, (double) 5);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      XYSeries xYSeries0 = new XYSeries(chronoField0, false, false);
      Double double0 = new Double((-1408.66490776));
      XYDataItem xYDataItem0 = new XYDataItem((Number) double0, (Number) double0);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.addOrUpdate((-1408.66490776), (double) 23);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex((-8), (-9999));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.MICRO_OF_SECOND;
      XYSeries xYSeries0 = new XYSeries(chronoField0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        xYSeries0.update((Number) null, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      XYSeries xYSeries1 = xYSeries0.createCopy(0, 0);
      xYSeries1.data = null;
      // Undeclared exception!
      try { 
        xYSeries1.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      XYSeries xYSeries0 = new XYSeries(chronoField0, false, false);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-7), (-7), (-7));
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.remove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYSeries xYSeries1 = xYSeries0.createCopy(1900, 3);
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      xYSeries1.data = (List) arrayList0;
      arrayList0.add((Integer) spreadsheetDate0.SECOND_WEEK_IN_MONTH);
      // Undeclared exception!
      try { 
        xYSeries1.hashCode();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.jfree.data.xy.XYDataItem
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      XYSeries xYSeries0 = new XYSeries(quarter0);
      Stack<Integer> stack0 = new Stack<Integer>();
      xYSeries0.data = (List) stack0;
      // Undeclared exception!
      try { 
        xYSeries0.getY(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 4
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("FREQUENCY", true);
      // Undeclared exception!
      try { 
        xYSeries0.getX((-3526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, Integer.MAX_VALUE, 9999, 1342, 2916, 9999);
      XYSeries xYSeries0 = new XYSeries(mockGregorianCalendar0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2978, 0, 2736, 7, 2978);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FREQUENCY");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete((-1680), 377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Year year0 = new Year((-2116));
      XYSeries xYSeries0 = new XYSeries(year0, false, false);
      xYSeries0.add((Number) 9999, (Number) 9999, true);
      // Undeclared exception!
      try { 
        xYSeries0.createCopy((-9999), 9999);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.data = null;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      java.util.Vector<XYSeries> vector0 = new java.util.Vector<XYSeries>();
      JList<XYSeries> jList0 = new JList<XYSeries>(vector0);
      List<XYSeries> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate(0.0, 0.0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, true);
      xYSeries0.add((Number) (-9999), (Number) (-9999), true);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((double) (-9999), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(240);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem(1263.265343, 0.0);
      xYSeries0.add(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("FAEQUENCY");
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Second second0 = new Second();
      XYSeries xYSeries0 = new XYSeries(second0, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 59, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(41);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) null, (Number) 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Object[] objectArray0 = new Object[3];
      JList<Object> jList0 = new JList<Object>(objectArray0);
      List<Object> list0 = jList0.getSelectedValuesList();
      xYSeries0.data = list0;
      // Undeclared exception!
      try { 
        xYSeries0.add((-4662.78958), (Number) bigInteger0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, false, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XYSeries xYSeries0 = null;
      try {
        xYSeries0 = new XYSeries((Comparable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
         verifyException("org.jfree.data.general.Series", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      int int0 = xYSeries0.indexOf(0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertEquals((-1), int0);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.addOrUpdate((Number) (-9999), (Number) 9999);
      int int0 = xYSeries0.indexOf((-9999));
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      // Undeclared exception!
      try { 
        xYSeries0.indexOf((Number) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYDataItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) null, (Number) 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 0, (Number) 0);
      xYSeries0.add(xYDataItem0, false);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.getX(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.getY(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      // Undeclared exception!
      try { 
        xYSeries0.getDataItem((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.getItemCount();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      xYSeries0.add((Number) 1900, (Number) 9999);
      xYSeries0.addOrUpdate((double) 2, (-1.7976931348623157E308));
      xYSeries0.hashCode();
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      xYSeries0.hashCode();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Year year0 = new Year();
      XYSeries xYSeries0 = new XYSeries(year0, false);
      xYSeries0.hashCode();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      xYSeries0.add((Number) 0, (Number) 3);
      XYSeries xYSeries1 = new XYSeries(spreadsheetDate0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      XYSeries xYSeries1 = new XYSeries(spreadsheetDate0, true);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertTrue(xYSeries1.getAutoSort());
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      XYSeries xYSeries1 = new XYSeries(spreadsheetDate0, true, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      XYSeries xYSeries0 = new XYSeries(chronoField0);
      XYSeries xYSeries1 = new XYSeries(chronoField0, false, false);
      xYSeries1.setMaximumItemCount(29);
      XYSeries xYSeries2 = xYSeries1.createCopy(30, 30);
      boolean boolean0 = xYSeries0.equals(xYSeries2);
      assertEquals(29, xYSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Year year0 = new Year();
      RegularTimePeriod regularTimePeriod0 = year0.next();
      XYSeries xYSeries0 = new XYSeries(regularTimePeriod0, false);
      XYSeries xYSeries1 = new XYSeries(year0, false, false);
      boolean boolean0 = xYSeries1.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XYSeries xYSeries0 = new XYSeries("FREQUENCY", true);
      boolean boolean0 = xYSeries0.equals((Object) null);
      assertTrue(xYSeries0.getAutoSort());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(240);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries0);
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ChronoField chronoField0 = ChronoField.CLOCK_HOUR_OF_AMPM;
      XYSeries xYSeries0 = new XYSeries(chronoField0);
      XYSeries xYSeries1 = new XYSeries(chronoField0, false, false);
      boolean boolean0 = xYSeries0.equals(xYSeries1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertFalse(xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-1.7976931348623157E308), 0.0);
      xYDataItem0.setY((Number) null);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0, false, false);
      xYSeries0.add(xYDataItem0, false);
      double[][] doubleArray0 = xYSeries0.toArray();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(2, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      // Undeclared exception!
      try { 
        xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2736, 2736, 2978);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FREQUENCY");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      // Undeclared exception!
      try { 
        xYSeries0.update(1, bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 3, (Number) 6);
      xYSeries0.add(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.update(3, 2);
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false);
      xYSeries0.addOrUpdate((double) 212, (-3757.99));
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.clear();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(212);
      XYSeries xYSeries0 = new XYSeries(fixedMillisecond0, false, false);
      // Undeclared exception!
      try { 
        xYSeries0.delete(778, 778);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 778, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(240);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.delete(642, 181);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2623);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 0);
      xYSeries0.add(xYDataItem0);
      xYSeries0.addOrUpdate((Number) 4, (Number) 2);
      xYSeries0.setMaximumItemCount(3);
      xYSeries0.add((Number) (-1), (Number) 2);
      xYSeries0.add(xYDataItem0, false);
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(534);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 2, (Number) 5);
      xYSeries0.add(xYDataItem0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((Number) 2, (Number) 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(28);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, false);
      xYSeries0.addOrUpdate((double) 1, 654.53726798);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 1, (Number) 6);
      // Undeclared exception!
      try { 
        xYSeries0.add(xYDataItem0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2978, 0, 2736, 7, 2978);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FREQUENCY");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add((XYDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.add((Number) bigInteger0, (Number) bigInteger0);
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      assertTrue(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      // Undeclared exception!
      try { 
        xYSeries0.setMaximumItemCount((-79));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(0);
      xYSeries0.createCopy(283, 0);
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2978, 0, 2736, 7, 2978);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "FREQUENCY");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      XYSeries xYSeries0 = new XYSeries(week0, false);
      boolean boolean0 = xYSeries0.getAutoSort();
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.getAllowDuplicateXValues();
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
      assertFalse(xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      XYDataItem xYDataItem0 = new XYDataItem(bigInteger0, bigInteger0);
      XYSeries xYSeries0 = new XYSeries(xYDataItem0);
      // Undeclared exception!
      try { 
        xYSeries0.remove((Number) bigInteger0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.createCopy(0, 0);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        xYSeries0.updateByIndex(0, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      xYSeries0.addOrUpdate((Number) bigInteger0, (Number) bigInteger0);
      xYSeries0.toArray();
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0, false, false);
      xYSeries0.getItems();
      assertFalse(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(534);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, false, false);
      xYSeries0.add(1.0, (Number) 0, false);
      // Undeclared exception!
      try { 
        xYSeries0.add(1.0, (Number) 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
         verifyException("org.jfree.data.xy.XYSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      XYSeries xYSeries0 = new XYSeries(millisecond0);
      xYSeries0.add((-237.5446082254188), (double) 28, true);
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(6, mockRandom0);
      xYSeries0.add(0.0, (Number) bigInteger0);
      XYDataItem xYDataItem0 = new XYDataItem((Number) 3, (Number) 6);
      xYSeries0.add(xYDataItem0);
      xYSeries0.setMaximumItemCount(3);
      xYSeries0.add(xYDataItem0, true);
      xYSeries0.addOrUpdate((Number) 1, (Number) 1900);
      assertEquals(3, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      XYSeries xYSeries0 = new XYSeries(bigInteger0);
      int int0 = xYSeries0.getMaximumItemCount();
      assertTrue(xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
      assertTrue(xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(212);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true);
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(Integer.MAX_VALUE, xYSeries1.getMaximumItemCount());
      assertTrue(xYSeries1.getAllowDuplicateXValues());
      assertTrue(xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(2978);
      XYSeries xYSeries0 = new XYSeries(spreadsheetDate0, true, true);
      xYSeries0.add(110.05477092, Double.NaN);
      assertEquals(1, xYSeries0.getItemCount());
  }
}
