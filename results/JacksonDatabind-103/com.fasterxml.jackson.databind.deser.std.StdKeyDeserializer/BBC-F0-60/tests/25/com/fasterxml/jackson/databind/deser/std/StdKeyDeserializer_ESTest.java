/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:29:44 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.TimeZone;
import java.util.UUID;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("+600", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<V3%on'*rF#5uS7N");
      Class<Module> class0 = Module.class;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("<V3%on'*rF#5uS7N").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.introspect.ObjectIdInfo");
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-3023), (-1224));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      stdKeyDeserializer_DelegatingKD0.deserializeKey("as content of type ", defaultDeserializationContext0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      stdKeyDeserializer_StringKD0.getKeyClass();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<V3%on'*rF#5uS7N");
      Class<Module> class0 = Module.class;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      PropertyName propertyName0 = PropertyName.construct("com.fasterxml.jackson.databind.introspect.ObjectIdInfo");
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withRootName(propertyName0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, (-3023), (-1224));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("as content of type ", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.Module` from String \"as content of type \": not a valid representation: Cannot deserialize Map key of type `com.fasterxml.jackson.databind.Module` from String \"as content of type \": not a valid representation
         //  at [Source: (char[])\"\"; line: 1, column: 0]
         //  at [Source: (char[])\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("+0000", (DeserializationContext) null);
      stdKeyDeserializer0._parseInt("+0000");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<FloatNode> class1 = FloatNode.class;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(7, class1);
      stdKeyDeserializer1.deserializeKey("+0000", (DeserializationContext) null);
      stdKeyDeserializer0._parseLong("+0000");
      stdKeyDeserializer0.getKeyClass();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      stdKeyDeserializer1._parse("+0000", (DeserializationContext) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.util.TokenBufferReadContext", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializationContext deserializationContext0 = null;
      stdKeyDeserializer0._parseDouble("+0000");
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("ckcwo", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withRootName(propertyName0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile mockFile0 = new MockFile("moduleName", "moduleName");
      URL uRL0 = mockFile0.toURL();
      IOContext iOContext0 = new IOContext(bufferRecycler0, uRL0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = '\\';
      charArray0[2] = '$';
      charArray0[3] = '-';
      charArray0[4] = '_';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 16, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 2228, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("moduleName", (Object) uRL0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std1);
      try { 
        stdKeyDeserializer0.deserializeKey("moduleName", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Short` from String \"moduleName\": not a valid representation, problem: (java.lang.NumberFormatException) For input string: \"moduleName\"
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("(", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      stdKeyDeserializer_StringKD0._parseInt("3");
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("3", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0._parseLong("4");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("4", (DeserializationContext) null);
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      String string0 = "4";
      Class<Short> class1 = Short.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      DeserializationContext deserializationContext0 = null;
      stdKeyDeserializer0.deserializeKey("4", (DeserializationContext) null);
      stdKeyDeserializer1.deserializeKey("4", (DeserializationContext) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = null;
      try {
        beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      double double0 = new Integer(3);
      stdKeyDeserializer0.deserializeKey("4", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.TYPE;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class1);
      stdKeyDeserializer_StringKD0.getKeyClass();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        stdKeyDeserializer_StringKD0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type interface java.time.chrono.ChronoLocalDate
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      StdKeyDeserializer.forType(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0._parse("QljF&!`i!G2OaJb#Vf", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      StdKeyDeserializer.forType(class0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0.deserializeKey("X", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Locale> class1 = Locale.class;
      Class<Short> class2 = Short.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 9);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class1, fromStringDeserializer_Std0);
      StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer.forType(class0);
      Class<Proxy.Type> class1 = Proxy.Type.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class1, annotationIntrospector0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0._parseDouble("4");
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("sbyno", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("false", (DeserializationContext) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("syo{", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((CharBuffer) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      stdKeyDeserializer0.getKeyClass();
      String string0 = "GQh\"a&\".+J\"M5yu";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("GQh\"a&\".+J\"M5yu", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0, fromStringDeserializer0);
      stdKeyDeserializer0.deserializeKey("'", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer.forType(class0);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0);
      stdKeyDeserializer0.deserializeKey("4", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Locale> class1 = Locale.class;
      Class<Short> class2 = Short.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 102);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class1, fromStringDeserializer_Std0);
      StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.impl.UnwrappedPropertyHandler", (DeserializationContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Internal error: this code path should never get executed
         //
         verifyException("com.fasterxml.jackson.core.util.VersionUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((CharBuffer) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      Class<MockCalendar> class0 = MockCalendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("4Zjq", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      FromStringDeserializer<Long> fromStringDeserializer0 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Trying to resolve a forward reference with id [");
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      Class<Byte> class1 = Byte.class;
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, jsonDeserializer0);
      stdKeyDeserializer0.getKeyClass();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig3);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory1);
      String string0 = "expected closing END_ARRAY after type information and deserialized value";
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("expected closing END_ARRAY after type information and deserialized value", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      stdKeyDeserializer0.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext0);
      stdKeyDeserializer0.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext_Impl0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = null;
      try {
        stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD((EnumResolver) null, (AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.node.TextNode", defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Proxy.Type> class0 = Proxy.Type.class;
      FromStringDeserializer<Integer> fromStringDeserializer1 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0, fromStringDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Long> class1 = Long.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class1, stdKeyDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      Class<Double> class1 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("6I_VxE_+k3A\"'n`hRc", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonDeserializer<Date> jsonDeserializer0 = (JsonDeserializer<Date>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer.forType(class0);
      Class<MockCalendar> class1 = MockCalendar.class;
      StdKeyDeserializer.forType(class1);
      Class<Date> class2 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class2);
      try { 
        stdKeyDeserializer0._parse("overflow, value cannot be represented as 16-bit value", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      StdKeyDeserializer.forType(class0);
      Class<Date> class1 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(10, class1);
      try { 
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Currency> class1 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("r4-m!", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, (FromStringDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("6bFV15_vp1m", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JsonDeserializer<Date> jsonDeserializer0 = (JsonDeserializer<Date>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer1._parse("true", (DeserializationContext) null);
      try { 
        stdKeyDeserializer0._parseInt("true");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"true\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("true", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      JsonDeserializer<Date> jsonDeserializer0 = (JsonDeserializer<Date>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withNoProblemHandlers();
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(formatFeature0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, (JsonParser) null, injectableValues_Std0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("NXSZ3/>dj[", "PK?5ra^DOVQ", (-1393));
      try { 
        stdKeyDeserializer0._weirdKey(defaultDeserializationContext0, "NXSZ3/>dj[", sQLRecoverableException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Boolean` from String \"NXSZ3/>dj[\": problem: NXSZ3/>dj[
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey(" slots -- suspect a DoS attack based on hash collisions.", defaultDeserializationContext0);
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      System.setCurrentTimeMillis(996L);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FromStringDeserializer<Long> fromStringDeserializer0 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Character> class1 = Character.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class1, stdKeyDeserializer0);
      deserializerFactoryConfig1.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Class<Long> class1 = Long.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 17);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, coreXMLDeserializers_Std0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("can only convert 1-character Strings", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("false", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"false\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<URL> class1 = URL.class;
      StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Date> class2 = Date.class;
      StdKeyDeserializer.forType(class2);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Date> class1 = Date.class;
      StdKeyDeserializer.forType(class1);
      stdKeyDeserializer0._parse("GLFDB\"uga", (DeserializationContext) null);
      stdKeyDeserializer0.deserializeKey("%91csk6qM'", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<URL> class1 = URL.class;
      StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Short> class2 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class2);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<URI> class0 = URI.class;
      StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Short> class1 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.DateDeserializers$DateDeserializer", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseLong("com.fasterxml.jackson.core.util.JsonParserDelegate");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.fasterxml.jackson.core.util.JsonParserDelegate\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      String string0 = "6Gh,LO08#qcA?d";
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(stdKeyDeserializer0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      System.setCurrentTimeMillis(719L);
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0._parse("HA<Lye$fQB", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      System.setCurrentTimeMillis(719L);
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      String string0 = "HA<Lye$fQB";
      DeserializationContext deserializationContext0 = null;
      stdKeyDeserializer0._parse("HA<Lye$fQB", (DeserializationContext) null);
      String string1 = "d`\\S@X(0,p";
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      String string0 = "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0._parse("gZ$p", defaultDeserializationContext_Impl0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Long> class1 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("f", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0, fromStringDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      FromStringDeserializer<Long> fromStringDeserializer1 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(1, class1, fromStringDeserializer1);
      // Undeclared exception!
      try { 
        stdKeyDeserializer1.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("r4-m!", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "4Zjq";
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("4Zjq", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      String string0 = "ULZ/mL2qNvHG%`ZfC";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        stdKeyDeserializer0._parse("ULZ/mL2qNvHG%`ZfC", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Integer> class1 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("ALLOW_MISSING_VALUES", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<URL> class0 = URL.class;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<URL> class1 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      objectMapper1.configure(serializationFeature0, true);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      stdKeyDeserializer0.deserializeKey((String) null, deserializationContext0);
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(7, class0);
      try { 
        stdKeyDeserializer1._parseDouble("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Float> class1 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      objectMapper0.configure(jsonParser_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      objectMapper0.configure(serializationFeature0, true);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, (FromStringDeserializer<?>) null);
      Class<Float> class1 = Float.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      try { 
        stdKeyDeserializer1._parse("lHP4*-SC%rs%T", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("f<z+c#Q0fx68O;+", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      CharBuffer.wrap(charArray0);
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      String string0 = "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<URL> class1 = URL.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdKeyDeserializer1.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      try { 
        stdKeyDeserializer0._parse("^,R$cn1_rZ}J$*A", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseLong("*A.MY26b0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*A.MY26b0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      Class<Byte> class1 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      try { 
        stdKeyDeserializer0._parse("HA<Lye$fQB", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HA<Lye$fQB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonDeserializer<Double> jsonDeserializer0 = (JsonDeserializer<Double>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      StdKeyDeserializer.forType(class0);
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer.forType(class0);
      Method method0 = null;
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer.forType(class0);
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Character> class0 = Character.class;
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-5374), class0, fromStringDeserializer0);
      StdKeyDeserializer.forType(class0);
      String string0 = ",^";
      try { 
        stdKeyDeserializer0._parseDouble(",^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      deserializerFactoryConfig0.valueInstantiators();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object object0 = new Object();
      stdKeyDeserializer_StringKD0.deserializeKey((String) null, defaultDeserializationContext0);
      Class<Character> class1 = Character.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Float> class0 = Float.class;
      FromStringDeserializer<MockCalendar> fromStringDeserializer0 = (FromStringDeserializer<MockCalendar>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(0, class0, fromStringDeserializer0);
      StdKeyDeserializer.forType(class0);
      Class<Integer> class1 = Integer.class;
      StdKeyDeserializer.forType(class1);
      String string0 = "G42RR]p;VH";
      try { 
        stdKeyDeserializer0._parseInt("G42RR]p;VH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"G42RR]p;VH\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("JsonSetter.Value(valueNulls=%s,contentNulls=%s)", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializer.forType(class0);
      Class<Float> class1 = Float.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_StringKD0._weirdKey(defaultDeserializationContext0, "", sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer.forType(class0);
      String string0 = "c)$Y[+a5j`z>y{#<|jC";
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      stdKeyDeserializer0.getKeyClass();
      StdKeyDeserializer.StringKD.forType(class1);
      String string0 = "dQ@eu.\"Ko";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        Proxy.Type.valueOf("dQ@eu.\"Ko");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.net.Proxy.Type.dQ@eu.\"Ko
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Long> class1 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        stdKeyDeserializer0._parse("B{lV~PSy7^inG", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"B{lV~PSy7^inG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<URL> class0 = URL.class;
      JsonDeserializer<Long> jsonDeserializer0 = (JsonDeserializer<Long>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      Class<String> class1 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD)StdKeyDeserializer.forType(class1);
      String string0 = " or make serializer extend 'com.fasterxml.jackson.databind.ser.std.StdSerializer'";
      try { 
        stdKeyDeserializer_StringKD0._parseDouble("[NamedType, class ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      try { 
        stdKeyDeserializer0._parse("#K` d`Ar\";5{+LO!b", defaultDeserializationContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(0, class0);
      Class<Double> class1 = Double.class;
      StdKeyDeserializer.forType(class1);
      String string0 = "com.fasterxml.jackson.databind.ser.std.NullSerializer";
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      System.setCurrentTimeMillis(719L);
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.forType(class0);
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD.forType(class0);
      Class<Object> class1 = Object.class;
      StdKeyDeserializer.StringKD.forType(class1);
      Class<Boolean> class2 = Boolean.class;
      StdKeyDeserializer.StringKD.forType(class2);
      StdKeyDeserializer.StringKD.forType(class1);
      String string0 = "";
      String string1 = "P%o";
      ObjectMapper objectMapper0 = new ObjectMapper();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultMergeable(boolean0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      objectMapper2.enableDefaultTyping();
      MockFile mockFile0 = new MockFile((File) null, "9^V{M`8d4]20r");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "9^V{M`8d4]20r", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      stdKeyDeserializer_StringKD0.deserializeKey("", defaultDeserializationContext0);
      Class<MockCalendar> class1 = MockCalendar.class;
      StdKeyDeserializer.StringKD.forType(class1);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
      try { 
        stdKeyDeserializer_StringKD0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Iterable<ValueInstantiators> iterable0 = deserializerFactoryConfig0.valueInstantiators();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.with(beanDeserializerFactory0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      
      stdKeyDeserializer_StringKD0.deserializeKey((String) null, defaultDeserializationContext0);
      try { 
        stdKeyDeserializer_StringKD0._parseLong((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.copy();
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[5];
      serializationFeatureArray0[0] = serializationFeature0;
      SerializationFeature serializationFeature1 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      serializationFeatureArray0[1] = serializationFeature1;
      SerializationFeature serializationFeature2 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
      serializationFeatureArray0[2] = serializationFeature2;
      serializationFeatureArray0[3] = serializationFeature0;
      serializationFeatureArray0[4] = serializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.disable(serializationFeature0, serializationFeatureArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(serializationFeature0.equals((Object)serializationFeature2));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertEquals(5, serializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(serializationFeature0, serializationFeature2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(serializationFeature0.equals((Object)serializationFeature2));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotNull(objectMapper3);
      assertEquals(5, serializationFeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(serializationFeature0, serializationFeature2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper3));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(serializationFeature0.equals((Object)serializationFeature2));
      assertFalse(serializationFeature0.equals((Object)serializationFeature1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper3.equals((Object)objectMapper0));
      assertNotNull(deserializationContext0);
      assertEquals(5, serializationFeatureArray0.length);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper3);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(serializationFeature0, serializationFeature2);
      assertNotSame(serializationFeature0, serializationFeature1);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("f<z+c#Q0fx68O;+", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Long> class0 = Long.class;
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = "8";
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("8", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$DelegatingKD", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      Class<?> class1 = stdKeyDeserializer_StringKD0.getKeyClass();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.lang.Long", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      Class<Short> class2 = Short.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class2, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      Class<?> class3 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertFalse(class3.equals((Object)class1));
      assertNotNull(class3);
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.Short", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertFalse(class3.isAnnotation());
      assertNotSame(class3, class1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      String string0 = "";
      try { 
        stdKeyDeserializer0._parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<URL> class0 = URL.class;
      JsonDeserializer<CharBuffer> jsonDeserializer0 = (JsonDeserializer<CharBuffer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(">", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      assertNotNull(objectMapper2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      ObjectMapper objectMapper3 = objectMapper2.setSubtypeResolver(stdSubtypeResolver0);
      assertNotNull(objectMapper3);
      assertEquals(0, objectMapper3.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      assertFalse(deserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertNotSame(deserializationContext0, defaultDeserializationContext_Impl0);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      FromStringDeserializer<Float> fromStringDeserializer0 = (FromStringDeserializer<Float>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-450), class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      String string0 = "wU";
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance(0);
      assertNotNull(simpleDateFormat0);
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      
      ObjectWriter objectWriter0 = objectMapper0.writer((DateFormat) simpleDateFormat0);
      assertNotNull(objectWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE, MMMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
      assertFalse(objectWriter0.hasPrefetchedSerializer());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory((JsonNodeFactory) null);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(objectMapper2);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper2.getDeserializationContext();
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("wU", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertNotNull(stdKeyDeserializer1);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Locale locale0 = (Locale)stdKeyDeserializer1.deserializeKey("%cFeVd<0%#", defaultDeserializationContext0);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(locale0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("%cfevd<0%#", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("%cfevd<0%#", locale0.getLanguage());
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parseLong("1x\ne7Kn5Z@G:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1x
         // e7Kn5Z@G:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<URI> class0 = URI.class;
      FromStringDeserializer<Boolean> fromStringDeserializer0 = (FromStringDeserializer<Boolean>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1517, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertNotNull(stdKeyDeserializer1);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      
      String string0 = "O;^.e9)>[Q";
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      // Undeclared exception!
      try { 
        objectMapper1.enable((JsonGenerator.Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer_StringKD0._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(0, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      
      String string0 = "";
      try { 
        stdKeyDeserializer0._parseDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(37, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      assertNotNull(uUIDDeserializer0);
      assertEquals(AccessPattern.CONSTANT, uUIDDeserializer0.getEmptyAccessPattern());
      assertFalse(uUIDDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, uUIDDeserializer0.getNullAccessPattern());
      
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, uUIDDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      assertEquals(AccessPattern.CONSTANT, uUIDDeserializer0.getEmptyAccessPattern());
      assertFalse(uUIDDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, uUIDDeserializer0.getNullAccessPattern());
      
      Class<?> class1 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertNotNull(class1);
      assertEquals(AccessPattern.CONSTANT, uUIDDeserializer0.getEmptyAccessPattern());
      assertFalse(uUIDDeserializer0.isCachable());
      assertEquals(AccessPattern.ALWAYS_NULL, uUIDDeserializer0.getNullAccessPattern());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.nio.CharBuffer", class1.toString());
      assertEquals(1025, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      String string0 = "?.HA";
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      // Undeclared exception!
      try { 
        objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot use includeAs of EXTERNAL_PROPERTY
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      String string0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Iterable<ValueInstantiators> iterable0 = deserializerFactoryConfig0.valueInstantiators();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer_StringKD0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.Double
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      assertNotNull(stdKeyDeserializer1);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("[v2UmTX`E");
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: [v2UmTX`E", sQLFeatureNotSupportedException0.toString());
      assertEquals("[v2UmTX`E", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer1._weirdKey((DeserializationContext) null, (String) null, sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      FromStringDeserializer<MockGregorianCalendar> fromStringDeserializer0 = (FromStringDeserializer<MockGregorianCalendar>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-1661), class0, fromStringDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
      JsonInclude.Value[] jsonInclude_ValueArray0 = new JsonInclude.Value[0];
      JsonInclude.Value.mergeAll(jsonInclude_ValueArray0);
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion((JsonInclude.Value) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper3 = objectMapper2.configure(deserializationFeature0, true);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Sz#K1L8CF2[", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException(sQLNonTransientConnectionException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("JSON", "7]a_MvyU<", sQLNonTransientConnectionException1);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("cOa]$\"", "7]a_MvyU<", sQLInvalidAuthorizationSpecException0);
      SQLDataException sQLDataException0 = new SQLDataException("JSON", "JSON", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._weirdKey(deserializationContext0, "JSON", sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
