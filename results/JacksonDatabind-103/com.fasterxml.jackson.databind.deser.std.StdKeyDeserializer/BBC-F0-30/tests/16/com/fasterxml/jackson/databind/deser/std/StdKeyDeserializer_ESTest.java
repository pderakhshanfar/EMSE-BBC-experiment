/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:25:07 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.sql.ClientInfoStatus;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(class0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals("int", class0.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("int", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertNotNull(class1);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertEquals("interface java.lang.annotation.Annotation", class1.toString());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertTrue(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      EnumResolver enumResolver0 = EnumResolver.constructUnsafe(class0, annotationIntrospector0);
      assertEquals(3, enumResolver0.lastValidIndex());
      assertNotNull(enumResolver0);
      
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      assertEquals(3, enumResolver0.lastValidIndex());
      assertNotNull(stdKeyDeserializer_EnumKD0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      
      Class<?> class1 = stdKeyDeserializer_EnumKD0.getKeyClass();
      assertEquals(3, enumResolver0.lastValidIndex());
      assertFalse(class1.isInterface());
      assertEquals("class java.sql.ClientInfoStatus", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(16401, class1.getModifiers());
      assertNotNull(class1);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      long long0 = stdKeyDeserializer_StringKD0._parseLong("5");
      assertEquals(5L, long0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      long long0 = stdKeyDeserializer0._parseLong("-5");
      assertEquals((-5L), long0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      int int0 = stdKeyDeserializer_StringKD0._parseInt("5");
      assertEquals(5, int0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      int int0 = stdKeyDeserializer0._parseInt("-5");
      assertEquals((-5), int0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      double double0 = stdKeyDeserializer_StringKD0._parseDouble("5");
      assertEquals(5.0, double0, 0.01);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      double double0 = stdKeyDeserializer0._parseDouble("-5");
      assertEquals((-5.0), double0, 0.01);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FromStringDeserializer<ClientInfoStatus> fromStringDeserializer0 = (FromStringDeserializer<ClientInfoStatus>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      
      Object object0 = stdKeyDeserializer0._parse("N^~)K9^TLfTSY", (DeserializationContext) null);
      assertNull(object0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      UUID uUID0 = (UUID)stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertNotNull(uUID0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<InputStream> class0 = InputStream.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertNotNull(deserializationConfig0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        stdKeyDeserializer0.deserializeKey("f", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.InputStream` from String \"f\": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Cannot deserialize Map key of type `java.io.InputStream` from String \"f\": value not 'true' or 'false'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" :a4l{}JCQs,", "INCLUDE_SOURCE_IN_LOCATION", (Throwable) null);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException:  :a4l{}JCQs,", sQLRecoverableException0.toString());
      assertEquals(" :a4l{}JCQs,", sQLRecoverableException0.getMessage());
      assertEquals("INCLUDE_SOURCE_IN_LOCATION", sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("INCLUDE_SOURCE_IN_LOCATION", "unable to parse key as Class", 3, sQLRecoverableException0);
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException:  :a4l{}JCQs,", sQLRecoverableException0.toString());
      assertEquals(" :a4l{}JCQs,", sQLRecoverableException0.getMessage());
      assertEquals("INCLUDE_SOURCE_IN_LOCATION", sQLRecoverableException0.getSQLState());
      assertEquals("INCLUDE_SOURCE_IN_LOCATION", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: INCLUDE_SOURCE_IN_LOCATION", sQLTransactionRollbackException0.toString());
      assertEquals("unable to parse key as Class", sQLTransactionRollbackException0.getSQLState());
      assertEquals(3, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._weirdKey(defaultDeserializationContext_Impl0, " :a4l{}JCQs,", sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(21, class0, (FromStringDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      try { 
        stdKeyDeserializer0._parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-10), class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertNotNull(deserializationConfig0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNotNull(nonBlockingJsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, nonBlockingJsonParser0, injectableValues_Std0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl1);
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer").when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = (String)stdKeyDeserializer_DelegatingKD0.deserializeKey(".3Xojr\"+.xSQ.", defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNotNull(deserializationConfig0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNotNull(nonBlockingJsonParser0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, nonBlockingJsonParser0, injectableValues_Std0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertNull(deserializationConfig0.getRootName());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext_Impl1);
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey(".3Xojr\"+.xSQ.", defaultDeserializationContext_Impl1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.annotation.Annotation` from String \".3Xojr\"+.xSQ.\": not a valid representation: Cannot deserialize Map key of type `java.lang.annotation.Annotation` from String \".3Xojr\"+.xSQ.\": not a valid representation
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      Object object0 = stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, (DeserializationContext) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("Ityy", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(13, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(11, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(8, class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.JsonSerializer$None", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey(" ", defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(' ', object0);
      assertNotNull(object0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      FromStringDeserializer<ClientInfoStatus> fromStringDeserializer0 = (FromStringDeserializer<ClientInfoStatus>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("N^~)K9^TLfTSY", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<JsonParser.Feature> class0 = JsonParser.Feature.class;
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("A1rM|an!]RD", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(deserializerFactoryConfig0);
      
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      
      Object object0 = stdKeyDeserializer0._parse("-5", (DeserializationContext) null);
      assertEquals((short) (-5), object0);
      assertNotNull(object0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("-5", (DeserializationContext) null);
      assertNotNull(object0);
      assertEquals((byte) (-5), object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      UUID uUID0 = (UUID)stdKeyDeserializer0.deserializeKey("' found (for property '", (DeserializationContext) null);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      EnumResolver enumResolver0 = EnumResolver.constructUnsafe(class0, annotationIntrospector1);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", defaultDeserializationContext_Impl0);
      assertEquals("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringKD", object0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-89), class0);
      try { 
        stdKeyDeserializer0._parseDouble("Should not be called on this type");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      try { 
        stdKeyDeserializer_StringKD0._parseLong("from-int");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"from-int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(5, class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      try { 
        stdKeyDeserializer_StringKD0._parse((String) null, (DeserializationContext) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.net.URL
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      Class<?> class1 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertEquals(17, class1.getModifiers());
  }
}
