/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:23:17 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(deserializationFeature1);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)98;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)24, (-2025));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      Class<UUID> class0 = UUID.class;
      Short short0 = new Short((byte) (-70));
      JsonDeserializer<Short> jsonDeserializer0 = (JsonDeserializer<Short>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(short0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      stdKeyDeserializer_DelegatingKD0.deserializeKey("JSON", defaultDeserializationContext0);
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Module> class0 = Module.class;
      JsonDeserializer<ObjectIdGenerators.UUIDGenerator> jsonDeserializer0 = (JsonDeserializer<ObjectIdGenerators.UUIDGenerator>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(deserializationFeature1);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-70);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 3, (-1730010109));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.Module` from String \"\": not a valid representation: Cannot deserialize Map key of type `com.fasterxml.jackson.databind.Module` from String \"\": not a valid representation
         //  at [Source: (byte[])\"\u0005b\u001B\u0018\uFFFD\"; line: 1, column: 0]
         //  at [Source: (byte[])\"\u0005b\u001B\u0018\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.withFeatures(formatFeatureArray0);
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[9];
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      deserializationFeatureArray0[1] = deserializationFeature1;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      deserializationFeatureArray0[2] = deserializationFeature2;
      DeserializationFeature deserializationFeature3 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      deserializationFeatureArray0[3] = deserializationFeature3;
      DeserializationFeature deserializationFeature4 = DeserializationFeature.WRAP_EXCEPTIONS;
      deserializationFeatureArray0[4] = deserializationFeature4;
      DeserializationFeature deserializationFeature5 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      deserializationFeatureArray0[5] = deserializationFeature5;
      DeserializationFeature deserializationFeature6 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      deserializationFeatureArray0[6] = deserializationFeature6;
      DeserializationFeature deserializationFeature7 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      deserializationFeatureArray0[7] = deserializationFeature7;
      DeserializationFeature deserializationFeature8 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      deserializationFeatureArray0[8] = deserializationFeature8;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.withoutFeatures(deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("EL!CU,w}Ql/Rz");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      SQLWarning sQLWarning0 = new SQLWarning("H", "no int/Int-argument constructor/factory method to deserialize from Number value (%s)", (-1338));
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("EL!CU,w}Ql/Rz", "6B<iE$hO7i8+`AK", 8000, sQLWarning0);
      try { 
        stdKeyDeserializer_StringKD0._weirdKey(defaultDeserializationContext0, "JSON", sQLTimeoutException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Byte` from String \"JSON\": problem: EL!CU,w}Ql/Rz
         //  at [Source: (String)\"EL!CU,w}Ql/Rz\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.TYPE;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2, class1);
      stdKeyDeserializer0._parse("8", (DeserializationContext) null);
      stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<UUID> class1 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      DeserializationContext deserializationContext0 = null;
      String string0 = "Y q>?r(Is";
      stdKeyDeserializer0.deserializeKey("Y q>?r(Is", (DeserializationContext) null);
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, (JsonDeserializer<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with((SubtypeResolver) stdSubtypeResolver0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(14, 3);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("Y q>?r(Is", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.util.UUID` from String \"Y q>?r(Is\": not a valid representation: null
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<URL> class0 = URL.class;
      FromStringDeserializer<Date> fromStringDeserializer0 = (FromStringDeserializer<Date>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(11, class0, fromStringDeserializer0);
      stdKeyDeserializer0._parseLong("0");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stdKeyDeserializer0.deserializeKey("0", (DeserializationContext) null);
      stdKeyDeserializer0._parseDouble("0");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0._parseInt("0");
      int int0 = StdKeyDeserializer.TYPE_URL;
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.TYPE;
      String string0 = "8";
      DeserializationContext deserializationContext0 = null;
      stdKeyDeserializer0.deserializeKey("8", (DeserializationContext) null);
      Random.setNextRandom(17);
      try { 
        stdKeyDeserializer0._parseDouble("{?(n^O62ztWAQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.TYPE;
      Class<Short> class2 = Short.class;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(6, class2);
      stdKeyDeserializer1.deserializeKey((String) null, (DeserializationContext) null);
      Random.setNextRandom(1820);
      stdKeyDeserializer0.deserializeKey("2", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.TYPE;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(2, class1);
      String string0 = "2";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer1.deserializeKey("2", defaultDeserializationContext0);
      stdKeyDeserializer0._parseLong("2");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("2", defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(deserializationFeature0, deserializationFeatureArray0);
      DeserializationConfig deserializationConfig2 = deserializationConfig1.without(deserializationFeature1);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)98;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)24, (-2025));
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser0, injectableValues_Std0);
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((byte) (-70), class0);
      try { 
        stdKeyDeserializer0.deserializeKey("JSON", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Double` from String \"JSON\": not a valid representation, problem: (org.evosuite.runtime.mock.java.lang.MockIllegalStateException) Internal error: unknown key type class java.lang.Double
         //  at [Source: (byte[])\"\u0018b\uFFFD\uFFFDb\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializationContext deserializationContext0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0._parse("true", defaultDeserializationContext0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("-;{s'yfow,..w", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer0.deserializeKey("true", (DeserializationContext) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector1);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector1);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      Class<MockCalendar> class1 = MockCalendar.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class1, 9);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer_Std0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("not a valid representation, problem: (%s) %s", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD)StdKeyDeserializer.forType(class0);
      stdKeyDeserializer_StringKD0._parseInt("4");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Class<JsonTypeInfo.Id> class1 = JsonTypeInfo.Id.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3225);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(3225, class1, fromStringDeserializer_Std0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class1, annotationIntrospector1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0._parse("/BB7dk", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(8, class0, fromStringDeserializer0);
      stdKeyDeserializer0.getKeyClass();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2232, class0);
      stdKeyDeserializer0._parseDouble("6");
      stdKeyDeserializer0._parseDouble("6");
      String string0 = "3rQ=M@Ga";
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      Integer integer0 = new Integer(9);
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      stdKeyDeserializer0.deserializeKey("not a valid representation", defaultDeserializationContext_Impl0);
      System.setCurrentTimeMillis(1);
      Class<Short> class1 = Short.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 16);
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, coreXMLDeserializers_Std0);
      stdKeyDeserializer0.getKeyClass();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("not a valid representation", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FromStringDeserializer<Locale> fromStringDeserializer0 = (FromStringDeserializer<Locale>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0, fromStringDeserializer0);
      stdKeyDeserializer0.getKeyClass();
      Class<Locale> class1 = Locale.class;
      try { 
        stdKeyDeserializer0._parseInt("not one of values excepted for Enum class: %s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not one of values excepted for Enum class: %s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
      StdKeyDeserializer.forType(class0);
      JsonDeserializer<Long> jsonDeserializer0 = (JsonDeserializer<Long>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HxW\"?}1<");
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = null;
      stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        Short.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("not one of values excepted for Enum class: %s", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      Class<String> class1 = String.class;
      StdKeyDeserializer.forType(class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig2.withDeserializerModifier(beanDeserializerModifier0);
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig1.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      deserializerFactoryConfig3.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactoryConfig deserializerFactoryConfig4 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base1 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0, fromStringDeserializer0);
      try { 
        stdKeyDeserializer0._parse(" e", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer<UUID> fromStringDeserializer0 = null;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0, (FromStringDeserializer<?>) null);
      String string0 = "";
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      SimpleFilterProvider simpleFilterProvider1 = simpleFilterProvider0.addFilter("com.fasterxml.jackson.databind.util.RootNameLookup", (SimpleBeanPropertyFilter) null);
      objectMapper0.setFilterProvider(simpleFilterProvider1);
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Include0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectMapper2.writer();
      objectMapper2.createArrayNode();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("", deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      FromStringDeserializer<JsonTypeInfo.Id> fromStringDeserializer1 = (FromStringDeserializer<JsonTypeInfo.Id>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      FromStringDeserializer<Float> fromStringDeserializer2 = (FromStringDeserializer<Float>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Class<Short> class0 = Short.class;
      StdKeyDeserializer.forType(class0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer.forType(class0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      try { 
        stdKeyDeserializer0._parseInt((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig4 = deserializerFactoryConfig3.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig5 = deserializerFactoryConfig4.withDeserializerModifier(beanDeserializerModifier0);
      deserializerFactoryConfig5.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactoryConfig deserializerFactoryConfig6 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(3, class0, fromStringDeserializer0);
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class1 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(5, class0, (FromStringDeserializer<?>) null);
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(3, class1, (FromStringDeserializer<?>) null);
      try { 
        stdKeyDeserializer1._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer.forType(class0);
      String string0 = "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer";
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = false;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 5);
      ObjectNode objectNode0 = arrayNode0.objectNode();
      ObjectNode objectNode1 = objectNode0.with("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(objectNode1, "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<URI> class1 = URI.class;
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(8, class1, fromStringDeserializer0);
      stdKeyDeserializer0._parse("true", defaultDeserializationContext_Impl0);
      Class<Byte> class2 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer2 = new StdKeyDeserializer(10, class2);
      try { 
        stdKeyDeserializer2._parse("D}+KkX`9x:pu", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0._parse("not a valid representation", (DeserializationContext) null);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Integer integer0 = new Integer((-1040));
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(10, class0, (FromStringDeserializer<?>) null);
      try { 
        stdKeyDeserializer1._parse("", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<CharBuffer> class1 = CharBuffer.class;
      FromStringDeserializer<URL> fromStringDeserializer1 = (FromStringDeserializer<URL>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer1)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(9, class1, fromStringDeserializer1);
      Object object0 = new Object();
      Class<Module> class2 = Module.class;
      FromStringDeserializer<Integer> fromStringDeserializer2 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer2 = new StdKeyDeserializer(11, class2, fromStringDeserializer2);
      // Undeclared exception!
      try { 
        stdKeyDeserializer1.deserializeKey("6<[~'z}lo=t^", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(14);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      deserializers_Base0.findBeanDeserializer(placeholderForType0, (DeserializationConfig) null, basicBeanDescription0);
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("a", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class1 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      Class<UUID> class1 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(4, class1, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("a", defaultDeserializationContext_Impl0);
      StdKeyDeserializer.forType(class0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("~Gm)cM", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Short> class1 = Short.class;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(9, class1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<Date> class2 = Date.class;
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class2, (ValueInstantiator) null);
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("2", defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      stdKeyDeserializer0._parse("true", defaultDeserializationContext0);
      Class<Byte> class1 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(15, class1);
      try { 
        stdKeyDeserializer1._parseLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class1 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class1);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("A[>=Rw2MUmd}'Yr/", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "true");
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<Long> class1 = Long.TYPE;
      Class<Object> class2 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class2, (FromStringDeserializer<?>) null);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      Class<String> class1 = String.class;
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(1, class1, (FromStringDeserializer<?>) null);
      try { 
        stdKeyDeserializer1._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Double> class1 = Double.class;
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class1, uUIDDeserializer0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("wgG'/i]`#7v", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Float> class1 = Float.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer1 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(11, class1, fromStringDeserializer1);
      Object object0 = new Object();
      Class<Character> class2 = Character.class;
      FromStringDeserializer<URL> fromStringDeserializer2 = (FromStringDeserializer<URL>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer2 = new StdKeyDeserializer(2, class2, fromStringDeserializer2);
      // Undeclared exception!
      try { 
        stdKeyDeserializer2.deserializeKey("", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(2, class0, (FromStringDeserializer<?>) null);
      String string0 = null;
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = "";
      FromStringDeserializer<String> fromStringDeserializer0 = (FromStringDeserializer<String>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(14, class0, fromStringDeserializer0);
      try { 
        stdKeyDeserializer0._parse("l9aELa", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<Float> class1 = Float.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer1 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer(11, class1, fromStringDeserializer1);
      try { 
        stdKeyDeserializer1._parse("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      Class<Double> class1 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(11, class1, (FromStringDeserializer<?>) null);
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig3);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0._parse("0&`;\"ii2", defaultDeserializationContext_Impl0);
      try { 
        stdKeyDeserializer0._parseLong((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(13, class0, fromStringDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      stdKeyDeserializer1.deserializeKey("", defaultDeserializationContext_Impl1);
      Class<Currency> class1 = Currency.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.forType(class0);
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer.forType(class1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonDeserializer<Locale> jsonDeserializer0 = (JsonDeserializer<Locale>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      Class<Locale> class1 = Locale.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      String string0 = "";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<String> class1 = String.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class1, 9);
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(7, class0, fromStringDeserializer_Std0);
      try { 
        stdKeyDeserializer0._parse("true", defaultDeserializationContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        stdKeyDeserializer0._parse("", defaultDeserializationContext0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.forType(class0);
      JsonDeserializer<URI> jsonDeserializer0 = (JsonDeserializer<URI>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Class<UUID> class1 = UUID.class;
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-740), class1, fromStringDeserializer0);
      Class<Long> class2 = Long.class;
      StdKeyDeserializer.forType(class2);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig1.valueInstantiators();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext0);
      Class<Calendar> class3 = Calendar.class;
      StdKeyDeserializer.forType(class3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer.forType(class0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.forType(class0);
      String string0 = "y7bz";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute("y7bz", deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<CharBuffer> class1 = CharBuffer.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class1, stdKeyDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      StdKeyDeserializer stdKeyDeserializer1 = new StdKeyDeserializer((-451), class0, (FromStringDeserializer<?>) null);
      String string0 = null;
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(13, class0, fromStringDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdKeyDeserializer0.deserializeKey("unable to parse key as Class", defaultDeserializationContext0);
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      Class<Long> class1 = Long.class;
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, jsonDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig1.valueInstantiators();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      stdKeyDeserializer_StringKD0.deserializeKey("", defaultDeserializationContext_Impl0);
      Class<Currency> class2 = Currency.class;
      StdKeyDeserializer.forType(class2);
      stdKeyDeserializer_DelegatingKD0.getKeyClass();
      try { 
        stdKeyDeserializer_StringKD0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type int
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Currency> class1 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("3Q=M@Ga", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer.forType(class0);
      String string0 = "";
      String string1 = "([ XBZ~CZ`3oX-b";
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseInt("Y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer.forType(class0);
      String string0 = "";
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      deserializerFactoryConfig0.deserializerModifiers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "q8Zd^}o'", 11);
      sQLTransientException0.fillInStackTrace();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._weirdKey(defaultDeserializationContext0, "", sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
      Class<Byte> class1 = Byte.class;
      StdKeyDeserializer.forType(class1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<Object> class1 = Object.class;
      StdKeyDeserializer.forType(class1);
      String string0 = "6|Qmy7j$;hDy7g-c3_";
      DeserializationContext deserializationContext0 = null;
      try { 
        stdKeyDeserializer0._parse("6|Qmy7j$;hDy7g-c3_", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      Class<URI> class1 = URI.class;
      StdKeyDeserializer.forType(class1);
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(13, class0, uUIDDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory2 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<String> class0 = String.class;
      JsonDeserializer<Character> jsonDeserializer0 = (JsonDeserializer<Character>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      String string0 = "not one of values excepted for Enum class: %s";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      try { 
        stdKeyDeserializer_StringKD0._parseDouble("8SMVW<+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdKeyDeserializer_StringKD0.deserializeKey("", defaultDeserializationContext_Impl0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      Class<Object> class1 = Object.class;
      JsonDeserializer<Locale> jsonDeserializer0 = (JsonDeserializer<Locale>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, jsonDeserializer0);
      String string0 = "";
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD.forType(class0);
      StdKeyDeserializer.StringKD.forType(class0);
      String string0 = "";
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("7Z", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<String> class0 = String.class;
      FromStringDeserializer<CharBuffer> fromStringDeserializer0 = (FromStringDeserializer<CharBuffer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-4011), class0, fromStringDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      deserializerFactoryConfig0.deserializers();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        stdKeyDeserializer0._parse("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.forType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, (FromStringDeserializer<?>) null);
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      
      String string0 = "{Q1=";
      try { 
        stdKeyDeserializer0._parseDouble("{Q1=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Object> class0 = Object.class;
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      assertNotNull(uUIDDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, uUIDDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, uUIDDeserializer0.getEmptyAccessPattern());
      assertFalse(uUIDDeserializer0.isCachable());
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, uUIDDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, uUIDDeserializer0.getNullAccessPattern());
      assertEquals(AccessPattern.CONSTANT, uUIDDeserializer0.getEmptyAccessPattern());
      assertFalse(uUIDDeserializer0.isCachable());
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      
      String string0 = "M]4lS";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("M]4lS", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey("_`=@11c;", defaultDeserializationContext0);
      assertEquals("_`=@11c;", object0);
      assertNotNull(object0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      Object object1 = stdKeyDeserializer_StringKD0.deserializeKey("_`=@11c;", defaultDeserializationContext0);
      assertEquals("_`=@11c;", object1);
      assertNotNull(object1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(object1.equals((Object)object0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD1 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD1);
      assertFalse(stdKeyDeserializer_StringKD1.equals((Object)stdKeyDeserializer_StringKD0));
      assertNotSame(stdKeyDeserializer_StringKD1, stdKeyDeserializer_StringKD0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("_`=@11c;", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer1);
      assertSame(stdKeyDeserializer1, stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = (StdKeyDeserializer.StringKD)StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertNotNull(objectMapper1);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.addHandler((DeserializationProblemHandler) null);
      assertNotNull(objectMapper2);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("3ftShN");
      assertNotNull(defaultPrettyPrinter0);
      
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      assertNotNull(objectMapper3);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper3.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, objectMapper3.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = null;
      try {
        defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      FromStringDeserializer<Byte> fromStringDeserializer0 = (FromStringDeserializer<Byte>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-784), class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.util.UUID", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      String string0 = "4 k.K";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      assertNotNull(map0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      String string1 = "~9}oIy1${Kt<bA8~2";
      JsonDeserializer<URL> jsonDeserializer0 = (JsonDeserializer<URL>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      PropertyName propertyName0 = new PropertyName("no default no-arguments constructor found", "4 k.K");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("no default no-arguments constructor found", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("4 k.K", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      
      JavaType[] javaTypeArray0 = new JavaType[7];
      Class<Byte> class1 = Byte.class;
      TypeBindings typeBindings0 = null;
      // Undeclared exception!
      try { 
        MapType.construct(class0, (TypeBindings) null, (JavaType) null, javaTypeArray0, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      
      String string0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<String> class0 = String.class;
      FromStringDeserializer<Character> fromStringDeserializer0 = (FromStringDeserializer<Character>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-1489), class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      try { 
        stdKeyDeserializer0._parseDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-42), class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      try { 
        stdKeyDeserializer0._parseDouble("not a valid representation, problem: (%s) %s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory2 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory2);
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory2, beanDeserializerFactory0);
      
      Class<URL> class1 = URL.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = "true";
      Class<?> class2 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertNotNull(class2);
      assertEquals("class java.net.URL", class2.toString());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      
      Constructor<Calendar> constructor0 = null;
      try { 
        stdKeyDeserializer0._parseInt(" PL%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" PL%\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD1 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD1);
      assertFalse(stdKeyDeserializer_StringKD1.equals((Object)stdKeyDeserializer_StringKD0));
      assertNotSame(stdKeyDeserializer_StringKD1, stdKeyDeserializer_StringKD0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      
      String string0 = "7Z";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Class<Currency> class1 = Currency.class;
      try { 
        stdKeyDeserializer_StringKD0._parse((String) null, defaultDeserializationContext0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.Integer
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig2);
      assertFalse(deserializerFactoryConfig2.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig2.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig2.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig2.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig2.hasDeserializers());
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig2.equals((Object)deserializerFactoryConfig1));
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl1));
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl1);
      
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(8, class0, (FromStringDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      String string0 = null;
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse((String) null, defaultDeserializationContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Double> class0 = Double.class;
      JsonDeserializer<Long> jsonDeserializer0 = (JsonDeserializer<Long>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      Class<?> class1 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Class<Integer> class2 = Integer.class;
      FromStringDeserializer<Long> fromStringDeserializer0 = (FromStringDeserializer<Long>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(762, class2, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      
      String string0 = "plT8SX";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      assertNotNull(stdKeyDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      Iterable<ValueInstantiators> iterable0 = deserializerFactoryConfig0.valueInstantiators();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer1.deserializeKey("plT8SX", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD1 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD1);
      assertFalse(stdKeyDeserializer_StringKD1.equals((Object)stdKeyDeserializer_StringKD0));
      assertNotSame(stdKeyDeserializer_StringKD1, stdKeyDeserializer_StringKD0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("7Z", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      String string0 = "";
      try { 
        stdKeyDeserializer0._parseDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      Class<Byte> class1 = Byte.class;
      JsonDeserializer<MockCalendar> jsonDeserializer0 = (JsonDeserializer<MockCalendar>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = "";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      assertNotNull(simpleAbstractTypeResolver0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DeserializationConfig deserializationConfig0 = null;
      Class<String> class2 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      AnnotatedWithParams annotatedWithParams0 = null;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      assertNotNull(basicClassIntrospector0);
      
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forClassAnnotations((MapperConfig<?>) null, javaTypeArray0[2], (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      
      String string0 = "*:Y\"G-:,jVW/UO{#(s";
      try { 
        stdKeyDeserializer0._parseLong("*:Y\"G-:,jVW/UO{#(s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*:Y\"G-:,jVW/UO{#(s\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      UUID uUID0 = (UUID)stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
      assertNotNull(uUID0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertNull(object0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer0));
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<URL> class0 = URL.class;
      FromStringDeserializer<Integer> fromStringDeserializer0 = (FromStringDeserializer<Integer>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(488, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext0);
      assertNull(object0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.net.URL", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Class<Object> class1 = Object.class;
      StdKeyDeserializer stdKeyDeserializer1 = StdKeyDeserializer.forType(class1);
      assertNotNull(stdKeyDeserializer1);
      assertFalse(stdKeyDeserializer1.equals((Object)stdKeyDeserializer_StringKD0));
      assertNotSame(stdKeyDeserializer1, stdKeyDeserializer_StringKD0);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("cVgCJl3XVj;$io", class0, "cVgCJl3XVj;$io");
      assertNotNull(jsonMappingException0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer_StringKD0._weirdKey(defaultDeserializationContext0, "false", jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      Class<?> class1 = stdKeyDeserializer_StringKD0.getKeyClass();
      assertNotNull(class1);
      assertEquals("class java.lang.Integer", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ObjectReader objectReader1 = objectReader0.withAttributes(hashMap0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      Class<Map> class2 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class2);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(mapType0);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      assertNotNull(objectIdGenerators_UUIDGenerator0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      
      UUID uUID0 = objectIdGenerators_UUIDGenerator0.generateId(typeFactory0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(uUID0);
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      MapType mapType1 = mapType0.withTypeHandler(uUID0);
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotNull(mapType1);
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isConcrete());
      assertFalse(objectIdGenerators_UUIDGenerator0.maySerializeAsObject());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertNotSame(objectReader0, objectReader1);
      assertNotSame(objectReader1, objectReader0);
      
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FromStringDeserializer<URL> fromStringDeserializer0 = (FromStringDeserializer<URL>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(0, class0, fromStringDeserializer0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertNotNull(stdKeyDeserializer_StringKD0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      
      BeanDeserializerFactory beanDeserializerFactory2 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory2);
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      assertSame(beanDeserializerFactory2, beanDeserializerFactory0);
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory2);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      
      Class<URL> class1 = URL.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = "true";
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("true", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      String string0 = "T";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withDeserializerModifier((BeanDeserializerModifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null modifier
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<URL> class0 = URL.class;
      JsonDeserializer<Locale> jsonDeserializer0 = (JsonDeserializer<Locale>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey(".)qVtNo3V%uc3A", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }
}
