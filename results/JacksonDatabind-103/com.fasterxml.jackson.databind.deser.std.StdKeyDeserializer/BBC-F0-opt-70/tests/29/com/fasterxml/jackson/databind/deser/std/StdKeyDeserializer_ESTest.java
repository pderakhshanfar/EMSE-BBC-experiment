/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:49:44 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URL;
import java.sql.ClientInfoStatus;
import java.sql.SQLFeatureNotSupportedException;
import java.util.Calendar;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdKeyDeserializer_ESTest extends StdKeyDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("3", (DeserializationContext) null);
      assertEquals((short)3, object0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0._parse("5", (DeserializationContext) null);
      assertEquals((byte)5, object0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer_StringKD0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey("com.fasterxml.jackson.databind.InjectableValues", deserializationContext0);
      assertEquals("com.fasterxml.jackson.databind.InjectableValues", object0);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector0);
      assertEquals(4, enumResolver0.lastValidIndex());
      assertNotNull(enumResolver0);
      
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(4, enumResolver0.lastValidIndex());
      assertNotNull(stdKeyDeserializer_EnumKD0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer_EnumKD0._parse((String) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      Class<MockCalendar> class1 = MockCalendar.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertNotNull(fromStringDeserializer_Std0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class1, fromStringDeserializer_Std0);
      assertEquals(7, FromStringDeserializer.Std.STD_PATTERN);
      assertEquals(1, FromStringDeserializer.Std.STD_FILE);
      assertEquals(6, FromStringDeserializer.Std.STD_CURRENCY);
      assertEquals(4, FromStringDeserializer.Std.STD_CLASS);
      assertEquals(10, FromStringDeserializer.Std.STD_TIME_ZONE);
      assertEquals(11, FromStringDeserializer.Std.STD_INET_ADDRESS);
      assertEquals(12, FromStringDeserializer.Std.STD_INET_SOCKET_ADDRESS);
      assertEquals(5, FromStringDeserializer.Std.STD_JAVA_TYPE);
      assertEquals(8, FromStringDeserializer.Std.STD_LOCALE);
      assertEquals(9, FromStringDeserializer.Std.STD_CHARSET);
      assertEquals(13, FromStringDeserializer.Std.STD_STRING_BUILDER);
      assertEquals(2, FromStringDeserializer.Std.STD_URL);
      assertEquals(3, FromStringDeserializer.Std.STD_URI);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertFalse(fromStringDeserializer_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, fromStringDeserializer_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, fromStringDeserializer_Std0.getNullAccessPattern());
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertNotNull(class0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertNotNull(stdKeyDeserializer0);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("char", class0.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertEquals("char", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      FromStringDeserializer<Annotation> fromStringDeserializer0 = (FromStringDeserializer<Annotation>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer((-1094551997), class0, fromStringDeserializer0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertTrue(class1.isInterface());
      assertEquals("interface com.fasterxml.jackson.annotation.ObjectIdResolver", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(1537, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      FromStringDeserializer<Double> fromStringDeserializer0 = (FromStringDeserializer<Double>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer0);
      
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      assertEquals(16393, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isEnum());
      assertEquals("class com.fasterxml.jackson.annotation.JsonTypeInfo$Id", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(stdKeyDeserializer0);
      
      long long0 = stdKeyDeserializer0._parseLong("0");
      assertEquals(0L, long0);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      long long0 = stdKeyDeserializer0._parseLong("1");
      assertEquals(1L, long0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      int int0 = stdKeyDeserializer0._parseInt("0");
      assertEquals(0, int0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer0);
      
      int int0 = stdKeyDeserializer0._parseInt("7");
      assertEquals(7, int0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(stdKeyDeserializer0);
      
      double double0 = stdKeyDeserializer0._parseDouble("-0");
      assertEquals(-0.0, double0, 0.01);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1766, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer0);
      
      double double0 = stdKeyDeserializer0._parseDouble("95");
      assertEquals(95.0, double0, 0.01);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Character> class0 = Character.class;
      FromStringDeserializer<Double> fromStringDeserializer0 = (FromStringDeserializer<Double>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0._parse((String) null, defaultDeserializationContext_Impl0);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(6, class0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNotNull(serializationConfig0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver(serializationConfig0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectReader0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      assertNotNull(injectableValues_Std0);
      
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertNotNull(booleanNode0);
      
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertNotNull(jsonParser0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(JsonInclude.Include.ALWAYS, serializationConfig0.getSerializationInclusion());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertNull(serializationConfig0.getRootName());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(booleanNode0.isIntegralNumber());
      assertFalse(booleanNode0.isShort());
      assertEquals("true", booleanNode0.asText());
      assertFalse(booleanNode0.isInt());
      assertFalse(booleanNode0.isBigDecimal());
      assertTrue(booleanNode0.asBoolean());
      assertFalse(booleanNode0.isObject());
      assertNull(booleanNode0.numberType());
      assertEquals(0, booleanNode0.size());
      assertFalse(booleanNode0.isLong());
      assertNull(booleanNode0.textValue());
      assertFalse(booleanNode0.isFloatingPointNumber());
      assertFalse(booleanNode0.isMissingNode());
      assertEquals(JsonToken.VALUE_TRUE, booleanNode0.asToken());
      assertFalse(booleanNode0.isFloat());
      assertEquals(JsonNodeType.BOOLEAN, booleanNode0.getNodeType());
      assertFalse(booleanNode0.isBigInteger());
      assertFalse(booleanNode0.isDouble());
      assertFalse(booleanNode0.isArray());
      assertTrue(booleanNode0.booleanValue());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext0);
      
      try { 
        stdKeyDeserializer0.deserializeKey("Internal error: should never end up through this code path", defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.String` from String \"Internal error: should never end up through this code path\": not a valid representation, problem: (java.lang.NumberFormatException) For input string: \"Internal error: should never end up through this code path\"
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer0);
      
      try { 
        stdKeyDeserializer0._parseDouble("X`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer_StringKD0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<MockCalendar> class0 = MockCalendar.class;
      JsonDeserializer<BufferedInputStream> jsonDeserializer0 = (JsonDeserializer<BufferedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, jsonDeserializer0);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNotNull(simpleMixInResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNull(configOverrides0.getDefaultMergeable());
      assertNotNull(configOverrides0);
      
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertNotNull(deserializationConfig0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("JSON");
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNotNull(readerBasedJsonParser0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(injectableValues_Std0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, simpleMixInResolver0.localSize());
      assertNull(configOverrides0.getDefaultMergeable());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotNull(defaultDeserializationContext_Impl1);
      
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("Internal error: unknown key type ", defaultDeserializationContext_Impl1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.util.MockCalendar` from String \"Internal error: unknown key type \": not a valid representation: Cannot deserialize Map key of type `org.evosuite.runtime.mock.java.util.MockCalendar` from String \"Internal error: unknown key type \": not a valid representation
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, (JsonDeserializer<?>) null);
      assertNotNull(stdKeyDeserializer_DelegatingKD0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(deserializationContext0);
      
      Object object0 = stdKeyDeserializer_DelegatingKD0.deserializeKey((String) null, deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      try { 
        stdKeyDeserializer0._parse("BAzRmNKSH k=z{", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("P=qW|>gln^>[fz\"Cs9W", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Float> class0 = Float.TYPE;
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(class0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("true", defaultDeserializationContext_Impl0);
      assertEquals(true, object0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertEquals("float", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertNotNull(stdKeyDeserializer_StringKD0);
      
      try { 
        stdKeyDeserializer_StringKD0._parse("?PBS2t8E+", (DeserializationContext) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Internal error: unknown key type class java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(17, class0);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("1s6<5-{", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(15, class0);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("com.fasterxml.jackson.databind.ProperyNamingStraegy$UpperCamelCaseStrategy", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<URI> class0 = URI.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertNotNull(stdKeyDeserializer0);
      
      try { 
        stdKeyDeserializer0._parse("q`2Z/xh", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(10, class0, fromStringDeserializer0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertNotNull(stdKeyDeserializer0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("unable to parse key as Class", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(5, class0);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertNotNull(stdKeyDeserializer0);
      
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("P=qW|>gln^>[fz\"Cs9W", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(1, class0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("false", defaultDeserializationContext_Impl0);
      assertEquals(false, object0);
      assertEquals(7, StdKeyDeserializer.TYPE_FLOAT);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
      assertEquals(15, StdKeyDeserializer.TYPE_CLASS);
      assertEquals(12, StdKeyDeserializer.TYPE_UUID);
      assertEquals(11, StdKeyDeserializer.TYPE_CALENDAR);
      assertEquals(14, StdKeyDeserializer.TYPE_URL);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
      assertEquals(8, StdKeyDeserializer.TYPE_DOUBLE);
      assertEquals(10, StdKeyDeserializer.TYPE_DATE);
      assertEquals(3, StdKeyDeserializer.TYPE_SHORT);
      assertEquals(1, StdKeyDeserializer.TYPE_BOOLEAN);
      assertEquals(6, StdKeyDeserializer.TYPE_LONG);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
      assertEquals(2, StdKeyDeserializer.TYPE_BYTE);
      assertEquals(17, StdKeyDeserializer.TYPE_BYTE_ARRAY);
      assertEquals(5, StdKeyDeserializer.TYPE_INT);
      assertEquals(16, StdKeyDeserializer.TYPE_CURRENCY);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Short> class0 = Short.class;
      FromStringDeserializer<Currency> fromStringDeserializer0 = (FromStringDeserializer<Currency>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(16, class0, fromStringDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("Internal error: should never end up through this code path", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      FromStringDeserializer<Double> fromStringDeserializer0 = (FromStringDeserializer<Double>) mock(FromStringDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(fromStringDeserializer0)._deserialize(anyString() , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(9, class0, fromStringDeserializer0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("type ids are not statically known", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNull(stdKeyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<Double> class0 = Double.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("t'mtOw|.C#jhK[J", (DeserializationContext) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Float> class0 = Float.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0.deserializeKey("P=qW|>gln^>[fz\"Cs9W", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Class<Short> class0 = Short.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Object object0 = stdKeyDeserializer0._parse("5", (DeserializationContext) null);
      assertEquals((short)5, object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<Character> class0 = Character.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0.deserializeKey("1", (DeserializationContext) null);
      assertEquals('1', object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertNotNull(stdKeyDeserializer0);
      
      Object object0 = stdKeyDeserializer0._parse("3", (DeserializationContext) null);
      assertEquals((byte)3, object0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parse("", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Long> class0 = Long.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = stdKeyDeserializer0.deserializeKey((String) null, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(4, StdKeyDeserializer.TYPE_CHAR);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      UUID uUID0 = (UUID)stdKeyDeserializer0._parse("0", (DeserializationContext) null);
      assertEquals(16793600L, uUID0.getMostSignificantBits());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(13, StdKeyDeserializer.TYPE_URI);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Class<String> class0 = String.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      assertEquals(9, StdKeyDeserializer.TYPE_LOCALE);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdKeyDeserializer.StringFactoryKeyDeserializer stdKeyDeserializer_StringFactoryKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringFactoryKeyDeserializer0 = new StdKeyDeserializer.StringFactoryKeyDeserializer((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringFactoryKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdKeyDeserializer.StringCtorKeyDeserializer stdKeyDeserializer_StringCtorKeyDeserializer0 = null;
      try {
        stdKeyDeserializer_StringCtorKeyDeserializer0 = new StdKeyDeserializer.StringCtorKeyDeserializer((Constructor<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$StringCtorKeyDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<JsonTypeInfo.Id> class0 = JsonTypeInfo.Id.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      EnumResolver enumResolver0 = EnumResolver.constructUnsafeUsingToString(class0, annotationIntrospector0);
      StdKeyDeserializer.EnumKD stdKeyDeserializer_EnumKD0 = new StdKeyDeserializer.EnumKD(enumResolver0, (AnnotatedMethod) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        stdKeyDeserializer_EnumKD0._parse("h<", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<Date> class0 = Date.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      Object object0 = stdKeyDeserializer_StringKD0.deserializeKey("", defaultDeserializationContext_Impl0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Class<URL> class0 = URL.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Date> class0 = Date.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      try { 
        stdKeyDeserializer0._parseInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = new StdKeyDeserializer(0, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("JSON");
      // Undeclared exception!
      try { 
        stdKeyDeserializer0._weirdKey(deserializationContext0, "JSON", sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      Class<?> class1 = stdKeyDeserializer0.getKeyClass();
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class1, jsonDeserializer0);
      Class<?> class2 = stdKeyDeserializer_DelegatingKD0.getKeyClass();
      assertEquals(17, class2.getModifiers());
  }
}
