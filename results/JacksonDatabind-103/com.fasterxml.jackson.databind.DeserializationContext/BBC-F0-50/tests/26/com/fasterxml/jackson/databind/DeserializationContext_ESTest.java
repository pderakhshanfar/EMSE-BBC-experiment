/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 00:38:33 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.ClientInfoStatus;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectBuffer0.resetAndStart();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(237020228);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanProperty_Bogus0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "/Y6-Yl@(5uG%}m", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '}'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "*s%Cne>";
      objectArray0[1] = (Object) jsonDeserializer0;
      objectArray0[2] = (Object) "*s%Cne>";
      objectArray0[3] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "*s%Cne>", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(objectReader0);
      ReferenceType.upgradeFrom(referenceType1, referenceType1);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      ReferenceType referenceType3 = referenceType2.withTypeHandler(referenceType0);
      ReferenceType referenceType4 = referenceType0.withStaticTyping();
      ReferenceType referenceType5 = referenceType3.withContentValueHandler(referenceType4);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(referenceType5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.ReferenceType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) deserializationFeature0;
      objectArray0[2] = (Object) "!MZ`)%]<2^v?o:E2:H[";
      objectArray0[3] = (Object) jsonToken0;
      objectArray0[4] = (Object) "!MZ`)%]<2^v?o:E2:H[";
      objectArray0[5] = (Object) beanDeserializerFactory0;
      objectArray0[6] = (Object) "!MZ`)%]<2^v?o:E2:H[";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) null, jsonToken0, "!MZ`)%]<2^v?o:E2:H[", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ']'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, typeBindings0);
      MapType mapType1 = mapType0.withKeyType(arrayType0);
      MapType mapType2 = (MapType)mapType1.withContentValueHandler(mapType0);
      MapType mapType3 = (MapType)mapType2.withValueHandler(mapType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(mapType3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapType cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader1 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      TypeFactory.defaultInstance();
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class1, class1);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext_Impl2.hasValueDeserializerFor(mapType0, atomicReference0);
      assertFalse(boolean0);
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl2.getArrayBuilders();
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertNotNull(arrayBuilders0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iuecC");
      defaultDeserializationContext0.parseDate("1");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      defaultDeserializationContext0.constructType((Class<?>) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(237011088);
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, keyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationFeature0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1028), 2, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(3, 0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<List> class0 = List.class;
      defaultDeserializationContext0.constructType(class0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.getActiveView();
      SQLException sQLException0 = new SQLException();
      defaultDeserializationContext_Impl0.instantiationException((Class<?>) null, (Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "VI3p3xr=%(n";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) "VI3p3xr=%(n";
      objectArray0[4] = (Object) "VI3p3xr=%(n";
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "VI3p3xr=%(n", "VI3p3xr=%(n", objectArray0);
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = '('
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      Short short0 = new Short((short) (-1));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(short0);
      Class<Void> class0 = Void.class;
      try { 
        objectMapper0.treeToValue((TreeNode) valueNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.Void` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (-1)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      defaultDeserializationContext0.findRootValueDeserializer(javaType0);
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, jsonDeserializer0, objectMapper0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      Class<ArrayType> class0 = ArrayType.class;
      Class<PropertyName> class1 = PropertyName.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      Class<Integer> class2 = Integer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[5]);
      CollectionType collectionType1 = collectionType0.withValueHandler(objectReader0);
      CollectionType collectionType2 = collectionType1.withTypeHandler(resolvedRecursiveType0);
      CollectionType collectionType3 = (CollectionType)collectionType2.withTypeHandler(javaTypeArray0[2]);
      CollectionType collectionType4 = (CollectionType)collectionType3.withContentValueHandler(javaTypeArray0[3]);
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(collectionType4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [collection type; class com.fasterxml.jackson.databind.type.ArrayType, contains [recursive type; UNRESOLVED]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"PUGv;9V");
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) "%G-RH@*DX+RUleK";
      objectArray0[3] = (Object) "\"PUGv;9V";
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      objectMapper0.configure(deserializationFeature0, false);
      objectArray0[4] = (Object) "\"PUGv;9V";
      objectArray0[5] = (Object) "\"PUGv;9V";
      objectArray0[6] = (Object) objectReader0;
      objectArray0[7] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException("%G-RH@*DX+RUleK", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedReader pipedReader0 = new PipedReader(98);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55296, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 3600, 134217728, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.hasSomeOfFeatures(0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonNodeFactory0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) readerBasedJsonParser0;
      objectArray0[4] = (Object) jsonNodeFactory0;
      objectArray0[5] = (Object) iOContext0;
      objectArray0[6] = (Object) iOContext0;
      objectArray0[7] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException(javaType0, jsonToken0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      String string0 = ".G=0Y|eP&j+jt3UM";
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) ".G=0Y|eP&j+jt3UM";
      objectArray0[2] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.reportInputMismatch(javaType0, ".G=0Y|eP&j+jt3UM", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // .G=0Y|eP&j+jt3UM
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      FilteringParserDelegate filteringParserDelegate1 = (FilteringParserDelegate)defaultDeserializationContext0.getParser();
      assertEquals(0, filteringParserDelegate1.getMatchCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2060));
      JavaType javaType0 = placeholderForType0.getSuperClass();
      defaultDeserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, placeholderForType0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) javaType0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) null, "DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      Class<?> class0 = defaultDeserializationContext0.findClass("com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer");
      assertEquals("class com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer", class0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectMapper0.enableDefaultTyping();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      System.setCurrentTimeMillis(0L);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<DateFormat> class0 = DateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, (JavaType) simpleType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.text.DateFormat` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.returnObjectBuffer((ObjectBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, class0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "Could not resolve type id '%s' as a subtype of %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      objectBuffer1.resetAndStart();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken0, "=%A*t::%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      defaultDeserializationContext_Impl0.getArrayBuilders();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) jsonParserSequence0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      Object[] objectArray0 = new Object[1];
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException("Unexpected token (%s), expected %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(143);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      JsonDeserializer<?> jsonDeserializer0 = beanDeserializerFactory0.findDefaultDeserializer(defaultDeserializationContext_Impl0, javaType0, basicBeanDescription0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer1).toString();
      defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer1, (BeanProperty) null, javaType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleSecondaryContextualization(jsonDeserializer0, (BeanProperty) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible((Class<?>) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.checkUnresolvedObjectId();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-836));
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class0 = Object.class;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      objectMapper0.readerFor(class0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      Class<SimpleModule> class2 = SimpleModule.class;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      defaultDeserializationContext0.constructType(class0);
      Class<Object> class1 = Object.class;
      defaultDeserializationContext0.constructType(class1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "Overflow: numeric value (%s) out of range of int (%d -%d)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.ObjectReader
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "cG=O<Nwn", "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      String string0 = "";
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext0);
      beanDeserializerBuilder0.getValueInstantiator();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) class0;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.annotation.ObjectIdResolver` (although at least one Creator exists): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(outputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.OutputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      jsonFactory0.createGenerator((OutputStream) null);
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 997, 2700);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.mappingException(class0);
      int int0 = defaultDeserializationContext0.getDeserializationFeatures();
      assertEquals(237020304, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      String string0 = "B:%3f:&8mjNd;";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer";
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer";
      objectArray0[5] = (Object) "B:%3f:&8mjNd;";
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer", "B:%3f:&8mjNd;", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      Class<Integer> class0 = Integer.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[1]);
      JavaType[] javaTypeArray1 = new JavaType[6];
      javaTypeArray1[0] = javaType0;
      javaTypeArray1[1] = javaType0;
      javaTypeArray1[2] = javaType0;
      javaTypeArray1[3] = (JavaType) collectionLikeType0;
      javaTypeArray1[4] = javaType0;
      javaTypeArray1[5] = (JavaType) collectionLikeType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray1, javaTypeArray0[1], javaTypeArray0[0]);
      MapType mapType1 = mapType0.withStaticTyping();
      LongNode longNode0 = LongNode.valueOf((-1L));
      MapLikeType mapLikeType0 = mapType1.withKeyValueHandler(longNode0);
      CollectionLikeType collectionLikeType1 = CollectionLikeType.upgradeFrom(mapLikeType0, (JavaType) null);
      PropertyName propertyName0 = PropertyName.construct("uD;tJ{f.ny", "uD;tJ{f.ny");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<PlaceholderForType> class2 = PlaceholderForType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class2, "uD;tJ{f.ny", collectionLikeType1);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaTypeArray1[5], propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer(collectionLikeType1, beanProperty_Std1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      int int0 = (-3058);
      Class<ArrayType> class0 = ArrayType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.ArrayType` out of VALUE_FALSE token
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3058));
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      defaultDeserializationContext0.findRootValueDeserializer(placeholderForType0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      String string0 = "Too few bytes available: missing ";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, jsonToken0, "Too few bytes available: missing ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, javaType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("US_0y&*e-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "", "invalid argument(s) (offset=%d, length=%d) for input array of %d element", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Class
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.traverse();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<PropertyName> class0 = PropertyName.class;
      try { 
        objectMapper0.treeToValue((TreeNode) arrayNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.PropertyName` out of START_ARRAY token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonDeserializer<ArrayType> jsonDeserializer0 = (JsonDeserializer<ArrayType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jsonToken0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "}P%'M6";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "}P%'M6", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getContextualType();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JavaType) null, "#li#2{]PSF%Wl=;qibe", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'W'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<MapLikeType> class0 = MapLikeType.class;
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, (Object) null);
      assertTrue(boolean0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      defaultDeserializationContext_Impl1.isEnabled(deserializationFeature0);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)71;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      objectMapper0.clearProblemHandlers();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      defaultDeserializationContext_Impl0.getConfig();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue(jsonParser1, (BeanProperty) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Integer> class0 = Integer.class;
      Class<JsonSerializer> class1 = JsonSerializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(objectIdGenerators_StringIdGenerator0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class0, javaType0);
      typeBindings1.getBoundType((-1898));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) deserializationFeature0;
      objectArray0[2] = (Object) javaType0;
      objectArray0[3] = (Object) typeBindings0;
      objectArray0[4] = (Object) typeBindings0;
      objectArray0[5] = (Object) fileSystemHandling0;
      objectArray0[6] = (Object) resolvedRecursiveType0;
      objectArray0[7] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[8] = (Object) typeBindings1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      HashMap<BuilderBasedDeserializer, ReferenceType> hashMap0 = new HashMap<BuilderBasedDeserializer, ReferenceType>();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, contextAttributes1);
      ObjectReader objectReader0 = new ObjectReader(objectMapper0, deserializationConfig1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature1);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = ' ';
      charArray0[2] = '.';
      charArray0[3] = 't';
      jsonFactory1.createParser(charArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Class<Module> class0 = Module.class;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.Module`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Integer integer0 = new Integer((-580));
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Object object0 = new Object();
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(object0);
      ReferenceType referenceType2 = referenceType1.withContentTypeHandler(class0);
      ReferenceType referenceType3 = referenceType2.withStaticTyping();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.hasValueDeserializerFor(referenceType3, (AtomicReference<Throwable>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Integer integer0 = new Integer((-1491));
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) objectBuffer0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, integer0, "lYme%dmIArY_5{+ah;", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(67108847);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      JsonDeserializer<DeserializationFeature> jsonDeserializer0 = (JsonDeserializer<DeserializationFeature>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, jsonDeserializer0, objectMapper0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, simpleObjectIdResolver0, "d%Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled((DeserializationFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "F>/CdUFl%).}A";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "F>/CdUFl%).}A";
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) "sd>";
      objectArray0[7] = (Object) "(qO$2;@";
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "F>/CdUFl%).}A", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ')'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-1778));
      assertTrue(boolean0);
      
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      boolean boolean1 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Void> class0 = Void.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.keyDeserializerInstance((Annotated) null, deserializationFeature0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type com.fasterxml.jackson.databind.DeserializationFeature; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(simpleType0);
      MapLikeType mapLikeType2 = mapLikeType1.withContentTypeHandler(beanDeserializerFactory0);
      PropertyName propertyName0 = PropertyName.construct("Cannot pass null DeserializerFactory", "Cannot pass null DeserializerFactory");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      ObjectIdGenerator<CollectionLikeType> objectIdGenerator0 = (ObjectIdGenerator<CollectionLikeType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<PlaceholderForType> jsonDeserializer0 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization((Object) null);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(mapLikeType2, propertyName1, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, objectIdResolver0);
      Vector<PropertyName> vector0 = new Vector<PropertyName>();
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId(objectIdReader0, (Object) vector0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No Object Id found for an instance of `java.util.Vector`, to assign to property '{Cannot pass null DeserializerFactory}Cannot pass null DeserializerFactory'
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ArrayType> class0 = ArrayType.class;
      String string0 = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(578);
      placeholderForType0.actualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.copy();
      BeanProperty beanProperty0 = null;
      Class<Throwable> class0 = Throwable.class;
      defaultDeserializationContext0.getNodeFactory();
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, (Throwable) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.Throwable`, problem: N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "e?ozG#@of.'IsYeZ", (TypeIdResolver) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'e?ozG#@of.'IsYeZ' as a subtype of null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) "%gzO";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonParser) null, jsonToken0, "%gzO", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != com.fasterxml.jackson.core.JsonToken
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "No Object Id found for an instance of %s, to assign to property '%s'", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectBuffer0;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, "\nDxi175gA`[.DiD2%q", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      beanDeserializerBuilder0.getBuildMethod();
      defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, (Object) null);
      simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      defaultDeserializationContext_Impl0.copy();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector1);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.findValueInstantiator(defaultDeserializationContext_Impl0, basicBeanDescription1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(176);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "RD0KK.W\"/H=}x%\"";
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) deserializerFactoryConfig0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "RD0KK.W\"/H=}x%\"";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "RD0KK.W\"/H=}x%\"", "RD0KK.W\"/H=}x%\"", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '\"'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1114111);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(placeholderForType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      PipedReader pipedReader0 = new PipedReader(237020160);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, (JavaType) simpleType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.sql.ClientInfoStatus`
         //  at [Source: (PipedReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(37);
      placeholderForType0.getGenericSignature();
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 3, 4761);
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, (JavaType) placeholderForType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      Class<ArrayType> class0 = ArrayType.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) objectMapper0;
      objectArray0[6] = (Object) valueInstantiator_Base0;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, (JsonParser) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.JsonDeserializer` (no Creators, like default construct, exist): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory1);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "@pdP:c $!J-DB!*H", classNameIdResolver0, "@pdP:c $!J-DB!*H");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '@pdP:c $!J-DB!*H' as a subtype of null: @pdP:c $!J-DB!*H
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, (String) null, (JsonDeserializer<?>) null);
      ObjectIdGenerator<MapType> objectIdGenerator0 = (ObjectIdGenerator<MapType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId((Object) null, objectIdGenerator0, simpleObjectIdResolver0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(37);
      placeholderForType0.toCanonical();
      placeholderForType0.getGenericSignature();
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      defaultDeserializationContext0.findContextualValueDeserializer(placeholderForType0, (BeanProperty) null);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) placeholderForType0;
      objectArray0[1] = (Object) keyDeserializer0;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) placeholderForType0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      try { 
        defaultDeserializationContext0.handleMissingTypeId((JavaType) null, (TypeIdResolver) null, "~(");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: ~(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class1, class0);
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      objectMapper0.reader(base64Variant0);
      try { 
        defaultDeserializationContext0.findKeyDeserializer(collectionLikeType0, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [collection-like type; class com.fasterxml.jackson.databind.type.MapLikeType, contains [simple type, class com.fasterxml.jackson.databind.deser.AbstractDeserializer]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(deserializerFactory0, "", jsonDeserializer0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, (Object) null);
      defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.databind.util.CompactStringObjectMap");
      sQLDataException0.getLocalizedMessage();
      Object object0 = new Object();
      Class<InputStream> class0 = InputStream.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ",%08ZZ\"_Q>~uguQ9!";
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ",%08ZZ\"_Q>~uguQ9!";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "com.fasterxml.jackson.databind.util.CompactStringObjectMap";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "\"=1lRxikR8x", ",%08ZZ\"_Q>~uguQ9!", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      Object[] objectArray0 = new Object[0];
      int int0 = defaultDeserializationContext0.getDeserializationFeatures();
      assertEquals(237020304, int0);
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory2.createParser((Reader) pipedReader0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "Cannot construct instance of %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "}o", 16);
      Class<DateFormat> class0 = DateFormat.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLTransientConnectionException0);
      TimeZone timeZone0 = defaultDeserializationContext0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "includeAs cannot be null", 50);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SimpleModule> class0 = SimpleModule.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) "includeAs cannot be null";
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) objectMapper0;
      objectArray0[5] = (Object) "includeAs cannot be null";
      objectArray0[6] = (Object) objectMapper0;
      objectArray0[7] = (Object) class0;
      objectArray0[8] = (Object) defaultDeserializationContext0;
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "includeAs cannot be null", "+k6FzMK4Xn|;v0j", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.module.SimpleModule` from String \"includeAs cannot be null\": +k6FzMK4Xn|;v0j
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(50);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext0.hasValueDeserializerFor(placeholderForType0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      defaultDeserializationContext0.getDefaultPropertyFormat(class0);
      objectMapper0.createArrayNode();
      objectReader0.createDeserializationContext((JsonParser) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(1152);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) tokenFilter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      objectArray0[1] = (Object) objectMapper0;
      JavaType javaType0 = TypeFactory.unknownType();
      defaultDeserializationContext0.findNonContextualValueDeserializer(javaType0);
      objectArray0[2] = (Object) objectMapper0;
      Boolean boolean1 = new Boolean("");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      LongNode longNode0 = new LongNode(0L);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(longNode0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      objectMapper0.createArrayNode();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class1 = CollectionType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "JSON", javaType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.deserializerInstance(virtualAnnotatedMember0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned deserializer definition of type com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl; expected type JsonDeserializer or Class<JsonDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      defaultDeserializationContext0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanProperty beanProperty0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2028));
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(javaType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      defaultDeserializationContext0.constructType(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      objectMapper0.configure(serializationFeature0, false);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDeserializationContext0.getLocale();
      try { 
        defaultDeserializationContext0.findInjectableValue((Object) null, (BeanProperty) null, tokenFilter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectMapper0.createArrayNode();
      Class<ArrayType> class0 = ArrayType.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 50);
      MockFile mockFile0 = new MockFile("", "");
      ObjectIdGenerator<ArrayType> objectIdGenerator0 = (ObjectIdGenerator<ArrayType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext0.findObjectId("", objectIdGenerator0, simpleObjectIdResolver0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<DeserializationFeature> class0 = DeserializationFeature.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class1);
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      ObjectReader objectReader1 = objectMapper0.reader(base64Variant0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(collectionLikeType0, objectReader1, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.DeserializationFeature` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.ObjectReader`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.WRAP_EXCEPTIONS;
      objectMapper0.reader(deserializationFeature1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<List> class0 = List.class;
      bigInteger0.isProbablePrime(84);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Cannot deserialize instance of %s out of %s token";
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) deserializationFeature0;
      objectArray0[3] = (Object) "Cannot deserialize instance of %s out of %s token";
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[7] = (Object) deserializationFeature1;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[7] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, bigInteger0, "u+QbSR%ZWr+%v0/}", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object[] objectArray0 = new Object[19];
      objectArray0[1] = (Object) bigInteger0;
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty((Object) null, "", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      tokenFilter0.includeString("+?F8k@\tJamfmT&Hf");
      defaultDeserializationContext0.hasSomeOfFeatures(1152);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) tokenFilter0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      objectArray0[1] = (Object) objectMapper0;
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findNonContextualValueDeserializer(javaType0);
      objectArray0[2] = (Object) objectMapper0;
      Boolean boolean0 = new Boolean("");
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty(objectMapper0, "", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      MockDate mockDate0 = new MockDate();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(1024);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.constructCalendar(mockDate0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      arrayNode0.insertObject(50);
      Class<ArrayType> class0 = ArrayType.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 50);
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLNonTransientException0);
      Class<List> class1 = List.class;
      typeFactory0.constructRawCollectionType(class1);
      String string0 = null;
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty(class1, string0, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      objectMapper0.createArrayNode();
      Class<ArrayType> class0 = ArrayType.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "", 50);
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLNonTransientException0);
      Class<List> class1 = List.class;
      typeFactory0.constructRawCollectionType(class1);
      int int0 = 142;
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(int0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'J';
      charArray0[2] = '%';
      charArray0[3] = '';
      charArray0[4] = 'n';
      charArray0[5] = ':';
      charArray0[6] = 'l';
      charArray0[7] = 'f';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1, 1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jsonParser0;
      objectArray0[1] = (Object) jsonParser0;
      objectArray0[2] = (Object) 'n';
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class1;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_ARRAY: 
         //  at [Source: (char[])\"dJ%n:lf\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.hasSomeOfFeatures(1152);
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      String string0 = "";
      String string1 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) tokenFilter0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "", "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver` from String \"\": 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1114111);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(placeholderForType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      PipedReader pipedReader0 = new PipedReader(237020160);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      boolean boolean0 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Cannot deserialize instance of %s out of %s token";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, 33, "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(deserializationFeature1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(74);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      PropertyName.construct((String) null, "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector");
      Class<InputStream> class0 = InputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.io.InputStream with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<Throwable> class0 = Throwable.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) objectMapper0;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getFullName();
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<Throwable> class0 = Throwable.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(deserializationFeature0, objectReader0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) deserializationFeature0;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) jsonToken0;
      objectArray0[4] = (Object) hashMap0;
      objectArray0[5] = (Object) class1;
      Object object0 = new Object();
      Integer integer0 = new Integer(128);
      injectableValues_Std1.addValue((Class<?>) class0, (Object) integer0);
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException(class1, jsonToken0, "H~[c_", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      ObjectNode objectNode0 = arrayNode0.insertObject(50);
      objectReader0.treeAsTokens(objectNode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      assertTrue(base64Variant0.usesPadding());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) injectableValues_Std0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, "Cannot deserialize value of type %s from String %s: %s", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(54);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<Throwable> class0 = Throwable.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      String string0 = "";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) objectMapper0;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      beanDeserializerBuilder0.findProperty(propertyName0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findKeyDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = defaultDeserializationContext0.getAttribute(tokenFilter0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      objectReader1.getTypeFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<ReferenceType> class0 = ReferenceType.class;
      defaultDeserializationContext0.instantiationException(class0, (Throwable) null);
      defaultDeserializationContext0.getNodeFactory();
      BeanProperty beanProperty0 = null;
      Class<Throwable> class1 = Throwable.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, beanProperty0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JavaType javaType0 = null;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      deserializationContext0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "JSON");
      String string0 = "W^Wr:U2oAK$E";
      deserializationContext0.invalidTypeIdException(javaType0, jsonFactory0.FORMAT_NAME_JSON, string0);
      deserializationContext0.getArrayBuilders();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, jsonFactory0.FORMAT_NAME_JSON);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getNodeFactory();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) " jtwG+I}1a%|Oj[?[*/";
      objectArray0[1] = (Object) objectMapper1;
      objectArray0[2] = (Object) tokenFilter0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) objectMapper1;
      objectArray0[7] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException(" jtwG+I}1a%|Oj[?[*/", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '|'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[12];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      defaultDeserializationContext0.hasSomeOfFeatures((-3144));
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      objectReader1.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      defaultDeserializationContext0.getTypeFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      StdKeyDeserializer.forType(class0);
      simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[12];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) null);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures((-3144));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute((Object) null, objectMapper0);
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      objectReader1.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      defaultDeserializationContext0.getTypeFactory();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<ObjectReader> class0 = ObjectReader.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      StdKeyDeserializer.forType(class1);
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      try { 
        defaultDeserializationContext0.parseDate("#dcXZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value '#dcXZ': Cannot parse date \"#dcXZ\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      defaultDeserializationContext0.hasSomeOfFeatures((-3144));
      try { 
        defaultDeserializationContext0.findClass("`D2z");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // `D2z
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      Class<CollectionType> class0 = CollectionType.class;
      BigInteger bigInteger0 = BigInteger.TEN;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) typeFactory0;
      objectArray0[1] = (Object) bigInteger0;
      objectArray0[2] = (Object) objectReader0;
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionType` from number 10: Cannot deserialize instance of com.fasterxml.jackson.databind.type.TypeFactory@2e out of 10 token
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId((JavaType) null, (TypeIdResolver) null, "(qO$2;@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jsonDeserializer0).toString();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DateFormat> class0 = DateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      collectionLikeType0.withStaticTyping();
      collectionLikeType0.findTypeParameters(class0);
      deserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, collectionLikeType0);
      JavaType javaType0 = TypeFactory.unknownType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      // Undeclared exception!
      try { 
        deserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory.unknownType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "E TJz95+:-m>", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      collectionLikeType0.withStaticTyping();
      Class<ObjectReader> class1 = ObjectReader.class;
      JavaType[] javaTypeArray0 = collectionLikeType0.findTypeParameters(class1);
      JsonDeserializer<BuilderBasedDeserializer> jsonDeserializer0 = (JsonDeserializer<BuilderBasedDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, collectionLikeType0);
      TypeFactory.unknownType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, (String) null, (Object[]) javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext0.invalidTypeIdException((JavaType) null, "IX!", "vaB:WM/OBzrn#hJ1_");
      assertEquals("IX!", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature1);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DateFormat> class0 = DateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      CollectionLikeType collectionLikeType1 = collectionLikeType0.withStaticTyping();
      collectionLikeType0.findTypeParameters(class0);
      deserializationContext0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, collectionLikeType1);
      try { 
        typeFactory0.constructFromCanonical("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse type 'JSON' (remaining: ''): Cannot locate class 'JSON', problem: JSON
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TypeFactory.unknownType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("_%lEB4Xj\"97>4!vYyKF", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'l'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader1.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<Throwable> class0 = Throwable.class;
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Throwable`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      try { 
        defaultDeserializationContext0.reportInputMismatch((BeanProperty) null, "please use getAnnotations/ hasAnnotation to check for Annotations", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // please use getAnnotations/ hasAnnotation to check for Annotations
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      objectMapper0.reader(deserializationFeature0);
      BigInteger bigInteger0 = BigInteger.TEN;
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) tokenFilter0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "S42Ggs@8", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonDeserializer<ArrayType> jsonDeserializer0 = (JsonDeserializer<ArrayType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) jsonDeserializer0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      String string0 = "*)$CQLR@D9p9Z=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      defaultDeserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, (JavaType) null);
      defaultDeserializationContext0.getTimeZone();
      Class<ReferenceType> class0 = ReferenceType.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext0, false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, "*)$CQLR@D9p9Z=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1137);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1137);
      MapType mapType1 = mapType0.withTypeHandler(pushbackInputStream0);
      MapType mapType2 = mapType1.withValueHandler(pushbackInputStream0);
      MapType mapType3 = mapType2.withKeyType(mapType0);
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) mapType3, "Q_$-", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Q_$-
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.reportUnknownProperty("IB/`", "IB/`", (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<DateFormat> class0 = DateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      Class<DateFormat> class1 = DateFormat.class;
      collectionLikeType0.withTypeHandler(typeFactory0);
      collectionLikeType0.findTypeParameters(class1);
      deserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, collectionLikeType0);
      deserializationContext0.getContextualType();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "ALLOW_SINGLE_QUOTES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      defaultDeserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, (JavaType) null);
      defaultDeserializationContext0.getTimeZone();
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) null, "com.fasterxml.jackson.databind.type.SimpleType", (Object[]) deserializationFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.type.SimpleType
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.hasSomeOfFeatures((-155));
      defaultDeserializationContext0.checkUnresolvedObjectId();
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h?a]j-L?;D~Qk]?644F");
      List<JsonNode> list0 = arrayNode0.findParents("");
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list0);
      JsonParser jsonParser0 = arrayNode1.traverse((ObjectCodec) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.readValue((JsonParser) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonParser) null, jsonToken0, "YVi0OX\"tBaPl_mY1i", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDescription beanDescription0 = null;
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      String string0 = "^L~[X71K";
      Class<Integer> class0 = Integer.class;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("L{x7KTbHKl~TF]6/{h;");
      SQLTransientException sQLTransientException0 = new SQLTransientException("^L~[X71K", "", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTransientException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*)$CQLR@D9p9Z=");
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      defaultDeserializationContext0.getNodeFactory();
      JsonDeserializer<?> jsonDeserializer0 = defaultDeserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, (JavaType) null);
      assertNull(jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      LongNode longNode0 = new LongNode(2147483647L);
      defaultDeserializationContext_Impl1.reportUnknownProperty(longNode0, "IB/`", (JsonDeserializer<?>) null);
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = new Object();
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jsonDeserializer0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) deserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      objectArray0[5] = (Object) "XvjOwh*,mXt[j2 f";
      objectArray0[6] = (Object) jsonDeserializer0;
      objectArray0[7] = (Object) "XvjOwh*,mXt[j2 f";
      objectArray0[8] = (Object) beanDeserializerFactory0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "XvjOwh*,mXt[j2 f", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XvjOwh*,mXt[j2 f
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) ",\"";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) null, ",\"", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.getContextualType();
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      JsonDeserializer<SettableBeanProperty> jsonDeserializer0 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charsToNameCanonicalizer0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) charsToNameCanonicalizer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "s1*l%N";
      objectArray0[6] = (Object) arrayBuilders0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "s1*l%N", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'N'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      atomicReference0.compareAndSet((Throwable) null, (Throwable) null);
      defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerator<CollectionType> objectIdGenerator0 = (ObjectIdGenerator<CollectionType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId(deserializerFactoryConfig0, objectIdGenerator0, simpleObjectIdResolver0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.reportBadMerge((JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      JsonDeserializer<JsonDeserializer<ArrayType>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<ArrayType>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      objectReader0.treeAsTokens(arrayNode0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(5125, 5125);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader0);
      Class<Throwable> class0 = Throwable.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      resolvedRecursiveType0.getSelfReferencedType();
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) null, (JavaType[]) null, (JavaType) resolvedRecursiveType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId((JavaType) null, "';Nzl1?2ND", classNameIdResolver0, "';Nzl1?2ND");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl1.getArrayBuilders();
      ObjectIdGenerator<Throwable> objectIdGenerator0 = (ObjectIdGenerator<Throwable>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) null, (PropertyName) null, objectIdGenerator0, true);
      ObjectIdWriter objectIdWriter1 = objectIdWriter0.withAlwaysAsId(false);
      JavaType javaType0 = objectIdWriter1.idType;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId((JavaType) null, "', problem: ", classNameIdResolver0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser jsonParser0 = jsonFactory2.createParser("value not one of declared Enum instance names: %s");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException(class0, "JSON");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      try { 
        defaultDeserializationContext_Impl1.reportTrailingTokens((Class<?>) class0, (JsonParser) filteringParserDelegate0, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type END_ARRAY) found after value (bound as `java.lang.Throwable`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      jsonFactory1.createParser("JSON");
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.disable(jsonFactory_Feature1);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      Object object0 = new Object();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue((JavaType) null, "JSON", jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<DateFormat> class0 = DateFormat.class;
      ObjectReader objectReader1 = objectMapper1.readerFor(class0);
      ObjectMapper objectMapper2 = new ObjectMapper();
      Class<SimpleType> class1 = SimpleType.class;
      ObjectReader objectReader2 = objectMapper2.readerFor(class1);
      TypeFactory typeFactory0 = objectReader2.getTypeFactory();
      TypeFactory.defaultInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.getArrayBuilders();
      Class<SimpleType> class2 = SimpleType.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1838));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)2;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 188, (byte)26, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (byte)115;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) objectMapper1;
      objectArray0[3] = (Object) iOContext1;
      objectArray0[4] = (Object) (byte)115;
      objectArray0[5] = (Object) typeFactory0;
      objectArray0[6] = (Object) objectReader1;
      objectArray0[7] = (Object) objectReader2;
      Object object0 = new Object();
      objectArray0[8] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleUnexpectedToken((Class<?>) class2, jsonToken0, (JsonParser) uTF8StreamJsonParser0, "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "expected a value";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "expected a value");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<ReferenceType> class0 = ReferenceType.class;
      defaultDeserializationContext0.weirdStringException("znP'&c4~", class0, "");
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.checkUnresolvedObjectId();
      long long0 = (-17L);
      System.setCurrentTimeMillis(long0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) defaultDeserializationContext1;
      objectArray0[2] = (Object) string0;
      objectArray0[3] = (Object) defaultDeserializationContext1;
      objectArray0[4] = (Object) evoSuiteFile0;
      try { 
        defaultDeserializationContext_Impl0.reportMappingException(string0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // expected a value
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      Object object0 = new Object();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      beanDeserializerFactory1.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      JsonParser jsonParser1 = jsonFactory2.createParser(byteArrayBuilder0.NO_BYTES);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      try { 
        defaultDeserializationContext0.readValue(jsonParser1, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat`
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("Kt5%auM<|\u0000k\"tDN)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(67108847);
      defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, (BeanProperty) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findObjectId(placeholderForType0, (ObjectIdGenerator<?>) null, (ObjectIdResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocReadIOBuffer((-2735));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      ContextAttributes.Impl.getEmpty();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'p';
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory1 = deserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      defaultDeserializationContext_Impl2.copy();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) deserializers_Base0;
      objectArray0[1] = (Object) jsonEncoding0;
      objectArray0[2] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.reportBadTypeDefinition((BeanDescription) null, "Cannot construct instance of %s (no Creators, like default construct, exist): %s", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory.defaultInstance();
      TypeFactory.defaultInstance();
      Class<LongNode> class0 = LongNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findNonContextualValueDeserializer(collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      objectMapper0.readerFor(class0);
      objectReader0.getTypeFactory();
      TypeFactory.defaultInstance();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.getObjectIdReader();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportUnresolvedObjectId((ObjectIdReader) null, (Object) objectBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      JavaType javaType0 = null;
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader0, charsToNameCanonicalizer1, charArray0, 2, 33, false);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, (String) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      defaultDeserializationContext_Impl0.mappingException(class1, jsonToken1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "Missing type id when trying to resolve subtype of %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      ObjectReader objectReader1 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)objectReader1._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl2.leaseObjectBuffer();
      Class<MapType> class0 = MapType.class;
      objectMapper0.readerFor(class0);
      objectReader1.getTypeFactory();
      TypeFactory.defaultInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl2.getArrayBuilders();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) objectBuffer0;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      try { 
        defaultDeserializationContext_Impl2.findInjectableValue((Object) null, (BeanProperty) null, defaultDeserializationContext_Impl3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(objectMapper1);
      JavaType javaType1 = referenceType1.getAnchorType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findRootValueDeserializer(javaType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(980);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      ObjectReader objectReader1 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)objectReader1._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl2.leaseObjectBuffer();
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader2 = objectMapper0.readerFor(class0);
      objectReader1.getTypeFactory();
      TypeFactory.defaultInstance();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl2.getArrayBuilders();
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) objectBuffer0;
      objectArray0[2] = (Object) objectReader2;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl1;
      Class<Void> class2 = Void.class;
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      try { 
        defaultDeserializationContext_Impl2.reportTrailingTokens((Class<?>) class2, (JsonParser) null, jsonToken1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_FALSE) found after value (bound as `java.lang.Void`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<MapType> class0 = MapType.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(992);
      defaultDeserializationContext_Impl0.getActiveView();
      Class<JsonDeserializer> class1 = JsonDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaType0, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.JsonDeserializer with 2 type parameters: class expects 1
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<MapType> class0 = MapType.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) simpleType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class2 = HashMap.class;
      Class<CollectionType> class3 = CollectionType.class;
      Class<MockDateFormat> class4 = MockDateFormat.class;
      MapType mapType0 = typeFactory0.constructMapType(class2, class3, class4);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.createBeanDeserializer(defaultDeserializationContext0, mapType0, (BeanDescription) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory();
      Object object0 = new Object();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      defaultDeserializationContext0.hasSomeOfFeatures(93);
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, class0, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl0.getParser();
      defaultDeserializationContext_Impl0.getFactory();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(66, 66);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class1);
      defaultDeserializationContext0.unknownTypeException(collectionType1, "JSON", "com.fasterxml.jackson.databind.introspect.ClassIntrospector");
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      Class<MapType> class0 = MapType.class;
      objectMapper0.readerFor(class0);
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) objectBuffer0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) objectBuffer0;
      objectArray0[6] = (Object) deserializerFactoryConfig0;
      objectArray0[7] = (Object) class1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class1, jsonToken0, "%!WA", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '!'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures((-1589));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      objectMapper1.writer();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, dataOutputStream0);
      jsonFactory0.createParser(byteArrayBuilder0.NO_BYTES);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleInstantiationProblem(class0, mockDateFormat0, (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int int0 = (-1723);
      Class<DateFormat> class0 = DateFormat.class;
      ValueInstantiator valueInstantiator0 = null;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "d3!A";
      objectArray0[1] = (Object) "d3!A";
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) "d3!A";
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[7] = (Object) deserializerFactory0;
      objectArray0[8] = (Object) deserializerFactory0;
      defaultDeserializationContext_Impl0.mappingException("d3!A", objectArray0);
      simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(int0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(beanDeserializerFactory0, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      Class<Void> class1 = Void.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.endOfInputException(class1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory();
      Object object0 = new Object();
      Class<MapType> class0 = MapType.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      defaultDeserializationContext0.hasSomeOfFeatures(93);
      Class<Integer> class1 = Integer.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition(javaType0, "problem handler tried to resolve into non-subtype: ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // problem handler tried to resolve into non-subtype: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl1.hasSomeOfFeatures(60);
      assertFalse(boolean0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext0.invalidTypeIdException((JavaType) null, "JSON", "");
      assertEquals("JSON", invalidTypeIdException0.getTypeId());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures((-2555));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, (Object) null, "Cannot construct instance of %s, problem: %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(collectionLikeType0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", jsonDeserializer0);
      defaultDeserializationContext_Impl1.hasSomeOfFeatures((-194));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(6);
      BigDecimal bigDecimal0 = new BigDecimal((long) 6);
      ValueNode valueNode0 = arrayNode0.numberNode(bigDecimal0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      JsonDeserializer<SettableBeanProperty> jsonDeserializer1 = (JsonDeserializer<SettableBeanProperty>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleUnknownProperty(jsonParser0, jsonDeserializer1, (Object) null, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, "=@N6CLj/h", jsonDeserializer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findInjectableValue(typeFactory1, (BeanProperty) null, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      deserializerFactoryConfig0.keyDeserializers();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      objectArray0[4] = (Object) simpleKeyDeserializers0;
      deserializerFactoryConfig1.abstractTypeResolvers();
      objectArray0[5] = (Object) deserializerFactoryConfig1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "", "&3ev0]8MH!^H<cJk54", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, dataOutputStream0);
      uTF8JsonGenerator0.getCharacterEscapes();
      jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl0.getParser();
      defaultDeserializationContext_Impl0.getFactory();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(0, 2);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ArrayDeque> class0 = ArrayDeque.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withContentTypeHandler(objectReader0);
      defaultDeserializationContext_Impl0.unknownTypeException(collectionType2, "JSON", "JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      Object object0 = new Object();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.weirdNativeValueException((Object) null, class0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<Throwable> class0 = Throwable.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(deserializationFeature0, objectReader0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string0 = "H~[c_";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) deserializationFeature0;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) jsonToken0;
      objectArray0[4] = (Object) hashMap0;
      objectArray0[5] = (Object) class1;
      Object object0 = new Object();
      int int0 = 128;
      try { 
        defaultDeserializationContext_Impl1.findInjectableValue(defaultDeserializationContext_Impl0, (BeanProperty) null, objectArray0[1]);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized inject value id type (`com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl`), expecting String
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(collectionLikeType0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", jsonDeserializer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findInjectableValue(objectMapper0, (BeanProperty) null, objectMapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue("JSON", (BeanProperty) null, deserializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      Object object0 = new Object();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      beanDeserializerFactory1.withAdditionalDeserializers(deserializers_Base0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      jsonFactory2.createParser(byteArrayBuilder0.NO_BYTES);
      SQLDataException sQLDataException0 = new SQLDataException("%<2*", "JSON");
      sQLDataException0.getLocalizedMessage();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) jsonParserDelegate0, jsonToken0, "T;c");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      objectReader0.getTypeFactory();
      ClassLoader.getSystemClassLoader();
      TypeFactory.defaultInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(collectionLikeType0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", jsonDeserializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(2871);
      ObjectNode objectNode0 = arrayNode0.insertObject(2871);
      ArrayNode arrayNode1 = objectNode0.putArray("");
      JsonParser jsonParser0 = arrayNode1.traverse();
      arrayNode1.findValue("No content to map due to end-of-input");
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      defaultDeserializationContext_Impl1.wrongTokenException(jsonParser0, jsonToken0, (String) null);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.copy();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.mappingException((String) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StringReader stringReader0 = new StringReader("JSON");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl2.hasSomeOfFeatures(0);
      assertFalse(boolean0);
      
      int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      System.setCurrentTimeMillis((-2147483648L));
      String string0 = "Could not find JsonDeserializer for type %s (via property %s)";
      Object[] objectArray0 = null;
      try { 
        defaultDeserializationContext_Impl0.reportMissingContent("Could not find JsonDeserializer for type %s (via property %s)", (Object[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      JsonParser jsonParser0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withContentTypeHandler(defaultDeserializationContext_Impl1);
      mapType1.withValueHandler(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mapType1;
      objectArray0[1] = (Object) typeFactory0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl1;
      objectArray0[3] = (Object) mapType1;
      objectArray0[4] = (Object) mapType1;
      try { 
        defaultDeserializationContext_Impl1.reportMissingContent("deN.Q+ayfvSw^5", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ObjectMapper objectMapper2 = new ObjectMapper();
      ObjectMapper objectMapper3 = new ObjectMapper(objectMapper2);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature1, true);
      JsonParser jsonParser0 = jsonFactory4.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, "JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectBuffer objectBuffer1 = defaultDeserializationContext0.leaseObjectBuffer();
      assertSame(objectBuffer1, objectBuffer0);
      assertNotNull(objectBuffer1);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      typeFactory1.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<Void> jsonDeserializer0 = (JsonDeserializer<Void>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext1.reportUnknownProperty("JSON", "JSON", jsonDeserializer0);
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      defaultDeserializationContext0.leaseObjectBuffer();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      assertFalse(collectionLikeType0.isJavaLangObject());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StringReader stringReader0 = new StringReader("JSON");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      jsonFactory0.createParser(byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException(jsonParser0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: JSON
         //  at [Source: (PipedReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      defaultDeserializationContext_Impl0.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "C0c/{>I";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) null, jsonToken0, "C0c/{>I", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("Rvqdh?j1%Q[602RL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Class<Throwable> class1 = Throwable.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Throwable> class0 = Throwable.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.releaseNameCopyBuffer((char[]) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getConfig();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = new PropertyName("expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'", "LEE&5ktdgd<OG+u]M");
      beanDeserializerBuilder0.findProperty(propertyName0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      StringReader stringReader0 = new StringReader("JSON");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl1.hasSomeOfFeatures(3);
      assertFalse(boolean0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      MapType mapType2 = mapType1.withKeyValueHandler(jsonFactory0);
      MapType mapType3 = mapType2.withContentTypeHandler(stringReader0);
      defaultDeserializationContext_Impl0.missingTypeIdException(mapType3, (String) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper1, dataOutputStream0);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonFactory1.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      jsonFactory2.setCodec(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArrayBuilder0.NO_BYTES);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T+-N||5zH0@wcd3z\t");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) deserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) objectBuffer0;
      objectArray0[6] = (Object) "T+-N||5zH0@wcd3z\t";
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) null, jsonToken0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer1);
      defaultDeserializationContext_Impl0.getContextualType();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<ArrayType> class0 = ArrayType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      String string0 = "5PC:a";
      Object[] objectArray0 = new Object[2];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "5PC:a", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.getTypeFactory();
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty(deserializationFeature1, "Cannot deserialize Map key of type %s from String %s: %s", (JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Class<DeserializationFeature> class1 = DeserializationFeature.class;
      Class<HashMap> class2 = HashMap.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      javaTypeArray0[6] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[3], (JavaType) simpleType0);
      MapLikeType mapLikeType0 = mapType0.withContentTypeHandler(beanDeserializerFactory0);
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class2, (JavaType) mapLikeType0, (JavaType) mapLikeType0);
      MapType mapType2 = mapType1.withKeyType(mapLikeType0);
      typeFactory0.constructCollectionLikeType((Class<?>) class1, (JavaType) mapType2);
      MapType mapType3 = mapType0.withKeyTypeHandler(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.reportUnknownProperty(mapType3, "", (JsonDeserializer<?>) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, (JavaType) null);
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(collectionLikeType0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", jsonDeserializer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Throwable> class0 = Throwable.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer.createRoot();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.releaseNameCopyBuffer((char[]) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      readerBasedJsonParser0.readValuesAs(class1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getConfig();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = new PropertyName("expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'", "LEE&5ktdgd<OG+u]M");
      beanDeserializerBuilder0.findProperty(propertyName0);
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.addCreatorProperty((SettableBeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T+-N||5zH0@wcd3z\t");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonFactory jsonFactory4 = jsonFactory3.setCodec(objectMapper0);
      // Undeclared exception!
      try { 
        jsonFactory4.createParser((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      objectMapper0.reader();
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(54);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "l#Nz84mt_'";
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("l#Nz84mt_'", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // l#Nz84mt_'
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      EvoSuiteFile evoSuiteFile0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) beanDeserializerModifier0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig";
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      defaultDeserializationContext_Impl1.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl1.hasValueDeserializerFor((JavaType) null, atomicReference0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<Throwable> class0 = Throwable.class;
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) objectMapper0;
      objectArray0[5] = (Object) objectMapper0;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory2.constructCollectionLikeType(class0, (JavaType) null);
      String string0 = "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s";
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(collectionLikeType0, string0, jsonDeserializer0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
      TypeFactory.defaultInstance();
      Float float0 = new Float((float) 0);
      Class<Object> class0 = Object.class;
      defaultDeserializationContext_Impl0.weirdNumberException(float0, class0, "");
      Class<SimpleType> class1 = SimpleType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      defaultDeserializationContext_Impl0.mappingException(class1, jsonToken0);
      Class<DateFormat> class2 = DateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature1, true);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl2);
      StringReader stringReader0 = new StringReader("Cannot deserialize value of type %s from String %s: %s");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl4 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      boolean boolean0 = defaultDeserializationContext_Impl2.hasSomeOfFeatures(2);
      assertFalse(boolean0);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<Object> class0 = Object.class;
      defaultDeserializationContext_Impl4.weirdNumberException(bigInteger0, class0, "JSON");
      assertEquals(0, defaultDeserializationContext_Impl4.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "f", "xHnAVd}1)<gP/d?");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T+-N||5zH0@wcd3z\t");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.getConfig();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      StringReader stringReader0 = new StringReader("JSON");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(0);
      assertFalse(boolean0);
      
      Class<MapType> class0 = MapType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "Unexpected JSON values; expected at most %d properties (in JSON Array)", "JSON");
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl1.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer1);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures((-517));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getSchema();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      objectMapper1.getDeserializationContext();
      Class<MapLikeType> class0 = MapLikeType.class;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        objectReader0.readValues((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (SequenceInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<MapType> class0 = MapType.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "initCause", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<MapType> class1 = MapType.class;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((Class<?>) class1, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      Class<String> class2 = String.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class2, (String) null, "initCause", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      objectReader0.getTypeFactory();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, (Number) null, "-Infinity", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      String string0 = "_\\=F1wFR[Tb2";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) deserializerFactory0;
      objectArray0[3] = (Object) short1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) beanDeserializerModifier0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, short1, "_=F1wFR[Tb2", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      objectMapper0.findMixInClassFor(class0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getFactory();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      SQLDataException sQLDataException0 = new SQLDataException((String) null, "");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 2987, sQLDataException0);
      DeserializationConfig deserializationConfig0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader(objectMapper0, (DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Class<Throwable> class1 = Throwable.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      String string0 = "initCause";
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParserDelegate0, "initCause", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactory0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(objectMapper2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Object object0 = new Object();
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(2);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.copy();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      objectMapper0.enable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getConfig();
      String string0 = "9'(\"Q^&WLo+=9@vgjE";
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        deserializationContext0.mappingException("9'(\"Q^&WLo+=9@vgjE", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter1);
      JsonParser jsonParser0 = null;
      objectReader1.createDeserializationContext((JsonParser) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext0.getNodeFactory();
      assertNotNull(jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      char[] charArray0 = new char[1];
      char char0 = 's';
      charArray0[0] = char0;
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      defaultDeserializationContext0.weirdStringException(jsonFactory1.FORMAT_NAME_JSON, class0, jsonFactory2.FORMAT_NAME_JSON);
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      String string0 = "4d";
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) string0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) objectReader0;
      objectArray0[5] = (Object) jsonFactory2;
      Object object2 = new Object();
      objectArray0[6] = object2;
      objectArray0[7] = (Object) defaultDeserializationContext0;
      objectArray0[8] = (Object) jsonFactory1;
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, string0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 4d
         //  at [Source: (char[])\"s\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "USE_DEFAULTS", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // USE_DEFAULTS
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Throwable> class0 = Throwable.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper1, charsToNameCanonicalizer1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getConfig();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getConfig();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      Class<DateFormat> class1 = DateFormat.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2669));
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, (TypeBindings) null);
      List<JavaType> list0 = arrayType0.getInterfaces();
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.buildThrowableDeserializer(defaultDeserializationContext_Impl0, resolvedRecursiveType0, basicBeanDescription0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<Throwable> class0 = Throwable.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer.createRoot();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.releaseNameCopyBuffer((char[]) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getConfig();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      PropertyName propertyName0 = new PropertyName("expected digit (0-9), decimal point (.) or exponent indicator (e/E) to follow '0'", "LEE&5ktdgd<OG+u]M");
      beanDeserializerBuilder0.findProperty(propertyName0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, true);
      PipedReader pipedReader0 = new PipedReader();
      ArrayList<ObjectReader> arrayList0 = new ArrayList<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayList0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 1);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) byteArrayInputStream0);
      dataFormatReaders_Match0.getReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = 'S';
      charArray0[2] = '!';
      charArray0[3] = ';';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'S';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2144, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (byte)39, 0, true);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      FormatSchema formatSchema0 = readerBasedJsonParser0.getSchema();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
      ObjectReader objectReader0 = objectMapper1.reader((FormatSchema) null);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonFactory0.disable(jsonParser_Feature0);
      deserializationContext0.mappingException(class0, jsonToken0);
      Class<Object> class1 = Object.class;
      JsonToken jsonToken1 = JsonToken.VALUE_FALSE;
      String string0 = "";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonToken1;
      objectArray0[1] = (Object) objectMapper1;
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      objectReader0.withoutFeatures(jsonParser_FeatureArray0);
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) jsonToken1;
      objectArray0[4] = (Object) formatSchema0;
      objectArray0[5] = (Object) class1;
      objectArray0[6] = (Object) objectMapper1;
      objectArray0[7] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(class1, jsonToken1, string0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getAttribute("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DateFormat> class0 = DateFormat.class;
      TypeBindings.create(class0, (List<JavaType>) null);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing referencedType
         //
         verifyException("com.fasterxml.jackson.databind.type.ReferenceType", e);
      }
  }
}
