/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:09:53 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.FormatFlagsConversionMismatchException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Void> class0 = Void.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "Invalid type definition for type %s: %s", "2sfP8oC[m\"%2f +W");
      Class<ObjectMapper.DefaultTyping> class1 = ObjectMapper.DefaultTyping.class;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) "VEPkt8!&N:me";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class1, "VEPkt8!&N:me", "2sfP8oC[m\"%2f +W", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Cannot deserialize value of type %s from number %s: %s";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "Cannot deserialize value of type %s from number %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 134217728);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<DataInputStream> class0 = DataInputStream.class;
      defaultDeserializationContext0.mappingException(class0);
      JavaType javaType0 = null;
      defaultDeserializationContext0.invalidTypeIdException((JavaType) null, "JSON", "AJcMHZwY,b");
      arrayNode0.doubleValue();
      Class<SimpleType> class1 = SimpleType.class;
      defaultDeserializationContext0.getDefaultPropertyFormat(class1);
      defaultDeserializationContext0.instantiationException(class1, "AJcMHZwY,b");
      JsonDeserializer<BasicBeanDescription> jsonDeserializer0 = (JsonDeserializer<BasicBeanDescription>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.reportUnknownProperty(deserializationFeature0, "DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s", jsonDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s\" (class com.fasterxml.jackson.databind.DeserializationFeature), not marked as ignorable
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.DeserializationFeature[\"DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures((-1534));
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qKvaGJ$4~#");
      objectArray0[6] = (Object) deserializerFactory0;
      defaultDeserializationContext0.getActiveView();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.endOfInputException((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) null, "Could not find JsonDeserializer for type %s (via property %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(binary value of %d bytes)";
      objectArray0[1] = (Object) "(binary value of %d bytes)";
      objectArray0[2] = (Object) "(binary value of %d bytes)";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException("(binary value of %d bytes)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[0];
      Class<NamedType> class0 = NamedType.class;
      BigInteger bigInteger0 = BigInteger.TEN;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.jsontype.NamedType` out of NOT_AVAILABLE token
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.constructType((Class<?>) null);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Object[] objectArray0 = new Object[7];
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "t5d`~cX)T8%K)Q,iT;", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'K'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      Integer integer0 = new Integer(2097152);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature1;
      deserializationFeatureArray0[3] = deserializationFeature1;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      DeserializationFeature deserializationFeature2 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[6] = deserializationFeature2;
      deserializationFeatureArray0[7] = deserializationFeature1;
      objectReader0.with(deserializationFeature1, deserializationFeatureArray0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNumberException(integer0, class0, "(TiDY]1xF+lEB> y3wc");
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, integer0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.deser.AbstractDeserializer` from number 2097152: (TiDY]1xF+lEB> y3wc
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ObjectIdGenerator<TypeIdResolver> objectIdGenerator0 = (ObjectIdGenerator<TypeIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      NamedType namedType0 = new NamedType(class0);
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(namedType0);
      defaultDeserializationContext_Impl0.findObjectId(mockDateFormat0, objectIdGenerator0, objectIdResolver0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      BooleanNode booleanNode0 = BooleanNode.getTrue();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(booleanNode0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext0.setAttribute("[Q<z#3,", defaultDeserializationContext_Impl0);
      ((DeserializationContext)defaultDeserializationContext_Impl1).getDateFormat();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      LongNode longNode0 = LongNode.valueOf(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      ((DeserializationContext)defaultDeserializationContext_Impl1)._isCompatible(class0, longNode0);
      Class<DataInputStream> class1 = DataInputStream.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) longNode0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException(class1, jsonToken0, "~qfa4%-%", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-%
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getActiveView();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException((Class<?>) null, "'Wqd#");
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) bigDecimal0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) bigDecimal0;
      objectArray0[3] = (Object) jsonMappingException0;
      objectArray0[4] = (Object) deserializerFactoryConfig0;
      objectArray0[5] = (Object) valueInstantiators_Base0;
      objectArray0[6] = (Object) defaultDeserializationContext0;
      objectArray0[7] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue((Class<?>) null, bigDecimal0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor$Base", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(deserializationFeature0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findContextualValueDeserializer(javaType0, (BeanProperty) null);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1797));
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      LongNode longNode0 = new LongNode((-1L));
      ReferenceType referenceType1 = referenceType0.withTypeHandler(longNode0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(longNode0);
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(referenceType1);
      JavaType javaType0 = referenceType3.getReferencedType();
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class java.lang.Object, $-1796 -> $-1796]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<SimpleType> class0 = SimpleType.class;
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, referenceType0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      deserializationFeatureArray0[4] = deserializationFeature1;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1688);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      JsonParser jsonParser1 = defaultDeserializationContext0.getParser();
      assertFalse(jsonParser1.canReadTypeId());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put("", "");
      ArrayNode arrayNode0 = objectNode1.putArray("");
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      PropertyName propertyName0 = PropertyName.construct("");
      Class<ObjectReader> class0 = ObjectReader.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", resolvedRecursiveType0);
      Boolean boolean0 = Boolean.valueOf((String) null);
      Integer integer0 = new Integer(3);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "P%U", integer0, "P%U");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, resolvedRecursiveType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Std1, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(115);
      Class<String> class0 = String.class;
      Short short0 = new Short((short)2810);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) short0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, short0, "u92%0SxiUSd5", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = 0
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanProperty beanProperty0 = null;
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonParser jsonParser0 = null;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) objectMapper0, (Object) objectReader0);
      ArrayType arrayType1 = ArrayType.construct((JavaType) arrayType0, typeBindings0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType2, arrayType1);
      JavaType javaType0 = referenceType0.withContentType(simpleType0);
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for abstract type [reference type, class [[Ljava.time.chrono.ChronoLocalDate;<java.time.chrono.ChronoLocalDate><[simple type, class java.time.chrono.ChronoLocalDate]>]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectReader1.createDeserializationContext((JsonParser) null);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) jsonFactory0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "Overflow: numeric value (%s) out of range of int (%d -%d)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      objectReader0.createDeserializationContext((JsonParser) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) jsonToken0;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) "%w+>N}V>IBY";
      objectArray0[4] = (Object) jsonToken1;
      objectArray0[5] = (Object) jsonToken0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken1, (JsonParser) null, "%w+>N}V>IBY", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'w'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer((JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("8LM");
      PropertyName propertyName1 = propertyName0.internSimpleName();
      PropertyName propertyName2 = propertyName1.withNamespace("8LM");
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      beanDeserializerBuilder0.removeProperty(propertyName2);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(jsonDeserializer0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName2, objectIdGenerators_IntSequenceGenerator0, jsonDeserializer0, (SettableBeanProperty) null, objectIdResolver0);
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId(objectIdReader0, (Object) propertyName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No Object Id found for an instance of `com.fasterxml.jackson.databind.PropertyName`, to assign to property '{8LM}8LM'
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.leaseObjectBuffer();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BaseSettings baseSettings1 = baseSettings0.withAppendedAnnotationIntrospector(annotationIntrospector0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      BaseSettings baseSettings2 = baseSettings1.withDateFormat(dateFormat0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = objectMapper0._configOverrides;
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.createInstance(deserializationConfig0, (JsonParser) null, (InjectableValues) null);
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext1.readValue((JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Date date0 = defaultDeserializationContext0.parseDate("4 ");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ArrayType> class0 = ArrayType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, simpleType0, javaType0);
      MapLikeType mapLikeType1 = mapLikeType0.withValueHandler(objectBuffer0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapLikeType1);
      valueInstantiator_Base0.getIncompleteParameter();
      assertTrue(mapLikeType1.hasValueHandler());
      
      defaultDeserializationContext_Impl0.keyDeserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) "%w=<ci/Z?";
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "%w=<ci/Z?", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'w'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      coreXMLDeserializers_Std0.getValueType();
      defaultDeserializationContext_Impl1.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, (JavaType) null);
      defaultDeserializationContext_Impl1.getConfig();
      defaultDeserializationContext_Impl1.handlePrimaryContextualization(coreXMLDeserializers_Std0, beanProperty_Bogus0, (JavaType) null);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures((-3688));
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("d%'");
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionLikeType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler("d%'");
      JavaType javaType1 = referenceType1.withContentType(javaType0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) referenceType1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) jsonMappingException0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) javaType1;
      objectArray0[6] = (Object) jsonToken0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(javaType1, jsonToken0, "d%'", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) valueInstantiators_Base0;
      objectArray0[2] = (Object) jsonToken0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) deserializerFactoryConfig0;
      objectArray0[5] = (Object) deserializerFactoryConfig1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "Overflow: numeric value (%s) out of range of int (%d -%d)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.deser.ValueInstantiators$Base
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, class0);
      JavaType javaType0 = null;
      String string0 = "vPqOSqU";
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((JavaType) null, "vPqOSqU");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // vPqOSqU
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.hasSomeOfFeatures(1);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withTypeHandler(objectReader0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(collectionType1);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Object[] objectArray0 = new Object[1];
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale.lookup(stack0, (Collection<Locale>) null);
      objectMapper0.setLocale((Locale) null);
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      try { 
        defaultDeserializationContext0.findClass("T?.zw+'>2dD\"B");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // T?.zw+'>2dD\"B
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2852);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, pipedReader0, objectReader0, charsToNameCanonicalizer1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      PropertyName propertyName0 = PropertyName.construct("");
      beanDeserializerBuilder0.removeProperty(propertyName0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) null, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.ResolvedRecursiveType`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      String string0 = "p@";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty((Object) null, "3ODii~", (JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) deserializationFeature0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("ej%<o>", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%<o'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x(P>X$pK,.");
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException("com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer");
      Class<SimpleType> class0 = SimpleType.class;
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.deser.std.DateDeserializers$SqlDateDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
      boolean boolean1 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.createParserWithMatch();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) valueInstantiator_Base0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, valueInstantiator_Base0, (JsonParser) null, "(JQ|FSeM %", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanProperty_Bogus0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "Cannot construct instance of %s (although at least one Creator exists): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      defaultDeserializationContext_Impl0.getConfig();
      defaultDeserializationContext_Impl0.handlePrimaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.getActiveView();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) simpleAbstractTypeResolver0;
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[3] = (Object) deserializerFactoryConfig0;
      objectArray0[4] = (Object) deserializerFactoryConfig1;
      objectArray0[5] = (Object) simpleAbstractTypeResolver0;
      objectArray0[6] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException("%L]f{Gsz", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      TypeBindings.createIfNeeded(class0, (JavaType) null);
      TypeIdResolver typeIdResolver0 = null;
      String string0 = "VBH:HLT2)ExE[VE>";
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList0;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class1, (ValueInstantiator) null, (JsonParser) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.deser.AbstractDeserializer` (although at least one Creator exists): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.hasSomeOfFeatures(327);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<JsonDeserializer<MockDateFormat>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<MockDateFormat>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, (JavaType) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper1.reader(jsonNodeFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationContext deserializationContext0 = defaultDeserializationContext0.setAttribute(objectReader0, objectReader0);
      deserializationContext0.getDeserializationFeatures();
      Class<MapLikeType> class0 = MapLikeType.class;
      Class<Void> class1 = Void.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getSuperClass();
      try { 
        defaultDeserializationContext0.handleMissingTypeId((JavaType) null, (TypeIdResolver) null, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) filteringParserDelegate0, jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      String string0 = "+Lb)lkV";
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext0);
      defaultDeserializationContext0.copy();
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      Class<BuilderBasedDeserializer> class2 = BuilderBasedDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) mapType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      javaTypeArray0[4] = (JavaType) mapType0;
      javaTypeArray0[5] = (JavaType) mapType0;
      MapType mapType1 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapType0, javaType0);
      MapType mapType2 = mapType1.withKeyValueHandler(bufferRecycler0);
      defaultDeserializationContext0.unknownTypeException(mapType2, "Cannot deserialize value of type %s from number %s: %s", "Cannot deserialize value of type %s from number %s: %s");
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "@Yu6supf2";
      StringReader stringReader0 = new StringReader("@Yu6supf2");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("{F4>7", (Object) readerBasedJsonParser0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue((Class<?>) class0, (Object) stringReader0);
      ObjectReader objectReader1 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader1.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext1.getTypeFactory();
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      try { 
        defaultDeserializationContext0.readValue((JsonParser) readerBasedJsonParser0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.deser.AbstractDeserializer`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.ResolvedRecursiveType`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      Class<Map> class0 = Map.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      MapType mapType0 = typeFactory0.constructMapType(class0, javaType0, javaType0);
      boolean boolean0 = defaultDeserializationContext0.hasValueDeserializerFor(mapType0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) "[5Gg%d,>7-0YEi_";
      objectArray0[4] = (Object) objectMapper0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) bufferRecycler0;
      objectArray0[7] = (Object) bufferRecycler0;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException("[5Gg%d,>7-0YEi_", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer.createRoot();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<LongNode> class0 = LongNode.class;
      BeanProperty beanProperty0 = null;
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[9];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      JsonGenerator.Feature jsonGenerator_Feature7 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[7] = jsonGenerator_Feature7;
      JsonGenerator.Feature jsonGenerator_Feature8 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[8] = jsonGenerator_Feature8;
      objectMapper0.enable(jsonGenerator_FeatureArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.returnObjectBuffer((ObjectBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      EvoSuiteFile evoSuiteFile0 = null;
      Class<ReferenceType> class1 = ReferenceType.class;
      objectMapper0.readerWithView(class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Split surrogate on writeRaw() input (last character): first character 0x%4x";
      objectReader0.withRootName("Split surrogate on writeRaw() input (last character): first character 0x%4x");
      jsonFactory0.copy();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDeserializationContext0.getActiveView();
      JsonDeserializer<ChronoLocalDate> jsonDeserializer0 = (JsonDeserializer<ChronoLocalDate>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, jsonFactory0, "U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"U\" (class com.fasterxml.jackson.core.JsonFactory), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"U\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      simpleObjectIdResolver0.newForDeserialization((Object) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findObjectId(atomicReference0, (ObjectIdGenerator<?>) null, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object[] objectArray0 = new Object[14];
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      objectReader0._newIterator((JsonParser) readerBasedJsonParser0, (DeserializationContext) defaultDeserializationContext0, (JsonDeserializer<?>) jsonDeserializer0, true);
      objectArray0[2] = (Object) pipedReader0;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext0.leaseObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonFormat.Value jsonFormat_Value0 = defaultDeserializationContext0.getDefaultPropertyFormat(class0);
      assertFalse(jsonFormat_Value0.isLenient());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "`54qp 7m4b2%+]$]";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("`54qp 7m4b2%+]$]", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '+'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedMember) null).when(pOJOPropertiesCollector0).getAnySetterField();
      doReturn((AnnotatedMethod) null).when(pOJOPropertiesCollector0).getAnySetterMethod();
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.findAnySetterAccessor();
      defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      CharsToNameCanonicalizer.createRoot();
      Integer integer0 = new Integer(2);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<List> class0 = List.class;
      Class<MapLikeType> class1 = MapLikeType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) pipedWriter0;
      objectArray0[1] = (Object) collectionType0;
      Class<DateFormat> class2 = DateFormat.class;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class2, (JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.text.DateFormat`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      defaultDeserializationContext_Impl0.weirdStringException("H`Z&{ 2{#q>F X", class0, "H`Z&{ 2{#q>F X");
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ReferenceType> class1 = ReferenceType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "H`Z&{ 2{#q>F X", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      String string0 = "),1";
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) pipedReader0;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeBindings typeBindings1 = typeBindings0.withUnboundVariable("hNC]y1LJaR");
      typeBindings1.getBoundType((-1676));
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) null, jsonToken0, "hNC]y1LJaR", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_FLOAT: hNC]y1LJaR
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[4] = (Object) deserializationFeature0;
      objectArray0[5] = (Object) "ZaU[?ET";
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "ZaU[?ET", "%|fD3$k", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '|'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonParser jsonParser0 = null;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, jsonToken0, "u00!a|16,XtV#\"3K");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withContentTypeHandler(objectBuffer0);
      mapType1.withContentValueHandler(defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findRootValueDeserializer(mapType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty beanProperty0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      Class<List> class0 = List.class;
      typeFactory0.constructCollectionType(class0, class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      Class<PlaceholderForType> class1 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue(jsonParser1, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      Class<List> class0 = List.class;
      typeFactory0.constructCollectionType(class0, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty beanProperty0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      Class<List> class0 = List.class;
      typeFactory0.constructCollectionType(class0, class0);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      defaultDeserializationContext0.hasSomeOfFeatures(47);
      defaultDeserializationContext0.getDeserializationFeatures();
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "',G0or#KLs!YMf'+|";
      objectArray0[1] = (Object) jsonParser_Feature0;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) "',G0or#KLs!YMf'+|";
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) charsToNameCanonicalizer0;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class2, (ValueInstantiator) null, readerBasedJsonParser0, "',G0or#KLs!YMf'+|", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` (although at least one Creator exists): ',G0or#KLs!YMf'+|
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      CharsToNameCanonicalizer.createRoot();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Object> class1 = Object.class;
      ObjectReader[] objectReaderArray0 = new ObjectReader[8];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      objectReaderArray0[4] = objectReader0;
      objectReaderArray0[5] = objectReader0;
      objectReaderArray0[6] = objectReader0;
      objectReaderArray0[7] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.with(objectReaderArray0);
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withType(collectionType0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-38);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat((InputStream) byteArrayInputStream0);
      dataFormatReaders_Match0.createParserWithMatch();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class1, (ValueInstantiator) null, (JsonParser) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, false);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 49);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1000, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext0.getNodeFactory();
      NumericNode numericNode0 = jsonNodeFactory0.numberNode(0L);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      try { 
        objectMapper0.treeToValue((TreeNode) numericNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.PlaceholderForType` (although at least one Creator exists): no long/Long-argument constructor/factory method to deserialize from Number value (0)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, javaType1);
      Boolean boolean0 = new Boolean(true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class1, (Class<? extends String>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.mappingException("Cannot construct instance of %s, problem: %s");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2294);
      assertFalse(boolean0);
      
      int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
      assertEquals(0, int0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "x", "r{}>g0Q]");
      ObjectIdGenerator<PlaceholderForType> objectIdGenerator0 = (ObjectIdGenerator<PlaceholderForType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.findObjectId((Object) null, objectIdGenerator0, (ObjectIdResolver) null);
      defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      defaultDeserializationContext0.instantiationException(class0, (Throwable) null);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException(class1, jsonToken0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<ArrayType> class0 = ArrayType.class;
      Float float0 = new Float(0.0F);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, float0, "0@?IdL%p0e", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'p'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<Void> class1 = Void.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) charsToNameCanonicalizer0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) charsToNameCanonicalizer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, 33, "More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Class
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) beanDeserializerModifier0;
      objectArray0[1] = (Object) deserializerFactory0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) beanDeserializerModifier0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "tkWwu]d.K%{;(M}$UV", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '{'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      typeFactory0.constructCollectionType(class0, class0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "2;y=<hO_Q6Wj";
      objectArray0[1] = (Object) charsToNameCanonicalizer0;
      objectArray0[2] = (Object) charsToNameCanonicalizer0;
      objectArray0[3] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "2;y=<hO_Q6Wj", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      Class<CollectionType> class0 = CollectionType.class;
      objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class1 = Vector.class;
      Class<Integer> class2 = Integer.class;
      typeFactory0.constructCollectionType(class1, class2);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      typeFactory0.constructCollectionType(class0, class0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector1);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription1, defaultDeserializationContext0);
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      Object object0 = new Object();
      Class<String> class1 = String.class;
      String string0 = "NW+@L15Q";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) objectBuffer0;
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class1, 3, "NW+@L15Q", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from number 3: NW+@L15Q
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      typeFactory0.constructCollectionType(class0, class0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      PropertyName propertyName0 = PropertyName.construct("CLOSE_CLOSEABLE");
      beanDeserializerBuilder0.findProperty(propertyName0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) charsToNameCanonicalizer0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) jsonDeserializer0;
      objectArray0[3] = (Object) pipedWriter0;
      objectArray0[4] = (Object) iOContext0;
      objectArray0[5] = (Object) beanDeserializerBuilder0;
      objectArray0[6] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "CLOSE_CLOSEABLE", "CLOSE_CLOSEABLE", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.List` from String \"CLOSE_CLOSEABLE\": CLOSE_CLOSEABLE
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jsonParser0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "Could not find JsonDeserializer for type %s (via property %s)", "Cannot construct instance of %s: %s", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ResolvedRecursiveType` from String \"Could not find JsonDeserializer for type %s (via property %s)\": Cannot construct instance of com.fasterxml.jackson.core.json.ReaderBasedJsonParser@500: java.lang.Object@26f34da2
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      defaultDeserializationContext0.returnObjectBuffer((ObjectBuffer) null);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasSomeOfFeatures((-894));
      Class<String> class0 = String.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, class2, jsonToken0, "Invalid configuration: values of type %s cannot be merged");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "P;LPZ:rjmCyF", classNameIdResolver0, "QwiyUOt_.M%%t`/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'P;LPZ:rjmCyF' as a subtype of null: QwiyUOt_.M%%t`/
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "miv U7/:,nmo+B";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "miv U7/:,nmo+B");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<InputStream> class0 = InputStream.class;
      Class<String> class1 = String.class;
      defaultDeserializationContext_Impl0.endOfInputException(class1);
      String string1 = "yZ";
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "yZ", "yZ");
      Class<MapLikeType> class2 = MapLikeType.class;
      defaultDeserializationContext_Impl0.endOfInputException(class2);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, class1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Class java.lang.String; expected Class<JsonDeserializer>
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getConfig();
      MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
      defaultDeserializationContext0.isEnabled(mapperFeature0);
      defaultDeserializationContext0.getConfig();
      defaultDeserializationContext0.getTypeFactory();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Integer with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      Object object0 = new Object();
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException(class0, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      Integer integer0 = new Integer(2);
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class1, integer0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.ReferenceType`: com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) charsToNameCanonicalizer0;
      objectArray0[1] = (Object) jsonParser0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) jsonParser_Feature0;
      objectArray0[4] = (Object) collectionType0;
      objectArray0[5] = (Object) "D*c5'f*Gf>";
      objectArray0[6] = (Object) jsonParser0;
      objectArray0[7] = (Object) collectionLikeType0;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "D*c5'f*Gf>", "D*c5'f*Gf>", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.util.Vector` from String \"D*c5'f*Gf>\": D*c5'f*Gf>
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", 2);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      try { 
        defaultDeserializationContext0.findInjectableValue(objectMapper_DefaultTyping0, (BeanProperty) null, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [NON_FINAL]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasSomeOfFeatures((-894));
      Class<String> class0 = String.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findInjectableValue(resolvedRecursiveType0, (BeanProperty) null, deserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.copy();
      defaultDeserializationContext0.canOverrideAccessModifiers();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      try { 
        defaultDeserializationContext0.reportTrailingTokens((Class<?>) class0, (JsonParser) readerBasedJsonParser0, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_FALSE) found after value (bound as `com.fasterxml.jackson.databind.deser.AbstractDeserializer`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      iOContext0.allocReadIOBuffer(2);
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      String string0 = "com.fasterxml.jackson.databind.deser.BeanDeserializer";
      String string1 = "No Object Id found for an instance of %s, to assign to property '%s'";
      Object[] objectArray0 = new Object[1];
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class2, "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.getAttribute((Object) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charsToNameCanonicalizer0;
      objectArray0[1] = (Object) objectMapper1;
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      assertEquals(237020304, defaultDeserializationContext1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectBuffer0.resetAndStart();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      Object object0 = new Object();
      Class<String> class0 = String.class;
      String string0 = "NW+@L15Q";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) charsToNameCanonicalizer0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) "NW+@L15Q";
      objectArray0[3] = (Object) defaultDeserializationContext0;
      defaultDeserializationContext0.getConfig();
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, 0, "NW+@L15Q", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from number 0: NW+@L15Q
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext0.constructType(class0);
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleWeirdNumberValue(class1, 0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      iOContext0.allocConcatBuffer();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      String string0 = "";
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext0.constructType(class0);
      Class<MapLikeType> class1 = MapLikeType.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jsonParser_Feature0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class1, 2, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from number 2: 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<DataInputStream> class0 = DataInputStream.class;
      ObjectIdGenerator<Integer> objectIdGenerator0 = objectIdGenerators_IntSequenceGenerator0.forScope(class0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId(beanDeserializerFactory0, objectIdGenerator0, simpleObjectIdResolver0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer.createRoot();
      Integer integer0 = new Integer(1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(collectionType0, (Object) null, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.Vector` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer.createRoot();
      Integer integer0 = new Integer(1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      String string0 = "com.fasterxml.jackson.annotation.JsonInclude$Include";
      JsonParser jsonParser1 = jsonFactory3.createParser("com.fasterxml.jackson.annotation.JsonInclude$Include");
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "JSON");
      try { 
        defaultDeserializationContext0.reportUnknownProperty(jsonParser1, "JSON", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"JSON\" (class com.fasterxml.jackson.core.json.ReaderBasedJsonParser), not marked as ignorable
         //  at [Source: (String)\"\"; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.json.ReaderBasedJsonParser[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null, 3);
      JsonParser jsonParser0 = arrayNode0.traverse();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Class<DataInputStream> class1 = DataInputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) collectionLikeType0, jsonToken0, "] (for ");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializationFeature0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
      Class<CollectionType> class0 = CollectionType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonDeserializer<ObjectIdResolver> jsonDeserializer0 = (JsonDeserializer<ObjectIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, (BeanProperty) null, (JavaType) null);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) jsonDeserializer1;
      objectArray0[2] = (Object) deserializerFactoryConfig1;
      objectArray0[3] = (Object) bufferRecycler0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) jsonToken0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer1, jsonToken0, "Internal error: constructor for %s has mismatch: %d parameters; %d sets of annotations", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.JsonDeserializer$MockitoMock$383940534
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer.createRoot();
      Integer integer0 = new Integer(1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      jsonFactory2.createParser("N@j=w-ftdbT");
      JsonDeserializer<BeanDeserializer> jsonDeserializer0 = (JsonDeserializer<BeanDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.reportUnknownProperty(pipedWriter0, "Invalid configuration: values of type %s cannot be merged", jsonDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"Invalid configuration: values of type %s cannot be merged\" (class java.io.PipedWriter), not marked as ignorable
         //  at [Source: (String)\"\"; line: 1, column: 1] (through reference chain: java.io.PipedWriter[\"Invalid configuration: values of type %s cannot be merged\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.reportUnknownProperty((Object) null, (String) null, (JsonDeserializer<?>) null);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      JavaType javaType0 = TypeFactory.unknownType();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) javaType0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) javaType0;
      objectArray0[8] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch(javaType0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "pW$A}M.?f+4]");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer0);
      Object object0 = new Object();
      TypeFactory.unknownType();
      defaultDeserializationContext_Impl1.hasDeserializationFeatures(2);
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1359);
      coreXMLDeserializers_Std0.getObjectIdReader();
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      Class<MapType> class2 = MapType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-564));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findNonContextualValueDeserializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      TypeFactory.unknownType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      Class<Throwable> class0 = Throwable.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2056));
      coreXMLDeserializers_Std0.getObjectIdReader();
      defaultDeserializationContext0.leaseObjectBuffer();
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      defaultDeserializationContext0.getLocale();
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(collectionType0, (Object) null, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.Vector` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((String) null, (Object) objectMapper0);
      Class<SimpleType> class0 = SimpleType.class;
      InjectableValues.Std injectableValues_Std2 = injectableValues_Std1.addValue((Class<?>) class0, (Object) objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std2);
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte) (-33);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte) (-33), (int) (byte) (-33));
      dataFormatReaders_Match0.createParserWithMatch();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      assertEquals('=', base64Variant0.getPaddingChar());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ">[~JpZiT[{cMZx");
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<List> class0 = List.class;
      Class<CollectionType> class1 = CollectionType.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionLikeType collectionLikeType0 = collectionType1.withStaticTyping();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, collectionLikeType0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.missingTypeIdException(collectionType0, "qRB*");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-2094));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      objectMapper1.setPropertyNamingStrategy(propertyNamingStrategy0);
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      TypeFactory.unknownType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      defaultDeserializationContext0.getNodeFactory();
      Vector<Object> vector0 = new Vector<Object>();
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.handleUnknownProperty(readerBasedJsonParser0, jsonDeserializer0, jsonParser0, "),1");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"),1\" (class com.fasterxml.jackson.core.json.ReaderBasedJsonParser), not marked as ignorable (0 known properties: ])
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.json.ReaderBasedJsonParser[\"),1\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      defaultDeserializationContext0.getContextualType();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
      Class<CollectionType> class0 = CollectionType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      MockDate mockDate0 = new MockDate();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled((DeserializationFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[|@jR.5uQB;$p@");
      String string0 = "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator";
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext0.instantiationException(class0, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      Integer integer0 = new Integer(1);
      Class<String> class1 = String.class;
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class1, pipedReader0, sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.String`, problem: [|@jR.5uQB;$p@
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      Object object0 = new Object();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectBuffer objectBuffer1 = defaultDeserializationContext0.leaseObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer1);
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Invalid definition for property %s (of type %s): %s";
      objectArray0[1] = (Object) readerBasedJsonParser0;
      defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "Invalid definition for property %s (of type %s): %s", objectArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      Object object0 = new Object();
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException(class0, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      Class<BuilderBasedDeserializer> class1 = BuilderBasedDeserializer.class;
      Integer integer0 = new Integer(1);
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class1, integer0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.ReferenceType`: com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      try { 
        defaultDeserializationContext0.parseDate("Default constructor for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value 'Default constructor for ': Cannot parse date \"Default constructor for\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      readerBasedJsonParser0.clearCurrentToken();
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser1 = arrayNode0.traverse((ObjectCodec) objectReader0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue(jsonParser1, (JavaType) collectionLikeType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.CollectionLikeType cannot be cast to com.fasterxml.jackson.databind.type.CollectionType
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      String string0 = "),1";
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) deserializerFactoryConfig1;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleWeirdKey(class0, "{i2%f", "{i2%f", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      PropertyName propertyName0 = PropertyName.construct("");
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext0);
      beanDeserializerBuilder0.findProperty(propertyName0);
      Class<Void> class0 = Void.class;
      String string0 = "TdH#9yU_:R=2z>%;";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jsonParser_Feature0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) propertyName0;
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "CLOSE_CLOSEABLE", "TdH#9yU_:R=2z>%;", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ';'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext0.leaseObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      JsonParser jsonParser1 = defaultDeserializationContext0.getParser();
      assertEquals(0, jsonParser1.currentTokenId());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withContentTypeHandler(objectBuffer0);
      MapType mapType2 = mapType1.withContentValueHandler(defaultDeserializationContext_Impl0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType2, typeFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId(mapType1, "", classNameIdResolver0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<Object> class0 = Object.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator((OutputDecorator) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator("{77Us),P(fe&");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte) (-69);
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, jsonParser0, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type FIELD_NAME) found after value (bound as `java.lang.Object`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: (byte[])\"\u0001\u0000\uFFFD\uFFFDv@?\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      objectMapper1.reader();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReferenceType> class2 = ReferenceType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class2);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId(arrayType0, "VQZ:'u9wkT#dZxCfrV", classNameIdResolver0, "s` C-fi~A9m1_Apgw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'VQZ:'u9wkT#dZxCfrV' as a subtype of [array type, component type: [simple type, class com.fasterxml.jackson.databind.type.ReferenceType]]: s` C-fi~A9m1_Apgw
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, jsonToken0, "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<CollectionType> class0 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(charsToNameCanonicalizer0);
      JavaType javaType1 = referenceType1.withContentType(resolvedRecursiveType0);
      try { 
        defaultDeserializationContext0.findKeyDeserializer(javaType1, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [reference type, class com.fasterxml.jackson.databind.type.CollectionType<com.fasterxml.jackson.databind.type.CollectionType><[recursive type; UNRESOLVED>]
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      try { 
        defaultDeserializationContext0.readValue((JsonParser) readerBasedJsonParser0, (JavaType) collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.util.Vector`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.setAttribute(pipedReader0, pipedWriter0);
      JavaType javaType0 = defaultDeserializationContext0.getContextualType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      Class<Map> class1 = Map.class;
      Class<InputStream> class2 = InputStream.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) jsonParser0;
      objectArray0[2] = (Object) bufferRecycler0;
      objectArray0[3] = (Object) pipedReader0;
      objectArray0[4] = (Object) pipedReader0;
      objectArray0[5] = (Object) readerBasedJsonParser0;
      objectArray0[6] = (Object) jsonParser0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JavaType) collectionType0, "%:UW3f$h2tSmMD[", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ':'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      Object object0 = new Object();
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateFormat0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      PipedReader pipedReader1 = new PipedReader();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader1, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, jsonParser_Feature0, "Invalid type definition for type %s: %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"Invalid type definition for type %s: %s\" (class com.fasterxml.jackson.core.JsonParser$Feature), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.JsonParser$Feature[\"Invalid type definition for type %s: %s\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      NamedType namedType0 = new NamedType(class0, "<GM-=3n5*jMTb7 zv");
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(namedType0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.hasDeserializationFeatures((-12));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "QzF2Bbq@:s[-4h", "),1", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer.createRoot();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(java.io.InputStream.class));
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putObject("5 |%5zL6e5=M}T");
      Boolean boolean0 = new Boolean(false);
      ObjectNode objectNode2 = objectNode1.put("/'X(bUrZ?", boolean0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Integer integer0 = new Integer(3);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(integer0);
      ReferenceType referenceType2 = referenceType1.withValueHandler(pipedWriter0);
      JavaType javaType0 = referenceType2.withContentType(simpleType0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, javaType0, jsonToken0, "com.fasterxml.jackson.databind.DeserializationContext");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonGenerator_Feature1);
      JsonParser jsonParser1 = jsonFactory3.createParser((InputStream) null);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      objectMapper0.readValues(jsonParser1, class1);
      Class<Vector> class2 = Vector.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 3);
      JsonNodeFactory jsonNodeFactory1 = new JsonNodeFactory(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory1);
      JsonParser jsonParser2 = arrayNode0.traverse((ObjectCodec) objectReader0);
      assertNull(jsonParser2.getCurrentToken());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(collectionType0, (Object) null, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.Vector` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) iOContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "com.fasterxml.jackson.databind.deser.BeanDeserializer", "No Object Id found for an instance of %s, to assign to property '%s'", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization((DeserializationConfig) null, simpleType0, (ClassIntrospector.MixInResolver) null);
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      annotatedClass0.getDefaultConstructor();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.keyDeserializerInstance((Annotated) null, "Ppzr)kAL8c\"l;p/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type java.lang.String; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw");
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(47);
      assertFalse(boolean0);
      
      int int0 = defaultDeserializationContext0.getDeserializationFeatures();
      assertEquals(237020304, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      JsonDeserializer<ArrayType> jsonDeserializer1 = (JsonDeserializer<ArrayType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 808, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, collectionType0, "b]SU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      objectReader0.createDeserializationContext((JsonParser) null);
      Class<LongNode> class0 = LongNode.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "thEnG,Gt,?4xj#.n";
      Object[] objectArray0 = new Object[2];
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      try { 
        objectMapper0.updateValue((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000000453\" (class java.sql.SQLClientInfoException), not marked as ignorable (4 known properties: \"failedProperties\", \"cause\", \"nextException\", \"stackTrace\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.sql.SQLClientInfoException[\"com.fasterxml.jackson.core.io.SerializedString@0000000453\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.reportMappingException("TmeI34I<,D4>ubR4", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw", "s` C-fi~A9m1_Apgw", jsonMappingException0);
      Class<InputStream> class1 = InputStream.class;
      charsToNameCanonicalizer0.release();
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-2013));
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      assertEquals(237020304, defaultDeserializationContext1.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      boolean boolean1 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty(jsonParser0, (String) null, (JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(15711167);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AtomicReference<Throwable> atomicReference1 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.hasValueDeserializerFor(placeholderForType0, atomicReference1);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(144);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer(placeholderForType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader((Base64Variant) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.deser.AbstractDeserializer`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(40);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      try { 
        defaultDeserializationContext0.readValue((JsonParser) readerBasedJsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.deser.AbstractDeserializer`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[2] = (Object) pipedReader0;
      JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer1).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.reportUnknownProperty(readerBasedJsonParser0, "),1", jsonDeserializer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"),1\" (class com.fasterxml.jackson.core.json.ReaderBasedJsonParser), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.json.ReaderBasedJsonParser[\"),1\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(144);
      assertFalse(boolean0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '*';
      charArray0[2] = ',';
      charArray0[3] = 'w';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, 144, 144);
      Class<DateFormat> class0 = DateFormat.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      MapType mapType2 = mapType1.withContentTypeHandler((Object) null);
      MapType mapType3 = mapType2.withKeyType(mapType1);
      defaultDeserializationContext_Impl0.constructSpecializedType(mapType3, class0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(2294);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType3, typeFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId(mapType3, classNameIdResolver0, "problem handler tried to resolve into non-subtype: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<JsonDeserializer<MockDateFormat>> jsonDeserializer0 = (JsonDeserializer<JsonDeserializer<MockDateFormat>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jsonFactory1;
      objectArray0[1] = (Object) arrayNode0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: JSON
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      MockDate mockDate0 = new MockDate(3);
      defaultDeserializationContext0.constructCalendar(mockDate0);
      defaultDeserializationContext0.leaseObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer((ObjectBuffer) null);
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, "X@&^O\"HaJcKb|k%z4&", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-1));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, 1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(uTF8DataInputJsonParser0);
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)125;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-2094));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      boolean boolean0 = defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      boolean boolean1 = defaultDeserializationContext0.hasSomeOfFeatures((-3106));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getParser();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, beanDeserializerFactory0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      iOContext0.allocReadIOBuffer();
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[3] = (Object) bufferRecycler0;
      objectArray0[4] = (Object) "),1";
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "G},| ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: G},| 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = "),1";
      Class<ReferenceType> class1 = ReferenceType.class;
      defaultDeserializationContext0.weirdNativeValueException(class0, class1);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jsonDeserializer0;
      objectArray0[1] = (Object) jsonDeserializer0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken0, "),1", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: ),1
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(class0, class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1/J7", "),1", jsonMappingException0);
      defaultDeserializationContext0.getArrayBuilders();
      defaultDeserializationContext0.getTypeFactory();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      defaultDeserializationContext0.wrongTokenException((JsonParser) readerBasedJsonParser0, jsonToken0, "),1");
      TimeZone timeZone0 = defaultDeserializationContext0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<List> class0 = List.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue(collectionType0, charsToNameCanonicalizer0, readerBasedJsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      Class<ReferenceType> class1 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(class0, class1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("1/J7", "),1", jsonMappingException0);
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      defaultDeserializationContext0.with(deserializerFactory0);
      JavaType javaType0 = defaultDeserializationContext0.getContextualType();
      assertNull(javaType0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue((JavaType) null, (Object) null, readerBasedJsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<MapType> class0 = MapType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNativeValueException(mockDateFormat0, class0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("s` C-fi~A9m1_Apgw", "s` C-fi~A9m1_Apgw", jsonMappingException0);
      Class<InputStream> class1 = InputStream.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(47);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getContextualType();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 33);
      SQLException sQLException0 = new SQLException((String) null, sQLNonTransientConnectionException0);
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      defaultDeserializationContext0.hasSomeOfFeatures(1);
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      int[] intArray0 = new int[0];
      String string0 = "localizedMessage";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("localizedMessage");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", sQLNonTransientConnectionException0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext_Impl2.getContextualType();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl2;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) pOJOPropertiesCollector0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) "SET";
      objectArray0[2] = (Object) "SET";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) null, "SET", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<LongNode> class0 = LongNode.class;
      Class<Object> class1 = Object.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.invalidTypeIdException(javaType0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s", "");
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) typeBindings0;
      objectArray0[1] = (Object) stack0;
      objectArray0[2] = (Object) javaType0;
      objectArray0[3] = (Object) class1;
      objectArray0[4] = (Object) javaType0;
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) beanDeserializerModifier0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "\"7", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \"7
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.mappingException("");
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "$Um}|][?$SRQPry+*yk", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // $Um}|][?$SRQPry+*yk
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException("Cannot deserialize Map key of type %s from String %s: %s", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Tv3F4 :3XIAN");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      objectReader0.withHandler(deserializationProblemHandler0);
      JsonFactory jsonFactory2 = jsonFactory0.setRootValueSeparator("HQeA");
      JsonParser jsonParser0 = jsonFactory2.createParser("Tv3F4 :3XIAN");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructCalendar((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<CollectionType> class0 = CollectionType.class;
      try { 
        objectMapper0.convertValue((Object) mockDateFormat0, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.CollectionType` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2294);
      defaultDeserializationContext_Impl0.getContextualType();
      boolean boolean1 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-562));
      assertTrue(boolean1 == boolean0);
      
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertSame(objectBuffer1, objectBuffer0);
      assertNotNull(objectBuffer1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(2294);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      defaultDeserializationContext_Impl0.mappingException("", objectArray0);
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) pipedReader0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) objectMapper1;
      objectArray0[4] = (Object) objectReader0;
      objectArray0[5] = (Object) pipedReader0;
      objectArray0[6] = (Object) jsonParser0;
      objectArray0[7] = (Object) jsonDeserializer0;
      objectArray0[8] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "),1", "),1", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.type.ReferenceType` from String \"),1\": ),1
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      objectReader0.withFeatures(jsonParser_FeatureArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = new Object();
      Class<DataInputStream> class0 = DataInputStream.class;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "w4[oxI/]]c2*bB=|=", "/0jiovxTlpATj'-", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.io.DataInputStream` from String \"w4[oxI/]]c2*bB=|=\": /0jiovxTlpATj'-
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      DoubleNode doubleNode0 = DoubleNode.valueOf(1.0);
      Class<ArrayType> class0 = ArrayType.class;
      deserializationContext0.weirdKeyException(class0, "com.fasterxml.jackson.databind.PropertyNamingStrategy", "com.fasterxml.jackson.databind.PropertyNamingStrategy");
      objectMapper0.treeAsTokens(doubleNode0);
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "Jh(/#aygA4s;d ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) deserializerFactoryConfig0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "d=";
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) simpleAbstractTypeResolver0;
      objectArray0[7] = (Object) beanDeserializerFactory0;
      Object object2 = new Object();
      objectArray0[8] = object2;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "d=", "v70+pc/0!lY[", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      String string0 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTimeoutException0);
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", "");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", sQLTimeoutException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      DoubleNode doubleNode0 = DoubleNode.valueOf(1.0);
      Class<ArrayType> class0 = ArrayType.class;
      deserializationContext0.weirdKeyException(class0, "com.fasterxml.jackson.databind.PropertyNamingStrategy", "com.fasterxml.jackson.databind.PropertyNamingStrategy");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MC]>!8");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type definition for type %s: %s");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        deserializationContext0.readValue(jsonParser0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(2294);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) "Cannot deserialize Map key of type %s from String %s: %s";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("Cannot deserialize Map key of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(1);
      JsonDeserializer<ObjectMapper.DefaultTyping> jsonDeserializer0 = (JsonDeserializer<ObjectMapper.DefaultTyping>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Object[] objectArray0 = new Object[0];
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException("DXXP)P", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<CollectionType> class0 = CollectionType.class;
      defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "jGBZ#5^>y'xFL<C=");
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-34);
      bigInteger0.bitLength();
      byteArray0[5] = (byte)87;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.gcd(bigInteger1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "jGBZ#5^>y'xFL<C=";
      objectArray0[5] = (Object) bigInteger0;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonParser) null, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Integer integer0 = new Integer(16);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(integer0);
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(javaType0, "Cannot construct instance of %s, problem: %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'Cannot construct instance of %s, problem: %s' as a subtype of [recursive type; UNRESOLVED: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = new Object();
      defaultDeserializationContext_Impl0.getContextualType();
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<MapType> class0 = MapType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", "-by?>kWS\"mGZ6)n");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<String> class0 = String.class;
      String string0 = "";
      defaultDeserializationContext0.weirdNumberException((Number) null, class0, "");
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = null;
      try {
        arrayNode0 = new ArrayNode(jsonNodeFactory0, (-2052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2052
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getDeserializationFeatures();
      Class<MapType> class0 = MapType.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[3] = (Object) deserializerFactory0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "rqQ.r\\";
      Object object0 = new Object();
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, (String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) beanProperty_Bogus0;
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Object object1 = new Object();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext1.mappingException("com.fasterxml.jackson.databind.DeserializationContext");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(jsonMappingException0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, atomicReference0);
      assertEquals(0, defaultDeserializationContext1.getDeserializationFeatures());
      
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) defaultDeserializationContext_Impl0;
      boolean boolean1 = defaultDeserializationContext0.hasDeserializationFeatures(0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl1.reportInputMismatch((Class<?>) class0, "@", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // @
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) beanDeserializerModifier0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) beanDeserializerFactory0;
      try { 
        defaultDeserializationContext_Impl1.reportInputMismatch((Class<?>) class0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, resolvedRecursiveType0, false);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Void> class0 = Void.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "xPhF|%deOnC^*.~";
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) deserializerFactory0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) defaultDeserializationContext0;
      objectArray0[7] = (Object) deserializerFactory0;
      objectArray0[8] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "xPhF|%deOnC^*.~", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[3] = (Object) beanProperty_Bogus0;
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Object object1 = new Object();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException("com.fasterxml.jackson.databind.DeserializationContext");
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(jsonMappingException0);
      defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, atomicReference0);
      String string0 = "L@v:\\+iGv<2lExBn-pK";
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(javaType0, jsonToken0, "L@v:+iGv<2lExBn-pK", objectArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures((-1534));
      Class<String> class0 = String.class;
      Float float0 = new Float(1.0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) float0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) float0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qKvaGJ$4~#");
      objectArray0[6] = (Object) deserializerFactory0;
      objectArray0[7] = (Object) float0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, float0, "qKvaGJ$4~#", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      String string0 = "ZpYVZQTQ*\\`rg_F6-<";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) null;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, bigDecimal0, "ZpYVZQTQ*`rg_F6-<", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte)18;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)24, (-2142));
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) (byte)26;
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonParser0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_EMBEDDED_OBJECT: JSON
         //  at [Source: (byte[])\"\uFFFD:\u0001\u001A\uFFFD\u0018\u0003\uFFFD\u0012\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl1.reportInputMismatch((JavaType) null, "Could not find JsonDeserializer for type ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find JsonDeserializer for type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2));
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      objectMapper1.reader((Base64Variant) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) deserializationFeature0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) placeholderForType0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) placeholderForType0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      Object object0 = new Object();
      Class<ReferenceType> class0 = ReferenceType.class;
      defaultDeserializationContext0.instantiationException(class0, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNumberException(3, class1, "com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultDeserializationContext_Impl0.copy();
      Class<Throwable> class0 = Throwable.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class0, beanDeserializerFactory0, sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.readerForUpdating(deserializerFactoryConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, "", "");
      Class<List> class0 = List.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class0, charsToNameCanonicalizer0, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) beanProperty_Bogus0;
      objectArray0[2] = (Object) "l$7Mp;z0%*^ZPQfemk ";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) beanDeserializerFactory0;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, "l$7Mp;z0%*^ZPQfemk ", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '*'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MapType> class0 = MapType.class;
      String string0 = "com.fasterxml.jackson.databind.DeserializationContext";
      Object object0 = new Object();
      String string1 = ")h;jd";
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.databind.DeserializationContext";
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) ")h;jd";
      objectArray0[7] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, ")h;jd", "com.fasterxml.jackson.databind.DeserializationContext", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.readerForUpdating(deserializerFactoryConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer.createRoot();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(33);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      defaultDeserializationContext_Impl1.isEnabled(deserializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper2 = new ObjectMapper();
      objectMapper2.reader((Base64Variant) null);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      Object object0 = new Object();
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures((-562));
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      defaultDeserializationContext_Impl1.isEnabled(deserializationFeature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectReader0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A  V4/zZ/@eR/l*>");
      deserializerFactoryConfig0.deserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getConfig();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.readerForUpdating(deserializerFactoryConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedWriter pipedWriter0 = new PipedWriter();
      CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, "", "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.unknownTypeException((JavaType) null, "xPhF|%deOnC^*.~", "");
      Class<Throwable> class0 = Throwable.class;
      String string0 = "e%~pz`:t^*n";
      try { 
        MockURI.URI("", "e%~pz`:t^*n", "", 899, "", "", "e%");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://e%25~pz%60:t%5E*n@:899?#e%25
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MapType> class0 = MapType.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) beanProperty_Bogus0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "com.fasterxml.jackson.databind.DeserializationContext", "com.fasterxml.jackson.databind.DeserializationContext", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      deserializationContext0.mappingException(class0, jsonToken0);
      deserializationContext0.reportUnknownProperty(objectMapper0, "Cannot deserialize value of type %s from String %s: %s", (JsonDeserializer<?>) null);
      JsonToken jsonToken1 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) jsonToken1;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken1, "Cannot deserialize value of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      HashMap<MockDateFormat, PlaceholderForType> hashMap0 = new HashMap<MockDateFormat, PlaceholderForType>();
      hashMap0.remove((Object) beanDeserializerFactory0);
      contextAttributes0.withSharedAttributes(hashMap0);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonDeserializer<Throwable> jsonDeserializer0 = (JsonDeserializer<Throwable>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException(jsonDeserializer0, jsonToken0, "JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Throwable> class0 = Throwable.class;
      defaultDeserializationContext0.weirdNativeValueException(defaultDeserializationContext_Impl0, class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.setAttribute(placeholderForType0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      deserializationContext0.weirdNativeValueException(objectMapper0, class0);
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      Class<ArrayType> class1 = ArrayType.class;
      deserializationContext0.weirdKeyException(class1, "com.fasterxml.jackson.databind.ProprtyNamingStrategy", "com.fasterxml.jackson.databind.ProprtyNamingStrategy");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        deserializationContext0.readValue(jsonParser0, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<CollectionType> class0 = CollectionType.class;
      MockDate mockDate0 = new MockDate();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<CollectionLikeType> jsonDeserializer0 = (JsonDeserializer<CollectionLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Cannot deserialize value of type %s from number %s: %s";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "Cannot deserialize value of type %s from number %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(iOContext0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, beanDeserializerFactory0, "[Kcw7m'U");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"[Kcw7m'U\" (class com.fasterxml.jackson.databind.deser.BeanDeserializerFactory), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.deser.BeanDeserializerFactory[\"[Kcw7m'U\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-4148));
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      defaultDeserializationContext0.missingTypeIdException(placeholderForType0, "");
      JavaType javaType0 = typeFactory0.constructGeneralizedType(resolvedRecursiveType0, class0);
      ArrayType.construct(javaType0, typeBindings0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      PriorityQueue<SettableBeanProperty> priorityQueue0 = new PriorityQueue<SettableBeanProperty>();
      HashMap<String, List<PropertyName>> hashMap0 = new HashMap<String, List<PropertyName>>();
      BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct((Collection<SettableBeanProperty>) priorityQueue0, true, (Map<String, List<PropertyName>>) hashMap0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      HashMap<String, SettableBeanProperty> hashMap1 = new HashMap<String, SettableBeanProperty>();
      HashSet<String> hashSet0 = new HashSet<String>();
      BeanDeserializer beanDeserializer0 = null;
      try {
        beanDeserializer0 = new BeanDeserializer((BeanDeserializerBuilder) null, basicBeanDescription0, beanPropertyMap0, hashMap1, hashSet0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      defaultDeserializationContext0.hasDeserializationFeatures(16);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jsonToken0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer.createRoot();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      objectReader0.createDeserializationContext(jsonParser0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sQLWarning0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 2554);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.getBoundType((-1));
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      String string0 = "Failed to parse Date value '%s': %s";
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<LongNode> class0 = LongNode.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1627533886) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      defaultDeserializationContext0.hasDeserializationFeatures(16);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportWrongTokenException((JavaType) null, jsonToken0, "Cannot construct instance of %s: %s", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader((Base64Variant) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      Class<Throwable> class0 = Throwable.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "Invalid configuration: values of type %s cannot be merged");
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(placeholderForType0, placeholderForType0, placeholderForType0);
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((JavaType) mapLikeType0, "[any property on class ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [any property on class 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      defaultDeserializationContext1.reportBadMerge((JsonDeserializer<?>) null);
      String string0 = "Failed to parse Date value '%s': %s";
      TypeFactory.defaultInstance();
      try { 
        defaultDeserializationContext1.reportBadDefinition((JavaType) null, "IF+nwD=(+S4Lnd/]");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // IF+nwD=(+S4Lnd/]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      boolean boolean0 = false;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.reader();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      InputStream inputStream0 = objectReader0._inputStream(file0);
      try { 
        objectReader0.readValues(inputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (org.evosuite.runtime.mock.java.io.MockFileInputStream); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      ReferenceType referenceType2 = referenceType1.withContentValueHandler(objectMapper1);
      objectMapper1.readerForUpdating(referenceType2);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, referenceType1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 3899;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2052));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      defaultDeserializationContext1.reportBadMerge((JsonDeserializer<?>) null);
      String string0 = "Failed to parse Date value '%s': %s";
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getTypeFactory();
      Object object0 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.hasDeserializationFeatures(125);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      objectArray0[0] = object1;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = (Object) null;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "),1", "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.text.DateFormat` from String \"),1\": 
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      MockDate mockDate0 = new MockDate();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory2 = (BeanDeserializerFactory)beanDeserializerFactory1.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl1.copy();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      defaultDeserializationContext_Impl2.endOfInputException(class0);
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      String string0 = "";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) javaType0;
      objectArray0[1] = (Object) javaType0;
      objectArray0[2] = (Object) "";
      defaultDeserializationContext0.hasDeserializationFeatures((-2052));
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) deserializerFactoryConfig0;
      objectArray0[1] = (Object) simpleAbstractTypeResolver0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) simpleAbstractTypeResolver0;
      deserializerFactoryConfig0.deserializers();
      defaultDeserializationContext_Impl0.getActiveView();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      String string0 = "Unsuitable method (";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      defaultDeserializationContext0.hasDeserializationFeatures(16);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      HashMap<MockDateFormat, PlaceholderForType> hashMap0 = new HashMap<MockDateFormat, PlaceholderForType>();
      ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0._context;
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      defaultDeserializationContext_Impl1.returnObjectBuffer(objectBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<CollectionType> class0 = CollectionType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators1);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute(valueInstantiator_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getAttribute(deserializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("L-%cx_!K51$3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) javaType0;
      objectArray0[1] = (Object) javaType0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(javaType0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      defaultDeserializationContext_Impl0.getArrayBuilders();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      JavaType javaType0 = null;
      String string0 = "";
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer((JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getArrayBuilders();
      JavaType javaType0 = null;
      String string0 = "";
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer((JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<Throwable> class0 = Throwable.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-3144));
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) coreXMLDeserializers_Std0, "PS{_J0mt{xqA;f", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // PS{_J0mt{xqA;f
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.deserializerInstance((Annotated) null, (Object) null);
      String string0 = "com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, "com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<PlaceholderForType> jsonDeserializer0 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) deserializationContext0;
      objectArray0[1] = (Object) "INF";
      objectArray0[2] = (Object) deserializationContext0;
      objectArray0[3] = (Object) jsonDeserializer0;
      objectArray0[4] = (Object) deserializationContext0;
      objectArray0[5] = (Object) "INF";
      try { 
        deserializationContext0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "INF", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // INF
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string0 = "Unsuitable method (";
      Object[] objectArray0 = new Object[2];
      Class<MapType> class1 = MapType.class;
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      SimpleType.constructUnsafe(class0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultDeserializationContext_Impl0.endOfInputException(class0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      defaultDeserializationContext0.mappingException(class1, jsonToken0);
      int int0 = 0;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      deserializationContext0.mappingException(class0, jsonToken0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ObjectMapper.findModules(classLoader1);
      // Undeclared exception!
      try { 
        deserializationContext0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.leaseObjectBuffer();
      deserializationContext0.checkUnresolvedObjectId();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        deserializationContext0.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      String string0 = "x T(9z:V\\a%QZ;hE";
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.reportMissingContent("x T(9z:Va%QZ;hE", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      String string0 = "com.fasterxml.jackson.databind.ObjectWriter";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) valueInstantiators_Base0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "com.fasterxml.jackson.databind.ObjectWriter";
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) deserializerFactory0;
      objectArray0[5] = (Object) beanDeserializerFactory0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "com.fasterxml.jackson.databind.ObjectWriter", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      Class<Throwable> class0 = Throwable.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      try { 
        defaultDeserializationContext0.reportUnknownProperty(resolvedRecursiveType0, "W,Y*x%U&", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"W,Y*x%U&\" (class com.fasterxml.jackson.databind.type.ResolvedRecursiveType), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.type.ResolvedRecursiveType[\"W,Y*x%U&\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      defaultDeserializationContext_Impl1.isEnabled(deserializationFeature0);
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
      try { 
        TypeBindings.create(class0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.databind.type.SimpleType with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures((-3195));
      defaultDeserializationContext_Impl0.getFactory();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      defaultDeserializationContext_Impl0.reportUnknownProperty(jsonFactory1, "", (JsonDeserializer<?>) null);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-3195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "#Z}f,a!B#6D-G3_)";
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext_Impl0.reportUnknownProperty(deserializerFactoryConfig0, "#Z}f,a!B#6D-G3_)", jsonDeserializer0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      Class<Void> class0 = Void.class;
      Class<Void> class1 = Void.class;
      // Undeclared exception!
      try { 
        simpleAbstractTypeResolver0.addMapping(class0, (Class<? extends Void>) class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add mapping from class to itself
         //
         verifyException("com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "Unsuitable method (", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) deserializerFactoryConfig0;
      objectArray0[1] = (Object) simpleAbstractTypeResolver0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) simpleAbstractTypeResolver0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "rqQ.r", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // rqQ.r
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext_Impl0.weirdStringException("L4#v5ugRL@", class0, "");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<MapType> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionLikeType.upgradeFrom(collectionType0, collectionType0);
      String string0 = "";
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, collectionType0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class com.fasterxml.jackson.databind.type.CollectionType), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.type.CollectionType[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      Class<Void> class0 = Void.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        placeholderForType0.withContentType(simpleType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<Throwable> class0 = Throwable.class;
      StdKeyDeserializer.forType(class0);
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ContextAttributes contextAttributes0 = deserializationContext0._attributes;
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(object0, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object object0 = new Object();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructMapType(class0, class0, class0);
      MapType mapType1 = mapType0.withStaticTyping();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.setAttribute(object0, mapType1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
