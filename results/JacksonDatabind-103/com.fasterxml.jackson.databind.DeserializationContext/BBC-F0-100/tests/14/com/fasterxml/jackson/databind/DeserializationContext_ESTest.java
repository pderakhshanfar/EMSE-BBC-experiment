/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:17:33 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.type.WritableTypeId;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=zN%Xq`");
      assertFalse(boolean0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "=zN%Xq`";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("=zN%Xq`", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      assertNotNull(objectBuffer1);
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(objectBuffer1, objectBuffer0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(deserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(deserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectBuffer objectBuffer2 = deserializationContext0._objectBuffer;
      assertNull(objectBuffer2);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.returnObjectBuffer((ObjectBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.deserializerInstance((Annotated) null, mockDateFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned deserializer definition of type org.evosuite.runtime.mock.java.text.MockDateFormat; expected type JsonDeserializer or Class<JsonDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[0];
      Class<MapType> class0 = MapType.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.type.MapType` out of END_ARRAY token
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      try { 
        defaultDeserializationContext0.findInjectableValue(objectReader0, beanProperty_Bogus0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [com.fasterxml.jackson.databind.ObjectReader@15]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = defaultDeserializationContext0.getDeserializationFeatures();
      assertEquals(237020304, int0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      JavaType javaType0 = objectMapper0.constructType(class0);
      assertNotNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(javaType0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      boolean boolean0 = defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(74, 1264);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class0);
      assertNotNull(collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.useStaticType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertNotNull(simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue(collectionLikeType0, (BeanProperty) null, simpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      boolean boolean0 = defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue(beanDeserializerFactory0, (BeanProperty) null, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<DateFormat> class0 = DateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      assertNotNull(collectionLikeType0);
      assertTrue(collectionLikeType0.isAbstract());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isInterface());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isArrayType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.hasHandlers());
      
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(collectionLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for abstract type [collection-like type; class java.text.DateFormat, contains [simple type, class java.text.DateFormat]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      assertNotNull(jsonFactory0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertNotNull(jsonFactory1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("`=", "^o1Y", 290);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals(290, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`=", sQLTransactionRollbackException0.getMessage());
      assertEquals("^o1Y", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: `=", sQLTransactionRollbackException0.toString());
      
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(sQLTransactionRollbackException0);
      assertNotNull(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(290, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`=", sQLTransactionRollbackException0.getMessage());
      assertEquals("^o1Y", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: `=", sQLTransactionRollbackException0.toString());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'b';
      charArray0[2] = '1';
      charArray0[3] = 'F';
      charArray0[4] = ')';
      charArray0[5] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'6', 'b', '1', 'F', ')', '3'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(6, charArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertArrayEquals(new char[] {'6', 'b', '1', 'F', ')', '3'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(290, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`=", sQLTransactionRollbackException0.getMessage());
      assertEquals("^o1Y", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: `=", sQLTransactionRollbackException0.toString());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(6, charArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      JavaType javaType1 = defaultDeserializationContext_Impl1.getContextualType();
      assertNull(javaType1);
      assertArrayEquals(new char[] {'6', 'b', '1', 'F', ')', '3'}, charArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(290, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("`=", sQLTransactionRollbackException0.getMessage());
      assertEquals("^o1Y", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: `=", sQLTransactionRollbackException0.toString());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(6, charArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl1);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      Class<MapType> class0 = MapType.class;
      try { 
        defaultDeserializationContext_Impl1.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.MapType`
         //  at [Source: (char[])\"6b1F)3\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl1.checkUnresolvedObjectId();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl1);
      assertNotNull(objectMapper0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<SimpleType> class0 = SimpleType.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl1, false);
      assertNotNull(iOContext0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = 'A';
      charArray0[2] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2389), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'!', 'A', ';'}, charArray0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals((-2389), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(3, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)objectReader0._considerFilter(readerBasedJsonParser0, false);
      assertNotNull(readerBasedJsonParser1);
      assertArrayEquals(new char[] {'!', 'A', ';'}, charArray0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals((-2389), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals((-2389), readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertEquals(3, charArray0.length);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      JavaType javaType0 = defaultDeserializationContext_Impl1.getContextualType();
      assertNull(javaType0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.readValue((JsonParser) readerBasedJsonParser1, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<InputStream> class0 = InputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = javaType0;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[2]);
      assertNotNull(collectionLikeType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertEquals(4, javaTypeArray0.length);
      
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[1], (JavaType) collectionLikeType0);
      assertNotNull(mapType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(4, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withTypeHandler(collectionLikeType0);
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertEquals(4, javaTypeArray0.length);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withStaticTyping();
      assertNotNull(mapType2);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.useStaticType());
      assertEquals(4, javaTypeArray0.length);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      
      MapType mapType3 = mapType2.withKeyTypeHandler(mapLikeType0);
      assertNotNull(mapType3);
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.useStaticType());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(mapType3.isArrayType());
      assertTrue(mapType3.isAbstract());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isConcrete());
      assertFalse(mapType3.isCollectionLikeType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isFinal());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.useStaticType());
      assertEquals(4, javaTypeArray0.length);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      MapType mapType4 = mapType3.withKeyValueHandler((Object) null);
      assertNotNull(mapType4);
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.useStaticType());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(mapType3.isArrayType());
      assertTrue(mapType3.isAbstract());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isConcrete());
      assertFalse(mapType3.isCollectionLikeType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType4.isPrimitive());
      assertFalse(mapType4.isArrayType());
      assertFalse(mapType4.isFinal());
      assertTrue(mapType4.hasContentType());
      assertFalse(mapType4.hasValueHandler());
      assertFalse(mapType4.isInterface());
      assertTrue(mapType4.useStaticType());
      assertTrue(mapType4.isMapLikeType());
      assertTrue(mapType4.isContainerType());
      assertFalse(mapType4.isEnumType());
      assertFalse(mapType4.isConcrete());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isAbstract());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isJavaLangObject());
      assertTrue(mapType4.hasHandlers());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.useStaticType());
      assertEquals(4, javaTypeArray0.length);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      
      ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) mapType4);
      assertNotNull(objectReader1);
      assertTrue(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType4));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType4));
      assertTrue(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.equals((Object)mapType4));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType3));
      assertTrue(mapType3.equals((Object)mapType4));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertTrue(mapType3.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, mapType1.containedTypeCount());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.hasHandlers());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.useStaticType());
      assertFalse(mapLikeType0.isArrayType());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isInterface());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.useStaticType());
      assertEquals(0, mapType3.containedTypeCount());
      assertFalse(mapType3.isArrayType());
      assertTrue(mapType3.isAbstract());
      assertTrue(mapType3.isMapLikeType());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isConcrete());
      assertFalse(mapType3.isCollectionLikeType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isJavaLangObject());
      assertTrue(mapType3.hasHandlers());
      assertFalse(mapType3.isFinal());
      assertFalse(mapType4.isPrimitive());
      assertFalse(mapType4.isArrayType());
      assertFalse(mapType4.isFinal());
      assertTrue(mapType4.hasContentType());
      assertFalse(mapType4.hasValueHandler());
      assertFalse(mapType4.isInterface());
      assertTrue(mapType4.useStaticType());
      assertTrue(mapType4.isMapLikeType());
      assertTrue(mapType4.isContainerType());
      assertFalse(mapType4.isEnumType());
      assertFalse(mapType4.isConcrete());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isAbstract());
      assertEquals(0, mapType4.containedTypeCount());
      assertFalse(mapType4.isJavaLangObject());
      assertTrue(mapType4.hasHandlers());
      assertEquals(4, javaTypeArray0.length);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType0);
      assertNotSame(objectReader1, objectReader0);
      
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      assertNull(object0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotSame(objectReader0, objectReader1);
      
      Class<AbstractDeserializer> class2 = AbstractDeserializer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class2, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.deser.AbstractDeserializer` out of VALUE_FALSE token
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      
      Double double0 = new Double(2237.649);
      assertEquals(2237.649, (double)double0, 0.01);
      assertNotNull(double0);
      
      ObjectNode objectNode1 = objectNode0.put("`sbD]-z6*5", double0);
      assertNotNull(objectNode1);
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isFloat());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(1, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      
      ObjectNode objectNode2 = objectNode1.putNull("KUT)e82+94");
      assertNotNull(objectNode2);
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`sbD]-z6*5";
      stringArray0[2] = "+vifik3li.!r/L_bKZ";
      stringArray0[3] = "";
      stringArray0[4] = "KUT)e82+94";
      stringArray0[5] = "`sbD]-z6*5";
      stringArray0[6] = "KUT)e82+94";
      stringArray0[7] = "`sbD]-z6*5";
      ObjectNode objectNode3 = objectNode2.retain(stringArray0);
      assertNotNull(objectNode3);
      assertEquals(2, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isArray());
      assertEquals("", objectNode3.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertEquals(8, stringArray0.length);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      
      JsonNode jsonNode0 = objectNode3.path("N/A");
      assertNotNull(jsonNode0);
      assertEquals(2, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isArray());
      assertEquals("", objectNode3.asText());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.toString());
      assertFalse(jsonNode0.booleanValue());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertEquals(8, stringArray0.length);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(jsonNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, objectNode3.size());
      assertNull(objectNode3.textValue());
      assertFalse(objectNode3.isFloat());
      assertFalse(objectNode3.isBigInteger());
      assertEquals(JsonNodeType.OBJECT, objectNode3.getNodeType());
      assertNull(objectNode3.numberType());
      assertTrue(objectNode3.isObject());
      assertFalse(objectNode3.isBigDecimal());
      assertFalse(objectNode3.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode3.asToken());
      assertFalse(objectNode3.isDouble());
      assertFalse(objectNode3.isShort());
      assertFalse(objectNode3.booleanValue());
      assertFalse(objectNode3.isLong());
      assertFalse(objectNode3.isMissingNode());
      assertFalse(objectNode3.isIntegralNumber());
      assertFalse(objectNode3.isFloatingPointNumber());
      assertFalse(objectNode3.isArray());
      assertEquals("", objectNode3.asText());
      assertFalse(jsonNode0.isLong());
      assertEquals(0, jsonNode0.size());
      assertEquals("", jsonNode0.asText());
      assertTrue(jsonNode0.isMissingNode());
      assertFalse(jsonNode0.isDouble());
      assertFalse(jsonNode0.isShort());
      assertFalse(jsonNode0.isInt());
      assertFalse(jsonNode0.isFloatingPointNumber());
      assertFalse(jsonNode0.isArray());
      assertNull(jsonNode0.textValue());
      assertEquals(JsonToken.NOT_AVAILABLE, jsonNode0.asToken());
      assertFalse(jsonNode0.isBigInteger());
      assertFalse(jsonNode0.isBigDecimal());
      assertEquals(JsonNodeType.MISSING, jsonNode0.getNodeType());
      assertFalse(jsonNode0.isIntegralNumber());
      assertNull(jsonNode0.numberType());
      assertFalse(jsonNode0.isFloat());
      assertFalse(jsonNode0.isObject());
      assertEquals("", jsonNode0.toString());
      assertFalse(jsonNode0.booleanValue());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(objectNode0.isFloat());
      assertEquals(2, objectNode0.size());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode1.isDouble());
      assertFalse(objectNode1.isShort());
      assertFalse(objectNode1.booleanValue());
      assertFalse(objectNode1.isLong());
      assertFalse(objectNode1.isMissingNode());
      assertEquals(JsonNodeType.OBJECT, objectNode1.getNodeType());
      assertNull(objectNode1.numberType());
      assertFalse(objectNode1.isBigDecimal());
      assertFalse(objectNode1.isInt());
      assertTrue(objectNode1.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode1.asToken());
      assertEquals(2, objectNode1.size());
      assertNull(objectNode1.textValue());
      assertFalse(objectNode1.isFloat());
      assertFalse(objectNode1.isBigInteger());
      assertFalse(objectNode1.isIntegralNumber());
      assertFalse(objectNode1.isFloatingPointNumber());
      assertEquals("", objectNode1.asText());
      assertFalse(objectNode1.isArray());
      assertFalse(objectNode2.isIntegralNumber());
      assertNull(objectNode2.numberType());
      assertFalse(objectNode2.isBigDecimal());
      assertFalse(objectNode2.booleanValue());
      assertFalse(objectNode2.isBigInteger());
      assertFalse(objectNode2.isMissingNode());
      assertEquals(2, objectNode2.size());
      assertFalse(objectNode2.isShort());
      assertFalse(objectNode2.isInt());
      assertTrue(objectNode2.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode2.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode2.getNodeType());
      assertNull(objectNode2.textValue());
      assertFalse(objectNode2.isLong());
      assertFalse(objectNode2.isFloatingPointNumber());
      assertFalse(objectNode2.isFloat());
      assertEquals("", objectNode2.asText());
      assertFalse(objectNode2.isArray());
      assertFalse(objectNode2.isDouble());
      assertEquals(8, stringArray0.length);
      assertSame(objectNode3, objectNode1);
      assertSame(objectNode3, objectNode0);
      assertSame(objectNode3, objectNode2);
      assertSame(objectNode0, objectNode2);
      assertSame(objectNode0, objectNode3);
      assertSame(objectNode0, objectNode1);
      assertSame(objectNode1, objectNode3);
      assertSame(objectNode1, objectNode0);
      assertSame(objectNode1, objectNode2);
      assertSame(objectNode2, objectNode1);
      assertSame(objectNode2, objectNode3);
      assertSame(objectNode2, objectNode0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      try { 
        objectMapper0.readValue(jsonParser0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Object[] objectArray0 = new Object[1];
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<Integer> class0 = Integer.class;
      Class<ObjectReader> class1 = ObjectReader.class;
      ObjectMapper objectMapper1 = objectMapper0.addMixIn(class0, class1);
      assertNotNull(objectMapper1);
      assertEquals(1, objectMapper0.mixInCount());
      assertEquals(1, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<MapLikeType> class2 = MapLikeType.class;
      TypeFactory typeFactory0 = defaultDeserializationContext_Impl0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(1, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "Cannot construct instance of %s, problem: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) jsonParserDelegate0, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures((-1));
      assertFalse(boolean0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) beanProperty_Bogus0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      objectArray0[4] = (Object) objectMapper0;
      objectArray0[5] = (Object) objectReader0;
      objectArray0[6] = (Object) objectMapper0;
      objectArray0[7] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) null, jsonToken0, "%&Xw", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '&'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_NULL;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      assertNotNull(objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertSame(objectMapper0, objectMapper1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      String string0 = placeholderForType0.toString();
      assertEquals("$1022", string0);
      assertNotNull(string0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isContainerType());
      assertTrue(placeholderForType0.isConcrete());
      assertSame(objectMapper0, objectMapper1);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      NullNode nullNode0 = NullNode.getInstance();
      assertNotNull(nullNode0);
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.booleanValue());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(nullNode0.isFloatingPointNumber());
      assertEquals(0, nullNode0.size());
      assertFalse(nullNode0.isDouble());
      assertFalse(nullNode0.isMissingNode());
      assertFalse(nullNode0.isLong());
      assertFalse(nullNode0.isFloat());
      assertNull(nullNode0.textValue());
      assertFalse(nullNode0.isBigInteger());
      assertFalse(nullNode0.isArray());
      assertEquals(JsonNodeType.NULL, nullNode0.getNodeType());
      assertFalse(nullNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NULL, nullNode0.asToken());
      assertFalse(nullNode0.isIntegralNumber());
      assertFalse(nullNode0.isInt());
      assertFalse(nullNode0.isShort());
      assertFalse(nullNode0.booleanValue());
      assertEquals("null", nullNode0.asText());
      assertNull(nullNode0.numberType());
      assertFalse(nullNode0.isObject());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getTextOffset());
      assertSame(objectMapper0, objectMapper1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      IntNode intNode0 = new IntNode((-1891));
      assertNotNull(intNode0);
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1891L), intNode0.longValue());
      assertEquals(0, intNode0.size());
      assertEquals((-1891), intNode0.intValue());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1891.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((-1891.0F), intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals((short) (-1891), intNode0.shortValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1891L), intNode0.longValue());
      assertEquals(0, intNode0.size());
      assertEquals((-1891), intNode0.intValue());
      assertFalse(intNode0.isDouble());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertFalse(intNode0.isLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isBigDecimal());
      assertEquals((-1891.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals((-1891.0F), intNode0.floatValue(), 0.01F);
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.booleanValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals((short) (-1891), intNode0.shortValue());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.canReadTypeId());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) deserializationContext0;
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "-X{i.;csT%rP]T";
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) objectReader0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) objectReader0;
      objectArray0[7] = (Object) jsonToken0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken1, (JsonParser) null, "-X{i.;csT%rP]T", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, deserializationFeatureArray0.length);
      assertNotSame(objectReader1, objectReader0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertNotSame(objectReader0, objectReader1);
      
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("C(e$o~Qc*x88`e,k ![").when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handlePrimaryContextualization(jsonDeserializer0, beanProperty_Bogus0, collectionLikeType0);
      assertNotNull(jsonDeserializer1);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertNotSame(objectReader0, objectReader1);
      
      Locale locale0 = defaultDeserializationContext0.getLocale();
      assertNotNull(locale0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(objectReader0, objectReader1);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.unknownTypeException(collectionLikeType0, "DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s", "DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s");
      assertNotNull(jsonMappingException0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertNotSame(objectReader0, objectReader1);
      
      BuilderBasedDeserializer builderBasedDeserializer0 = defaultDeserializationContext0.reportBadMerge(jsonDeserializer1);
      assertNull(builderBasedDeserializer0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.hasContentType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.isFinal());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertNotSame(objectReader0, objectReader1);
      
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(collectionLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [collection-like type; class org.evosuite.runtime.mock.java.text.MockDateFormat, contains [simple type, class java.lang.Object]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      ObjectMapper objectMapper2 = objectMapper1.configure(serializationFeature0, true);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      CollectionLikeType collectionLikeType0 = typeFactory1.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionLikeType0);
      assertNotNull(valueInstantiator_Base0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, valueInstantiator_Base0);
      assertNotNull(simpleValueInstantiators1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JsonDeserializer<?> jsonDeserializer0 = defaultDeserializationContext_Impl0.handlePrimaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, collectionLikeType0);
      assertNull(jsonDeserializer0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      Locale locale0 = defaultDeserializationContext0.getLocale();
      assertNotNull(locale0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.unknownTypeException(collectionLikeType0, "DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s", "Yv");
      assertNotNull(jsonMappingException0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(collectionLikeType0.isContainerType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isArrayType());
      assertFalse(collectionLikeType0.isFinal());
      assertFalse(collectionLikeType0.isInterface());
      assertFalse(collectionLikeType0.useStaticType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertTrue(collectionLikeType0.isConcrete());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(valueInstantiator_Base0.canCreateUsingDefault());
      assertFalse(valueInstantiator_Base0.canCreateFromLong());
      assertFalse(valueInstantiator_Base0.canCreateFromBoolean());
      assertFalse(valueInstantiator_Base0.canCreateFromObjectWith());
      assertFalse(valueInstantiator_Base0.canInstantiate());
      assertFalse(valueInstantiator_Base0.canCreateUsingDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromString());
      assertFalse(valueInstantiator_Base0.canCreateUsingArrayDelegate());
      assertFalse(valueInstantiator_Base0.canCreateFromInt());
      assertFalse(valueInstantiator_Base0.canCreateFromDouble());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(simpleValueInstantiators0, simpleValueInstantiators1);
      assertSame(simpleValueInstantiators1, simpleValueInstantiators0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      assertNotNull(objectMapper1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      Class<DateFormat> class0 = DateFormat.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      assertNotNull(collectionLikeType0);
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      assertSame(objectMapper0, objectMapper1);
      
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer0, (BeanProperty) null, collectionLikeType0);
      assertNotNull(jsonDeserializer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(collectionLikeType0.isConcrete());
      assertTrue(collectionLikeType0.isCollectionLikeType());
      assertFalse(collectionLikeType0.hasHandlers());
      assertFalse(collectionLikeType0.isEnumType());
      assertFalse(collectionLikeType0.isJavaLangObject());
      assertFalse(collectionLikeType0.isFinal());
      assertTrue(collectionLikeType0.isContainerType());
      assertFalse(collectionLikeType0.isMapLikeType());
      assertFalse(collectionLikeType0.isPrimitive());
      assertFalse(collectionLikeType0.useStaticType());
      assertTrue(collectionLikeType0.hasContentType());
      assertFalse(collectionLikeType0.isInterface());
      assertEquals(0, collectionLikeType0.containedTypeCount());
      assertFalse(collectionLikeType0.isArrayType());
      assertTrue(collectionLikeType0.isAbstract());
      assertFalse(collectionLikeType0.hasValueHandler());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, deserializationFeatureArray0.length);
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(objectMapper0, objectMapper1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertNull(sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      Class<Void> class0 = Void.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("void", class0.toString());
      
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, sQLClientInfoException0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class void is not a primitive type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer1, objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer1, objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer0.equals((Object)objectBuffer1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer0, objectBuffer1);
      
      String string0 = ")<Ng<*(X`\\0!,h`M-^";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate(")<Ng<*(X`\u0000!,h`M-^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      assertNotNull(deserializers_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer1, objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer1, objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(objectBuffer1.equals((Object)objectBuffer0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer1.bufferedSize());
      assertEquals(0, objectBuffer1.initialCapacity());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(objectBuffer1, objectBuffer0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      assertNotNull(jsonParserSequence0);
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserSequence0);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.endOfInputException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "H'%x";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jsonToken0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "H'%x", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MapType> class0 = MapType.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) deserializerFactoryConfig0;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      objectArray0[5] = (Object) deserializerFactory0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class0, "T|dclo%qlh`m/og", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled((DeserializationFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      
      FormatFeature[] formatFeatureArray0 = new FormatFeature[7];
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(formatFeature0).getMask();
      formatFeatureArray0[0] = formatFeature0;
      formatFeatureArray0[1] = formatFeature0;
      formatFeatureArray0[2] = formatFeature0;
      formatFeatureArray0[3] = formatFeature0;
      formatFeatureArray0[4] = formatFeature0;
      formatFeatureArray0[5] = formatFeature0;
      formatFeatureArray0[6] = formatFeature0;
      ObjectReader objectReader1 = objectReader0.withoutFeatures(formatFeatureArray0);
      assertNotNull(objectReader1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(7, formatFeatureArray0.length);
      assertSame(objectReader0, objectReader1);
      assertSame(objectReader1, objectReader0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      assertNotNull(classNameIdResolver0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      String string0 = "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s";
      try { 
        classNameIdResolver0.typeFromId(defaultDeserializationContext0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s' as a subtype of [simple type, class java.lang.Object]: no such class found
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      Class<Integer> class0 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      String string0 = "Z;]%";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) objectReader0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) class0;
      Class<String> class1 = String.class;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_INT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken1, "Z;]%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<MapLikeType> class0 = MapLikeType.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("H0BkwB2RT", "");
      assertNotNull(sQLTransientConnectionException0);
      assertEquals("", sQLTransientConnectionException0.getSQLState());
      assertEquals("H0BkwB2RT", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: H0BkwB2RT", sQLTransientConnectionException0.toString());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, pipedInputStream0, sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.MapLikeType`, problem: H0BkwB2RT
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<String> class0 = String.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class1, "", "Unexpected byte 0x%02x following 0xEF 0xBB; should get 0xBF as third byte of UTF-8 BOM", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      
      SQLDataException sQLDataException0 = new SQLDataException("YP\"E=Eq>?+>4zg)");
      assertNotNull(sQLDataException0);
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: YP\"E=Eq>?+>4zg)", sQLDataException0.toString());
      assertEquals("YP\"E=Eq>?+>4zg)", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      sQLClientInfoException0.setNextException(sQLDataException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLDataException0.getSQLState());
      assertEquals("java.sql.SQLDataException: YP\"E=Eq>?+>4zg)", sQLDataException0.toString());
      assertEquals("YP\"E=Eq>?+>4zg)", sQLDataException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, sQLClientInfoException0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(",B@a[i%*q`)QN/3`5K", "JSON");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("3`5K0JSON", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory2.createParser((File) mockFile0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("3`5K0JSON", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      BigIntegerNode bigIntegerNode0 = objectMapper0.readTree((JsonParser) readerBasedJsonParser0);
      assertNull(bigIntegerNode0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("3`5K0JSON", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertTrue(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) sQLDataException0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) sQLDataException0;
      objectArray0[5] = (Object) objectMapper0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) class0;
      objectArray0[8] = (Object) sQLClientInfoException0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException(",B@a[i%*q`)QN/3`5K", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '*'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      
      JavaType javaType1 = beanProperty_Bogus0.getType();
      assertNotNull(javaType1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType1.isMapLikeType());
      assertFalse(javaType1.hasContentType());
      assertFalse(javaType1.useStaticType());
      assertFalse(javaType1.hasHandlers());
      assertFalse(javaType1.isFinal());
      assertTrue(javaType1.isConcrete());
      assertFalse(javaType1.isContainerType());
      assertFalse(javaType1.isCollectionLikeType());
      assertFalse(javaType1.isAbstract());
      assertTrue(javaType1.isJavaLangObject());
      assertFalse(javaType1.isInterface());
      assertEquals(0, javaType1.containedTypeCount());
      assertFalse(javaType1.isArrayType());
      assertFalse(javaType1.isEnumType());
      assertFalse(javaType1.hasValueHandler());
      assertFalse(javaType1.isPrimitive());
      assertSame(javaType1, javaType0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      
      MapType mapType1 = mapType0.withKeyType(javaType0);
      assertNotNull(mapType1);
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertSame(javaType0, javaType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withContentValueHandler((Object) null);
      assertNotNull(mapType2);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isInterface());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isAbstract());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertSame(javaType0, javaType1);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      
      MapLikeType mapLikeType0 = mapType2.withContentValueHandler(class0);
      assertNotNull(mapLikeType0);
      assertFalse(mapType0.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType2));
      assertFalse(mapType1.equals((Object)mapType0));
      assertTrue(mapType1.equals((Object)mapType2));
      assertFalse(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapLikeType0.equals((Object)mapType2));
      assertFalse(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType1));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isConcrete());
      assertTrue(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isArrayType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.isInterface());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isAbstract());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertSame(javaType0, javaType1);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapLikeType0);
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapLikeType0, mapType0);
      assertNotSame(mapLikeType0, mapType2);
      
      try { 
        defaultDeserializationContext0.findKeyDeserializer(mapLikeType0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [map type; class java.util.Map, [simple type, class java.lang.Object] -> [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      
      try { 
        defaultDeserializationContext0.handleUnknownTypeId(javaType0, "No Object Id found for an instance of %s, to assign to property '%s'", classNameIdResolver0, "No Object Id found for an instance of %s, to assign to property '%s'");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'No Object Id found for an instance of %s, to assign to property '%s'' as a subtype of [simple type, class java.lang.Object]: No Object Id found for an instance of %s, to assign to property '%s'
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "", "Q%,/&Dmft#@3};7", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ','
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      assertNotNull(readerBasedJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotNull(readerBasedJsonParser1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(65, readerBasedJsonParser0.getFeatureMask());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertEquals(65, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertNotNull(simpleType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      assertNotNull(classNameIdResolver0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleMissingTypeId(simpleType0, classNameIdResolver0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      assertNotNull(base64Variant0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertTrue(base64Variant0.usesPadding());
      assertEquals('=', base64Variant0.getPaddingChar());
      assertEquals(Integer.MAX_VALUE, base64Variant0.getMaxLineLength());
      assertEquals((byte)61, base64Variant0.getPaddingByte());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.toString());
      assertEquals("MIME-NO-LINEFEEDS", base64Variant0.getName());
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
      assertEquals((-1), Base64Variant.BASE64_VALUE_INVALID);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      String string0 = javaType0.getGenericSignature();
      assertEquals("Ljava/lang/Object;", string0);
      assertNotNull(string0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findNonContextualValueDeserializer(javaType0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Object;");
      assertFalse(boolean0);
      
      objectArray0[3] = (Object) javaType0;
      objectArray0[4] = object0;
      objectArray0[6] = object0;
      try { 
        defaultDeserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "Ljava/lang/Object;", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Ljava/lang/Object;
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      
      String string0 = javaType0.getGenericSignature();
      assertEquals("Ljava/lang/Object;", string0);
      assertNotNull(string0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava/lang/Object;");
      assertFalse(boolean0);
      
      objectArray0[3] = (Object) javaType0;
      objectArray0[4] = object0;
      objectArray0[6] = object0;
      boolean boolean1 = defaultDeserializationContext0.hasSomeOfFeatures((-976));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<MapLikeType> class0 = MapLikeType.class;
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigDecimal0, "k0V?r4VYK$W=^rT8@", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapLikeType` from number 1: k0V?r4VYK$W=^rT8@
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      
      boolean boolean0 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findContextualValueDeserializer(javaType0, beanProperty_Bogus0);
      assertNotNull(jsonDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isAbstract());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      
      String string0 = ">@{QR";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ">@{QR";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) objectMapper0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) beanProperty_Bogus0;
      objectArray0[6] = (Object) defaultDeserializationContext0;
      objectArray0[7] = (Object) objectMapper0;
      objectArray0[8] = (Object) null;
      try { 
        defaultDeserializationContext0.reportMappingException(">@{QR", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // >@{QR
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      Object object0 = new Object();
      assertNotNull(object0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<String> class0 = String.class;
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertNotNull(dataFormatReaders0);
      assertEquals(0, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)53;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {(byte)65, (byte)18, (byte)18, (byte) (-11), (byte)65, (byte)53}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, objectReaderArray0.length);
      assertEquals(6, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNull(jsonParser0);
      assertArrayEquals(new byte[] {(byte)65, (byte)18, (byte)18, (byte) (-11), (byte)65, (byte)53}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, objectReaderArray0.length);
      assertEquals(6, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      Class<Module> class1 = Module.class;
      NamedType namedType0 = new NamedType(class0);
      assertNotNull(namedType0);
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      assertNotNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      assertNotNull(simpleType0);
      assertTrue(simpleType0.equals((Object)javaType0));
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertNotSame(simpleType0, javaType0);
      
      String string0 = simpleType0.getGenericSignature();
      assertEquals("Lcom/fasterxml/jackson/databind/Module;", string0);
      assertNotNull(string0);
      assertTrue(simpleType0.equals((Object)javaType0));
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertNotSame(simpleType0, javaType0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        deserializationContext0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, sQLClientInfoException0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      IntNode intNode0 = IntNode.valueOf((-1909));
      assertNotNull(intNode0);
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      assertNotNull(mapLikeType0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      
      TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapLikeType0, typeBindings0, (Object) typeFactory0, (Object) jsonParser0);
      assertNotNull(arrayType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) arrayType0);
      assertNotNull(typeBindings1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(typeBindings1, typeBindings0);
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings1);
      assertNotNull(typeResolutionContext_Basic0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", arrayType0);
      assertNotNull(virtualAnnotatedMember0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      assertNotNull(annotatedField0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, mapLikeType0, (PropertyName) null, annotatedField0, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, mapLikeType0);
      assertNotNull(beanProperty_Std1);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(beanProperty_Std1.equals((Object)beanProperty_Std0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isObject());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertEquals((short) (-1909), intNode0.shortValue());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals((-1909.0), intNode0.doubleValue(), 0.01);
      assertEquals((-1909L), intNode0.longValue());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-1909), intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertNull(intNode0.textValue());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-1909.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isArray());
      assertFalse(intNode0.isBigDecimal());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertEquals(0, intNode0.size());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isBigInteger());
      assertFalse(intNode0.isMissingNode());
      assertFalse(jsonParser0.isClosed());
      assertNull(jsonParser0.currentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getTextOffset());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasHandlers());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isInterface());
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertNull(propertyMetadata0.getContentNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std1.isVirtual());
      assertFalse(beanProperty_Std1.isRequired());
      
      DeserializationContext deserializationContext1 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext1.getDeserializationFeatures());
      assertSame(deserializationContext1, deserializationContext0);
      
      // Undeclared exception!
      try { 
        deserializationContext1.reportInputMismatch((BeanProperty) beanProperty_Std1, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, (TypeFactory) null);
      assertNotNull(classNameIdResolver0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      try { 
        defaultDeserializationContext0.handleMissingTypeId(javaType0, classNameIdResolver0, "DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.type.MapLikeType").when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, placeholderForType0);
      assertNotNull(jsonDeserializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Object object0 = defaultDeserializationContext0.reportBadMerge(jsonDeserializer1);
      assertNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1021, 1021);
      assertNotNull(lRUMap0);
      
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      assertNotNull(typeFactory2);
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory2, typeFactory0);
      assertNotSame(typeFactory2, typeFactory1);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory0, typeFactory2);
      assertNotSame(typeFactory1, typeFactory2);
      assertNotSame(typeFactory1, typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory2);
      assertNotNull(classNameIdResolver0);
      assertFalse(typeFactory2.equals((Object)typeFactory0));
      assertFalse(typeFactory2.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory0.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory2));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      try { 
        defaultDeserializationContext0.handleMissingTypeId((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.type.MapLikeType");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: com.fasterxml.jackson.databind.type.MapLikeType
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      assertNotNull(typeBindings0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JavaType javaType0 = typeFactory1.constructType((Type) class0, typeBindings0);
      assertNotNull(javaType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch(javaType0, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      assertNotNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertSame(class1, class0);
      
      Object[] objectArray0 = new Object[1];
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "u#/6m9GoOFZ", "u#/6m9GoOFZ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from String \"u#/6m9GoOFZ\": u#/6m9GoOFZ
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException1.toString());
      assertEquals(0, sQLClientInfoException1.getErrorCode());
      assertNull(sQLClientInfoException1.getMessage());
      assertNull(sQLClientInfoException1.getSQLState());
      
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible((Class<?>) null, sQLClientInfoException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<String> class0 = String.class;
      ObjectReader[] objectReaderArray0 = new ObjectReader[4];
      objectReaderArray0[0] = objectReader0;
      objectReaderArray0[1] = objectReader0;
      objectReaderArray0[2] = objectReader0;
      objectReaderArray0[3] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertNotNull(dataFormatReaders0);
      assertEquals(4, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)65;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-1), (byte)18, (byte)65}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(4, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNull(jsonParser0);
      assertArrayEquals(new byte[] {(byte)65, (byte) (-1), (byte)18, (byte)65}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(4, objectReaderArray0.length);
      assertEquals(4, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      Class<Module> class1 = Module.class;
      NamedType namedType0 = new NamedType(class1);
      assertNotNull(namedType0);
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertNotNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      
      String string0 = javaType0.getGenericSignature();
      assertEquals("Ljava/lang/String;", string0);
      assertNotNull(string0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      
      boolean boolean0 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StringDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      PropertyName propertyName0 = new PropertyName("B|DY*6!7>N'|=*^eoJ<", "");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", propertyName0.getSimpleName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.fasterxml.jackson.databind.deser.impl.ErrorThrowingDeserializer");
      assertFalse(boolean0);
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      assertNotNull(typeBindings0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      assertNotNull(typeResolutionContext_Basic0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<Integer> class1 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "", javaType0);
      assertNotNull(virtualAnnotatedMember0);
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("", virtualAnnotatedMember0.getName());
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNotNull(propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      assertNotNull(beanProperty_Std0);
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", propertyName0.getSimpleName());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", beanProperty_Std0.getName());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, javaType0);
      assertNotNull(beanProperty_Std1);
      assertFalse(beanProperty_Std1.equals((Object)beanProperty_Std0));
      assertTrue(propertyName0.hasNamespace());
      assertEquals("", propertyName0.getNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", propertyName0.getSimpleName());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isFinal());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isArrayType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", beanProperty_Std0.getName());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertEquals("B|DY*6!7>N'|=*^eoJ<", beanProperty_Std1.getName());
      assertFalse(beanProperty_Std1.isVirtual());
      assertFalse(beanProperty_Std1.isRequired());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanProperty_Std1;
      objectArray0[1] = (Object) javaType0;
      objectArray0[2] = (Object) class1;
      objectArray0[3] = (Object) "B|DY*6!7>N'|=*^eoJ<";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) objectReader0;
      try { 
        deserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Std1, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.type.MapLikeType").when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, placeholderForType0);
      assertNotNull(jsonDeserializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Object object0 = defaultDeserializationContext0.reportBadMerge(jsonDeserializer1);
      assertNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      
      boolean boolean1 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      JsonDeserializer<Object> jsonDeserializer2 = defaultDeserializationContext0.findRootValueDeserializer(placeholderForType0);
      assertNotNull(jsonDeserializer2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer2.getNullAccessPattern());
      assertFalse(jsonDeserializer2.isCachable());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer2.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      JsonMappingException jsonMappingException0 = deserializationContext0.mappingException(class0, jsonToken0);
      assertNotNull(jsonMappingException0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) "q;|%c|pm;kY9YMOY";
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) deserializationContext0;
      objectArray0[7] = (Object) "q;|%c|pm;kY9YMOY";
      // Undeclared exception!
      try { 
        deserializationContext0.reportMappingException("q;|%c|pm;kY9YMOY", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != com.fasterxml.jackson.core.JsonToken
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PropertyName propertyName0 = beanProperty_Bogus0.getWrapperName();
      assertNull(propertyName0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      ObjectIdGenerator<DateFormat> objectIdGenerator0 = (ObjectIdGenerator<DateFormat>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      assertNotNull(objectIdReader0);
      assertFalse(objectIdReader0.maySerializeAsObject());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ArrayBuilders arrayBuilders1 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotNull(arrayBuilders1);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(arrayBuilders1, arrayBuilders0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      List<Module> list0 = ObjectMapper.findModules(classLoader0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
      
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Class<?> class0 = defaultDeserializationContext0.getActiveView();
      assertNull(class0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
      
      Object object1 = defaultDeserializationContext0.getAttribute(jsonToken0);
      assertNull(object1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      assertNotNull(referenceType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertNotNull(referenceType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      ReferenceType referenceType2 = (ReferenceType)referenceType1.withContentValueHandler(javaType0);
      assertNotNull(referenceType2);
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withTypeHandler(objectReader0);
      assertNotNull(referenceType3);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType3.useStaticType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.hasValueHandler());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isFinal());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isEnumType());
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      
      String string0 = referenceType3.getGenericSignature();
      assertEquals("Ljava/lang/Object<Ljava/lang/Object;>;", string0);
      assertNotNull(string0);
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertTrue(javaType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isInterface());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isCollectionLikeType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.hasHandlers());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isInterface());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType2.useStaticType());
      assertEquals(0, referenceType2.containedTypeCount());
      assertTrue(referenceType2.isJavaLangObject());
      assertFalse(referenceType2.hasValueHandler());
      assertTrue(referenceType2.hasContentType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.hasHandlers());
      assertFalse(referenceType2.isFinal());
      assertFalse(referenceType2.isArrayType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isAnchorType());
      assertFalse(referenceType2.isPrimitive());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType3.useStaticType());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isJavaLangObject());
      assertFalse(referenceType3.hasValueHandler());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isConcrete());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isFinal());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isArrayType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isEnumType());
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader0);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = 'y';
      charArray0[2] = '$';
      charArray0[3] = '[';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory3.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'.', 'y', '$', '['}, charArray0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory3));
      assertFalse(jsonFactory1.equals((Object)jsonFactory3));
      assertFalse(jsonFactory2.equals((Object)jsonFactory3));
      assertFalse(jsonFactory3.equals((Object)jsonFactory0));
      assertFalse(jsonFactory3.equals((Object)jsonFactory1));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(4, charArray0.length);
      assertNotSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory1);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) beanProperty_Bogus0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext1);
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      
      boolean boolean0 = defaultDeserializationContext1.hasSomeOfFeatures(8);
      assertFalse(boolean0);
      assertFalse(defaultDeserializationContext1.equals((Object)defaultDeserializationContext0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext1.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, "|tf='Pez{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Object[] objectArray0 = new Object[1];
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeFactory typeFactory0 = defaultDeserializationContext_Impl0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class1, (JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.deser.AbstractDeserializer`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("=sZ6^b").when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, placeholderForType0);
      assertNotNull(jsonDeserializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = null;
      TimeZone timeZone0 = defaultDeserializationContext0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertEquals("UTC", timeZone0.getID());
      
      try { 
        defaultDeserializationContext0.findClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader1 = objectMapper0.reader();
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader1, objectReader0);
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNotSame(objectReader0, objectReader1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<?> jsonDeserializer0 = defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      assertNull(jsonDeserializer0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader0, objectReader1);
      
      Class<LinkedList> class0 = LinkedList.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      assertNotNull(collectionType0);
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isArrayType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.hasValueHandler());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isEnumType());
      assertNotSame(objectReader0, objectReader1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer(collectionType0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      String string0 = placeholderForType0.toString();
      assertEquals("$1022", string0);
      assertNotNull(string0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1021);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      JsonDeserializer<CollectionType> jsonDeserializer0 = (JsonDeserializer<CollectionType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, placeholderForType0);
      assertNotNull(jsonDeserializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertFalse(jsonDeserializer1.isCachable());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withDeserializerModifier((BeanDeserializerModifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null modifier
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      assertNotNull(contextAttributes1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      assertNotNull(jsonNodeFactory0);
      
      Short short0 = new Short((short)1863);
      assertEquals((short)1863, (short)short0);
      assertNotNull(short0);
      
      ShortNode shortNode0 = (ShortNode)jsonNodeFactory0.numberNode(short0);
      assertNotNull(shortNode0);
      assertEquals(JsonToken.VALUE_NUMBER_INT, shortNode0.asToken());
      assertEquals((short)1863, shortNode0.shortValue());
      assertFalse(shortNode0.isFloat());
      assertEquals(1863.0F, shortNode0.floatValue(), 0.01F);
      assertFalse(shortNode0.isBigInteger());
      assertFalse(shortNode0.isBigDecimal());
      assertEquals(JsonNodeType.NUMBER, shortNode0.getNodeType());
      assertEquals(JsonParser.NumberType.INT, shortNode0.numberType());
      assertTrue(shortNode0.canConvertToLong());
      assertEquals(1863.0, shortNode0.doubleValue(), 0.01);
      assertFalse(shortNode0.isObject());
      assertEquals(1863L, shortNode0.longValue());
      assertFalse(shortNode0.isLong());
      assertFalse(shortNode0.isDouble());
      assertFalse(shortNode0.isFloatingPointNumber());
      assertNull(shortNode0.textValue());
      assertEquals(1863, shortNode0.intValue());
      assertFalse(shortNode0.isNaN());
      assertTrue(shortNode0.isIntegralNumber());
      assertFalse(shortNode0.isMissingNode());
      assertFalse(shortNode0.isInt());
      assertFalse(shortNode0.isArray());
      assertTrue(shortNode0.isShort());
      assertFalse(shortNode0.booleanValue());
      assertEquals(0, shortNode0.size());
      assertTrue(shortNode0.canConvertToInt());
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      assertNotNull(arrayNode0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)arrayNode0.traverse();
      assertNotNull(treeTraversingParser0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(treeTraversingParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(arrayNode0, objectNode0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isInt());
      assertFalse(objectNode0.isArray());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isLong());
      assertTrue(objectNode0.isObject());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.booleanValue());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isLong());
      assertNull(arrayNode0.textValue());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isFloat());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertFalse(treeTraversingParser0.isClosed());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext_Impl0.handleUnknownProperty(treeTraversingParser0, jsonDeserializer0, jsonFactory0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class com.fasterxml.jackson.core.JsonFactory), not marked as ignorable
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      
      NamedType[] namedTypeArray0 = new NamedType[5];
      Class<Object> class0 = Object.class;
      NamedType namedType0 = new NamedType(class0);
      assertNotNull(namedType0);
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      
      namedTypeArray0[0] = namedType0;
      NamedType namedType1 = new NamedType(class0);
      assertNotNull(namedType1);
      assertTrue(namedType1.equals((Object)namedType0));
      assertFalse(namedType1.hasName());
      assertNull(namedType1.getName());
      
      namedTypeArray0[1] = namedType1;
      NamedType namedType2 = new NamedType(class0, "");
      assertNotNull(namedType2);
      assertTrue(namedType2.equals((Object)namedType0));
      assertTrue(namedType2.equals((Object)namedType1));
      assertFalse(namedType2.hasName());
      assertNull(namedType2.getName());
      
      namedTypeArray0[2] = namedType2;
      String string0 = namedType2.toString();
      assertEquals("[NamedType, class java.lang.Object, name: null]", string0);
      assertNotNull(string0);
      assertTrue(namedType2.equals((Object)namedType0));
      assertTrue(namedType2.equals((Object)namedType1));
      assertFalse(namedType2.hasName());
      assertNull(namedType2.getName());
      assertNotSame(namedType2, namedType1);
      assertNotSame(namedType2, namedType0);
      
      NamedType namedType3 = new NamedType(class0);
      assertNotNull(namedType3);
      assertTrue(namedType3.equals((Object)namedType0));
      assertTrue(namedType3.equals((Object)namedType2));
      assertTrue(namedType3.equals((Object)namedType1));
      assertFalse(namedType3.hasName());
      assertNull(namedType3.getName());
      
      namedTypeArray0[3] = namedType3;
      Class<Object> class1 = Object.class;
      NamedType namedType4 = new NamedType(class1, "");
      assertNotNull(namedType4);
      assertTrue(namedType4.equals((Object)namedType0));
      assertTrue(namedType4.equals((Object)namedType3));
      assertTrue(namedType4.equals((Object)namedType2));
      assertTrue(namedType4.equals((Object)namedType1));
      assertFalse(namedType4.hasName());
      assertNull(namedType4.getName());
      
      namedTypeArray0[4] = namedType4;
      objectMapper0.registerSubtypes(namedTypeArray0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(5, namedTypeArray0.length);
      assertNotSame(objectMapper0, objectMapper1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, (Object) null, "28bC2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) deserializerFactoryConfig0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) deserializerFactory0;
      objectArray0[4] = (Object) deserializerFactory0;
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "b%Er]l[&Ai]P[", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(8, deserializationFeatureArray0.length);
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      objectReaderArray0[0] = objectReader1;
      objectReaderArray0[1] = objectReader0;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      assertNotNull(dataFormatReaders0);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      byte[] byteArray0 = new byte[0];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (-2477), (-1024));
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, byteArray0.length);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNull(jsonParser0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(0, byteArray0.length);
      assertEquals(2, objectReaderArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      NamedType namedType0 = new NamedType(class0);
      assertNotNull(namedType0);
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      
      Class<?> class1 = namedType0.getType();
      assertNotNull(class1);
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer", class1.toString());
      
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      assertNotNull(javaType0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer", class1.toString());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isContainerType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isAbstract());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectReader0, objectReader1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      int int0 = 8;
      boolean boolean0 = deserializationContext0.hasSomeOfFeatures(8);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(8);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      JavaType javaType0 = placeholderForType0.getContentType();
      assertNull(javaType0);
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.hasContentType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isInterface());
      
      JsonDeserializer<?> jsonDeserializer1 = deserializationContext0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, (JavaType) null);
      assertNotNull(jsonDeserializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(jsonDeserializer1.isCachable());
      assertNull(jsonDeserializer1.getEmptyAccessPattern());
      assertNull(jsonDeserializer1.getNullAccessPattern());
      
      Class<Integer> class0 = Integer.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      IOContext iOContext0 = null;
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 8);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) beanDeserializerModifier0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) "pG2R%u";
      objectArray0[5] = (Object) beanDeserializerFactory0;
      objectArray0[6] = (Object) beanDeserializerModifier0;
      objectArray0[7] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "pG2R%u", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'u'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      boolean boolean0 = deserializationContext0.hasSomeOfFeatures(6);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      // Undeclared exception!
      try { 
        deserializationContext0.wrongTokenException((JsonParser) null, class0, jsonToken0, "}Wu[J0a(F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, charArray0.length);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      Class<Throwable> class0 = Throwable.class;
      Object[] objectArray0 = new Object[1];
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[0] = object1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleWeirdKey(class0, "No Object Id found for an instance of %s, to assign to property '%s'", "No Object Id found for an instance of %s, to assign to property '%s'", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)defaultDeserializationContext_Impl0.getAnnotationIntrospector();
      assertNotNull(jacksonAnnotationIntrospector0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      Integer integer0 = new Integer((-2591));
      assertEquals((-2591), (int)integer0);
      assertNotNull(integer0);
      
      IntNode intNode0 = (IntNode)jsonNodeFactory0.numberNode(integer0);
      assertNotNull(intNode0);
      assertEquals((-2591.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isFloat());
      assertEquals((-2591.0), intNode0.doubleValue(), 0.01);
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigDecimal());
      assertFalse(intNode0.isShort());
      assertFalse(intNode0.isArray());
      assertEquals((-2591L), intNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertNull(intNode0.textValue());
      assertEquals(0, intNode0.size());
      assertEquals((-2591), intNode0.intValue());
      assertFalse(intNode0.isObject());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isDouble());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isNaN());
      assertTrue(intNode0.canConvertToInt());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals((short) (-2591), intNode0.shortValue());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      assertNotNull(resolvedRecursiveType1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertNotSame(deserializerFactoryConfig0, deserializerFactoryConfig1);
      assertNotSame(deserializerFactoryConfig1, deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) jsonNodeFactory0;
      objectArray0[2] = (Object) typeBindings0;
      objectArray0[3] = (Object) "kVsrh4`pE*NE5W%gr";
      objectArray0[4] = (Object) resolvedRecursiveType0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "kVsrh4`pE*NE5W%gr", "kVsrh4`pE*NE5W%gr", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNotNull(deserializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.shouldSortPropertiesAlphabetically());
      assertEquals(237020304, deserializationConfig0.getDeserializationFeatures());
      assertFalse(deserializationConfig0.requiresFullValue());
      assertNull(deserializationConfig0.getRootName());
      assertEquals(0, deserializationConfig0.mixInCount());
      assertNull(deserializationConfig0.getDefaultMergeable());
      assertTrue(deserializationConfig0.isAnnotationProcessingEnabled());
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
      assertFalse(deserializationConfig0.useRootWrapping());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<MapLikeType> class1 = MapLikeType.class;
      Class<ArrayType> class2 = ArrayType.class;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.endOfInputException(class2);
      assertNotNull(mismatchedInputException0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class1, (Object) null, mismatchedInputException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when trying to deserialize a com.fasterxml.jackson.databind.type.ArrayType
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "Missig typeid when trying to resolve subty^e of %R", "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      Integer integer0 = new Integer((-2591));
      assertEquals((-2591), (int)integer0);
      assertNotNull(integer0);
      
      IntNode intNode0 = (IntNode)jsonNodeFactory0.numberNode(integer0);
      assertNotNull(intNode0);
      assertFalse(intNode0.isShort());
      assertEquals((-2591L), intNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-2591), intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-2591.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-2591.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertEquals((short) (-2591), intNode0.shortValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(intNode0);
      assertNotNull(treeTraversingParser0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(intNode0.isShort());
      assertEquals((-2591L), intNode0.longValue());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.isIntegralNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertFalse(intNode0.isObject());
      assertTrue(intNode0.canConvertToLong());
      assertEquals((-2591), intNode0.intValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertTrue(intNode0.canConvertToInt());
      assertEquals((-2591.0), intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertFalse(intNode0.isBigInteger());
      assertEquals((-2591.0F), intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.booleanValue());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertFalse(intNode0.isNaN());
      assertEquals((short) (-2591), intNode0.shortValue());
      assertFalse(intNode0.isFloatingPointNumber());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentName());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      TypeBindings typeBindings1 = TypeBindings.create(class0, (JavaType[]) null);
      assertNotNull(typeBindings1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertNotSame(typeBindings1, typeBindings0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)resolvedRecursiveType0.withContentTypeHandler(typeBindings1);
      assertNotNull(resolvedRecursiveType1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertEquals(0, typeBindings1.size());
      assertTrue(typeBindings1.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType1.hasValueHandler());
      assertFalse(resolvedRecursiveType1.useStaticType());
      assertEquals(0, resolvedRecursiveType1.containedTypeCount());
      assertFalse(resolvedRecursiveType1.isCollectionLikeType());
      assertFalse(resolvedRecursiveType1.isEnumType());
      assertFalse(resolvedRecursiveType1.isInterface());
      assertFalse(resolvedRecursiveType1.isMapLikeType());
      assertFalse(resolvedRecursiveType1.isPrimitive());
      assertFalse(resolvedRecursiveType1.isContainerType());
      assertTrue(resolvedRecursiveType1.hasContentType());
      assertFalse(resolvedRecursiveType1.isArrayType());
      assertFalse(resolvedRecursiveType1.hasHandlers());
      assertFalse(resolvedRecursiveType1.isFinal());
      assertFalse(resolvedRecursiveType1.isAbstract());
      assertFalse(resolvedRecursiveType1.isJavaLangObject());
      assertTrue(resolvedRecursiveType1.isConcrete());
      assertNotSame(typeBindings1, typeBindings0);
      assertSame(resolvedRecursiveType0, resolvedRecursiveType1);
      assertSame(resolvedRecursiveType1, resolvedRecursiveType0);
      
      try { 
        objectMapper0.readValue((JsonParser) treeTraversingParser0, (JavaType) resolvedRecursiveType1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.deser.AbstractDeserializer` (no Creators, like default construct, exist): no int/Int-argument constructor/factory method to deserialize from Number value (-2591)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Integer integer0 = new Integer((-1083));
      assertEquals((-1083), (int)integer0);
      assertNotNull(integer0);
      
      IntNode intNode0 = new IntNode(885);
      assertNotNull(intNode0);
      assertEquals(885, intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(885L, intNode0.longValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(885.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(885.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals((short)885, intNode0.shortValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(intNode0);
      assertNotNull(jsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(885, intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(885L, intNode0.longValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(885.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(885.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals((short)885, intNode0.shortValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canParseAsync());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.hasCurrentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertEquals(0, jsonParser0.currentTokenId());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<SimpleType> class0 = SimpleType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(intNode0);
      assertNotNull(javaType0);
      assertEquals(885, intNode0.intValue());
      assertFalse(intNode0.isShort());
      assertEquals(JsonParser.NumberType.INT, intNode0.numberType());
      assertTrue(intNode0.canConvertToLong());
      assertTrue(intNode0.isIntegralNumber());
      assertFalse(intNode0.isObject());
      assertFalse(intNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, intNode0.asToken());
      assertEquals(885L, intNode0.longValue());
      assertFalse(intNode0.isMissingNode());
      assertFalse(intNode0.isLong());
      assertFalse(intNode0.isFloat());
      assertFalse(intNode0.isDouble());
      assertFalse(intNode0.isFloatingPointNumber());
      assertEquals(JsonNodeType.NUMBER, intNode0.getNodeType());
      assertEquals(885.0F, intNode0.floatValue(), 0.01F);
      assertFalse(intNode0.isBigInteger());
      assertTrue(intNode0.canConvertToInt());
      assertFalse(intNode0.isBigDecimal());
      assertEquals(885.0, intNode0.doubleValue(), 0.01);
      assertTrue(intNode0.isInt());
      assertEquals((short)885, intNode0.shortValue());
      assertFalse(intNode0.booleanValue());
      assertEquals(0, intNode0.size());
      assertNull(intNode0.textValue());
      assertFalse(intNode0.isArray());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.hasContentType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isJavaLangObject());
      assertTrue(javaType0.isConcrete());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.isContainerType());
      assertSame(resolvedRecursiveType0, javaType0);
      assertSame(javaType0, resolvedRecursiveType0);
      
      try { 
        objectMapper0.readValue(jsonParser0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.SimpleType` (no Creators, like default construct, exist): no int/Int-argument constructor/factory method to deserialize from Number value (885)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      assertNotNull(jsonParserDelegate0);
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      
      JsonDeserializer<Void> jsonDeserializer0 = (JsonDeserializer<Void>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertNotNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) contextAttributes0;
      objectArray0[1] = (Object) contextAttributes1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[3] = (Object) objectReader0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) objectReader0;
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "JSON", "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.deser.BeanDeserializer` from String \"JSON\": JSON
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      try { 
        defaultDeserializationContext_Impl0.reportUnknownProperty(deserializerFactoryConfig0, "", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig), not marked as ignorable
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser1);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertEquals(8193, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser1.currentToken());
      assertEquals(8193, uTF8StreamJsonParser1.getFeatureMask());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser1.currentTokenId());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser1.isNaN());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.canParseAsync());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(uTF8StreamJsonParser1, uTF8StreamJsonParser0);
      
      Class<String> class0 = String.class;
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Class<DateFormat> class1 = DateFormat.class;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertNotNull(jsonParserSequence0);
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertNotNull(jsonParserSequence1);
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.isNaN());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class1, (JsonParser) jsonParserSequence1, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type START_OBJECT) found after value (bound as `java.text.DateFormat`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      
      boolean boolean0 = defaultDeserializationContext_Impl0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) uTF8StreamJsonParser0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) typeBindings0;
      objectArray0[4] = (Object) typeBindings0;
      objectArray0[5] = (Object) typeBindings0;
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "bSZ/np\">-}#F", "zzu'L_", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from String \"bSZ/np\">-}#F\": zzu'L_
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      boolean boolean1 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      boolean boolean0 = deserializationContext0.hasSomeOfFeatures(6);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((Class<?>) class0, "Numeric value (%s) out of range of long (%d - %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportUnknownProperty((Object) null, "", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      assertNotNull(contextAttributes1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      assertNotNull(arrayNode0);
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloat());
      assertFalse(objectNode0.isBigInteger());
      assertFalse(objectNode0.isMissingNode());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.booleanValue());
      assertTrue(objectNode0.isObject());
      assertNull(objectNode0.numberType());
      assertFalse(objectNode0.isBigDecimal());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isArray());
      assertEquals("", objectNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isInt());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isShort());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<MapLikeType> class0 = MapLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      Class<BigIntegerNode> class1 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[1]);
      assertNotNull(mapType0);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(2, javaTypeArray0.length);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '_';
      charArray0[1] = '6';
      charArray0[2] = 'L';
      charArray0[3] = 'g';
      charArray0[4] = '5';
      charArray0[5] = '}';
      charArray0[6] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'_', '6', 'L', 'g', '5', '}', 'L'}, charArray0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(7, charArray0.length);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer(javaTypeArray0[0], (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2277));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext_Impl0.getNodeFactory();
      assertNotNull(jsonNodeFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      assertNotNull(arrayNode0);
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)arrayNode0.traverse();
      assertNotNull(treeTraversingParser0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(treeTraversingParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertNull(objectNode0.numberType());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isFloat());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(treeTraversingParser0.canReadObjectId());
      assertNull(treeTraversingParser0.getLastClearedToken());
      assertFalse(treeTraversingParser0.requiresCustomCodec());
      assertEquals(0, treeTraversingParser0.getFormatFeatures());
      assertNull(treeTraversingParser0.currentToken());
      assertFalse(treeTraversingParser0.isExpectedStartObjectToken());
      assertEquals(0, treeTraversingParser0.getFeatureMask());
      assertNull(treeTraversingParser0.getCurrentName());
      assertFalse(treeTraversingParser0.isClosed());
      assertFalse(treeTraversingParser0.canReadTypeId());
      assertNull(treeTraversingParser0.getCurrentToken());
      assertFalse(treeTraversingParser0.isExpectedStartArrayToken());
      assertEquals(0, treeTraversingParser0.getCurrentTokenId());
      assertFalse(treeTraversingParser0.hasTextCharacters());
      assertEquals(0, treeTraversingParser0.currentTokenId());
      assertFalse(treeTraversingParser0.hasCurrentToken());
      assertFalse(treeTraversingParser0.canParseAsync());
      assertEquals(0, treeTraversingParser0.getTextOffset());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      ObjectReader objectReader1 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader1);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectReader1, objectReader0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute("JSON", objectReader1);
      assertNotNull(defaultDeserializationContext_Impl2);
      assertFalse(objectReader1.equals((Object)objectReader0));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(objectReader0.equals((Object)objectReader1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(defaultDeserializationContext_Impl2.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(objectReader1, objectReader0);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertNotSame(objectReader0, objectReader1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl2);
      
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext_Impl2.reportUnknownProperty(objectMapper0, "", jsonDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class com.fasterxml.jackson.databind.ObjectMapper), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectMapper objectMapper1 = new ObjectMapper();
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper1.mixInCount());
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      Object object1 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      assertNull(object1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object object0 = defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      assertNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      boolean boolean0 = defaultDeserializationContext_Impl0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      JsonDeserializer<?> jsonDeserializer0 = defaultDeserializationContext_Impl1.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, javaType0);
      assertNull(jsonDeserializer0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(javaType0.isContainerType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.useStaticType());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isInterface());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'm';
      charArray0[2] = '\'';
      charArray0[3] = 'm';
      charArray0[4] = '>';
      charArray0[5] = 'X';
      charArray0[6] = '\\';
      charArray0[7] = 'r';
      charArray0[8] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'j', 'm', '\'', 'm', '>', 'X', '\\', 'r', '\"'}, charArray0);
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(9, charArray0.length);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) readerBasedJsonParser0, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[19];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(19, javaTypeArray0.length);
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) null, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature1, true);
      assertNotNull(jsonFactory3);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory4 = jsonFactory3.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory4);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory3);
      assertSame(jsonFactory4, jsonFactory1);
      assertSame(jsonFactory4, jsonFactory2);
      assertSame(jsonFactory4, jsonFactory0);
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory4);
      assertNotNull(objectMapper1);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertTrue(jsonFactory4.canParseAsync());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ContextAttributes contextAttributes2 = contextAttributes1.withoutSharedAttribute(jsonFactory3);
      assertNotNull(contextAttributes2);
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      assertNotNull(jsonNodeFactory0);
      
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      assertNotNull(objectNode0);
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(0, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      
      ArrayNode arrayNode0 = objectNode0.putArray("");
      assertNotNull(arrayNode0);
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      
      JsonParser jsonParser0 = arrayNode0.traverse();
      assertNotNull(jsonParser0);
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(jsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(contextAttributes2, jsonFactory1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(jsonParser_Feature0.equals((Object)jsonParser_Feature1));
      assertFalse(jsonParser_Feature1.equals((Object)jsonParser_Feature0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNull(objectNode0.numberType());
      assertTrue(objectNode0.isObject());
      assertFalse(objectNode0.booleanValue());
      assertFalse(objectNode0.isIntegralNumber());
      assertFalse(objectNode0.isShort());
      assertFalse(objectNode0.isMissingNode());
      assertFalse(objectNode0.isBigDecimal());
      assertFalse(objectNode0.isInt());
      assertEquals(JsonToken.START_OBJECT, objectNode0.asToken());
      assertEquals(JsonNodeType.OBJECT, objectNode0.getNodeType());
      assertFalse(objectNode0.isFloat());
      assertEquals(1, objectNode0.size());
      assertFalse(objectNode0.isBigInteger());
      assertNull(objectNode0.textValue());
      assertFalse(objectNode0.isDouble());
      assertFalse(objectNode0.isLong());
      assertFalse(objectNode0.isFloatingPointNumber());
      assertEquals("", objectNode0.asText());
      assertFalse(objectNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertTrue(arrayNode0.isArray());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isLong());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isObject());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.canReadObjectId());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getLastClearedToken());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory4);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory4);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(jsonParser_Feature0, jsonParser_Feature1);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory4);
      assertSame(jsonFactory2, jsonFactory3);
      assertNotSame(jsonParser_Feature1, jsonParser_Feature0);
      assertSame(jsonFactory3, jsonFactory4);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes2);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes0);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.reportUnknownProperty(objectNode0, (String) null, jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory2);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory3 = jsonFactory2.setCodec(objectReader0);
      assertNotNull(jsonFactory3);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)104;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory3.createParser(byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      assertArrayEquals(new byte[] {(byte)3, (byte)45, (byte)79, (byte)104}, byteArray0);
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(4, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, javaType0, jsonToken0, "");
      assertNotNull(mismatchedInputException0);
      assertArrayEquals(new byte[] {(byte)3, (byte)45, (byte)79, (byte)104}, byteArray0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals(4, byteArray0.length);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      assertNotNull(contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ContextAttributes contextAttributes2 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes2);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes2);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes0);
      
      Object[] objectArray0 = new Object[1];
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes0);
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Class<SimpleType> class1 = SimpleType.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class1, "", "");
      assertNotNull(invalidFormatException0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes0, contextAttributes2);
      assertSame(contextAttributes2, contextAttributes1);
      assertSame(contextAttributes2, contextAttributes0);
      
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: JSON
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      assertFalse(boolean0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      assertNotNull(mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<MockSimpleDateFormat> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      boolean boolean1 = defaultDeserializationContext0.hasValueDeserializerFor(mapType0, atomicReference0);
      assertFalse(boolean1);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertEquals("java.lang.NullPointerException", atomicReference0.toString());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) typeFactory1;
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) unaryOperator0;
      objectArray0[4] = (Object) unaryOperator1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[6] = object1;
      objectArray0[7] = (Object) null;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
      assertNotNull(classNameIdResolver0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId(mapType0, "virtual", classNameIdResolver0, "zp+7TE+S,L)P9#>jsu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2277));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertEquals(1, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      assertNotNull(mapType1);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withContentValueHandler(contextAttributes0);
      assertNotNull(mapType2);
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isConcrete());
      assertEquals(1, javaTypeArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectIdGenerator<AbstractDeserializer> objectIdGenerator0 = (ObjectIdGenerator<AbstractDeserializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<SimpleType> jsonDeserializer0 = (JsonDeserializer<SimpleType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(javaTypeArray0[0], (PropertyName) null, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);
      assertNotNull(objectIdReader0);
      assertFalse(objectIdReader0.maySerializeAsObject());
      assertEquals(1, javaTypeArray0.length);
      
      Integer integer0 = Integer.getInteger("JSON", (-2277));
      assertEquals((-2277), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId(objectIdReader0, (Object) integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No Object Id found for an instance of `java.lang.Integer`, to assign to property 'null'
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object[] objectArray0 = new Object[1];
      BigInteger bigInteger0 = BigInteger.valueOf(0L);
      assertNotNull(bigInteger0);
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((byte)0, bigInteger0.byteValue());
      
      try { 
        defaultDeserializationContext0.reportInputMismatch((BeanProperty) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "could not determine property type");
      assertFalse(boolean0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      Class<ReferenceType> class0 = ReferenceType.class;
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, integer0, "uWo%&:B?UQoDv>,", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '&'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JavaType javaType0 = defaultDeserializationContext_Impl0.constructType((Class<?>) null);
      assertNull(javaType0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      assertNotNull(beanDeserializerBuilder0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNull(basicBeanDescription0.findClassDescription());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ValueInstantiator valueInstantiator0 = beanDeserializerBuilder0.getValueInstantiator();
      assertNull(valueInstantiator0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNull(basicBeanDescription0.findClassDescription());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[7] = (Object) ")N<]blI";
      objectArray0[2] = (Object) contextAttributes0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) beanDeserializerModifier0;
      MockDate mockDate0 = new MockDate(123, (-2263), 3);
      assertNotNull(mockDate0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("Tue Jun 03 00:00:00 GMT 1834", mockDate0.toString());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-4278528000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1834,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=154,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockDate mockDate0 = new MockDate(2487, 84, 84, 2487, 2487, 84);
      assertNotNull(mockDate0);
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ValueInstantiator valueInstantiator0 = null;
      TreeSet<ObjectReader> treeSet0 = new TreeSet<ObjectReader>();
      assertNotNull(treeSet0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(treeSet0);
      assertNotNull(dataFormatReaders0);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      MatchStrength matchStrength0 = MatchStrength.FULL_MATCH;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withOptimalMatch(matchStrength0);
      assertNotNull(dataFormatReaders1);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.withMinimalMatch(matchStrength0);
      assertNotNull(dataFormatReaders2);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)16;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0, (int) (byte)28, (-1883));
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {(byte)52, (byte)28, (byte)109, (byte)16}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(4, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNull(jsonParser0);
      assertArrayEquals(new byte[] {(byte)52, (byte)28, (byte)109, (byte)16}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(4, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      String string0 = "3kN|))uM%{gr";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) treeSet0;
      objectArray0[1] = (Object) matchStrength0;
      objectArray0[2] = (Object) dataFormatReaders_Match0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, "3kN|))uM%{gr", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '{'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      Class<MapLikeType> class1 = MapLikeType.class;
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException(class1, (Throwable) null);
      assertNotNull(invalidDefinitionException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JavaType javaType0 = beanProperty_Bogus0.getType();
      assertNotNull(javaType0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isAbstract());
      
      Class<Integer> class0 = Integer.class;
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, class0, (Throwable) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.Integer`, problem: N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Iterable<KeyDeserializers> iterable0 = deserializerFactoryConfig0.keyDeserializers();
      assertNotNull(iterable0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)defaultDeserializationContext_Impl0.getFactory();
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Locale locale0 = defaultDeserializationContext_Impl0.getLocale();
      assertNotNull(locale0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      SimpleValueInstantiators simpleValueInstantiators1 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators1);
      assertFalse(simpleValueInstantiators1.equals((Object)simpleValueInstantiators0));
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      
      Vector<ObjectReader> vector0 = new Vector<ObjectReader>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(vector0);
      assertNotNull(dataFormatReaders0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType((JavaType) null);
      assertNotNull(dataFormatReaders1);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      ObjectReader[] objectReaderArray0 = new ObjectReader[0];
      DataFormatReaders dataFormatReaders2 = dataFormatReaders1.with(objectReaderArray0);
      assertNotNull(dataFormatReaders2);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, objectReaderArray0.length);
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-3);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders2.findFormat(byteArray0, (int) (byte) (-3), 1313);
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-3)}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, objectReaderArray0.length);
      assertEquals(2, byteArray0.length);
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      JsonParser jsonParser0 = dataFormatReaders_Match0.createParserWithMatch();
      assertNull(jsonParser0);
      assertArrayEquals(new byte[] {(byte) (-101), (byte) (-3)}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders2));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders0));
      assertFalse(dataFormatReaders2.equals((Object)dataFormatReaders1));
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, objectReaderArray0.length);
      assertEquals(2, byteArray0.length);
      assertFalse(vector0.contains(objectReader0));
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders2);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      assertNotSame(dataFormatReaders1, dataFormatReaders2);
      assertNotSame(dataFormatReaders2, dataFormatReaders0);
      assertNotSame(dataFormatReaders2, dataFormatReaders1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)31;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte) (-73), (byte)35, (byte) (-24), (byte)5, (byte) (-65), (byte)31}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      assertNotNull(jsonParserDelegate0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      
      Class<ReferenceType> class1 = ReferenceType.class;
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) jsonParserDelegate0, class1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.ReferenceType`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Throwable> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      assertSame(unaryOperator1, unaryOperator0);
      
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8StreamJsonParser0);
      assertNotNull(jsonParserDelegate0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(jsonParserDelegate0.isNaN());
      assertEquals(0, jsonParserDelegate0.getFormatFeatures());
      assertEquals(8193, jsonParserDelegate0.getFeatureMask());
      assertFalse(jsonParserDelegate0.canReadTypeId());
      assertFalse(jsonParserDelegate0.canParseAsync());
      assertFalse(jsonParserDelegate0.requiresCustomCodec());
      assertFalse(jsonParserDelegate0.canReadObjectId());
      
      Class<ReferenceType> class0 = ReferenceType.class;
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) jsonParserDelegate0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.ReferenceType`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertEquals(1, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      assertNotNull(mapType1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withContentValueHandler(contextAttributes0);
      assertNotNull(mapType2);
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertFalse(mapType2.useStaticType());
      assertTrue(mapType2.hasContentType());
      assertEquals(0, mapType2.containedTypeCount());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertEquals(1, javaTypeArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      HashSet<MockDateFormat> hashSet0 = new HashSet<MockDateFormat>(2256);
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
      assertEquals(237020304, int0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(hashSet0);
      assertNotNull(arrayList0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Ml6$UZ{)4fbpA"));
      
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext_Impl0.reportUnknownProperty(object0, "", jsonDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class java.lang.Object), not marked as ignorable (0 known properties: ])
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: java.lang.Object[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "(}KGM)}BS2px";
      try { 
        defaultDeserializationContext0.findClass("(}KGM)}BS2px");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class '(}KGM)}BS2px.class' should be in target project, but could not be found!
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isAbstract());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.isJavaLangObject());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaType0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      assertNotNull(mapType0);
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      
      String string0 = mapType0.getTypeName();
      assertEquals("[map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class com.fasterxml.jackson.databind.JsonDeserializer]]", string0);
      assertNotNull(string0);
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      
      MapType mapType1 = (MapType)mapType0.withValueHandler(defaultDeserializationContext_Impl0);
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      Integer integer0 = new Integer(237020160);
      assertEquals(237020160, (int)integer0);
      assertNotNull(integer0);
      
      MapType mapType2 = mapType1.withKeyType(mapType0);
      assertNotNull(mapType2);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.isAbstract());
      assertTrue(mapType2.hasContentType());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.isPrimitive());
      assertTrue(mapType2.isMapLikeType());
      assertTrue(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isCollectionLikeType());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasHandlers());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isConcrete());
      assertFalse(mapType2.isJavaLangObject());
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      
      MapType mapType3 = mapType1.withStaticTyping();
      assertNotNull(mapType3);
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertFalse(mapType3.equals((Object)mapType2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isAbstract());
      assertFalse(mapType3.isConcrete());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.hasValueHandler());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.isInterface());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isArrayType());
      assertEquals(2, mapType3.containedTypeCount());
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLFeatureNotSupportedException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLFeatureNotSupportedException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      MapType mapType4 = mapType3.withContentValueHandler(sQLNonTransientConnectionException0);
      assertNotNull(mapType4);
      assertTrue(mapType4.equals((Object)mapType0));
      assertFalse(mapType4.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType1));
      assertTrue(mapType4.equals((Object)mapType3));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertFalse(mapType3.equals((Object)mapType2));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLFeatureNotSupportedException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertTrue(mapType4.useStaticType());
      assertTrue(mapType4.hasHandlers());
      assertEquals(2, mapType4.containedTypeCount());
      assertFalse(mapType4.isJavaLangObject());
      assertTrue(mapType4.isContainerType());
      assertTrue(mapType4.hasValueHandler());
      assertFalse(mapType4.isEnumType());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isInterface());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType4.isConcrete());
      assertFalse(mapType4.isFinal());
      assertTrue(mapType4.hasContentType());
      assertFalse(mapType4.isPrimitive());
      assertFalse(mapType4.isArrayType());
      assertTrue(mapType4.isAbstract());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.hasHandlers());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasValueHandler());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.useStaticType());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isAbstract());
      assertFalse(mapType3.isConcrete());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.hasHandlers());
      assertTrue(mapType3.hasValueHandler());
      assertFalse(mapType3.isEnumType());
      assertTrue(mapType3.isInterface());
      assertTrue(mapType3.hasContentType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.useStaticType());
      assertFalse(mapType3.isArrayType());
      assertEquals(2, mapType3.containedTypeCount());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor(mapType3, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JavaType javaType0 = defaultDeserializationContext_Impl0.getContextualType();
      assertNull(javaType0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isPrimitive());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertEquals(1, javaTypeArray0.length);
      
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue(javaTypeArray0[0], beanDeserializerModifier0, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.deser.BeanDeserializerModifier$MockitoMock$1889787639`: incompatible types
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-4594));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      assertNotNull(mapType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertEquals(0, javaTypeArray0.length);
      
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue(resolvedRecursiveType0, objectMapper0, uTF8StreamJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.String` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.ObjectMapper`: incompatible types
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, charArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(1, charArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class1, jsonToken0, (JsonParser) readerBasedJsonParser0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //  at [Source: (char[])\"n\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ml6$UZ{)4fbpA", "*7^&2", 1);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("*7^&2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.toString());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("G})~Q", sQLFeatureNotSupportedException0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("*7^&2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("G})~Q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: G})~Q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      atomicReference0.set(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: G})~Q", atomicReference0.toString());
      assertEquals("*7^&2", sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(1, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ml6$UZ{)4fbpA", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("G})~Q", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: G})~Q", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = (SQLIntegrityConstraintViolationException)atomicReference0.getAndUpdate(unaryOperator0);
      assertNotNull(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: G})~Q", atomicReference0.toString());
      assertNull(sQLIntegrityConstraintViolationException1.getSQLState());
      assertEquals("G})~Q", sQLIntegrityConstraintViolationException1.getMessage());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: G})~Q", sQLIntegrityConstraintViolationException1.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException1.getErrorCode());
      assertSame(sQLIntegrityConstraintViolationException1, sQLIntegrityConstraintViolationException0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(1, charArray0.length);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(1, charArray0.length);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      
      Class<MapLikeType> class1 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class1, jsonToken0, (JsonParser) readerBasedJsonParser0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //  at [Source: (char[])\"n\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      Object[] objectArray0 = new Object[1];
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      try { 
        defaultDeserializationContext_Impl0.reportUnknownProperty(objectMapper0, "$ e2QydBllB", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"$ e2QydBllB\" (class com.fasterxml.jackson.databind.ObjectMapper), not marked as ignorable
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"$ e2QydBllB\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(1, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      assertNotNull(mapType1);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertEquals(0, mapType1.containedTypeCount());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType1.withContentValueHandler(contextAttributes0);
      assertNotNull(mapType2);
      assertTrue(mapType2.equals((Object)mapType0));
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.isAbstract());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.isInterface());
      assertFalse(mapType2.isArrayType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isFinal());
      assertEquals(1, javaTypeArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertSame(mapType1, mapType0);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JsonDeserializer<MockDateFormat> jsonDeserializer0 = (JsonDeserializer<MockDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext_Impl0.reportUnknownProperty(object0, "", jsonDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"\" (class java.lang.Object), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: java.lang.Object[\"\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, (String) null);
      assertNotNull(invalidFormatException0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      MockDate mockDate0 = new MockDate(2886, (-2263), 91, (-2263), 2886);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Stack<ObjectReader> stack0 = new Stack<ObjectReader>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(stack0);
      assertNotNull(dataFormatReaders0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      
      JavaType javaType0 = null;
      DataFormatReaders dataFormatReaders1 = dataFormatReaders0.withType((JavaType) null);
      assertNotNull(dataFormatReaders1);
      assertFalse(dataFormatReaders1.equals((Object)dataFormatReaders0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      assertNotSame(dataFormatReaders1, dataFormatReaders0);
      
      byte[] byteArray0 = new byte[2];
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 64, 64);
      assertNotNull(dataFormatReaders_Match0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(dataFormatReaders0.equals((Object)dataFormatReaders1));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(MatchStrength.INCONCLUSIVE, dataFormatReaders_Match0.getMatchStrength());
      assertFalse(dataFormatReaders_Match0.hasMatch());
      assertEquals(2, byteArray0.length);
      assertEquals(64, DataFormatReaders.DEFAULT_MAX_INPUT_LOOKAHEAD);
      assertNotSame(dataFormatReaders0, dataFormatReaders1);
      
      try { 
        defaultDeserializationContext_Impl0.reportBadDefinition((JavaType) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      JavaType javaType0 = null;
      try { 
        deserializationContext0.reportBadDefinition((JavaType) null, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleValueInstantiators0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-106);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory2.createParser(byteArray0, 1, 1);
      assertNotNull(uTF8StreamJsonParser0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-81), (byte) (-128), (byte)91, (byte) (-106)}, byteArray0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(5, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-81), (byte) (-128), (byte)91, (byte) (-106)}, byteArray0);
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(5, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException(class0, "JSON");
      assertNotNull(invalidDefinitionException0);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-81), (byte) (-128), (byte)91, (byte) (-106)}, byteArray0);
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(5, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(invalidDefinitionException0, jsonFactory1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertArrayEquals(new byte[] {(byte)116, (byte) (-81), (byte) (-128), (byte)91, (byte) (-106)}, byteArray0);
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(5, byteArray0.length);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      Class<DateFormat> class0 = DateFormat.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "");
      assertNotNull(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      Class<?> class1 = defaultDeserializationContext_Impl0.getActiveView();
      assertNull(class1);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      JavaType javaType0 = defaultDeserializationContext_Impl0.getContextualType();
      assertNull(javaType0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectReader objectReader0 = objectMapper0.reader();
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      assertNotNull(defaultDeserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      Class<ArrayType> class0 = ArrayType.class;
      JavaType javaType0 = defaultDeserializationContext0.getContextualType();
      assertNull(javaType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext0.invalidTypeIdException((JavaType) null, "WjhNQm)/Zv6!0PYa", "WjhNQm)/Zv6!0PYa");
      assertNotNull(invalidTypeIdException0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals("WjhNQm)/Zv6!0PYa", invalidTypeIdException0.getTypeId());
      
      InvalidTypeIdException invalidTypeIdException1 = (InvalidTypeIdException)defaultDeserializationContext0.missingTypeIdException((JavaType) null, "WjhNQm)/Zv6!0PYa");
      assertNotNull(invalidTypeIdException1);
      assertFalse(invalidTypeIdException1.equals((Object)invalidTypeIdException0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertNull(invalidTypeIdException1.getTypeId());
      assertNotSame(invalidTypeIdException1, invalidTypeIdException0);
      
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) invalidTypeIdException0);
      assertNotNull(invalidDefinitionException0);
      assertFalse(invalidTypeIdException0.equals((Object)invalidTypeIdException1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext0.canOverrideAccessModifiers());
      assertEquals("WjhNQm)/Zv6!0PYa", invalidTypeIdException0.getTypeId());
      assertNotSame(invalidTypeIdException0, invalidTypeIdException1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      assertNotNull(simpleType0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(simpleType0, objectReader0, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.ObjectReader`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      String string0 = "Ml6$UZ{)4fbpA";
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("JSON", class0, (String) null);
      assertNotNull(invalidFormatException0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      Class<ReferenceType> class1 = ReferenceType.class;
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException((Class<?>) class1, (Throwable) invalidFormatException0);
      assertNotNull(invalidDefinitionException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      defaultDeserializationContext_Impl1.checkUnresolvedObjectId();
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      Class<DateFormat> class2 = DateFormat.class;
      Class<DateFormat> class3 = DateFormat.class;
      Class<SettableBeanProperty> class4 = SettableBeanProperty.class;
      Class<CollectionType> class5 = CollectionType.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      SimpleType simpleType0 = (SimpleType)objectMapper1.constructType(class4);
      assertNotNull(simpleType0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper1, objectMapper0);
      
      javaTypeArray0[0] = (JavaType) simpleType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      
      Class<LinkedList> class6 = LinkedList.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class6, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$1838553119) return null for type [simple type, class java.lang.String]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<BigIntegerNode> class0 = BigIntegerNode.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      assertNotNull(objectReader0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory1.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(nonBlockingJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      SQLWarning sQLWarning0 = new SQLWarning((Throwable) null);
      assertNotNull(sQLWarning0);
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      
      InvalidDefinitionException invalidDefinitionException0 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLWarning0);
      assertNotNull(invalidDefinitionException0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "JSON", invalidDefinitionException0);
      assertNotNull(sQLTimeoutException0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("JSON", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      
      InvalidDefinitionException invalidDefinitionException1 = (InvalidDefinitionException)defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTimeoutException0);
      assertNotNull(invalidDefinitionException1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(invalidDefinitionException1.equals((Object)invalidDefinitionException0));
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals("JSON", sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertNotSame(invalidDefinitionException0, invalidDefinitionException1);
      assertNotSame(invalidDefinitionException1, invalidDefinitionException0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory1);
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
      assertNotNull(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(beanDeserializerFactory1, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory1);
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertSame(beanDeserializerFactory1, deserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("Sub-class ", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
      assertNotNull(deserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      MockFile mockFile0 = new MockFile("No 'injectableValues' configured, cannot inject value with id [%s]");
      assertNotNull(mockFile0);
      
      File file0 = MockFile.createTempFile("No 'injectableValues' configured, cannot inject value with id [%s]", "zm]7w~<uI%HKAU^", (File) mockFile0);
      assertNotNull(file0);
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]/No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser(file0);
      assertNotNull(uTF8StreamJsonParser0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]/No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) uTF8StreamJsonParser0, (JsonParser) uTF8StreamJsonParser0);
      assertNotNull(jsonParserSequence0);
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]/No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.isNaN());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      MismatchedInputException mismatchedInputException0 = (MismatchedInputException)defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) jsonParserSequence0, (Class<?>) class0, jsonToken0, "JSON");
      assertNotNull(mismatchedInputException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(mockFile0.equals((Object)file0));
      assertFalse(file0.equals((Object)mockFile0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]/No 'injectableValues' configured, cannot inject value with id [%s]0zm]7w~<uI%HKAU^", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("/experiment/No 'injectableValues' configured, cannot inject value with id [%s]", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.isNaN());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JavaType javaType0 = defaultDeserializationContext_Impl0.getContextualType();
      assertNull(javaType0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x4&3WI,0>2i76$pViT");
      assertFalse(boolean0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      assertNotNull(valueInstantiators_Base0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1278);
      assertNotNull(coreXMLDeserializers_Std0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      ObjectIdReader objectIdReader0 = coreXMLDeserializers_Std0.getObjectIdReader();
      assertNull(objectIdReader0);
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) deserializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader0);
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory1);
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory2.createNonBlockingByteArrayParser();
      assertNotNull(nonBlockingJsonParser0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(nonBlockingJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(237020306, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3206);
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl1.setAttribute(object0, placeholderForType0);
      assertNotNull(defaultDeserializationContext_Impl2);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(237020306, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(237020306, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl2.canOverrideAccessModifiers());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl2);
      assertSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      assertNotNull(stringBuilder1);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals("$3207", stringBuilder0.toString());
      assertEquals("$3207", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      boolean boolean0 = placeholderForType0.isTypeOrSubTypeOf(class0);
      assertFalse(boolean0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      
      Class<Void> class1 = Void.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl2.mappingException(class1);
      assertNotNull(jsonMappingException0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(237020306, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(237020306, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl2.canOverrideAccessModifiers());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl2);
      assertSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
      
      JsonFormat.Value jsonFormat_Value0 = defaultDeserializationContext_Impl2.getDefaultPropertyFormat(class1);
      assertNotNull(jsonFormat_Value0);
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl2));
      assertFalse(deserializationFeature0.equals((Object)deserializationFeature1));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(237020306, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertEquals(237020306, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl2.canOverrideAccessModifiers());
      assertFalse(jsonFormat_Value0.hasPattern());
      assertEquals("", jsonFormat_Value0.getPattern());
      assertFalse(jsonFormat_Value0.hasTimeZone());
      assertEquals(JsonFormat.Shape.ANY, jsonFormat_Value0.getShape());
      assertFalse(jsonFormat_Value0.isLenient());
      assertFalse(jsonFormat_Value0.hasLocale());
      assertNull(jsonFormat_Value0.timeZoneAsString());
      assertFalse(jsonFormat_Value0.hasLenient());
      assertNull(jsonFormat_Value0.getLenient());
      assertFalse(jsonFormat_Value0.hasShape());
      assertEquals(5, deserializationFeatureArray0.length);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl2);
      assertNotSame(deserializationFeature0, deserializationFeature1);
      assertSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl2);
      assertSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory1.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("SFe");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      boolean boolean0 = defaultDeserializationContext_Impl1.hasSomeOfFeatures(2099);
      assertTrue(boolean0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext_Impl0.getConfig();
      assertNull(deserializationConfig0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      assertNotNull(resolvedRecursiveType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      assertNotNull(referenceType0);
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      
      ReferenceType referenceType1 = referenceType0.withStaticTyping();
      assertNotNull(referenceType1);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      
      ReferenceType referenceType2 = referenceType1.withValueHandler(objectMapper0);
      assertNotNull(referenceType2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isFinal());
      assertTrue(referenceType2.hasHandlers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      
      Class<SimpleType> class1 = SimpleType.class;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) referenceType1;
      javaTypeArray0[2] = (JavaType) referenceType0;
      javaTypeArray0[3] = (JavaType) referenceType2;
      javaTypeArray0[4] = (JavaType) referenceType1;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[6] = (JavaType) referenceType2;
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[4], (TypeBindings) null);
      assertNotNull(arrayType0);
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertEquals(7, javaTypeArray0.length);
      
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) arrayType0);
      assertNotNull(collectionType0);
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(7, javaTypeArray0.length);
      
      CollectionType collectionType1 = collectionType0.withTypeHandler(javaTypeArray0[1]);
      assertNotNull(collectionType1);
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(7, javaTypeArray0.length);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      
      ReferenceType referenceType3 = referenceType2.withContentTypeHandler(collectionType1);
      assertNotNull(referenceType3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isFinal());
      assertTrue(referenceType2.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isFinal());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isArrayType());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isPrimitive());
      assertEquals(7, javaTypeArray0.length);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType1);
      
      ReferenceType referenceType4 = (ReferenceType)referenceType3.withContentType(referenceType0);
      assertNotNull(referenceType4);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertFalse(referenceType4.equals((Object)referenceType2));
      assertFalse(referenceType4.equals((Object)referenceType3));
      assertFalse(referenceType4.equals((Object)referenceType1));
      assertFalse(referenceType4.equals((Object)referenceType0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isFinal());
      assertTrue(referenceType2.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isFinal());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isArrayType());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType4.isInterface());
      assertTrue(referenceType4.isReferenceType());
      assertTrue(referenceType4.isFinal());
      assertFalse(referenceType4.isArrayType());
      assertTrue(referenceType4.hasHandlers());
      assertFalse(referenceType4.isJavaLangObject());
      assertTrue(referenceType4.isConcrete());
      assertFalse(referenceType4.isAbstract());
      assertTrue(referenceType4.useStaticType());
      assertEquals(0, referenceType4.containedTypeCount());
      assertTrue(referenceType4.hasContentType());
      assertFalse(referenceType4.isCollectionLikeType());
      assertFalse(referenceType4.isContainerType());
      assertFalse(referenceType4.isMapLikeType());
      assertFalse(referenceType4.isAnchorType());
      assertFalse(referenceType4.isPrimitive());
      assertFalse(referenceType4.isEnumType());
      assertTrue(referenceType4.hasValueHandler());
      assertEquals(7, javaTypeArray0.length);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType4);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType4);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType4);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType4);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType4, referenceType2);
      assertNotSame(referenceType4, referenceType3);
      assertNotSame(referenceType4, referenceType1);
      assertNotSame(referenceType4, referenceType0);
      
      JsonDeserializer<Object> jsonDeserializer0 = objectReader0._prefetchRootDeserializer(referenceType4);
      assertNull(jsonDeserializer0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(referenceType0.equals((Object)referenceType3));
      assertTrue(referenceType0.equals((Object)referenceType1));
      assertTrue(referenceType0.equals((Object)referenceType2));
      assertFalse(referenceType0.equals((Object)referenceType4));
      assertTrue(referenceType1.equals((Object)referenceType2));
      assertFalse(referenceType1.equals((Object)referenceType4));
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(referenceType1.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType1));
      assertFalse(referenceType2.equals((Object)referenceType4));
      assertTrue(referenceType2.equals((Object)referenceType3));
      assertTrue(referenceType2.equals((Object)referenceType0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(referenceType3.equals((Object)referenceType1));
      assertTrue(referenceType3.equals((Object)referenceType2));
      assertFalse(referenceType3.equals((Object)referenceType4));
      assertTrue(referenceType3.equals((Object)referenceType0));
      assertFalse(referenceType4.equals((Object)referenceType2));
      assertFalse(referenceType4.equals((Object)referenceType3));
      assertFalse(referenceType4.equals((Object)referenceType1));
      assertFalse(referenceType4.equals((Object)referenceType0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType1.hasValueHandler());
      assertEquals(0, referenceType1.containedTypeCount());
      assertTrue(referenceType1.useStaticType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isEnumType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isFinal());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType2.isAnchorType());
      assertTrue(referenceType2.hasContentType());
      assertFalse(referenceType2.isMapLikeType());
      assertFalse(referenceType2.isJavaLangObject());
      assertEquals(0, referenceType2.containedTypeCount());
      assertFalse(referenceType2.isEnumType());
      assertTrue(referenceType2.hasValueHandler());
      assertFalse(referenceType2.isArrayType());
      assertTrue(referenceType2.isReferenceType());
      assertFalse(referenceType2.isInterface());
      assertFalse(referenceType2.isPrimitive());
      assertTrue(referenceType2.useStaticType());
      assertTrue(referenceType2.isConcrete());
      assertFalse(referenceType2.isContainerType());
      assertFalse(referenceType2.isCollectionLikeType());
      assertFalse(referenceType2.isAbstract());
      assertTrue(referenceType2.isFinal());
      assertTrue(referenceType2.hasHandlers());
      assertTrue(arrayType0.isContainerType());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.useStaticType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isFinal());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isEnumType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.hasValueHandler());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType1.useStaticType());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isFinal());
      assertFalse(collectionType1.isAbstract());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.hasHandlers());
      assertFalse(referenceType3.isCollectionLikeType());
      assertFalse(referenceType3.isAbstract());
      assertTrue(referenceType3.isFinal());
      assertFalse(referenceType3.isJavaLangObject());
      assertTrue(referenceType3.isConcrete());
      assertTrue(referenceType3.hasContentType());
      assertTrue(referenceType3.hasHandlers());
      assertEquals(0, referenceType3.containedTypeCount());
      assertTrue(referenceType3.isReferenceType());
      assertFalse(referenceType3.isEnumType());
      assertTrue(referenceType3.hasValueHandler());
      assertFalse(referenceType3.isArrayType());
      assertTrue(referenceType3.useStaticType());
      assertFalse(referenceType3.isContainerType());
      assertFalse(referenceType3.isInterface());
      assertFalse(referenceType3.isMapLikeType());
      assertFalse(referenceType3.isAnchorType());
      assertFalse(referenceType3.isPrimitive());
      assertFalse(referenceType4.isInterface());
      assertTrue(referenceType4.isReferenceType());
      assertTrue(referenceType4.isFinal());
      assertFalse(referenceType4.isArrayType());
      assertTrue(referenceType4.hasHandlers());
      assertFalse(referenceType4.isJavaLangObject());
      assertTrue(referenceType4.isConcrete());
      assertFalse(referenceType4.isAbstract());
      assertTrue(referenceType4.useStaticType());
      assertEquals(0, referenceType4.containedTypeCount());
      assertTrue(referenceType4.hasContentType());
      assertFalse(referenceType4.isCollectionLikeType());
      assertFalse(referenceType4.isContainerType());
      assertFalse(referenceType4.isMapLikeType());
      assertFalse(referenceType4.isAnchorType());
      assertFalse(referenceType4.isPrimitive());
      assertFalse(referenceType4.isEnumType());
      assertTrue(referenceType4.hasValueHandler());
      assertEquals(7, javaTypeArray0.length);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(referenceType0, referenceType2);
      assertNotSame(referenceType0, referenceType4);
      assertNotSame(referenceType0, referenceType3);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertNotSame(referenceType1, referenceType3);
      assertNotSame(referenceType1, referenceType4);
      assertNotSame(referenceType1, referenceType2);
      assertNotSame(referenceType2, referenceType3);
      assertNotSame(referenceType2, referenceType4);
      assertNotSame(referenceType2, referenceType0);
      assertNotSame(referenceType2, referenceType1);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(referenceType3, referenceType0);
      assertNotSame(referenceType3, referenceType2);
      assertNotSame(referenceType3, referenceType4);
      assertNotSame(referenceType3, referenceType1);
      assertNotSame(referenceType4, referenceType2);
      assertNotSame(referenceType4, referenceType3);
      assertNotSame(referenceType4, referenceType1);
      assertNotSame(referenceType4, referenceType0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      assertNotSame(jsonFactory2, jsonFactory1);
      
      JsonFactory jsonFactory3 = jsonFactory1.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory3);
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory1.createParser("SFe");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      boolean boolean0 = defaultDeserializationContext_Impl1.hasSomeOfFeatures(2099);
      assertTrue(boolean0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory1, jsonFactory2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      JsonFactory jsonFactory4 = jsonFactory1.copy();
      assertNotNull(jsonFactory4);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory5 = jsonFactory4.enable(jsonFactory_Feature0);
      assertNotNull(jsonFactory5);
      assertFalse(jsonFactory5.equals((Object)jsonFactory0));
      assertFalse(jsonFactory5.equals((Object)jsonFactory3));
      assertFalse(jsonFactory5.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.equals((Object)jsonFactory2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertFalse(jsonFactory5.requiresCustomCodec());
      assertTrue(jsonFactory5.canParseAsync());
      assertFalse(jsonFactory5.canHandleBinaryNatively());
      assertTrue(jsonFactory5.canUseCharArrays());
      assertFalse(jsonFactory5.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory5.getFormatName());
      assertEquals(" ", jsonFactory5.getRootValueSeparator());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertNotSame(jsonFactory5, jsonFactory0);
      assertSame(jsonFactory5, jsonFactory4);
      assertNotSame(jsonFactory5, jsonFactory3);
      assertNotSame(jsonFactory5, jsonFactory1);
      assertNotSame(jsonFactory5, jsonFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory4.createParser("JSON");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)jsonFactory4.createParser("JSON");
      assertNotNull(readerBasedJsonParser1);
      assertFalse(readerBasedJsonParser1.equals((Object)readerBasedJsonParser0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertNotSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(readerBasedJsonParser1.equals((Object)readerBasedJsonParser0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory5));
      assertFalse(jsonFactory0.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory4));
      assertFalse(jsonFactory1.equals((Object)jsonFactory2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory5));
      assertFalse(jsonFactory4.equals((Object)jsonFactory3));
      assertFalse(jsonFactory4.equals((Object)jsonFactory0));
      assertFalse(jsonFactory4.equals((Object)jsonFactory2));
      assertFalse(jsonFactory4.equals((Object)jsonFactory1));
      assertEquals(8193, readerBasedJsonParser1.getFeatureMask());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresCustomCodec());
      assertEquals("JSON", jsonFactory4.getFormatName());
      assertFalse(jsonFactory4.canHandleBinaryNatively());
      assertTrue(jsonFactory4.canUseCharArrays());
      assertEquals(" ", jsonFactory4.getRootValueSeparator());
      assertFalse(jsonFactory4.requiresPropertyOrdering());
      assertTrue(jsonFactory4.canParseAsync());
      assertNotSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory0, jsonFactory5);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory3);
      assertNotSame(jsonFactory0, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory4);
      assertNotSame(jsonFactory1, jsonFactory2);
      assertNotSame(jsonFactory1, jsonFactory5);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotSame(jsonFactory4, jsonFactory3);
      assertNotSame(jsonFactory4, jsonFactory0);
      assertSame(jsonFactory4, jsonFactory5);
      assertNotSame(jsonFactory4, jsonFactory2);
      assertNotSame(jsonFactory4, jsonFactory1);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2099);
      assertFalse(boolean0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      assertNotNull(invalidFormatException0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      assertNotNull(objectReader0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertNotNull(readerBasedJsonParser0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(1, charArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      assertNotNull(contextAttributes1);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
      assertSame(contextAttributes0, contextAttributes1);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, (-964), (-943));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(uTF8StreamJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Throwable> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      assertSame(unaryOperator1, unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator1);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      assertSame(unaryOperator1, unaryOperator0);
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      Class<ReferenceType> class1 = ReferenceType.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
      assertNotNull(mapType0);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(1, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      assertNotNull(mapType1);
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.useStaticType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isInterface());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isPrimitive());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapType mapType2 = mapType0.withContentValueHandler(")N<]blI");
      assertNotNull(mapType2);
      assertTrue(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.equals((Object)mapType0));
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertEquals(0, mapType2.containedTypeCount());
      assertFalse(mapType2.isAbstract());
      assertFalse(mapType2.isJavaLangObject());
      assertTrue(mapType2.isConcrete());
      assertFalse(mapType2.hasHandlers());
      assertFalse(mapType2.isArrayType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isFinal());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isInterface());
      assertTrue(mapType2.isContainerType());
      assertFalse(mapType2.isPrimitive());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      JavaType javaType0 = resolvedRecursiveType0.refine(class2, typeBindings0, mapType0, javaTypeArray0);
      assertNull(javaType0);
      assertTrue(mapType0.equals((Object)mapType2));
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isAbstract());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isFinal());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType2);
      
      boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor(javaTypeArray0[0], atomicReference0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertTrue(defaultDeserializationContext_Impl0.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("null", atomicReference0.toString());
      assertEquals(1, javaTypeArray0.length);
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("SFe");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findObjectId(mockDateFormat0, (ObjectIdGenerator<?>) null, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory1);
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory1.arrayNode();
      assertNotNull(arrayNode0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      boolean boolean0 = arrayNode0.canConvertToInt();
      assertFalse(boolean0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      assertNotNull(jsonParser0);
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isFloat());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertEquals(0, arrayNode0.size());
      assertFalse(jsonParser0.canReadObjectId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentName());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertNull(jsonParser0.getCurrentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.hasCurrentToken());
      assertFalse(jsonParser0.canParseAsync());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertEquals(0, jsonParser0.currentTokenId());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, mapLikeType0);
      assertNotNull(referenceType0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      
      JavaType[] javaTypeArray0 = null;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) mapLikeType0, (JavaType) referenceType0);
      assertNotNull(mapType0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      
      MapType mapType1 = mapType0.withKeyType(mapLikeType0);
      assertNotNull(mapType1);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapLikeType mapLikeType1 = mapLikeType0.withKeyType(mapType1);
      assertNotNull(mapLikeType1);
      assertFalse(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      MapLikeType mapLikeType2 = mapLikeType1.withContentValueHandler(typeFactory0);
      assertNotNull(mapLikeType2);
      assertFalse(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(mapLikeType2.equals((Object)mapLikeType0));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertFalse(mapLikeType0.equals((Object)mapLikeType1));
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertEquals(0, mapLikeType1.containedTypeCount());
      assertFalse(mapLikeType1.isAbstract());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.useStaticType());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.isEnumType());
      assertTrue(mapLikeType1.isContainerType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.hasContentType());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isPrimitive());
      assertFalse(mapLikeType2.isFinal());
      assertFalse(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType2.isContainerType());
      assertFalse(mapLikeType2.isEnumType());
      assertTrue(mapLikeType2.isMapLikeType());
      assertEquals(0, mapLikeType2.containedTypeCount());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isEnumType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isInterface());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isCollectionLikeType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      // Undeclared exception!
      try { 
        deserializationContext0.findRootValueDeserializer(mapLikeType2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl1.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<Map> class0 = Map.class;
      Class<String> class1 = String.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      assertNotNull(bigIntegerNode0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.textValue());
      
      MapType mapType1 = mapType0.withContentValueHandler(bigIntegerNode0);
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      Class<SimpleType> class3 = SimpleType.class;
      MapType mapType2 = typeFactory0.constructMapType(class0, class2, class3);
      assertNotNull(mapType2);
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertEquals(2, mapType2.containedTypeCount());
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      
      MapType mapType3 = mapType1.withKeyValueHandler(mapType2);
      assertNotNull(mapType3);
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertTrue(mapType3.equals((Object)mapType0));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType1));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.hasHandlers());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isInterface());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.isAbstract());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      
      MapType mapType4 = mapType3.withTypeHandler(bigIntegerNode0);
      assertNotNull(mapType4);
      assertFalse(mapType2.equals((Object)mapType0));
      assertFalse(mapType2.equals((Object)mapType1));
      assertFalse(mapType2.equals((Object)mapType3));
      assertTrue(mapType3.equals((Object)mapType0));
      assertFalse(mapType3.equals((Object)mapType2));
      assertTrue(mapType3.equals((Object)mapType1));
      assertFalse(mapType4.equals((Object)mapType2));
      assertTrue(mapType4.equals((Object)mapType3));
      assertTrue(mapType4.equals((Object)mapType0));
      assertTrue(mapType4.equals((Object)mapType1));
      assertTrue(mapType0.equals((Object)mapType3));
      assertFalse(mapType0.equals((Object)mapType2));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapType1.equals((Object)mapType2));
      assertTrue(mapType1.equals((Object)mapType3));
      assertTrue(mapType2.isAbstract());
      assertFalse(mapType2.isConcrete());
      assertTrue(mapType2.isContainerType());
      assertTrue(mapType2.hasContentType());
      assertFalse(mapType2.isEnumType());
      assertFalse(mapType2.isPrimitive());
      assertFalse(mapType2.isFinal());
      assertTrue(mapType2.isInterface());
      assertFalse(mapType2.hasHandlers());
      assertTrue(mapType2.isMapLikeType());
      assertFalse(mapType2.isCollectionLikeType());
      assertFalse(mapType2.useStaticType());
      assertFalse(mapType2.isJavaLangObject());
      assertFalse(mapType2.hasValueHandler());
      assertFalse(mapType2.isArrayType());
      assertEquals(2, mapType2.containedTypeCount());
      assertFalse(mapType3.isJavaLangObject());
      assertFalse(mapType3.hasValueHandler());
      assertTrue(mapType3.hasHandlers());
      assertEquals(2, mapType3.containedTypeCount());
      assertFalse(mapType3.useStaticType());
      assertTrue(mapType3.isMapLikeType());
      assertFalse(mapType3.isPrimitive());
      assertTrue(mapType3.isInterface());
      assertTrue(mapType3.hasContentType());
      assertFalse(mapType3.isCollectionLikeType());
      assertTrue(mapType3.isContainerType());
      assertFalse(mapType3.isEnumType());
      assertFalse(mapType3.isFinal());
      assertTrue(mapType3.isAbstract());
      assertFalse(mapType3.isArrayType());
      assertFalse(mapType3.isConcrete());
      assertFalse(mapType4.isFinal());
      assertTrue(mapType4.hasContentType());
      assertFalse(mapType4.isArrayType());
      assertFalse(mapType4.isCollectionLikeType());
      assertTrue(mapType4.isInterface());
      assertTrue(mapType4.isMapLikeType());
      assertFalse(mapType4.isPrimitive());
      assertTrue(mapType4.isContainerType());
      assertFalse(mapType4.isEnumType());
      assertFalse(mapType4.hasValueHandler());
      assertTrue(mapType4.hasHandlers());
      assertFalse(mapType4.isConcrete());
      assertTrue(mapType4.isAbstract());
      assertFalse(mapType4.useStaticType());
      assertFalse(mapType4.isJavaLangObject());
      assertEquals(2, mapType4.containedTypeCount());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.booleanValue());
      assertEquals(JsonNodeType.NUMBER, bigIntegerNode0.getNodeType());
      assertFalse(bigIntegerNode0.isShort());
      assertFalse(bigIntegerNode0.isObject());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.numberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isLong());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isFloat());
      assertEquals(0, bigIntegerNode0.size());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertFalse(bigIntegerNode0.isNaN());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertNull(bigIntegerNode0.textValue());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.hasValueHandler());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isInterface());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isArrayType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isConcrete());
      assertTrue(mapType1.hasHandlers());
      assertNotSame(mapType2, mapType4);
      assertNotSame(mapType2, mapType0);
      assertNotSame(mapType2, mapType1);
      assertNotSame(mapType2, mapType3);
      assertNotSame(mapType3, mapType1);
      assertNotSame(mapType3, mapType4);
      assertNotSame(mapType3, mapType2);
      assertNotSame(mapType3, mapType0);
      assertNotSame(mapType4, mapType1);
      assertNotSame(mapType4, mapType2);
      assertNotSame(mapType4, mapType0);
      assertNotSame(mapType4, mapType3);
      assertNotSame(mapType0, mapType2);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType0, mapType3);
      assertNotSame(mapType0, mapType4);
      assertNotSame(mapType1, mapType4);
      assertNotSame(mapType1, mapType2);
      assertNotSame(mapType1, mapType3);
      assertNotSame(mapType1, mapType0);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findNonContextualValueDeserializer(mapType4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, deserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)deserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<Integer> class0 = Integer.class;
      Class<Throwable> class1 = Throwable.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      
      Class<BigIntegerNode> class2 = BigIntegerNode.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      assertNotNull(typeBindings1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertEquals(6, javaTypeArray0.length);
      assertNotSame(typeBindings1, typeBindings0);
      
      JavaType[] javaTypeArray1 = new JavaType[3];
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      
      javaTypeArray1[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray1[2] = (JavaType) resolvedRecursiveType0;
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings1, javaTypeArray0[5], javaTypeArray1, javaTypeArray0[4]);
      assertNotNull(collectionType0);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertEquals(3, javaTypeArray1.length);
      assertEquals(6, javaTypeArray0.length);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      assertNotNull(collectionType1);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertEquals(3, javaTypeArray1.length);
      assertEquals(6, javaTypeArray0.length);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedList> class3 = LinkedList.class;
      Class<ArrayType> class4 = ArrayType.class;
      CollectionType collectionType2 = typeFactory0.constructCollectionType(class3, class4);
      assertNotNull(collectionType2);
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.useStaticType());
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      
      CollectionType collectionType3 = collectionType1.withContentValueHandler(collectionType2);
      assertNotNull(collectionType3);
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertFalse(collectionType3.equals((Object)collectionType2));
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.useStaticType());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isJavaLangObject());
      assertEquals(0, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isAbstract());
      assertTrue(collectionType3.isCollectionLikeType());
      assertFalse(collectionType3.hasHandlers());
      assertTrue(collectionType3.isFinal());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.isConcrete());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isMapLikeType());
      assertTrue(collectionType3.useStaticType());
      assertFalse(collectionType3.isInterface());
      assertEquals(3, javaTypeArray1.length);
      assertEquals(6, javaTypeArray0.length);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType3, collectionType1);
      
      JavaType javaType0 = resolvedRecursiveType0.refine(class1, typeBindings0, collectionType3, javaTypeArray1);
      assertNull(javaType0);
      assertTrue(typeBindings0.equals((Object)typeBindings1));
      assertFalse(javaTypeArray0.equals((Object)javaTypeArray1));
      assertTrue(typeBindings1.equals((Object)typeBindings0));
      assertFalse(javaTypeArray1.equals((Object)javaTypeArray0));
      assertTrue(collectionType0.equals((Object)collectionType3));
      assertTrue(collectionType0.equals((Object)collectionType1));
      assertFalse(collectionType0.equals((Object)collectionType2));
      assertFalse(collectionType1.equals((Object)collectionType2));
      assertTrue(collectionType1.equals((Object)collectionType0));
      assertTrue(collectionType1.equals((Object)collectionType3));
      assertFalse(collectionType2.equals((Object)collectionType0));
      assertFalse(collectionType2.equals((Object)collectionType1));
      assertFalse(collectionType2.equals((Object)collectionType3));
      assertTrue(collectionType3.equals((Object)collectionType1));
      assertTrue(collectionType3.equals((Object)collectionType0));
      assertFalse(collectionType3.equals((Object)collectionType2));
      assertTrue(typeBindings1.isEmpty());
      assertEquals(0, typeBindings1.size());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isFinal());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isJavaLangObject());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.useStaticType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.isEnumType());
      assertFalse(collectionType1.hasHandlers());
      assertTrue(collectionType1.isCollectionLikeType());
      assertEquals(0, collectionType1.containedTypeCount());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isJavaLangObject());
      assertTrue(collectionType1.isFinal());
      assertTrue(collectionType1.isContainerType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isInterface());
      assertFalse(collectionType1.isArrayType());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertFalse(collectionType1.hasValueHandler());
      assertTrue(collectionType1.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertEquals(1, collectionType2.containedTypeCount());
      assertFalse(collectionType2.hasValueHandler());
      assertFalse(collectionType2.isAbstract());
      assertFalse(collectionType2.isEnumType());
      assertFalse(collectionType2.hasHandlers());
      assertFalse(collectionType2.isJavaLangObject());
      assertFalse(collectionType2.isMapLikeType());
      assertTrue(collectionType2.isCollectionLikeType());
      assertTrue(collectionType2.hasContentType());
      assertFalse(collectionType2.isFinal());
      assertFalse(collectionType2.isInterface());
      assertTrue(collectionType2.isContainerType());
      assertTrue(collectionType2.isConcrete());
      assertFalse(collectionType2.isPrimitive());
      assertFalse(collectionType2.isArrayType());
      assertFalse(collectionType2.useStaticType());
      assertFalse(collectionType3.hasValueHandler());
      assertFalse(collectionType3.isJavaLangObject());
      assertEquals(0, collectionType3.containedTypeCount());
      assertFalse(collectionType3.isAbstract());
      assertTrue(collectionType3.isCollectionLikeType());
      assertFalse(collectionType3.hasHandlers());
      assertTrue(collectionType3.isFinal());
      assertTrue(collectionType3.isContainerType());
      assertTrue(collectionType3.isConcrete());
      assertTrue(collectionType3.hasContentType());
      assertFalse(collectionType3.isPrimitive());
      assertFalse(collectionType3.isArrayType());
      assertFalse(collectionType3.isEnumType());
      assertFalse(collectionType3.isMapLikeType());
      assertTrue(collectionType3.useStaticType());
      assertFalse(collectionType3.isInterface());
      assertEquals(3, javaTypeArray1.length);
      assertEquals(6, javaTypeArray0.length);
      assertNotSame(typeBindings0, typeBindings1);
      assertNotSame(javaTypeArray0, javaTypeArray1);
      assertNotSame(typeBindings1, typeBindings0);
      assertNotSame(javaTypeArray1, javaTypeArray0);
      assertNotSame(collectionType0, collectionType1);
      assertNotSame(collectionType0, collectionType3);
      assertNotSame(collectionType0, collectionType2);
      assertNotSame(collectionType1, collectionType3);
      assertNotSame(collectionType1, collectionType0);
      assertNotSame(collectionType1, collectionType2);
      assertNotSame(collectionType2, collectionType0);
      assertNotSame(collectionType2, collectionType1);
      assertNotSame(collectionType2, collectionType3);
      assertNotSame(collectionType3, collectionType0);
      assertNotSame(collectionType3, collectionType2);
      assertNotSame(collectionType3, collectionType1);
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer((JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      JsonNodeFactory jsonNodeFactory1 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory1);
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory1.arrayNode();
      assertNotNull(arrayNode0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      boolean boolean0 = arrayNode0.canConvertToInt();
      assertFalse(boolean0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      assertNotNull(jsonParser0);
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertFalse(arrayNode0.isLong());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isDouble());
      assertFalse(arrayNode0.isIntegralNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertEquals("", arrayNode0.asText());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isInt());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertFalse(jsonParser0.hasTextCharacters());
      assertNull(jsonParser0.currentToken());
      assertFalse(jsonParser0.isClosed());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertNull(jsonParser0.getLastClearedToken());
      assertNull(jsonParser0.getCurrentToken());
      assertNull(jsonParser0.getCurrentName());
      assertFalse(jsonParser0.canReadTypeId());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadObjectId());
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      assertNotNull(typeFactory1);
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      Class<Map> class1 = Map.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      
      MapType mapType0 = typeFactory1.constructMapType((Class<? extends Map>) class1, (JavaType) simpleType0, (JavaType) simpleType0);
      assertNotNull(mapType0);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      
      MapType mapType1 = mapType0.withTypeHandler(typeFactory0);
      assertNotNull(mapType1);
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      
      MapLikeType mapLikeType0 = mapType1.withKeyTypeHandler(jsonNodeFactory1);
      assertNotNull(mapLikeType0);
      assertTrue(mapLikeType0.equals((Object)mapType0));
      assertTrue(mapLikeType0.equals((Object)mapType1));
      assertFalse(typeFactory0.equals((Object)typeFactory1));
      assertFalse(typeFactory1.equals((Object)typeFactory0));
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isConcrete());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertEquals(2, mapLikeType0.containedTypeCount());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isArrayType());
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.isJavaLangObject());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.isInterface());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isConcrete());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.hasContentType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isInterface());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isEnumType());
      assertNotSame(mapLikeType0, mapType1);
      assertNotSame(mapLikeType0, mapType0);
      assertSame(jsonNodeFactory1, jsonNodeFactory0);
      assertNotSame(typeFactory0, typeFactory1);
      assertNotSame(typeFactory1, typeFactory0);
      assertNotSame(mapType0, mapLikeType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapLikeType0);
      assertNotSame(mapType1, mapType0);
      
      Integer integer0 = new Integer(237020160);
      assertEquals(237020160, (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNativeValue(mapLikeType0, integer0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      assertNotNull(contextAttributes0);
      
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      assertNotNull(contextAttributes1);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertSame(contextAttributes0, contextAttributes1);
      assertSame(contextAttributes1, contextAttributes0);
      
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      assertNotNull(deserializationContext0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)deserializationContext0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)deserializationContext0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, deserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, deserializationContext0);
      
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext0.equals((Object)deserializationContext0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectBuffer0.initialCapacity());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, deserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext0, deserializationContext0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance(1, 3);
      assertNotNull(simpleDateFormat0);
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleDateFormat0, false);
      assertNotNull(iOContext0);
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      PipedReader pipedReader0 = new PipedReader(129);
      assertNotNull(pipedReader0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl1);
      assertNotNull(objectMapper1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper1.reader(deserializationFeature0, deserializationFeatureArray0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(7, deserializationFeatureArray0.length);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl1, deserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      assertNotNull(charsToNameCanonicalizer0);
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      assertNotNull(charsToNameCanonicalizer1);
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4439), pipedReader0, objectReader0, charsToNameCanonicalizer1, (char[]) null, 129, (-2555), true);
      assertNotNull(readerBasedJsonParser0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals((-4439), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      ReaderBasedJsonParser readerBasedJsonParser1 = (ReaderBasedJsonParser)readerBasedJsonParser0.enable(jsonParser_Feature0);
      assertNotNull(readerBasedJsonParser1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)deserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(charsToNameCanonicalizer0.equals((Object)charsToNameCanonicalizer1));
      assertFalse(charsToNameCanonicalizer1.equals((Object)charsToNameCanonicalizer0));
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(readerBasedJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser1.getTokenLineNr());
      assertFalse(readerBasedJsonParser1.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser1.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser1.canReadObjectId());
      assertEquals((-4439), readerBasedJsonParser1.getFeatureMask());
      assertEquals(0, readerBasedJsonParser1.currentTokenId());
      assertEquals(1, readerBasedJsonParser1.getTokenColumnNr());
      assertNull(readerBasedJsonParser1.currentToken());
      assertFalse(readerBasedJsonParser1.hasCurrentToken());
      assertFalse(readerBasedJsonParser1.hasTextCharacters());
      assertFalse(readerBasedJsonParser1.canParseAsync());
      assertFalse(readerBasedJsonParser1.isNaN());
      assertFalse(readerBasedJsonParser1.canReadTypeId());
      assertEquals(0, readerBasedJsonParser1.getFormatFeatures());
      assertFalse(readerBasedJsonParser1.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser1.getCurrentTokenId());
      assertNull(readerBasedJsonParser1.getLastClearedToken());
      assertNull(readerBasedJsonParser1.getCurrentToken());
      assertNull(readerBasedJsonParser1.getCurrentName());
      assertFalse(readerBasedJsonParser1.isClosed());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("MMMM d, yyyy h:mm a", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertTrue(charsToNameCanonicalizer0.maybeDirty());
      assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
      assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer0.size());
      assertEquals(839877741, charsToNameCanonicalizer1.hashSeed());
      assertEquals(64, charsToNameCanonicalizer1.bucketCount());
      assertEquals(0, charsToNameCanonicalizer1.maxCollisionLength());
      assertEquals(0, charsToNameCanonicalizer1.collisionCount());
      assertEquals(0, charsToNameCanonicalizer1.size());
      assertFalse(charsToNameCanonicalizer1.maybeDirty());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertEquals((-4439), readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(7, deserializationFeatureArray0.length);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
      assertSame(readerBasedJsonParser1, readerBasedJsonParser0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl1, deserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(charsToNameCanonicalizer0, charsToNameCanonicalizer1);
      assertNotSame(charsToNameCanonicalizer1, charsToNameCanonicalizer0);
      assertSame(readerBasedJsonParser0, readerBasedJsonParser1);
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownProperty(readerBasedJsonParser1, (JsonDeserializer<?>) null, iOContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      assertNotNull(deserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "$cK9|");
      assertFalse(boolean0);
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertSame(beanDeserializerFactory0, deserializerFactory0);
      assertSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      assertNotNull(arrayNode0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      assertNotNull(jsonFactory1);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      assertNotNull(jsonParser0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(arrayNode0.textValue());
      assertFalse(arrayNode0.isFloat());
      assertEquals("", arrayNode0.asText());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertFalse(arrayNode0.isDouble());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.booleanValue());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.isShort());
      assertFalse(arrayNode0.isIntegralNumber());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isObject());
      assertFalse(arrayNode0.isBigDecimal());
      assertNull(jsonParser0.getCurrentToken());
      assertEquals(0, jsonParser0.currentTokenId());
      assertFalse(jsonParser0.hasTextCharacters());
      assertFalse(jsonParser0.isExpectedStartArrayToken());
      assertEquals(0, jsonParser0.getCurrentTokenId());
      assertFalse(jsonParser0.hasCurrentToken());
      assertEquals(0, jsonParser0.getTextOffset());
      assertFalse(jsonParser0.canParseAsync());
      assertFalse(jsonParser0.canReadTypeId());
      assertFalse(jsonParser0.canReadObjectId());
      assertNull(jsonParser0.getLastClearedToken());
      assertFalse(jsonParser0.requiresCustomCodec());
      assertEquals(0, jsonParser0.getFormatFeatures());
      assertFalse(jsonParser0.isExpectedStartObjectToken());
      assertNull(jsonParser0.currentToken());
      assertNull(jsonParser0.getCurrentName());
      assertEquals(0, jsonParser0.getFeatureMask());
      assertFalse(jsonParser0.isClosed());
      assertSame(jsonFactory0, jsonFactory1);
      
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, beanDeserializerFactory0, "com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter$SerializeExceptFilter");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      int int0 = 26;
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(26);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      String string0 = "com.fasterxml.jackson.databind.util.BeanUtil";
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "com.fasterxml.jackson.databind.util.BeanUtil", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // com.fasterxml.jackson.databind.util.BeanUtil
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory1.createParser((byte[]) null, 91, (-2263));
      assertNotNull(uTF8StreamJsonParser0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("Ml6$UZ{)4fbpA", jsonFactory1.getRootValueSeparator());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(1, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      assertNotNull(mapType1);
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isArrayType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.isInterface());
      assertTrue(mapType1.isConcrete());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isCollectionLikeType());
      assertFalse(mapType1.isAbstract());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertEquals(1, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      BeanDeserializerFactory beanDeserializerFactory1 = (BeanDeserializerFactory)beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "Ml6$UZ{)4fbpA", (Object[]) javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      Class<String> class0 = String.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      assertNotNull(atomicReference0);
      assertEquals("null", atomicReference0.toString());
      
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Throwable throwable0 = atomicReference0.getAndUpdate(unaryOperator0);
      assertNull(throwable0);
      assertEquals("null", atomicReference0.toString());
      
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      
      Class<DateFormat> class1 = DateFormat.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[2] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[3] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[0], javaTypeArray0[0]);
      assertNotNull(mapType0);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(4, javaTypeArray0.length);
      
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[2]);
      assertNotNull(mapType1);
      assertTrue(mapType0.isAbstract());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(0, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isConcrete());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isFinal());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType1.hasHandlers());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isFinal());
      assertTrue(mapType1.isMapLikeType());
      assertTrue(mapType1.isContainerType());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isAbstract());
      assertFalse(mapType1.isConcrete());
      assertEquals(0, mapType1.containedTypeCount());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.useStaticType());
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertTrue(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertEquals(4, javaTypeArray0.length);
      assertSame(mapType0, mapType1);
      assertSame(mapType1, mapType0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      assertNotNull(simpleDeserializers0);
      
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withAdditionalDeserializers(simpleDeserializers0);
      assertNotNull(deserializerFactory0);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertNotSame(beanDeserializerFactory1, deserializerFactory0);
      assertNotSame(beanDeserializerFactory1, beanDeserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory0);
      assertNotSame(deserializerFactory0, beanDeserializerFactory1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(beanDeserializerFactory1.equals((Object)deserializerFactory0));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) null, ")N<]blI", (Object[]) javaTypeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      String string0 = "_Vd2";
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "_Vd2");
      assertFalse(boolean0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      int int0 = 26;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      
      String string1 = "";
      String string2 = null;
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "");
      assertNotNull(jsonMappingException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl2);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canParseAsync());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertNotSame(jsonFactory2, jsonFactory0);
      
      JsonFactory jsonFactory3 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory3);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(jsonFactory3.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canParseAsync());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory3.getRootValueSeparator());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory1);
      assertSame(jsonFactory3, jsonFactory0);
      assertNotSame(jsonFactory3, jsonFactory2);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("SFe");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(jsonFactory0.equals((Object)jsonFactory2));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.currentToken());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory0, jsonFactory2);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl2);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl2.weirdStringException("SFe", class0, "");
      assertNotNull(invalidFormatException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl3);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(defaultDeserializationContext_Impl3.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl3.equals((Object)defaultDeserializationContext_Impl2));
      assertFalse(defaultDeserializationContext_Impl3.equals((Object)defaultDeserializationContext_Impl1));
      assertEquals(0, defaultDeserializationContext_Impl3.getDeserializationFeatures());
      
      JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl3.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      assertNotNull(simpleKeyDeserializers0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider_Impl2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider_Impl2.equals((Object)defaultSerializerProvider_Impl1));
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      assertNotNull(jsonFactory1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory1.equals((Object)jsonFactory0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canParseAsync());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertNotSame(jsonFactory1, jsonFactory0);
      
      JsonFactory jsonFactory2 = jsonFactory0.setRootValueSeparator("JSON");
      assertNotNull(jsonFactory2);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(jsonFactory2.equals((Object)jsonFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory2.canParseAsync());
      assertEquals("JSON", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser("SFe");
      assertNotNull(readerBasedJsonParser0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(readerBasedJsonParser0);
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig1);
      assertFalse(deserializerFactoryConfig1.equals((Object)deserializerFactoryConfig0));
      assertFalse(deserializerFactoryConfig1.hasDeserializers());
      assertTrue(deserializerFactoryConfig1.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig1.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig1.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig1.hasValueInstantiators());
      
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory1);
      assertFalse(beanDeserializerFactory1.equals((Object)beanDeserializerFactory0));
      assertFalse(deserializerFactoryConfig0.equals((Object)deserializerFactoryConfig1));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory2 = (BeanDeserializerFactory)beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      assertNotNull(beanDeserializerFactory2);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory2.equals((Object)beanDeserializerFactory0));
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory2);
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory2, beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl2);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory2));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl2.weirdStringException("SFe", class0, "");
      assertNotNull(invalidFormatException0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory2));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl2.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory2);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl2, defaultDeserializationContext_Impl0);
      
      boolean boolean0 = defaultDeserializationContext_Impl1.hasDeserializationFeatures(237020160);
      assertTrue(boolean0);
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory1));
      assertFalse(beanDeserializerFactory0.equals((Object)beanDeserializerFactory2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl2));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl2));
      assertFalse(jsonFactory0.equals((Object)jsonFactory1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl2));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertTrue(defaultDeserializationContext_Impl1.canOverrideAccessModifiers());
      assertEquals(237020304, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory1);
      assertNotSame(beanDeserializerFactory0, beanDeserializerFactory2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl2);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl2);
      assertNotSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      assertNotNull(jsonpCharacterEscapes0);
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      assertNotNull(jsonFactory2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertNotNull(defaultDeserializationContext_Impl1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("JSON", ".^8Q", (-1), sQLClientInfoException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals(".^8Q", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: JSON", sQLRecoverableException0.toString());
      assertEquals("JSON", sQLRecoverableException0.getMessage());
      
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl1)._isCompatible(class0, sQLRecoverableException0);
      assertFalse(boolean0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertNull(sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException", sQLClientInfoException0.toString());
      assertEquals((-1), sQLRecoverableException0.getErrorCode());
      assertEquals(".^8Q", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: JSON", sQLRecoverableException0.toString());
      assertEquals("JSON", sQLRecoverableException0.getMessage());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      boolean boolean1 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
      assertTrue(boolean1);
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl0.equals((Object)defaultDeserializationContext_Impl1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext_Impl1);
      
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext_Impl1.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext0));
      assertFalse(defaultDeserializationContext_Impl1.equals((Object)defaultDeserializationContext_Impl0));
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
      assertEquals(0, CharacterEscapes.ESCAPE_NONE);
      assertEquals((-2), CharacterEscapes.ESCAPE_CUSTOM);
      assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext_Impl1, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      assertNotNull(simpleValueInstantiators0);
      
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      assertNotNull(objectBuffer0);
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectBuffer0.bufferedSize());
      assertEquals(0, objectBuffer0.initialCapacity());
      
      WritableTypeId.Inclusion writableTypeId_Inclusion0 = WritableTypeId.Inclusion.PARENT_PROPERTY;
      assertEquals(WritableTypeId.Inclusion.PARENT_PROPERTY, writableTypeId_Inclusion0);
      assertFalse(writableTypeId_Inclusion0.requiresObjectContext());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute(writableTypeId_Inclusion0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      jsonFactory1.setRootValueSeparator("");
      JsonFactory jsonFactory2 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory2.createParser("JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory1.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.weirdStringException("", class0, "JSON");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      defaultDeserializationContext0.isEnabled(mapperFeature0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getAttribute(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "])";
      objectArray0[1] = (Object) jsonToken0;
      objectArray0[2] = (Object) deserializerFactoryConfig0;
      objectArray0[3] = (Object) "";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "\"M<%XsEnn.lWT", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Throwable> class0 = Throwable.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectReader0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)120;
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)120;
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl3.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "JSON", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(26);
      Integer integer0 = new Integer(26);
      defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, "Es$_QuHyTN f", (JsonDeserializer<?>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean1 = defaultDeserializationContext_Impl1.hasDeserializationFeatures(820);
      assertTrue(boolean1 == boolean0);
      
      defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.copy();
      jsonFactory0.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser("SFe");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "p)@F");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.weirdStringException("SFe", class0, "");
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      defaultDeserializationContext_Impl0.invalidTypeIdException(collectionLikeType0, "N/A", "(VW[kI");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      simpleKeyDeserializers1.addDeserializer(class1, (KeyDeserializer) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[0];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2827, (-1046));
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      MapLikeType mapLikeType0 = typeFactory1.constructMapLikeType(class2, class0, class1);
      String string0 = "aE.RIKlRC/^b&al";
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(mapLikeType0, "aE.RIKlRC/^b&al");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'aE.RIKlRC/^b&al' as a subtype of [map-like type; class org.evosuite.runtime.mock.java.text.MockDateFormat, [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType] -> [simple type, class org.evosuite.runtime.mock.java.text.MockDateFormat]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(objectMapper0, simpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("n0P@-^'R^", false);
      typeFactory0.withClassLoader(classLoader0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(3);
      Class<DateFormat> class0 = DateFormat.class;
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      Class<String> class1 = String.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class1, jsonToken0, "ftdUr$zSrOP", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      jsonFactory2.setRootValueSeparator("C~");
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      defaultDeserializationContext_Impl1.weirdStringException("$F~dO9Ak*33z", class1, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      Class<Object> class0 = Object.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(resolvedRecursiveType0, class0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      defaultDeserializationContext_Impl0.getDeserializationFeatures();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectReader0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jsonNodeFactory0;
      objectArray0[3] = (Object) contextAttributes0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) resolvedRecursiveType0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException("", class0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(deserializerFactoryConfig0, deserializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      MapLikeType mapLikeType2 = mapLikeType1.withKeyValueHandler(deserializerFactory0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType2, mapLikeType0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "q@!l";
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) mapLikeType0;
      objectArray0[3] = (Object) "q@!l";
      objectArray0[4] = (Object) mapLikeType1;
      objectArray0[5] = (Object) referenceType0;
      objectArray0[6] = (Object) jsonToken0;
      objectArray0[7] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) referenceType0, jsonToken0, "q@!l", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      Class<SimpleType> class1 = SimpleType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentType(simpleType0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) simpleType0;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      objectArray0[2] = (Object) jsonToken0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) typeBindings0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(javaType0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures(3);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[7];
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) atomicReference0;
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      objectArray0[5] = (Object) typeFactory0;
      objectArray0[6] = (Object) beanDeserializerFactory0;
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken1, "/cFDjt&'~.k_", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl2, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      jsonFactory2.setRootValueSeparator("C~");
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      defaultDeserializationContext_Impl1.weirdStringException("$F~dO9Ak*33z", class1, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = defaultDeserializationContext_Impl2.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      
      defaultDeserializationContext0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      jsonFactory0.copy();
      jsonFactory0.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class1 = Integer.class;
      defaultDeserializationContext_Impl0.weirdStringException("JSON", class1, (String) null);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      try { 
        defaultDeserializationContext0.parseDate("JSON");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value 'JSON': Cannot parse date \"JSON\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      JsonParser jsonParser0 = jsonFactory1.createParser((byte[]) null, 91, (-2263));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      beanDeserializerBuilder0.getValueInstantiator();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0, javaTypeArray0[0]);
      MapType mapType1 = mapType0.withKeyType(javaTypeArray0[0]);
      MapType mapType2 = mapType1.withContentValueHandler(contextAttributes0);
      resolvedRecursiveType0.refine(class1, typeBindings0, mapType2, javaTypeArray0);
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      try { 
        defaultDeserializationContext0.parseDate(")N<]blI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value ')N<]blI': Cannot parse date \")N<]blI\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("T@ws>Z;ed!!}eLg8");
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      jsonFactory0.setRootValueSeparator((String) null);
      JsonParser jsonParser0 = jsonFactory2.createParser("JSON");
      objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      String string0 = "`?V6xTTpB34dO\\u";
      defaultDeserializationContext_Impl0.weirdStringException("T@ws>Z;ed!!}eLg8", class0, string0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      defaultDeserializationContext_Impl2.isEnabled(deserializationFeature0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      DeserializationFeature deserializationFeature1 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      deserializationFeatureArray0[0] = deserializationFeature1;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3206);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl1.setAttribute(object0, placeholderForType0);
      Class<Void> class0 = Void.class;
      defaultDeserializationContext_Impl2.mappingException(class0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      jsonFactory0.copy();
      jsonFactory0.setRootValueSeparator("JSON");
      JsonParser jsonParser0 = jsonFactory0.createParser("SFe");
      objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.weirdStringException("SFe", class0, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      jsonFactory2.setRootValueSeparator("C~");
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      defaultDeserializationContext_Impl1.weirdStringException("$F~dO9Ak*33z", class1, "");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = defaultDeserializationContext_Impl2.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Object object0 = new Object();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute(object0, resolvedRecursiveType0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object[] objectArray0 = new Object[4];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<DateFormat> class0 = DateFormat.class;
      Class<Throwable> class1 = Throwable.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) resolvedRecursiveType0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings1);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(resolvedRecursiveType0);
      defaultDeserializationContext0.missingTypeIdException(javaType0, "!Qf6ISMO.,b/EpT(1u5");
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      TypeFactory typeFactory2 = TypeFactory.defaultInstance();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory3 = typeFactory2.withClassLoader(classLoader1);
      Class<Map> class2 = Map.class;
      MapType mapType0 = typeFactory3.constructRawMapType(class2);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext0.hasValueDeserializerFor(mapType0, atomicReference0);
      Class<Object> class3 = Object.class;
      // Undeclared exception!
      try { 
        typeFactory2.constructSpecializedType(javaType0, class3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Object not subtype of [recursive type; UNRESOLVED
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      defaultDeserializationContext_Impl0.getContextualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      Integer integer0 = new Integer((-1118));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.keyDeserializerInstance((Annotated) null, integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type java.lang.Integer; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<Object> class0 = Object.class;
      String string0 = "iJr6";
      Object[] objectArray0 = new Object[4];
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "iJr6", "iJr6", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot construct instance of %s (no Creators, like default construct, exist): %s", "\"h d:lsxcl7\"G");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Cannot construct instance of %s (no Creators, like default construct, exist): %s", "\"h d:lsxcl7\"G", 237020160, sQLRecoverableException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, arrayType0, sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromDouble(deserializationContext0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      deserializerFactoryConfig1.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      String string0 = null;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, "DELEGATING");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.instantiationException((Class<?>) class1, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext0.hasValueDeserializerFor(mapType0, atomicReference0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(boolean0);
      
      boolean boolean1 = defaultDeserializationContext0.hasDeserializationFeatures((-81));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      Class<MapLikeType> class0 = MapLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      Class<String> class1 = String.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class1, bigInteger0, "$ia ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      EvoSuiteURL evoSuiteURL0 = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      BigDecimal bigDecimal0 = new BigDecimal(1425.87857101076);
      String string0 = "84<";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) deserializationContext0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) bigDecimal0;
      objectArray0[4] = (Object) deserializationContext0;
      objectArray0[5] = (Object) deserializationContext0;
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNumberValue(class0, bigDecimal0, "84<", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures(26);
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[4];
      defaultDeserializationContext_Impl0.copy();
      objectArray0[0] = (Object) deserializers_Base0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object object0 = new Object();
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      Object object2 = new Object();
      objectArray0[4] = object2;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class1, "Missig typeid when trying to resolve subty^e of %R", "Missig typeid when trying to resolve subty^e of %R", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      Class<MapType> class0 = MapType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      jsonFactory0.copy();
      jsonFactory1.setInputDecorator((InputDecorator) null);
      JsonParser jsonParser0 = jsonFactory1.createParser("SFe");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(2099);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      BaseSettings baseSettings1 = baseSettings0.withInsertedAnnotationIntrospector((AnnotationIntrospector) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory1.createParser("JSON");
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue("JSON", (Object) deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std1);
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures((-2968));
      assertTrue(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Object> class0 = Object.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      Class<Integer> class1 = Integer.class;
      Class<ReferenceType> class2 = ReferenceType.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class1, class2, objectMapper1);
      ObjectIdGenerator<BuilderBasedDeserializer> objectIdGenerator0 = (ObjectIdGenerator<BuilderBasedDeserializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) deserializationFeature0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "Trailing token (of type %s) found after value (bound as %s): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`", "Trailing token (of type %s) found after value (bound as %s): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.getFactory();
      defaultDeserializationContext_Impl1.getArrayBuilders();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory2 = new BeanDeserializerFactory(deserializerFactoryConfig3);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory2);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl2.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) null);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<DateFormat> class0 = DateFormat.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructCollectionType(class1, class1);
      typeFactory1.findClass("com.fasterxml.jackson.databind.AnnotationIntrospector");
      typeBindings0.equals(typeResolutionContext_Basic0);
      typeResolutionContext_Basic0.resolveType(class0);
      typeResolutionContext_Basic0.resolveType(class0);
      Class<MapLikeType> class2 = MapLikeType.class;
      JsonDeserializer<BeanDeserializer> jsonDeserializer0 = (JsonDeserializer<BeanDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "N/A", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      Object object0 = new Object();
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      SQLDataException sQLDataException0 = new SQLDataException("iJr6");
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class0, objectBuffer0, sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "&T1\"9FJnYl~8w7'D 81");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getFactory();
      defaultDeserializationContext_Impl0.getArrayBuilders();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = (DefaultDeserializationContext.Impl)objectReader0._context;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) arrayNode0;
      objectArray0[2] = (Object) deserializerFactoryConfig0;
      objectArray0[3] = (Object) jsonParser0;
      objectArray0[4] = (Object) objectNode0;
      objectArray0[5] = (Object) objectNode0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "";
      objectArray0[8] = (Object) jsonNodeFactory0;
      try { 
        defaultDeserializationContext_Impl2.reportWrongTokenException(jsonParser0, jsonToken0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, (Object) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.leaseObjectBuffer();
      TypeFactory.defaultInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, 2, (int) (byte)0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      defaultDeserializationContext0.wrongTokenException(jsonParser0, jsonToken0, "JSON");
      Class<SimpleType> class1 = SimpleType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((Class<?>) class1, "L", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Cannot access contents of TextNode as binary due to broken Base64 encoding: %s");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getFactory();
      Class<ArrayType> class0 = ArrayType.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '`';
      charArray0[2] = '~';
      charArray0[3] = 'i';
      charArray0[4] = ']';
      charArray0[5] = '*';
      charArray0[6] = 'G';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, (-2246), (-2));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory.defaultInstance();
      ClassLoader.getSystemClassLoader();
      defaultDeserializationContext0.getArrayBuilders();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<SimpleType> class0 = SimpleType.class;
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.textNode("");
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleUnexpectedToken((Class<?>) class0, (JsonParser) filteringParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory1.constructRawMapType(class0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      UnaryOperator<Throwable> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<MockSimpleDateFormat> unaryOperator1 = UnaryOperator.identity();
      atomicReference0.getAndUpdate(unaryOperator0);
      defaultDeserializationContext0.hasValueDeserializerFor(mapType0, atomicReference0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) typeFactory1;
      objectArray0[2] = (Object) unaryOperator0;
      objectArray0[3] = (Object) unaryOperator0;
      objectArray0[4] = (Object) unaryOperator1;
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonDeserializer<?>) coreXMLDeserializers_Std0, jsonToken0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) simpleValueInstantiators0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, ")AiK", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<DateFormat> class0 = DateFormat.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      Class<LinkedList> class1 = LinkedList.class;
      typeFactory0.constructCollectionType(class1, class1);
      typeFactory1.findClass("com.fasterxml.jackson.databind.AnnotationIntrospector");
      typeBindings0.equals(typeResolutionContext_Basic0);
      typeResolutionContext_Basic0.resolveType(class0);
      typeResolutionContext_Basic0.resolveType(class0);
      JsonDeserializer<BeanDeserializer> jsonDeserializer0 = (JsonDeserializer<BeanDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "N/A", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.getFactory();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<DateFormat> class0 = DateFormat.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      typeBindings0.equals(typeResolutionContext_Basic0);
      SimpleType simpleType0 = (SimpleType)typeResolutionContext_Basic0.resolveType(class0);
      simpleType0.withStaticTyping();
      defaultDeserializationContext_Impl0.unknownTypeException(simpleType0, "N/A", "");
      defaultDeserializationContext_Impl0.getParser();
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(14);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleKeyDeserializers simpleKeyDeserializers1 = simpleKeyDeserializers0.addDeserializer(class0, (KeyDeserializer) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<DateFormat> class0 = DateFormat.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      typeBindings0.equals(typeResolutionContext_Basic0);
      typeResolutionContext_Basic0.resolveType(class0);
      typeResolutionContext_Basic0.resolveType(class0);
      String string0 = "N/A";
      MockDate mockDate0 = new MockDate(9999, 9999, 9999, 9999, 1, 9999);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonToken0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) jsonToken0;
      try { 
        defaultDeserializationContext0.reportMissingContent("Unexpected end-of-input when binding data into %s", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<String> class0 = String.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      defaultDeserializationContext_Impl0.getDeserializationFeatures();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class1);
      Object object0 = new Object();
      ArrayType arrayType1 = arrayType0.withContentValueHandler(object0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      ArrayType arrayType3 = arrayType2.withTypeHandler(arrayType1);
      javaTypeArray0[0] = (JavaType) arrayType3;
      // Undeclared exception!
      try { 
        typeFactory0.constructParametricType(class0, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.String with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<String> class0 = String.class;
      String string0 = "*7wLEuAwo?*zvW";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.instantiationException(class0, "*7wLEuAwo?*zvW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) "problem handler tried to resolve into non-subtype: ";
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      defaultDeserializationContext0.mappingException("problem handler tried to resolve into non-subtype: ", objectArray0);
      defaultDeserializationContext0.mappingException("i6=#NXxk}:aVPzwNo,");
      try { 
        defaultDeserializationContext0.reportMappingException("i6=#NXxk}:aVPzwNo,", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // i6=#NXxk}:aVPzwNo,
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      ObjectMapper objectMapper1 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      beanProperty_Bogus0.getType();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) objectMapper1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) objectMapper1;
      objectArray0[4] = (Object) objectMapper1;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, (JsonParser) null, "N/A", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.PlaceholderForType` (no Creators, like default construct, exist): N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateFormat0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1345);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1365), objectMapper1, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 114, false);
      uTF8JsonGenerator0.getSchema();
      ObjectReader objectReader1 = objectMapper0.reader((FormatSchema) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      String string0 = "~.o'sa?Va&qd";
      jsonFactory0.setRootValueSeparator("~.o'sa?Va&qd");
      JsonParser jsonParser0 = jsonFactory1.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext0);
      beanDeserializerBuilder0.getValueInstantiator();
      Class<Integer> class1 = Integer.class;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class1;
      objectArray0[1] = (Object) "~.o'sa?Va&qd";
      objectArray0[2] = (Object) objectReader1;
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("&E5 114I", "&E5 114I", (-2591), sQLClientInfoException0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      Integer integer0 = new Integer((-2591));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
      try { 
        objectMapper0.readValue(jsonParser0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (-2591)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(deserializerFactoryConfig0);
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes1);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("Ml6$UZ{)4fbpA");
      JsonParser jsonParser0 = jsonFactory1.createParser((byte[]) null, 59, (-2263));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      beanDeserializerBuilder0.getValueInstantiator();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) ")N<]blI";
      objectArray0[2] = (Object) contextAttributes0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) beanDeserializerModifier0;
      objectArray0[6] = (Object) class0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      objectArray0[8] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.String` (although at least one Creator exists): JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      Class<Object> class1 = Object.class;
      Class<JsonDeserializer> class2 = JsonDeserializer.class;
      typeFactory0.constructMapType(class0, class1, class2);
      Object object0 = new Object();
      Object object1 = new Object();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(object1);
      objectReader0._considerFilter((JsonParser) null, true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) typeFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, "ibd=gxh}plT9:x", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes1);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("JSON");
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext_Impl0.setAttribute(arrayNode0, objectNode0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Object> class0 = Object.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, deserializationFeature0);
      ObjectIdGenerator<BuilderBasedDeserializer> objectIdGenerator0 = (ObjectIdGenerator<BuilderBasedDeserializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory3.createNonBlockingByteArrayParser();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jsonpCharacterEscapes0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jsonFactory0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) nonBlockingJsonParser0;
      objectArray0[6] = (Object) deserializationFeature0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, (ValueInstantiator) null, nonBlockingJsonParser0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      injectableValues_Std0.addValue("JSON", (Object) jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createParser("");
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.mappingException("JSON");
      String string0 = "SF=hTAXIZhTI ";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) objectMapper0;
      URL uRL0 = MockURL.getHttpExample();
      try { 
        objectReader0.readValues(uRL0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures(26);
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) deserializers_Base0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "%@)~a#$c", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      String string0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, (String) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonToken0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) jsonToken0;
      objectArray0[6] = (Object) deserializerFactory0;
      objectArray0[7] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken0, "Cannot upgrade from an instance of ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.deserializerModifiers();
      beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<WritableTypeId.Inclusion> class0 = WritableTypeId.Inclusion.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      defaultDeserializationContext0.mappingException(class0, jsonToken0);
      String string0 = "#rJ^dG}BE";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("#rJ^dG}BE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(26);
      Integer integer0 = new Integer(26);
      JsonDeserializer<String> jsonDeserializer0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, "cdgA!TZ}Nf", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      deserializerFactoryConfig0.keyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) valueInstantiators_Base0;
      Object object0 = new Object();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      deserializerFactoryConfig0.abstractTypeResolvers();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig2.withDeserializerModifier(beanDeserializerModifier0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) null, "Cannot construct instance of %s (no Creators, like default construct, exist): %s", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Class<SimpleType> class0 = SimpleType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
      Class<CollectionLikeType> class1 = CollectionLikeType.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class1, "s.!5z,}nF2i]DLU#3`O", "($aM|e7N63cOo*<ZQ5Y");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.getFactory();
      MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
      defaultDeserializationContext_Impl0.getArrayBuilders();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Could not resolve type id '%s' into a subtype of %s", "", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", ".^8Q", 268, sQLClientInfoException1);
      ((DeserializationContext)defaultDeserializationContext_Impl1)._isCompatible(class0, sQLRecoverableException0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId((Object) null, (ObjectIdGenerator<?>) null, simpleObjectIdResolver0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "W [");
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures(26);
      Integer integer0 = new Integer(26);
      defaultDeserializationContext_Impl0.reportUnknownProperty(integer0, "Invalid configuration: values of type %s cannot be merged", (JsonDeserializer<?>) null);
      Class<DateFormat> class0 = DateFormat.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) deserializers_Base0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "%@)~a#$c", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS;
      boolean boolean0 = defaultDeserializationContext_Impl1.isEnabled(deserializationFeature0);
      assertFalse(boolean0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS", ".^8Q", hashMap0);
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(hashMap0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, "", 268, sQLClientInfoException0);
      boolean boolean1 = ((DeserializationContext)defaultDeserializationContext_Impl1)._isCompatible(class0, (Object) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      boolean boolean2 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(268);
      assertFalse(boolean2 == boolean1);
      
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class1 = CollectionType.class;
      defaultDeserializationContext_Impl2.mappingException(class1, jsonToken0);
      assertEquals(0, defaultDeserializationContext_Impl2.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Object> class0 = Object.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "&%cw @7<+7 3", "O|H:3vR$G(7(#z!", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      objectMapper1.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      String string0 = null;
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      // Undeclared exception!
      try { 
        jsonFactory2.createParser((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper1.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
      defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      Class<Object> class0 = Object.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, objectMapper0);
      ObjectIdGenerator<BuilderBasedDeserializer> objectIdGenerator0 = (ObjectIdGenerator<BuilderBasedDeserializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      defaultDeserializationContext_Impl0.findObjectId(deserializationFeature0, objectIdGenerator0, simpleObjectIdResolver0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectReader objectReader0 = objectMapper1.readerWithView(class0);
      objectReader0.createDeserializationContext((JsonParser) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      objectReader0.with(jsonParser_Feature0);
      // Undeclared exception!
      try { 
        objectMapper1.readValue((JsonParser) null, (TypeReference<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader((ClassLoader) null);
      Class<DateFormat> class0 = DateFormat.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory1, typeBindings0);
      typeBindings0.equals(typeResolutionContext_Basic0);
      JavaType javaType0 = typeResolutionContext_Basic0.resolveType(class0);
      typeResolutionContext_Basic0.resolveType(class0);
      defaultDeserializationContext_Impl0.unknownTypeException(javaType0, "N/A", "");
      defaultDeserializationContext_Impl0.getParser();
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findClass("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "N/A";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("N/A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getIncompleteParameter();
      defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, (Object) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext0.leaseObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.mappingException("i6=#NXxk}:aVPzwNo,");
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(26);
      Integer integer0 = new Integer(26);
      defaultDeserializationContext_Impl0.reportUnknownProperty(beanDeserializerFactory0, "Es$_QuHyTN f", (JsonDeserializer<?>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean1 = defaultDeserializationContext_Impl1.hasDeserializationFeatures(820);
      assertTrue(boolean1 == boolean0);
      
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      defaultDeserializationContext_Impl0.endOfInputException(class0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<CollectionType> class0 = CollectionType.class;
      deserializationContext0.endOfInputException(class0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }
}
