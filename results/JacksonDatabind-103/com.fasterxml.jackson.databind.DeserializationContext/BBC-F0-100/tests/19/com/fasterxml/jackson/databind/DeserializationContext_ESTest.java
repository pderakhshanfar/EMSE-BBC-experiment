/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:54:18 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.lang.annotation.Annotation;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.FormatFlagsConversionMismatchException;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      MockDate mockDate0 = new MockDate((-3L));
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDate0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) readerBasedJsonParser0, (Class<?>) class0, jsonToken0, "JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(2);
      assertFalse(boolean0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TimeZone timeZone0 = defaultDeserializationContext0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.checkUnresolvedObjectId();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.wrongTokenException(jsonParser0, class0, jsonToken0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) null, jsonToken0, "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object[] objectArray0 = new Object[8];
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException("", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      deserializationContext0.mappingException(class0, jsonToken0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      objectBuffer0.resetAndStart();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(12, objectBuffer1.initialCapacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.keyDeserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLFeatureNotSupportedException0);
      boolean boolean0 = defaultDeserializationContext0.hasValueDeserializerFor(simpleType0, atomicReference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 192);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(coreXMLDeserializers_Std0, (BeanProperty) null, (JavaType) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      deserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 144);
      defaultDeserializationContext_Impl0.handlePrimaryContextualization(coreXMLDeserializers_Std0, (BeanProperty) null, (JavaType) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonParser jsonParser1 = defaultDeserializationContext0.getParser();
      assertEquals(0, jsonParser1.getTextOffset());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext0.getNodeFactory();
      assertNull(jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext0.getNodeFactory();
      assertNotNull(jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray("_'BQ,r]$5GSEHD!4Y");
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      int int0 = defaultDeserializationContext0.getDeserializationFeatures();
      assertEquals(237020304, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ObjectReader> class0 = ObjectReader.class;
      JsonFormat.Value jsonFormat_Value0 = defaultDeserializationContext0.getDefaultPropertyFormat(class0);
      assertFalse(jsonFormat_Value0.hasPattern());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext((JsonParser) null);
      StdDateFormat stdDateFormat0 = (StdDateFormat)((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_TRAILING_TOKENS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext0.getConfig();
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 2, (DataInput) null, objectReader0, byteQuadsCanonicalizer0, 1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(uTF8DataInputJsonParser0);
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext0.getConfig();
      assertEquals(0, deserializationConfig0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Base64Variant base64Variant0 = defaultDeserializationContext0.getBase64Variant();
      assertEquals((byte)61, base64Variant0.getPaddingByte());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object object0 = defaultDeserializationContext0.getAttribute(iOContext0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(resolvedRecursiveType0);
      assertTrue(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(javaType0);
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectIdGenerator<Annotation> objectIdGenerator0 = (ObjectIdGenerator<Annotation>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      deserializationContext0.findObjectId((Object) null, objectIdGenerator0, (ObjectIdResolver) null);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectIdGenerator<ReferenceType> objectIdGenerator0 = (ObjectIdGenerator<ReferenceType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      deserializationContext0.findObjectId(objectMapper0, objectIdGenerator0, simpleObjectIdResolver0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findNonContextualValueDeserializer(simpleType0);
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findContextualValueDeserializer(simpleType0, beanProperty_Bogus0);
      assertEquals(AccessPattern.ALWAYS_NULL, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Class<?> class1 = defaultDeserializationContext0.findClass("com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std");
      assertEquals("class com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std", class1.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<Void> class0 = Void.TYPE;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      Class<HashMap> class0 = HashMap.class;
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<List> class0 = List.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertTrue(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      boolean boolean0 = defaultDeserializationContext0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<MapType> class0 = MapType.class;
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, (Object) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, jsonToken0, "Cannot coerce Number (%s) %s (enable `%s.%s` to allow)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.weirdKeyException(class0, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(327);
      // Undeclared exception!
      try { 
        deserializationContext0.setAttribute(objectMapper0, placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "%iX-", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Throwable> class0 = Throwable.class;
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) deserializationContext0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(class0, jsonToken0, "OmWyfI0D&s$uj%gO", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object[] objectArray0 = new Object[9];
      Class<CollectionType> class0 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(class0, jsonToken0, "HCSNpK<", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<MapType> class0 = MapType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[8];
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "iCM7Z*wuX;+[l7@(sQ~", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: iCM7Z*wuX;+[l7@(sQ~
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) arrayNode0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "Qch%ao*/ KckRST", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != com.fasterxml.jackson.databind.node.ArrayNode
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonDeserializer<JsonEncoding> jsonDeserializer0 = (JsonDeserializer<JsonEncoding>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[5];
      try { 
        defaultDeserializationContext0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_OBJECT: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) simpleType0, jsonToken0, "Wn8r6AUv{)~%,sX", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = s, Flags = ,
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[5] = javaType0;
      MapType mapType0 = MapType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[5]);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) mapType0, jsonToken0, "", (Object[]) javaTypeArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(jsonParser0, jsonToken0, "lYx%jadltJtB7ZDsRJ,", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'j'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "@";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) filteringParserDelegate0, jsonToken0, "g,LzC&^fEa%CF~dG", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[3];
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonParser0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: JSON
         //  at [Source: (String)\"JSON\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) deserializerFactoryConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) null, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_STRING) found after value (bound as `com.fasterxml.jackson.databind.type.ReferenceType`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException("%Dg(Z$L:v,-ORQ~i$6o", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("No Object Id found for an instance of %s, to assign to property '%s'", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException("%f(", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[7];
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<ArrayType> class0 = ArrayType.class;
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((Class<?>) class0, "%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((Class<?>) class0, "Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ObjectReader> class0 = ObjectReader.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, ";XWq%x3~14", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      Object[] objectArray0 = new Object[8];
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "}gzA0T_}MycjYU", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // }gzA0T_}MycjYU
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<PlaceholderForType> jsonDeserializer0 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "Cannot deserialize instance of %s out of %s token", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "%xZ)&$`M(1", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<PlaceholderForType> jsonDeserializer0 = (JsonDeserializer<PlaceholderForType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      Object[] objectArray0 = new Object[1];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "Current token (%s) not of boolean type", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not of boolean type
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JavaType) collectionType0, "x!%u[W;{Q*APA)R7~/", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'u'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JavaType) null, "!(oG%X-f`9zU9$", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JavaType) simpleType0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object[] objectArray0 = new Object[3];
      try { 
        deserializationContext0.reportInputMismatch((JavaType) null, "h", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // h
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "%w_/mE=%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'w'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) arrayList0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) null, "Cm@F|'EBkKD%f[:8", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.util.ArrayList
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "JSON", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<JsonEncoding> class0 = JsonEncoding.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, javaType0, deserializationConfig0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(deserializationConfig0, annotationIntrospector0, true, propertyName0);
      Object[] objectArray0 = new Object[6];
      try { 
        defaultDeserializationContext0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder0, "\"BFan3k", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property `` (of type `com.fasterxml.jackson.core.JsonEncoding`): \"BFan3k
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, (-3087));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 69, (-3755));
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      byte[] byteArray0 = new byte[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 3, 16);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(jsonGenerator_Feature0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, (JavaType) collectionType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.core.JsonGenerator$Feature cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      try { 
        defaultDeserializationContext0.readValue((JsonParser) filteringParserDelegate0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.ReferenceType`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Bogus0, (Class<ByteArrayInputStream>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.io.ByteArrayInputStream`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      Class<DateFormat> class0 = DateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, simpleType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Std0, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte) (-73), pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-663), (-1), false);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) readerBasedJsonParser0, (BeanProperty) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(jsonParser0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, (JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.TreeTraversingParser cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.parseDate("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      try { 
        defaultDeserializationContext0.parseDate("kA)bjq*=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value 'kA)bjq*=o': Cannot parse date \"kA)bjq*=o\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, (TokenFilter) null, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.missingTypeIdException(mapType0, "from-boolean");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException("|S%//Jjg1LNzd", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '/'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "_q%c?pe@GFFZXtki+";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("_q%c?pe@GFFZXtki+", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.keyDeserializerInstance((Annotated) null, dateFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type java.text.SimpleDateFormat; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.isEnabled((DeserializationFeature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.invalidTypeIdException(resolvedRecursiveType0, (String) null, " does not support them");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException((Class<?>) class0, (Throwable) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<Void> class0 = Void.class;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, (String) null, "L1uvJ:hb[<}y%.", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '.'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<SimpleType> class0 = SimpleType.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "", "No Object Id found for an instance of %s, to assign to property '%s'", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) deserializationFeature0;
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdStringValue(class0, "", "Split surrogate on writeRaw() input (last character): first character 0x%4x", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.DeserializationFeature
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionType> class0 = CollectionType.class;
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "", (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, 2, "u%m&", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'm'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Float float0 = new Float(956.8543501967);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNumberValue(class0, float0, "%0f_g|gdO=B*0;o3", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0f
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object[] objectArray0 = new Object[2];
      Class<JsonEncoding> class0 = JsonEncoding.class;
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Long long0 = Long.valueOf(485L);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, long0, "UaQQz~&G%Xf)E", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.ObjectReader
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      Short short0 = new Short((short)86);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, short0, "com.fasterxml.jackson.databind.introspect.AnnotationCollector$NCollector", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<Object> class0 = Object.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue(javaType0, filteringParserDelegate0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "B%P>Jo,aSN c", "B%P>Jo,aSN c", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<InputStream> class0 = InputStream.class;
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "wF!B`)=9", "a4lrO0E%0EWp)VYS8}", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %0E
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "H\"B7S6n>8,kgO$3%5>T", "Cannot deserialize value of type %s from number %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdKey(class0, "", "'jO1^}S;HeT9:o%e@;", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, (String) null, "2%(apGfIn~/", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = a, Flags = (
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, (String) null, "c$^CVtO^S@O3j>[l+", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownTypeId((JavaType) null, "", classNameIdResolver0, "C4%hoC'~t??k#m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "%Dg(Z$L:v,-ORQ~i$6o", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Throwable> class0 = Throwable.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "Cannot deserialize value of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<DateFormat> class0 = DateFormat.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "=*tMH^pgKv%dvt", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.Class
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<JsonEncoding> class0 = JsonEncoding.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "I%,x~aQ!t|Q", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = x, Flags = ,
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1299, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "l[p>]=i", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      Class<ObjectReader> class0 = ObjectReader.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectBuffer0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 1, 0, true);
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken((Class<?>) class0, (JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-246));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      // Undeclared exception!
      try { 
        deserializationContext0.handleMissingTypeId(placeholderForType0, classNameIdResolver0, "qLjP3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "c/1=cl\"v>u8C%|nb0", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '|'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapType> class0 = MapType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.withArray("cc'oWVHM)E.K08yx");
      byte[] byteArray0 = new byte[9];
      BinaryNode binaryNode0 = arrayNode0.binaryNode(byteArray0);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(binaryNode0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "cc'oWVHM)E.K08yx", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.endOfInputException(class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class0, class0, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.missingTypeIdException((JavaType) null, "'j.bjqY=o");
      Class<MockDateFormat> class0 = MockDateFormat.class;
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, (Object) null, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: 'j.bjqY=o
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException(class1);
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, arrayNode0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `com.fasterxml.jackson.databind.module.SimpleModule` out of null token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findRootValueDeserializer(referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2021), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectReader> class0 = ObjectReader.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ArrayType arrayType1 = arrayType0.withContentTypeHandler(simpleObjectIdResolver0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(arrayType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.annotation.SimpleObjectIdResolver cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Object> class0 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class java.lang.Object, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        deserializationContext0.findObjectId(pipedInputStream0, (ObjectIdGenerator<?>) null, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      Class<HashMap> class1 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) mapType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findNonContextualValueDeserializer(collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(defaultDeserializationContext0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<MapLikeType> class0 = MapLikeType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<String> class1 = String.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) resolvedRecursiveType0);
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(referenceType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [reference type, class com.fasterxml.jackson.databind.type.MapLikeType<java.lang.String><[recursive type; UNRESOLVED>]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = TypeFactory.unknownType();
      PropertyName propertyName0 = new PropertyName("7WEZLf`RwN|e", "7WEZLf`RwN|e");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(javaType0, classNameIdResolver0, "JSON", true, javaType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, javaType0, propertyName0, asExternalTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 600, propertyName0, propertyMetadata0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer(javaType0, creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      try { 
        defaultDeserializationContext0.findKeyDeserializer(simpleType0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType]
         //  at [Source: (com.fasterxml.jackson.databind.type.SimpleType); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Object object0 = new Object();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        defaultDeserializationContext0.findInjectableValue(object0, (BeanProperty) null, simpleObjectIdResolver0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [java.lang.Object@424cb00e]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<SimpleType> class1 = SimpleType.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      // Undeclared exception!
      try { 
        deserializationContext0.findContextualValueDeserializer(mapType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer((JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<List> class1 = List.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      MapType mapType1 = mapType0.withContentValueHandler(arrayNode0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findContextualValueDeserializer(mapType1, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.node.ArrayNode cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayType> class0 = ArrayType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      try { 
        defaultDeserializationContext0.findContextualValueDeserializer(mapLikeType0, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.type.ArrayType, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      try { 
        defaultDeserializationContext0.findClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, beanDeserializerFactory0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned deserializer definition of type com.fasterxml.jackson.databind.deser.BeanDeserializerFactory; expected type JsonDeserializer or Class<JsonDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<ReferenceType> class0 = ReferenceType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible((Class<?>) null, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ReferenceType> class0 = ReferenceType.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLTimeoutException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<SimpleType> class0 = SimpleType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException(class0, (Throwable) null);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.constructType((Class<?>) null);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findContextualValueDeserializer(javaType0, beanProperty_Bogus0);
      assertFalse(jsonDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(deserializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      Class<Integer> class0 = Integer.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException(class0, jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      // Undeclared exception!
      try { 
        deserializationContext0.wrongTokenException((JsonParser) null, javaType0, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      deserializationContext0.wrongTokenException((JsonParser) jsonParserSequence0, jsonToken0, "nqdNg]?Q");
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<String> class0 = String.class;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class0, (JsonParser) filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.String`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((Class<?>) class0, "'?84P7NB", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      MapperFeature mapperFeature0 = MapperFeature.USE_GETTERS_AS_SETTERS;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getConfig();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("'j.bjqY=o", "'j.bjqY=o", (-1946));
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, objectMapper0, sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `org.evosuite.runtime.mock.java.text.MockDateFormat`, problem: 'j.bjqY=o
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      try { 
        defaultDeserializationContext0.reportUnknownProperty(arrayNode0, "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat\" (class com.fasterxml.jackson.databind.node.ArrayNode), not marked as ignorable
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: com.fasterxml.jackson.databind.node.ArrayNode[\"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonDeserializer<BeanDeserializer> jsonDeserializer0 = (JsonDeserializer<BeanDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty((Object) null, "]^(", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.reportUnknownProperty(objectMapper0, "?g>!8", (JsonDeserializer<?>) null);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[1];
      try { 
        deserializationContext0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.GERMAN;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, dateFormat0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, (TypeFactory) null);
      try { 
        defaultDeserializationContext0.handleMissingTypeId(simpleType0, classNameIdResolver0, "qLjP3");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType]: qLjP3
         //  at [Source: (com.fasterxml.jackson.databind.type.SimpleType); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "FTSwvNC2|jx", classNameIdResolver0, ",6*w&wpE4C");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'FTSwvNC2|jx' as a subtype of null: ,6*w&wpE4C
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` out of NOT_AVAILABLE token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[9];
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "'j.bjqY=o", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 'j.bjqY=o
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      try { 
        objectMapper0.convertValue((Object) resolvedRecursiveType0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.annotation.SimpleObjectIdResolver` (although at least one Creator exists): no String-argument constructor/factory method to deserialize from String value ('com.fasterxml.jackson.annotation.SimpleObjectIdResolver')
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.ObjectMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Object[] objectArray0 = new Object[1];
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, jsonParser0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.annotation.SimpleObjectIdResolver` (although at least one Creator exists): 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Integer integer0 = new Integer(2592);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      Class<ArrayType> class0 = ArrayType.class;
      try { 
        objectMapper0.readValue("2", class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleMissingInstantiator() for type class com.fasterxml.jackson.databind.type.ArrayType returned value of type `java.lang.Integer`
         //  at [Source: (String)\"2\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      Class<ArrayType> class0 = ArrayType.class;
      ArrayType arrayType0 = objectMapper0.readValue("2", class0);
      assertNull(arrayType0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class1, 2, "I0aZE4C>f,", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.ObjectIdResolver` from number 2: I0aZE4C>f,
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ObjectReader> class0 = ObjectReader.class;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "?", (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.ObjectReader` from String \"?\": null
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<JsonSerializer> class0 = JsonSerializer.class;
      Object[] objectArray0 = new Object[6];
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "T0P@!Rwn`LjL<(", "T0P@!Rwn`LjL<(", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `com.fasterxml.jackson.databind.JsonSerializer` from String \"T0P@!Rwn`LjL<(\": T0P@!Rwn`LjL<(
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonDeserializer<Void> jsonDeserializer0 = (JsonDeserializer<Void>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, (Object) null, ",6*w&wpE4C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ArrayType> class0 = ArrayType.class;
      try { 
        objectMapper0.readValue("2", class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.ArrayType` (no Creators, like default construct, exist): no int/Int-argument constructor/factory method to deserialize from Number value (2)
         //  at [Source: (String)\"2\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getArrayBuilders();
      ArrayBuilders arrayBuilders0 = deserializationContext0.getArrayBuilders();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertNotNull(arrayBuilders0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        deserializationContext0.returnObjectBuffer((ObjectBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JavaType javaType0 = TypeFactory.unknownType();
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(javaType0, (BeanProperty) null);
      KeyDeserializer keyDeserializer1 = defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, keyDeserializer0);
      assertSame(keyDeserializer0, keyDeserializer1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-126));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = defaultDeserializationContext_Impl0.hasValueDeserializerFor(placeholderForType0, atomicReference0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(objectIdGenerators_StringIdGenerator0, class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue(jsonMappingException0, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      boolean boolean0 = defaultDeserializationContext0.hasSomeOfFeatures(728);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      boolean boolean0 = deserializationContext0.hasSomeOfFeatures((-2560));
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures(0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasDeserializationFeatures((-3087));
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, (JsonDeserializer<?>) null, object0, "AUTO_CLOSE_JSON_CONTENT");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"AUTO_CLOSE_JSON_CONTENT\" (class java.lang.Object), not marked as ignorable
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.lang.Object[\"AUTO_CLOSE_JSON_CONTENT\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      boolean boolean0 = defaultDeserializationContext_Impl0.isEnabled(deserializationFeature0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Vector<PropertyName> vector0 = new Vector<PropertyName>(2337, 2337);
      DeserializationContext deserializationContext0 = defaultDeserializationContext0.setAttribute(jsonNodeFactory0, vector0);
      assertEquals(237020304, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int int0 = defaultDeserializationContext_Impl0.getDeserializationFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DeserializerFactory deserializerFactory0 = defaultDeserializationContext_Impl0.getFactory();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(deserializerFactory0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      // Undeclared exception!
      try { 
        deserializationContext0.wrongTokenException((JsonParser) null, class0, jsonToken0, "\u0007`SzpoSJIi[e");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getActiveView();
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "#~&)VsaTD}%Zb5", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = beanProperty_Bogus0.getType();
      PropertyName propertyName0 = PropertyName.construct("", "");
      ObjectIdGenerator<CollectionLikeType> objectIdGenerator0 = (ObjectIdGenerator<CollectionLikeType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(javaType0, propertyName0, objectIdGenerator0, (JsonDeserializer<?>) null, (SettableBeanProperty) null, simpleObjectIdResolver0);
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId(objectIdReader0, (Object) "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No Object Id found for an instance of `java.lang.String`, to assign to property '{}'
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.missingTypeIdException((JavaType) null, "'j.bjqY=o");
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Object[] objectArray0 = new Object[2];
      try { 
        deserializationContext0.reportMissingContent("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, tokenFilter0, filteringParserDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.core.filter.TokenFilter`: incompatible types
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      MockDate mockDate0 = new MockDate((-1), (-1), (-3087), 3, 1750);
      Calendar calendar0 = defaultDeserializationContext0.constructCalendar(mockDate0);
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Fep2O+1m!", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(class0, jsonToken0, "[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%d'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1191), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      Class<Integer> class1 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException(class1, "<");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(arrayNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Date date0 = defaultDeserializationContext0.parseDate("5");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) jsonParserDelegate0, jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue((JsonParser) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<InputStream> class0 = InputStream.class;
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.io.InputStream` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.endOfInputException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        deserializationContext0.reportBadDefinition((JavaType) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "r*UaD!'~8c{6cY-Sz", "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("r*UaD!'~8c{6cY-Sz", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.mappingException("JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "d:~=Pp%uIiB", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'u'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.reportMappingException(" f,U!", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findClass("d7DH:<3Q )is9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-126));
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) placeholderForType0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Locale locale0 = defaultDeserializationContext0.getLocale();
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<ArrayType> jsonDeserializer0 = (JsonDeserializer<ArrayType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "C$f:", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch(javaType0, "Cannot deserialize Map key of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JavaType javaType0 = TypeFactory.unknownType();
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) null, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonParser) null, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      MockDateFormat mockDateFormat0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      assertNull(mockDateFormat0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<ReferenceType> class0 = ReferenceType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.unknownTypeException(resolvedRecursiveType0, "@", "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Class<Void> class0 = Void.class;
      defaultDeserializationContext_Impl0.weirdNumberException(bigDecimal0, class0, "JSON");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "%,>|]~}Wglz$.}.DUm", "%,>|]~}Wglz$.}.DUm");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("%,>|]~}Wglz$.}.DUm", jsonMappingException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAttribute(sQLSyntaxErrorException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParserDelegate0);
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }
}
