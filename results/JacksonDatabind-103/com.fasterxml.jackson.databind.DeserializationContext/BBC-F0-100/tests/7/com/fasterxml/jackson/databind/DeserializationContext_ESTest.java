/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:53:51 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.KeyDeserializers;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.NumericNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.ArrayBuilders;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import com.fasterxml.jackson.databind.util.RawValue;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.DataInput;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.text.DateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.FormatFlagsConversionMismatchException;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DeserializationContext_ESTest extends DeserializationContext_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      DeserializationProblemHandler deserializationProblemHandler1 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(deserializationProblemHandler0).when(deserializationProblemHandler1).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler1);
      ObjectReader objectReader0 = objectMapper1.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      ObjectNode objectNode1 = arrayNode0.objectNode();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, (Object) null, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleWeirdNativeValue() for type [simple type, class com.fasterxml.jackson.databind.type.CollectionLikeType] returned value of type class com.fasterxml.jackson.databind.deser.DeserializationProblemHandler$MockitoMock$1166405074
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TimeZone timeZone0 = defaultDeserializationContext0.getTimeZone();
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) timeZone0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) objectReader0;
      objectArray0[7] = (Object) timeZone0;
      objectArray0[8] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) null, "7A%oCQtz71(k{*|(rnz", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // o != com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      try { 
        defaultDeserializationContext0.findContextualValueDeserializer(collectionLikeType0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [collection-like type; class java.lang.Object, contains [simple type, class java.lang.Object]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.handleWeirdNativeValue(javaType0, objectReader0, (JsonParser) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper1.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[2];
      Class<MapType> class0 = MapType.class;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonParser jsonParser0 = jsonFactory0.createParser("?So");
      defaultDeserializationContext0.handleUnexpectedToken(class0, jsonParser0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class1, "?So", "?So", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.sql.ClientInfoStatus` from String \"?So\": DeserializationProblemHandler.handleWeirdStringValue() for type class java.sql.ClientInfoStatus returned value of type class com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[1];
      Class<InputStream> class0 = InputStream.class;
      Object object0 = new Object();
      JavaType javaType0 = objectMapper0.constructType(class0);
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.io.InputStream` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(basicClassIntrospector0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NullNode nullNode0 = NullNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nullNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 3006, 1, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(618, 3);
      defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "Failed to parse Date value '%s': %s", objectArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper1.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser1);
      Locale locale0 = defaultDeserializationContext0.getLocale();
      try { 
        defaultDeserializationContext0.reportUnknownProperty(locale0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring", (JsonDeserializer<?>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring\" (class java.util.Locale), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: java.util.Locale[\"com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySetterReferring\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultDeserializationContext0.handlePrimaryContextualization(jsonDeserializer0, (BeanProperty) null, mapType0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MapLikeType> class0 = MapLikeType.class;
      defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Bogus0, class0);
      Class<Void> class1 = Void.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "i |xz#jW@ L5.ID";
      objectArray0[4] = (Object) jsonNodeFactory0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) objectMapper1;
      objectArray0[7] = (Object) objectReader0;
      objectArray0[8] = (Object) defaultDeserializationContext0;
      defaultDeserializationContext0.handleWeirdStringValue(class1, (String) null, "i |xz#jW@ L5.ID", objectArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      DeserializationProblemHandler deserializationProblemHandler1 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler1).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler1);
      ObjectReader objectReader0 = objectMapper1.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = objectNode0.putArray("");
      ObjectNode objectNode1 = arrayNode0.objectNode();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(objectNode1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      defaultDeserializationContext0.handleWeirdNativeValue(javaType0, (Object) null, (JsonParser) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withValueHandler(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(mapType2).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      defaultDeserializationContext0.handleUnknownTypeId(javaType0, ":+&=Na2<xwo{AJiI", (TypeIdResolver) null, "Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      JavaType javaType0 = null;
      AtomicReference<Throwable> atomicReference0 = null;
      // Undeclared exception!
      try { 
        deserializationContext0.hasValueDeserializerFor((JavaType) null, (AtomicReference<Throwable>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(2339L);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(filteringParserDelegate0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.endOfInputException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper1.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      defaultDeserializationContext0.readValue(jsonParser0, class0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      defaultDeserializationContext0.constructType(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class1 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class1);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 237019136);
      NullNode nullNode0 = arrayNode0.nullNode();
      MapType mapType1 = mapType0.withContentValueHandler(nullNode0);
      MapType mapType2 = mapType1.withStaticTyping();
      MapType mapType3 = mapType2.withKeyValueHandler(mapType0);
      defaultDeserializationContext0.invalidTypeIdException(mapType3, "7]Zl])Jt", "9>xeNWF");
      defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (Class<MapLikeType>) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper1.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      Float float0 = new Float(0.0F);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) objectMapper1;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) objectReader0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) deserializationProblemHandler0;
      objectArray0[6] = (Object) "?So";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, float0, "]g)%-(AE", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-(A
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(class0);
      CollectionType collectionType2 = collectionType1.withValueHandler(collectionType0);
      CollectionType collectionType3 = collectionType2.withTypeHandler(collectionType1);
      CollectionLikeType collectionLikeType0 = collectionType3.withTypeHandler(collectionType1);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(collectionLikeType0).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(128);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory1.withModifier(typeModifier0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory1);
      JavaType javaType0 = defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "", classNameIdResolver0, "fb}yh&)Us}0");
      assertNotSame(javaType0, collectionType2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(128);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      typeFactory0.withModifier(typeModifier0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      JavaType javaType1 = defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "", classNameIdResolver0, "fb}yh&)Us}0");
      assertFalse(javaType1.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.enableDefaultTyping();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Date date0 = defaultDeserializationContext0.parseDate("2");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      objectMapper0.writerFor(class0);
      Class<InputStream> class1 = InputStream.class;
      Class<SettableBeanProperty> class2 = SettableBeanProperty.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class2, (List<JavaType>) vector0);
      Class<MapLikeType> class3 = MapLikeType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) collectionLikeType0;
      javaTypeArray0[1] = javaType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      vector0.trimToSize();
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = (JavaType) collectionLikeType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class3, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler(collectionLikeType0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) referenceType2, javaTypeArray0, javaTypeArray0[2], javaTypeArray0[1]);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(mapType0).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      JavaType javaType1 = defaultDeserializationContext0.handleMissingTypeId(placeholderForType0, (TypeIdResolver) null, "B^F#f8");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) objectReader0;
      objectArray0[1] = (Object) javaType1;
      try { 
        defaultDeserializationContext0.reportMappingException("B^F#f8", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // B^F#f8
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(javaType0).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1605);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      TypeFactory typeFactory2 = typeFactory1.withCache((LRUMap<Object, JavaType>) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory2);
      defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "com.fasterxml.jackson.databind.MappingJsonFactory", classNameIdResolver0, "");
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(placeholderForType0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any() , any(java.lang.Throwable.class));
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null);
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, objectIdGenerators_UUIDGenerator0, sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleInstantiationProblem() for type class com.fasterxml.jackson.databind.Module returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      LongNode longNode0 = new LongNode(2250L);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(longNode0);
      defaultDeserializationContext0.handleUnexpectedToken(class1, jsonToken0, jsonParser0, "Unexpected end-of-input when binding data into %s", objectArray0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forClassAnnotations(deserializationConfig0, (JavaType) null, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getType();
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportTrailingTokens((Class<?>) class0, (JsonParser) jsonParserSequence0, jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.JsonDeserializer.class) , any() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("com.fasterxml.jackson.databind.util.StdDateFormat");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0);
      objectReader0.createDeserializationContext(jsonParser0);
      Object object0 = new Object();
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer0 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, (Object) null, "com.fasterxml.jackson.databind.util.StdDateFormat");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      typeFactory0.constructRawCollectionType(class0);
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1605);
      TypeFactory typeFactory1 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
      TypeFactory typeFactory3 = typeFactory2.withCache((LRUMap<Object, JavaType>) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory3);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "com.fasterxml.jackson.databind.MappingJsonFactory", classNameIdResolver0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.MappingJsonFactory' as a subtype of $1606: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[0];
      Class<MapType> class0 = MapType.class;
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "Cannot deserialize Map key of type %s from String %s: %s", "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.MapType` from String \"Cannot deserialize Map key of type %s from String %s: %s\": DeserializationProblemHandler.handleWeirdStringValue() for type class com.fasterxml.jackson.databind.type.MapType returned value of type class com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withTypeHandler(beanDeserializerFactory0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      ObjectIdGenerator<MapLikeType> objectIdGenerator0 = (ObjectIdGenerator<MapLikeType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext_Impl0);
      PropertyName propertyName1 = PropertyName.construct("r*[<Q6N9k3V)x#", "r*[<Q6N9k3V)x#");
      beanDeserializerBuilder0.removeProperty(propertyName1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(jsonDeserializer0);
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct(javaType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, objectIdResolver0);
      try { 
        defaultDeserializationContext_Impl0.reportUnresolvedObjectId(objectIdReader0, (Object) "r*[<Q6N9k3V)x#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No Object Id found for an instance of `java.lang.String`, to assign to property ''
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(deserializationProblemHandler0).handleUnknownTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , anyString() , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1605);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      TypeFactory typeFactory2 = typeFactory1.withCache((LRUMap<Object, JavaType>) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory2);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "com.fasterxml.jackson.databind.MappingJsonFactory", classNameIdResolver0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.MappingJsonFactory' as a subtype of $1606: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.version();
      HashMap<Class<BufferedInputStream>, JsonDeserializer<SimpleType>> hashMap0 = new HashMap<Class<BufferedInputStream>, JsonDeserializer<SimpleType>>();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper1.enableDefaultTyping(objectMapper_DefaultTyping0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Locale> class0 = Locale.class;
      SQLException sQLException0 = new SQLException("Unexpected end-of-input when binding data into %s", (Throwable) null);
      Class<Object> class1 = Object.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<MockDateFormat> class2 = MockDateFormat.class;
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[4] = (JavaType) arrayType0;
      javaTypeArray0[5] = (JavaType) arrayType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class2, javaTypeArray0);
      List<JavaType> list0 = typeBindings0.getTypeParameters();
      TypeBindings typeBindings1 = TypeBindings.create(class1, list0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      ArrayType arrayType1 = arrayType0.withTypeHandler(resolvedRecursiveType0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      MapLikeType.upgradeFrom(arrayType2, (JavaType) null, arrayType2);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, javaTypeArray0[0], javaTypeArray0, (JavaType) arrayType2);
      Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(arrayType1, collectionType0, (JsonParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any() , any(java.lang.Throwable.class));
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      objectMapper0.configure(mapperFeature0, true);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      Object object0 = defaultDeserializationContext0.handleInstantiationProblem(class0, sequenceInputStream0, batchUpdateException0);
      assertSame(object0, objectMapper1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      NullNode nullNode0 = NullNode.getInstance();
      IOContext iOContext0 = new IOContext(bufferRecycler0, nullNode0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 3006, 1, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(618, 3);
      Object object0 = defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "Failed to parse Date value '%s': %s", objectArray0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Locale> class0 = Locale.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(mapLikeType0, (Object) null, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleWeirdNativeValue() for type [map-like type; class java.util.Locale, [simple type, class java.util.Locale] -> [simple type, class java.util.Locale]] returned value of type class com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.addHandler((DeserializationProblemHandler) null);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, (Object) null, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNativeValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any() , any(com.fasterxml.jackson.core.JsonParser.class));
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Locale> class0 = Locale.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      Object object0 = defaultDeserializationContext0.handleWeirdNativeValue(mapLikeType0, (Object) null, (JsonParser) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleInstantiationProblem(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any() , any(java.lang.Throwable.class));
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((Throwable) null);
      Object object0 = defaultDeserializationContext0.handleInstantiationProblem(class0, sequenceInputStream0, batchUpdateException0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "Unexpected end-of-input when binding data into %s", "Unexpected end-of-input when binding data into %s", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Class<Integer> class1 = Integer.class;
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class1, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Object object0 = new Object();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "iXGK7&lhp", "bU'$", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Object object0 = new Object();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(java.lang.Number.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      Object object1 = new Object();
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) deserializationProblemHandler0;
      Class<PropertyName> class1 = PropertyName.class;
      Integer integer0 = new Integer((-350));
      Object[] objectArray1 = new Object[0];
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class1, integer0, "Could not resolve type id '%s' as a subtype of %s", objectArray1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.PropertyName` from number -350: DeserializationProblemHandler.handleWeirdNumberValue() for type class com.fasterxml.jackson.databind.PropertyName returned value of type class java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory.unknownType();
      objectMapper0.addHandler((DeserializationProblemHandler) null);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Float float0 = new Float(875.85F);
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V(.Lw?9UK";
      objectArray0[1] = (Object) float0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, float0, "V(.Lw?9UK", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdNumberValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(java.lang.Number.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) deserializationProblemHandler0;
      Class<PropertyName> class1 = PropertyName.class;
      Integer integer0 = new Integer((-350));
      Object[] objectArray1 = new Object[0];
      Object object1 = defaultDeserializationContext0.handleWeirdNumberValue(class1, integer0, "Could not resolve type id '%s' as a subtype of %s", objectArray1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.JsonDeserializer.class) , any() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object object0 = new Object();
      boolean boolean0 = defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, object0, "#%w_h^8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(deserializationProblemHandler0).handleUnknownProperty(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.JsonDeserializer.class) , any() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, object0, "#%w_h^8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.withoutRootName();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "v1?VDJN%Z/,z";
      objectArray0[1] = (Object) "v1?VDJN%Z/,z";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportMappingException("v1?VDJN%Z/,z", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[23];
      objectArray0[10] = (Object) class0;
      objectArray0[1] = (Object) objectMapper0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) objectReader0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) objectReader0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) null;
      defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "6/~KX1", objectArray0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      Object object2 = defaultDeserializationContext0.handleMissingInstantiator(class1, valueInstantiator_Base0, (JsonParser) null, "6/~KX1", objectArray0);
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      MapType mapType1 = (MapType)mapType0.withKeyValueHandler(dateFormat0);
      MapType mapType2 = (MapType)mapType1.withStaticTyping();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(mapType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.text.SimpleDateFormat cannot be cast to com.fasterxml.jackson.databind.KeyDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Object object0 = new Object();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "iXGK7&lhp", "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.time.chrono.ChronoLocalDate` from String \"iXGK7&lhp\": DeserializationProblemHandler.handleWeirdStringValue() for type interface java.time.chrono.ChronoLocalDate returned value of type class java.lang.Object
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ObjectReader objectReader0 = objectMapper1.reader((InjectableValues) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0._context;
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'Z';
      charArray0[2] = 'd';
      charArray0[3] = '&';
      charArray0[4] = 'b';
      charArray0[5] = 'g';
      charArray0[6] = '}';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 1, 1);
      Class<Object> class0 = Object.class;
      Class<Locale.Category> class1 = Locale.Category.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(732);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      javaTypeArray0[7] = (JavaType) placeholderForType0;
      javaTypeArray0[8] = (JavaType) placeholderForType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, javaTypeArray0[8]);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readPropertyValue(jsonParser0, (BeanProperty) null, (JavaType) referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      Class<MapLikeType> class0 = MapLikeType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleMissingInstantiator() for type class com.fasterxml.jackson.databind.type.MapLikeType returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdKey(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      Class<ReferenceType> class0 = ReferenceType.class;
      defaultDeserializationContext0.handleWeirdKey(class0, "", "", objectArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[0];
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` out of VALUE_NUMBER_FLOAT token
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleMissingInstantiator(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.databind.deser.ValueInstantiator.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      Class<MapLikeType> class0 = MapLikeType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext0.leaseObjectBuffer();
      assertEquals(0, objectBuffer0.initialCapacity());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
      ObjectReader objectReader0 = objectMapper1.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn(objectMapper0).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Class<CollectionType> class1 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) deserializationProblemHandler0;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class1, jsonToken0, (JsonParser) null, "#CKU3Tt_5", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // DeserializationProblemHandler.handleUnexpectedToken() for type `com.fasterxml.jackson.databind.type.CollectionType` returned value of type `com.fasterxml.jackson.databind.ObjectMapper`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.createDeserializationContext((JsonParser) null);
      Class<Throwable> class0 = Throwable.class;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = null;
      objectArray0[1] = (Object) null;
      defaultDeserializationContext0.handleWeirdStringValue(class0, "2::2GNWzt!h?mQ", "'null', 'true' or 'false'", objectArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(deserializationProblemHandler0).handleMissingTypeId(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any(com.fasterxml.jackson.databind.jsontype.TypeIdResolver.class) , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      String string0 = "B^F#f8";
      try { 
        defaultDeserializationContext0.handleMissingTypeId(placeholderForType0, (TypeIdResolver) null, "B^F#f8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of $3: B^F#f8
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.addHandler((DeserializationProblemHandler) null);
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        objectReader1.treeToValue((TreeNode) arrayNode0, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleUnexpectedToken(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , any(com.fasterxml.jackson.core.JsonToken.class) , any(com.fasterxml.jackson.core.JsonParser.class) , anyString());
      ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Class<CollectionType> class1 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) deserializationProblemHandler0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) deserializationProblemHandler0;
      Object object1 = defaultDeserializationContext0.handleUnexpectedToken(class1, jsonToken0, (JsonParser) null, "#CKU3Tt_5", objectArray0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ">T");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<MapType> class0 = MapType.class;
      Stack<Module> stack0 = new Stack<Module>();
      TreeSet<Module> treeSet0 = new TreeSet<Module>(stack0);
      objectMapper0.registerModules((Iterable<? extends Module>) treeSet0);
      ((DeserializationContext)defaultDeserializationContext_Impl0)._isCompatible(class0, ">T");
      JavaType javaType0 = null;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)objectMapper0.treeAsTokens(bigIntegerNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(treeTraversingParser0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNativeValue((JavaType) null, objectMapper0, jsonParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[0];
      Class<InputStream> class0 = InputStream.class;
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types", "Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.io.InputStream` from String \"Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types\": DeserializationProblemHandler.handleWeirdStringValue() for type class java.io.InputStream returned value of type class java.lang.String
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(deserializationProblemHandler0).handleWeirdStringValue(any(com.fasterxml.jackson.databind.DeserializationContext.class) , any(java.lang.Class.class) , anyString() , anyString());
      objectMapper0.addHandler(deserializationProblemHandler0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[0];
      Class<InputStream> class0 = InputStream.class;
      defaultDeserializationContext0.handleWeirdStringValue(class0, "Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types", "Cannot deserialize value of type Ss from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) Ef type %s: incompatible types", objectArray0);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      deserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, beanProperty_Bogus0, (JavaType) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_INVALID_SUBTYPE;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Integer> class0 = Integer.class;
      Class<Locale> class1 = Locale.class;
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, class1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) deserializationFeature0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) class0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) beanProperty_Bogus0;
      objectArray0[5] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((JavaType) collectionLikeType0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "Cannot deserialize Map key of type %s from String %s: %s";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Cannot deserialize Map key of type %s from String %s: %s";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("Cannot deserialize Map key of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(1040);
      JsonDeserializer<AbstractDeserializer> jsonDeserializer0 = (JsonDeserializer<AbstractDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "Could not find JsonDeserializer for type %s (via property %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.returnObjectBuffer((ObjectBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createObjectNode();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Map> class0 = Map.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      Class<String> class1 = String.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 131072, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 1, 5191, true);
      try { 
        defaultDeserializationContext0.handleUnexpectedToken((Class<?>) class1, (JsonParser) readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.String`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1605);
      defaultDeserializationContext0.hasSomeOfFeatures(1605);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      defaultDeserializationContext0.mappingException(class0, jsonToken0);
      Class<Locale.Category> class1 = Locale.Category.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class1);
      assertFalse(javaType0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Module> class0 = Module.class;
      Object[] objectArray0 = new Object[11];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) "%#g/sxp9";
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) objectMapper0;
      objectArray0[7] = (Object) "%#g/sxp9";
      objectArray0[8] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "%#g/sxp9", "%#g/sxp9", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = g, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.findClass("com.fasterxml.jackson.databind.ser.impl.UnknownSerializer");
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      String string0 = "Non-standard token '";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Non-standard token '";
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 240);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue((JavaType) null, bufferedInputStream0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Object> class0 = Object.class;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-14);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Could not find JsonDeserializer for type %s (via property %s)";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, bigDecimal0, "Could not find JsonDeserializer for type %s (via property %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "](#6VlMo2I-;8wwkTmq");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) objectBuffer0;
      objectArray0[2] = (Object) "](#6VlMo2I-;8wwkTmq";
      objectArray0[3] = (Object) "](#6VlMo2I-;8wwkTmq";
      objectBuffer0.appendCompletedChunk(objectArray0);
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      Class<SimpleType> class0 = SimpleType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "DateFormat %s: (timezone: %s, locale: %s, lenient: %s)";
      objectArray0[1] = (Object) "DateFormat %s: (timezone: %s, locale: %s, lenient: %s)";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Locale> class0 = Locale.class;
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, (ValueInstantiator) null, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.util.Locale` (although at least one Creator exists): null
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("rb+4V*{+IhhFC", "rb+4V*{+IhhFC", (-949));
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLNonTransientException0);
      defaultDeserializationContext_Impl0.hasValueDeserializerFor(arrayType0, atomicReference0);
      PropertyName propertyName0 = new PropertyName("rb+4V*{+IhhFC");
      Class<List> class1 = List.class;
      Class<MinimalClassNameIdResolver> class2 = MinimalClassNameIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDescription("rb+4V*{+IhhFC");
      Nulls nulls0 = Nulls.SKIP;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls1);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionType0, propertyName0, (AnnotatedMember) null, propertyMetadata2);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findContextualValueDeserializer(arrayType0, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory2);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "JSON";
      stringArray0[1] = "JSON";
      stringArray0[2] = "JSON";
      stringArray0[3] = "JSON";
      ObjectNode objectNode1 = objectNode0.retain(stringArray0);
      JsonParser jsonParser0 = objectReader1.treeAsTokens(objectNode1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext(jsonParser0);
      defaultDeserializationContext0.getParser();
      Class<MapType> class0 = MapType.class;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLNonTransientException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      try { 
        defaultDeserializationContext0.findKeyDeserializer(mapLikeType0, beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [map-like type; class com.fasterxml.jackson.databind.type.CollectionLikeType, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "!yL]Ubj$o%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1642);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) placeholderForType0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken0, "dxTw}DZer+g%6i", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectIdGenerators_UUIDGenerator0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 237020288);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 3, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) readerBasedJsonParser0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonParser0, jsonToken0, "DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      Class<Object> class1 = Object.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) typeFactory0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class1, "\"pdn_j%l6i+:kUH+:\"p", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'l'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JsonParser jsonParser0 = jsonFactory2.createParser((char[]) null, 158, 158);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[0] = (Object) "a|ez%tRxv<@48'<ps=";
      objectArray0[2] = (Object) objectReader0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken(class0, jsonToken0, jsonParser0, "a|ez%tRxv<@48'<ps=", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // R != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.hasValueDeserializerFor((JavaType) null, atomicReference0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "DIQjl6%G`RSS";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.handleWeirdKey(class0, "", "DIQjl6%G`RSS", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<MapLikeType> class0 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findKeyDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.createDeserializationContext((JsonParser) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '\'';
      charArray0[2] = ',';
      charArray0[3] = ']';
      charArray0[4] = 'W';
      charArray0[5] = '';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-3752), (-3752));
      Class<MapLikeType> class0 = MapLikeType.class;
      try { 
        defaultDeserializationContext0.readPropertyValue(jsonParser0, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.MapLikeType`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator((String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-111);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, (int) (byte) (-111), (int) (byte) (-80));
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      ArrayBuilders arrayBuilders0 = defaultDeserializationContext0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      try { 
        defaultDeserializationContext0.handleUnknownProperty(jsonParser0, jsonDeserializer0, jsonParser0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"JSON\" (class com.fasterxml.jackson.core.json.UTF8StreamJsonParser), not marked as ignorable
         //  at [Source: (byte[])\"\uFFFD\uFFFD\uFFFD\u0001\u0003\uFFFD\u0001\u0000\uFFFD\"; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.core.json.UTF8StreamJsonParser[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class0, "", "Could not find JsonDeserializer for type %s (via property %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Class<Integer> class1 = Integer.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException(class1, jsonToken0);
      defaultDeserializationContext0.getContextualType();
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, objectReader0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `java.lang.Integer` out of START_OBJECT token
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      JsonDeserializer<?> jsonDeserializer1 = defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, (BeanProperty) null, mapType0);
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer1.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper1, true);
      PipedReader pipedReader0 = new PipedReader(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = ':';
      charArray0[2] = '0';
      charArray0[3] = 'S';
      charArray0[4] = '?';
      charArray0[5] = '\\';
      charArray0[6] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 2, 1793, true);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      deserializationContext0.wrongTokenException((JsonParser) readerBasedJsonParser0, (JavaType) null, jsonToken0, "");
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2649);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Locale.Category> class0 = Locale.Category.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      arrayType0.withContentValueHandler((Object) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, (Object) null);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      MockThrowable mockThrowable0 = new MockThrowable();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MapLikeType> class0 = MapLikeType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      defaultDeserializationContext0.findContextualValueDeserializer(javaType0, beanProperty_Bogus0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) beanProperty_Bogus0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ArrayType> class0 = ArrayType.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException1 = defaultDeserializationContext0.instantiationException(class0, (Throwable) null);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      String string0 = "~ko_QleI";
      String string1 = "r`%]-?tvhz3h6V";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "~ko_QleI", "r`%]-?tvhz3h6V", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ']'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ArrayType> class0 = ArrayType.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLSyntaxErrorException0);
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      MapLikeType mapLikeType1 = mapLikeType0.withTypeHandler(jsonMappingException0);
      JavaType javaType0 = typeFactory0.constructGeneralizedType(mapLikeType1, class0);
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer(javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a Value deserializer for type [map-like type; class com.fasterxml.jackson.databind.type.ArrayType, [simple type, class com.fasterxml.jackson.databind.type.ArrayType] -> [simple type, class com.fasterxml.jackson.databind.type.ArrayType]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";0X}%");
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) objectMapper0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) ";0X}%";
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.mappingException(";0X}%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      objectReader0.createDeserializationContext(jsonParserDelegate0);
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) jsonParserDelegate0, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 237020160, pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 2559, (-1), false);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(readerBasedJsonParser0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonEncoding0;
      objectArray0[1] = (Object) iOContext0;
      objectArray0[2] = (Object) pipedReader0;
      objectArray0[3] = (Object) objectReader0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) charsToNameCanonicalizer0;
      objectArray0[6] = (Object) iOContext0;
      objectArray0[7] = (Object) defaultDeserializationContext0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JavaType) placeholderForType0, jsonToken0, "R\"#[twC18&]V6h l", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected NOT_AVAILABLE: R\"#[twC18&]V6h l
         //  at [Source: (com.fasterxml.jackson.databind.ObjectMapper); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonDeserializer<TypeIdResolver> jsonDeserializer0 = (JsonDeserializer<TypeIdResolver>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<String> class1 = String.class;
      defaultDeserializationContext0.weirdNativeValueException(collectionType0, class1);
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      int int0 = 16;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 237020176);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = 'Y';
      charArray0[2] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1152, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 2, 237019152, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, (JsonParser) jsonParserDelegate0);
      // Undeclared exception!
      try { 
        deserializationContext0.readValue((JsonParser) jsonParserSequence0, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-81);
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory2.createParser((InputStream) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      JsonDeserializer<Class<MockDateFormat>> jsonDeserializer0 = (JsonDeserializer<Class<MockDateFormat>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) jsonFactory2;
      objectArray0[2] = (Object) jsonFactory3;
      objectArray0[3] = (Object) (byte) (-33);
      objectArray0[4] = (Object) objectReader0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) jsonParser_Feature0;
      try { 
        defaultDeserializationContext0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      defaultDeserializationContext_Impl0.mappingException(class0, jsonToken0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1522));
      placeholderForType0.getContentType();
      BeanProperty beanProperty0 = null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findContextualValueDeserializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.readerFor((JavaType) null);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Class<SimpleType> class0 = SimpleType.class;
      defaultDeserializationContext0.weirdNumberException(bigDecimal0, class0, "O#mi/_");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "O#mi/_";
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken0, "JsonAutoDetect.Value(fields=%s,getters=%s,isGetters=%s,setters=%s,creators=%s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      defaultDeserializationContext0.constructType(class0);
      Class<Map> class1 = Map.class;
      typeFactory0.constructRawMapType(class1);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      try { 
        defaultDeserializationContext0.findInjectableValue(objectIdGenerators_UUIDGenerator0, (BeanProperty) null, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No 'injectableValues' configured, cannot inject value with id [com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator@19]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<SimpleType> class0 = SimpleType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      deserializationContext0.handleSecondaryContextualization(coreXMLDeserializers_Std0, (BeanProperty) null, placeholderForType0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = 'G';
      charArray0[2] = 'C';
      charArray0[3] = 'm';
      charArray0[4] = ']';
      charArray0[5] = '$';
      charArray0[6] = 's';
      charArray0[7] = 'j';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1), 16);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonParser jsonParser1 = jsonParserSequence0.skipChildren();
      Class<CollectionType> class1 = CollectionType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.readPropertyValue(jsonParser1, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1804);
      defaultDeserializationContext0.getTypeFactory();
      Class<ObjectReader> class0 = ObjectReader.class;
      placeholderForType0.isTypeOrSubTypeOf(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      KeyDeserializer keyDeserializer0 = defaultDeserializationContext0.findKeyDeserializer(placeholderForType0, beanProperty_Bogus0);
      assertNotNull(keyDeserializer0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      defaultDeserializationContext0.findRootValueDeserializer(mapType1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) mapType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(256);
      JsonDeserializer<Locale.Category> jsonDeserializer0 = (JsonDeserializer<Locale.Category>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      defaultDeserializationContext0.handleSecondaryContextualization(jsonDeserializer0, (BeanProperty) null, placeholderForType0);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext0.missingTypeIdException(placeholderForType0, (String) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<Object> class1 = Object.class;
      defaultDeserializationContext0.constructType(class1);
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class2, (Throwable) sQLDataException0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      JsonDeserializer<BeanDeserializer> jsonDeserializer0 = (JsonDeserializer<BeanDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId((JavaType) null, "", (TypeIdResolver) null, "OR4$PUaL-ty$D `o&");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of null: OR4$PUaL-ty$D `o&
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1804);
      try { 
        defaultDeserializationContext0.handleUnknownTypeId(placeholderForType0, "@Tm)", (TypeIdResolver) null, "@Tm)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '@Tm)' as a subtype of $1805: @Tm)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) propertyAccessor0;
      objectArray0[2] = (Object) jsonAutoDetect_Visibility0;
      objectArray0[3] = (Object) "com.fasterxml.jackson.databind.util.EnumValues";
      try { 
        defaultDeserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, (JsonParser) null, "com.fasterxml.jackson.databind.util.EnumValues", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator` (no Creators, like default construct, exist): com.fasterxml.jackson.databind.util.EnumValues
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Integer> class0 = Integer.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonParser jsonParser0 = jsonFactory2.createNonBlockingByteArrayParser();
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) valueInstantiator_Base0;
      objectArray0[2] = (Object) jsonFactory1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) objectMapper0;
      objectArray0[5] = (Object) jsonParser_Feature0;
      // Undeclared exception!
      try { 
        deserializationContext0.handleMissingInstantiator(class0, valueInstantiator_Base0, jsonParser0, "}7w2Z*e,!o-pqD", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.createDeserializationContext((JsonParser) null);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(simpleType0);
      simpleType0.withTypeHandler(objectMapper0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, (JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      ObjectBuffer objectBuffer1 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      assertSame(objectBuffer1, objectBuffer0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectBuffer1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 288);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      PropertyName propertyName0 = PropertyName.construct("K,ZVRib'", "com.fasterxml.jackson.databind.ser.std.NullSerializer");
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.databind.ser.std.NullSerializer", placeholderForType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, placeholderForType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, placeholderForType0);
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(coreXMLDeserializers_Std0, beanProperty_Std1, placeholderForType0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.deserializerInstance(virtualAnnotatedMember0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.defaultInstance();
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      defaultDeserializationContext0.getArrayBuilders();
      defaultDeserializationContext1.canOverrideAccessModifiers();
      Base64Variant base64Variant0 = defaultDeserializationContext1.getBase64Variant();
      assertEquals((byte)61, base64Variant0.getPaddingByte());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.readerFor((JavaType) null);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.readerFor((JavaType) null);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      Integer integer0 = new Integer((-2561));
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(integer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findObjectId(objectMapper0, (ObjectIdGenerator<?>) null, objectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) beanDeserializerFactory0;
      objectArray0[4] = (Object) beanDeserializerFactory0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((BeanProperty) beanProperty_Bogus0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.addObject();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[6];
      deserializationFeatureArray0[0] = deserializationFeature0;
      DeserializationFeature deserializationFeature1 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      deserializationFeatureArray0[1] = deserializationFeature1;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      ObjectReader objectReader1 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      objectReader1.treeToValue((TreeNode) arrayNode0, class1);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext1.returnObjectBuffer(objectBuffer0);
      assertNotSame(defaultDeserializationContext1, defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext(jsonParser0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      String string0 = "dR|RvxO0q7l";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jsonParser0;
      objectArray0[1] = (Object) defaultDeserializationContext1;
      objectArray0[2] = (Object) objectReader0;
      objectArray0[3] = (Object) objectReader0;
      objectArray0[4] = (Object) jsonParser0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, (String) null, "Qe6\".`ivYU0F%=x\"", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '='
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withStaticTyping();
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      typeFactory0.moreSpecificType(mapLikeType0, mapLikeType0);
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDeserializationContext0.constructType(class0);
      defaultDeserializationContext0.getNodeFactory();
      Base64Variant base64Variant0 = defaultDeserializationContext1.getBase64Variant();
      assertEquals((-2), Base64Variant.BASE64_VALUE_PADDING);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapLikeType mapLikeType0 = mapType1.withStaticTyping();
      defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Cannot construct instance of %s, problem: %s");
      DataTruncation dataTruncation0 = new DataTruncation((-3075), false, false, 16, 16, sQLTransactionRollbackException0);
      dataTruncation0.getNextWarning();
      try { 
        defaultDeserializationContext1.handleInstantiationProblem(class0, objectMapper0, (Throwable) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.util.Map`, problem: N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      JsonDeserializer<MapType> jsonDeserializer0 = (JsonDeserializer<MapType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn("=,p_5GS-14A!:n2~").when(jsonDeserializer0).toString();
      defaultDeserializationContext_Impl0.handlePrimaryContextualization(jsonDeserializer0, (BeanProperty) null, collectionType0);
      defaultDeserializationContext_Impl0.mappingException("=,p_5GS-14A!:n2~");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findInjectableValue(placeholderForType0, (BeanProperty) null, typeFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonFactory1.disable(jsonParser_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findInjectableValue(defaultDeserializationContext_Impl0, (BeanProperty) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      arrayNode0.addObject();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) arrayNode0;
      objectArray0[1] = (Object) arrayNode0;
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader1);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'L';
      charArray0[1] = 'g';
      charArray0[2] = 'm';
      charArray0[3] = 'S';
      charArray0[4] = '[';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.type.CollectionLikeType`
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, (Class<CollectionLikeType>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      boolean boolean0 = defaultDeserializationContext_Impl0.hasSomeOfFeatures(2);
      assertFalse(boolean0);
      
      Class<MapType> class0 = MapType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 2);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.handlePrimaryContextualization(coreXMLDeserializers_Std0, (BeanProperty) null, placeholderForType0);
      assertEquals(0, defaultDeserializationContext_Impl1.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = defaultDeserializationContext0.constructType((Class<?>) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapLikeType mapLikeType0 = mapType1.withStaticTyping();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext1.returnObjectBuffer(objectBuffer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) objectBuffer1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) typeFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) typeFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) jsonDeserializer0, "qwS8%[p", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '['
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ArrayType> class0 = ArrayType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-899));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-899));
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(coreXMLDeserializers_Std0, (BeanProperty) null, placeholderForType0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "vy-??3E^#(}CK'%MmY";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) objectBuffer0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) placeholderForType0, jsonToken0, "vy-??3E^#(}CK'%MmY", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'M'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder(basicBeanDescription0, defaultDeserializationContext0);
      AnnotationIntrospector annotationIntrospector0 = defaultDeserializationContext0.getAnnotationIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      annotationIntrospector0.findWrapperName(annotatedField0);
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.removeProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapLikeType mapLikeType0 = mapType1.withStaticTyping();
      defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      defaultDeserializationContext0.constructType(class0);
      Class<ArrayType> class1 = ArrayType.class;
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[3] = (Object) typeFactory0;
      objectArray0[4] = (Object) mapLikeType0;
      objectArray0[5] = (Object) "";
      try { 
        defaultDeserializationContext0.handleWeirdStringValue(class1, "", "org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.ArrayType` from String \"\": org.apache.axis2.jaxws.spi.handler.HandlerResolverImpl
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      ObjectNode objectNode1 = objectNode0.putNull("x]kZi;W");
      byte[] byteArray0 = new byte[1];
      objectNode1.numberNode((long) (byte) (-45));
      byteArray0[0] = (byte) (-45);
      ObjectNode objectNode2 = objectNode1.put("x]kZi;W", byteArray0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) arrayNode0;
      objectArray0[1] = (Object) class0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) objectNode1;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) objectNode2;
      objectArray0[6] = (Object) null;
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "KWR.0sXP0Z,{", "bJ;-Y:s\"p~HdTL", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize Map key of type `java.lang.Object` from String \"KWR.0sXP0Z,{\": bJ;-Y:s\"p~HdTL
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.reader();
      SQLDataException sQLDataException0 = new SQLDataException();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      NumericNode numericNode0 = arrayNode0.numberNode((short) (-1304));
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      try { 
        objectReader1.treeToValue((TreeNode) numericNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (-1304)
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, class0, jsonToken0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer1);
      defaultDeserializationContext0.getDeserializationFeatures();
      try { 
        defaultDeserializationContext0.findClass("%hNg/CI1b+td<M\"px");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // %hNg/CI1b+td<M\"px
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = mapType1.withStaticTyping();
      MapLikeType mapLikeType0 = mapType2.withStaticTyping();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(mapType1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertTrue(javaType0.isContainerType());
      
      JsonNodeFactory jsonNodeFactory0 = defaultDeserializationContext0.getNodeFactory();
      assertNotNull(jsonNodeFactory0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Void> class0 = Void.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      deserializationContext0.mappingException(class0, jsonToken0);
      deserializationContext0.deserializerInstance((Annotated) null, (Object) null);
      deserializationContext0.getContextualType();
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1778);
      // Undeclared exception!
      try { 
        coreXMLDeserializers_Std0.findBackReference("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot handle managed/back reference '': type: value deserializer of type com.fasterxml.jackson.databind.ext.CoreXMLDeserializers$Std does not support them
         //
         verifyException("com.fasterxml.jackson.databind.JsonDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.arrayNode();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.readerFor(javaType0);
      SQLDataException sQLDataException0 = new SQLDataException();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLDataException0);
      defaultDeserializationContext0.hasValueDeserializerFor(javaType0, atomicReference0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<String> class0 = String.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectReader0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 1, 237020288, false);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Locale.Category> class1 = Locale.Category.class;
      Class<SimpleType> class2 = SimpleType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType javaType1 = typeFactory0.constructReferenceType(class2, javaType0);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, javaType1, javaType1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) readerBasedJsonParser0, (JavaType) mapLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      String string0 = " (expected type: ";
      Class<Void> class0 = Void.class;
      objectMapper0.defaultClassIntrospector();
      BigDecimal bigDecimal0 = new BigDecimal((-2384));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      Class<MapLikeType> class1 = MapLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      defaultDeserializationContext0.handleSecondaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, javaType0);
      defaultDeserializationContext0.getTypeFactory();
      defaultDeserializationContext0.leaseObjectBuffer();
      defaultDeserializationContext0.getContextualType();
      MockDate mockDate0 = new MockDate();
      Calendar calendar0 = defaultDeserializationContext0.constructCalendar(mockDate0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      ObjectNode objectNode0 = arrayNode0.addObject();
      String string0 = "x\\]kZi;W";
      ObjectNode objectNode1 = objectNode0.putNull("x]kZi;W");
      byte[] byteArray0 = new byte[1];
      objectNode1.numberNode((long) (byte) (-45));
      byteArray0[0] = (byte) (-45);
      objectNode1.put("x]kZi;W", byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      try { 
        objectReader0.treeToValue((TreeNode) arrayNode0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize instance of `org.evosuite.runtime.mock.java.text.MockSimpleDateFormat` out of START_ARRAY token
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) beanDeserializerFactory0;
      ObjectIdGenerator<ArrayType> objectIdGenerator0 = (ObjectIdGenerator<ArrayType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      NullNode nullNode0 = NullNode.instance;
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(nullNode0);
      defaultDeserializationContext_Impl0.findObjectId((Object) null, objectIdGenerator0, objectIdResolver0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      defaultDeserializationContext0.getTimeZone();
      TypeBindings.emptyBindings();
      try { 
        defaultDeserializationContext0.parseDate("OqQ|Lu(e=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value 'OqQ|Lu(e=': Cannot parse date \"OqQ|Lu(e=\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue(javaType0, objectBuffer0, (JsonParser) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.util.ObjectBuffer`: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonParser jsonParser0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapType mapType2 = (MapType)mapType1.withKeyType(mapType0);
      MapType mapType3 = (MapType)mapType2.withStaticTyping();
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(mapType3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot find a (Map) Key deserializer for type [map type; class java.util.Map, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures((-16));
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.mappingException("t?Kd`7cbFnHRUA", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(".f{xPePMSsSm", (short) (-973));
      ObjectNode objectNode2 = objectNode1.putPOJO("tt'6TgqQ", (Object) null);
      objectNode2.put("7", 312);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[0] = (byte) (-106);
      Class<MapType> class0 = MapType.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class0);
      assertFalse(javaType0.isContainerType());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("(Z:]T=>}QI");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<Integer> class0 = Integer.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, (-16), (DataInput) null, objectMapper1, byteQuadsCanonicalizer1, 1);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(uTF8DataInputJsonParser0);
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) beanDeserializerFactory0;
      objectArray0[1] = (Object) valueInstantiator_Base0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) byteQuadsCanonicalizer0;
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.Object` (no Creators, like default construct, exist): no creator with arguments specified
         //  at [Source: (Integer); line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(".f{xPePMSsSm", (short) (-973));
      ObjectNode objectNode2 = objectNode1.putPOJO("tt'6Tgqi", (Object) null);
      ObjectNode objectNode3 = objectNode2.put("7", 312);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)39;
      ObjectNode objectNode4 = objectNode3.put("D\"7agmaMrK", byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      try { 
        objectReader0.treeToValue((TreeNode) objectNode4, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \".f{xPePMSsSm\" (class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat), not marked as ignorable (6 known properties: \"numberFormat\", \"dateFormatSymbols\", \"lenient\", \"timeZone\", \"2DigitYearStart\", \"calendar\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat[\".f{xPePMSsSm\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      objectReader0.createDeserializationContext((JsonParser) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.put(".f{xPePMSsSm", (short) (-33));
      ObjectNode objectNode2 = objectNode1.putPOJO("Could not find JsonDeserializer for type %s (via property %s)", ".f{xPePMSsSm");
      ObjectNode objectNode3 = objectNode2.put((String) null, 128);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)17;
      objectNode1.put("Cannot pass null DeserializerFactory", byteArray0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      try { 
        objectReader0.treeToValue((TreeNode) objectNode3, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \".f{xPePMSsSm\" (class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat), not marked as ignorable (6 known properties: \"numberFormat\", \"dateFormatSymbols\", \"lenient\", \"timeZone\", \"2DigitYearStart\", \"calendar\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat[\".f{xPePMSsSm\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<CollectionLikeType> jsonDeserializer0 = (JsonDeserializer<CollectionLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext1.handleMissingTypeId(javaType0, (TypeIdResolver) null, "o,fu!9_ACH4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: o,fu!9_ACH4
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      Object[] objectArray0 = new Object[0];
      try { 
        defaultDeserializationContext0.handleMissingTypeId(javaType0, (TypeIdResolver) null, "o,fu!9_ACH4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of [simple type, class java.lang.Object]: o,fu!9_ACH4
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectIdReader objectIdReader0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      objectArray0[1] = object0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportBadTypeDefinition((BeanDescription) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeBindings.emptyBindings();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory1 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      defaultDeserializationContext0.getAttribute(jsonFactory0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory2, defaultSerializerProvider_Impl2, defaultDeserializationContext1);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, contextAttributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<Void> class0 = Void.TYPE;
      objectMapper0.defaultClassIntrospector();
      BigDecimal bigDecimal0 = new BigDecimal((-2384));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<List> class1 = List.class;
      Class<MinimalClassNameIdResolver> class2 = MinimalClassNameIdResolver.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class2);
      Object object0 = new Object();
      CollectionType collectionType1 = collectionType0.withContentValueHandler(object0);
      CollectionType collectionType2 = collectionType1.withValueHandler(defaultDeserializationContext0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(collectionType2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.fasterxml.jackson.databind.JsonDeserializer
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<List> class0 = List.class;
      defaultDeserializationContext0.constructType(class0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      boolean boolean0 = defaultDeserializationContext0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectMapper0.reader();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.handlePrimaryContextualization((JsonDeserializer<?>) null, (BeanProperty) null, collectionType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<CollectionLikeType> jsonDeserializer0 = (JsonDeserializer<CollectionLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ReferenceType referenceType0 = defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      assertNull(referenceType0);
      
      Locale locale0 = defaultDeserializationContext0.getLocale();
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Object> class0 = Object.class;
      defaultDeserializationContext0.constructType(class0);
      defaultDeserializationContext0.getParser();
      Class<MapLikeType> class1 = MapLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class1, jsonToken0, (JsonParser) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectMapper0.reader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withAdditionalDeserializers(deserializers_Base0);
      deserializerFactoryConfig2.valueInstantiators();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withValueInstantiators(valueInstantiators_Base0);
      deserializerFactoryConfig3.withValueInstantiators(valueInstantiators_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig3);
      defaultDeserializationContext_Impl0.with(deserializerFactory1);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1024);
      coreXMLDeserializers_Std0.getValueType();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(coreXMLDeserializers_Std0, beanProperty_Bogus0, (JavaType) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      objectMapper0.configure(jsonParser_Feature0, true);
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 78);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      objectReader0.withoutAttribute(pipedInputStream0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializationConfig deserializationConfig0 = defaultDeserializationContext0.getConfig();
      assertFalse(deserializationConfig0.useRootWrapping());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectMapper0.reader();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId(resolvedRecursiveType0, (TypeIdResolver) null, "^VRO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      objectReader0.createDeserializationContext((JsonParser) null);
      JsonDeserializer<CollectionLikeType> jsonDeserializer0 = (JsonDeserializer<CollectionLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleMissingTypeId((JavaType) null, classNameIdResolver0, "+m=b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)33;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.LOWER_CAMEL_CASE;
      BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings1, stdSubtypeResolver0, simpleMixInResolver1, rootNameLookup0, configOverrides1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      NullNode nullNode0 = NullNode.getInstance();
      JsonParser jsonParser0 = objectReader0.treeAsTokens(nullNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectBuffer0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) "UNRESOLVED";
      objectArray0[3] = (Object) stdSubtypeResolver0;
      objectArray0[4] = (Object) propertyNamingStrategy0;
      objectArray0[5] = (Object) jsonParser0;
      objectArray0[6] = (Object) objectMapper0;
      try { 
        defaultDeserializationContext0.handleWeirdNumberValue(class0, (Number) null, "UNRESOLVED", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver` from number null: UNRESOLVED
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "r4H%+)5]v}WtE(", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '+'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Integer integer0 = new Integer(3);
      JsonDeserializer<MapLikeType> jsonDeserializer0 = (JsonDeserializer<MapLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(jsonDeserializer0).getKnownPropertyNames();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty(integer0, "[*", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      mapType0.withStaticTyping();
      MapLikeType mapLikeType0 = mapType0.withStaticTyping();
      JsonDeserializer<Object> jsonDeserializer0 = defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportUnknownProperty((Object) null, "", jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      defaultDeserializationContext0.handlePrimaryContextualization(jsonDeserializer0, (BeanProperty) null, collectionType0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TypeFactory typeFactory0 = defaultDeserializationContext0.getTypeFactory();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(collectionLikeType0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      objectArray0[4] = (Object) null;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) defaultDeserializationContext0;
      Object object2 = new Object();
      objectArray0[7] = object2;
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.jsontype.TypeIdResolver` (no Creators, like default construct, exist): no creator with arguments specified
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      Class<Throwable> class1 = Throwable.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdStringException("", class1, "");
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class0, beanDeserializerFactory0, jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Throwable` from String \"\": 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      defaultDeserializationContext0.instantiationException(class0, "");
      JavaType javaType0 = defaultDeserializationContext0.getContextualType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      EvoSuiteFile evoSuiteFile0 = null;
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) objectReader0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) objectBuffer0;
      objectArray0[4] = (Object) "only \"true\" or \"false\" recognized";
      objectArray0[5] = (Object) "only \"true\" or \"false\" recognized";
      objectArray0[6] = (Object) jsonToken0;
      objectArray0[7] = (Object) objectReader0;
      objectArray0[8] = (Object) jsonToken0;
      try { 
        defaultDeserializationContext0.handleUnexpectedToken(class0, jsonToken0, (JsonParser) null, "only \"true\" or \"false\" recognized", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // only \"true\" or \"false\" recognized
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      deserializerFactoryConfig0.valueInstantiators();
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonDeserializer0).toString();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1024);
      coreXMLDeserializers_Std0.getValueType();
      defaultDeserializationContext_Impl0.handleSecondaryContextualization(jsonDeserializer0, beanProperty_Bogus0, (JavaType) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      Deserializers.Base deserializers_Base1 = new Deserializers.Base();
      beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<Throwable> class1 = Throwable.class;
      defaultDeserializationContext0.weirdNativeValueException((Object) null, class1);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) typeBindings0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      defaultDeserializationContext1.findNonContextualValueDeserializer(resolvedRecursiveType0);
      defaultDeserializationContext1.findRootValueDeserializer(resolvedRecursiveType0);
      objectArray0[1] = (Object) objectReader0;
      try { 
        defaultDeserializationContext1.reportInputMismatch((BeanProperty) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Os:T1'");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDeserializationContext_Impl0.reportUnknownProperty(defaultDeserializationContext0, "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", jsonDeserializer0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.getFactory();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      ObjectNode objectNode2 = objectNode1.put("", (-2278L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(2944);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 3, 1, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      defaultDeserializationContext0.wrongTokenException((JsonParser) readerBasedJsonParser0, jsonToken0, "JSON");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<CollectionLikeType> jsonDeserializer0 = (JsonDeserializer<CollectionLikeType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
      String string0 = "";
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      try { 
        defaultDeserializationContext0.reportBadDefinition((Class<?>) class0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 4034;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4034);
      defaultDeserializationContext0.getParser();
      defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
      try { 
        defaultDeserializationContext0.reportBadDefinition((JavaType) null, "]");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      objectReader0.with(jsonParser_Feature0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4034);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream((InputStream) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.setAttribute(bufferedInputStream1, (Object) null);
      defaultDeserializationContext_Impl1.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.getContextualType();
      BeanDeserializerBuilder beanDeserializerBuilder0 = new BeanDeserializerBuilder((BeanDescription) null, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        beanDeserializerBuilder0.buildAbstract();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.AbstractDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DateFormat> class0 = DateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        ((DeserializationContext)defaultDeserializationContext_Impl0).getDateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      objectReader0.createDeserializationContext((JsonParser) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      Deserializers.Base deserializers_Base1 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      defaultDeserializationContext0.weirdNativeValueException(resolvedRecursiveType0, class0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) resolvedRecursiveType0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) defaultDeserializationContext1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) resolvedRecursiveType0;
      objectArray0[6] = (Object) class0;
      objectArray0[7] = (Object) (byte)3;
      objectArray0[8] = (Object) defaultDeserializationContext_Impl0;
      try { 
        defaultDeserializationContext1.reportInputMismatch((BeanProperty) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) sQLDataException0;
      objectArray0[4] = (Object) objectBuffer0;
      objectArray0[5] = (Object) valueInstantiator_Base0;
      objectArray0[6] = (Object) sQLDataException0;
      objectArray0[7] = (Object) null;
      objectArray0[8] = (Object) valueInstantiator_Base0;
      try { 
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) defaultDeserializationContext0, objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `java.lang.Object` (no Creators, like default construct, exist): no creator with arguments specified
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      objectMapper0.reader();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getDefaultPropertyFormat(class0);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4034);
      try { 
        defaultDeserializationContext0.parseDate("Cannot construct instance of %s, problem: %s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse Date value 'Cannot construct instance of %s, problem: %s': Cannot parse date \"Cannot construct instance of %s, problem: %s\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      objectMapper0.readerFor((JavaType) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLDataException0);
      defaultDeserializationContext0.hasValueDeserializerFor((JavaType) null, atomicReference0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readPropertyValue((JsonParser) null, (BeanProperty) null, (JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeFactory typeFactory2 = typeFactory1.withClassLoader(classLoader1);
      typeFactory2.withModifier((TypeModifier) null);
      Class<Vector> class0 = Vector.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$122734257) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-1));
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      referenceType0.withValueHandler(coreXMLDeserializers_Std0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      // Undeclared exception!
      try { 
        deserializationContext0.findNonContextualValueDeserializer(referenceType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<DateFormat> class0 = DateFormat.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnknownTypeId(mapLikeType0, "Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types", (TypeIdResolver) null, "Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      defaultDeserializationContext0.weirdNativeValueException(beanDeserializerFactory0, class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((BeanProperty) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      JavaType javaType0 = TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.missingTypeIdException(javaType0, "java.util");
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<ObjectReader> class1 = ObjectReader.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(javaType0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class1, valueInstantiator_Base0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue((JsonParser) null, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<DateFormat> jsonDeserializer0 = (JsonDeserializer<DateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      deserializationContext0.missingTypeIdException((JavaType) null, "");
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4034);
      try { 
        defaultDeserializationContext0.handleInstantiationProblem(class2, bufferedInputStream0, sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot construct instance of `com.fasterxml.jackson.databind.type.ResolvedRecursiveType`, problem: `java.sql.SQLDataException`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Object object0 = new Object();
      ArrayType arrayType1 = arrayType0.withContentValueHandler(object0);
      ArrayType arrayType2 = arrayType1.withStaticTyping();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayType arrayType3 = arrayType2.withContentTypeHandler((Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findRootValueDeserializer(arrayType3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException();
      MockDate mockDate0 = new MockDate(0L);
      Calendar calendar0 = defaultDeserializationContext0.constructCalendar(mockDate0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "%Lg0PtO+?Z7=";
      objectArray0[1] = (Object) deserializationContext0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportInputMismatch((JavaType) simpleType0, "%Lg0PtO+?Z7=", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getContextualType();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) deserializationContext0;
      objectArray0[1] = (Object) "";
      try { 
        deserializationContext0.reportInputMismatch((JavaType) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withStaticTyping();
      MapLikeType mapLikeType0 = mapType1.withStaticTyping();
      defaultDeserializationContext0.findRootValueDeserializer(mapLikeType0);
      objectReader0.createDeserializationContext((JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      defaultDeserializationContext0.getAttribute((Object) null);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, (JavaType) mapLikeType0, jsonToken0, "Cannot deserialize value of type %s from number %s: %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      objectMapper0.readerFor(class0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl1.getContextualType();
      String string0 = ":";
      SQLDataException sQLDataException0 = new SQLDataException(":");
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.wrongTokenException((JsonParser) null, (JavaType) null, jsonToken0, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      Class<Integer> class2 = Integer.class;
      defaultDeserializationContext0.weirdNativeValueException((Object) null, class2);
      Class<Module> class3 = Module.class;
      JavaType javaType0 = defaultDeserializationContext0.constructType(class3);
      assertFalse(javaType0.isMapLikeType());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.constructType(class1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-65);
      Class<AbstractDeserializer> class2 = AbstractDeserializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      objectMapper0.canSerialize(class2, atomicReference0);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)3;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<MinimalClassNameIdResolver> class3 = MinimalClassNameIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.weirdNumberException(bigInteger0, class3, "&s2lIMTb");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.getParser();
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Class<CollectionLikeType> class2 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue((JsonParser) null, class2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1y?4f%:9P>";
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "1y?4f%:9P>", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ':'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.hasSomeOfFeatures((-16));
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.construct("");
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty(propertyName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      String string0 = ":";
      SQLDataException sQLDataException0 = new SQLDataException();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue((JavaType) null, mockDateFormat0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper0);
      JsonFactory jsonFactory3 = jsonFactory2.setRootValueSeparator((String) null);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonFactory3;
      objectArray0[1] = (Object) null;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) jsonParser_Feature0;
      try { 
        deserializationContext0.reportWrongTokenException(jsonParser0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_NUMBER_INT: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.wrongTokenException((JsonParser) null, jsonToken0, "ES");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      JsonParser jsonParser0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      String string0 = "_[AdaaYqFqtKF%d'?";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) null, jsonToken0, "_[AdaaYqFqtKF%d'?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ArrayBuilders arrayBuilders0 = deserializationContext0.getArrayBuilders();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      deserializationContext0.getContextualType();
      objectReader0.withAttribute(arrayBuilders0, arrayBuilders0);
      SQLDataException sQLDataException0 = new SQLDataException(":");
      defaultDeserializationContext0.instantiationException((Class<?>) null, (Throwable) sQLDataException0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNativeValue((JavaType) null, defaultDeserializationContext0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[4] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      objectArray0[6] = (Object) deserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JsonParser) null, jsonToken0, "z:(j%g{5g4&)0=", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.hasSomeOfFeatures(3);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<MapType> class0 = MapType.class;
      Class<Locale.Category> class1 = Locale.Category.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) simpleValueInstantiators1;
      objectArray0[1] = (Object) class1;
      // Undeclared exception!
      try { 
        valueInstantiator_Base0.createFromObjectWith(deserializationContext0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken0, "z:(j%g{5g4&)0=", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_FLOAT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) ">3a=a^}";
      objectArray0[1] = (Object) jsonToken1;
      objectArray0[2] = (Object) jsonToken0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[7] = (Object) jsonToken1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonParser) null, jsonToken1, ">3a=a^}", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException((JavaType) simpleType0, jsonToken0, "Cannot construct instance of %s (although at least one Creator exists): %s", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdNativeValue((JavaType) null, mockDateFormat0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      JsonDeserializer<MockSimpleDateFormat> jsonDeserializer0 = (JsonDeserializer<MockSimpleDateFormat>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      RawValue rawValue0 = new RawValue("]");
      ValueNode valueNode0 = jsonNodeFactory0.rawValueNode(rawValue0);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(valueNode0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken(class0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MapType> class0 = MapType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDelegateCreator();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.deserializerInstance((Annotated) null, mockDateFormat0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned deserializer definition of type org.evosuite.runtime.mock.java.text.MockDateFormat; expected type JsonDeserializer or Class<JsonDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      System.setCurrentTimeMillis(0L);
      defaultDeserializationContext_Impl0.copy();
      Class<Locale.Category> class0 = Locale.Category.class;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleInstantiationProblem(class0, beanDeserializerFactory0, sQLClientInfoException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      deserializationContext0.getArrayBuilders();
      deserializationContext0.getContextualType();
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.handleUnexpectedToken(class0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.hasSomeOfFeatures((-1));
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<Object> class0 = Object.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "7H:0V=%8";
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) "7H:0V=%8";
      objectArray0[3] = (Object) objectBuffer0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) deserializationContext0;
      objectArray0[6] = (Object) "7H:0V=%8";
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNumberValue(class0, bigInteger0, "7H:0V=%8", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '8'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ArrayBuilders arrayBuilders0 = deserializationContext0.getArrayBuilders();
      deserializationContext0.getContextualType();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) deserializationContext0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) arrayBuilders0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        deserializationContext0.reportMappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
      Class<Vector> class0 = Vector.class;
      Class<DateFormat> class1 = DateFormat.class;
      CollectionType collectionType0 = typeFactory1.constructCollectionType(class0, class1);
      // Undeclared exception!
      try { 
        deserializationContext0.hasValueDeserializerFor(collectionType0, (AtomicReference<Throwable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      deserializationContext0.getArrayBuilders();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      Class<Vector> class0 = Vector.class;
      // Undeclared exception!
      try { 
        typeFactory1.constructCollectionType(class0, class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$122734257) return null for type [simple type, class java.lang.Object]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.getContextualType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      deserializationContext0.invalidTypeIdException((JavaType) null, "?hB~WwkQV`#1Ke#[?@>", (String) null);
      Class<CollectionType> class0 = CollectionType.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 716);
      coreXMLDeserializers_Std0.getObjectIdReader();
      // Undeclared exception!
      try { 
        deserializationContext0.reportUnresolvedObjectId((ObjectIdReader) null, (Object) objectBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.put("JsonFormat.Value(pattern=%s,shape=%s,lenient=%s,locale=%s,timezone=%s)", (-3002L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, objectReader0, charsToNameCanonicalizer0, (char[]) null, 1199, (-438), true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      Class<MapType> class0 = MapType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "");
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerator<DateFormat> objectIdGenerator0 = (ObjectIdGenerator<DateFormat>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator.IdKey) null).when(objectIdGenerator0).key(any());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(jsonParser_Feature0);
      defaultDeserializationContext_Impl0.findObjectId(jsonParser_Feature0, objectIdGenerator0, objectIdResolver0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      ArrayBuilders arrayBuilders0 = deserializationContext0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      
      deserializationContext0.getContextualType();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)deserializationContext0.invalidTypeIdException((JavaType) null, "Cannot deserialize value of type %s from String %s: %s", "6:ReiH)O`oM/Z+");
      assertEquals("Cannot deserialize value of type %s from String %s: %s", invalidTypeIdException0.getTypeId());
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.getContextualType();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.findNonContextualValueDeserializer((JavaType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.getContextualType();
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdNativeValue((JavaType) null, objectMapper0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g^C0=gh0p60Q");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getActiveView();
      defaultDeserializationContext_Impl0.getArrayBuilders();
      JsonDeserializer<Locale.Category> jsonDeserializer0 = (JsonDeserializer<Locale.Category>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Module[] moduleArray0 = new Module[0];
      objectMapper0.registerModules(moduleArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getActiveView();
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonDeserializer<ObjectReader> jsonDeserializer0 = (JsonDeserializer<ObjectReader>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDeserializationContext_Impl0.reportUnknownProperty(defaultDeserializationContext0, "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", jsonDeserializer0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext0.getContextualType();
      defaultDeserializationContext0.getFactory();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl1, defaultDeserializationContext0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putNull("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      ObjectNode objectNode2 = objectNode1.put("", (-2278L));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode2);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      defaultDeserializationContext_Impl0.getFactory();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.disable(jsonGenerator_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      objectNode0.putNull("");
      objectNode0.put("JsonFormat.Value(pattern=%s,shape=%s,lenient=%s,locale=%s,timezone=%s)", (-3002L));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.readValue(jsonParser0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
      objectMapper0.enable(deserializationFeature0);
      boolean boolean0 = deserializationContext0.hasSomeOfFeatures((-16));
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-16));
      deserializationContext0.getArrayBuilders();
      ArrayBuilders arrayBuilders0 = deserializationContext0.getArrayBuilders();
      assertNotNull(arrayBuilders0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory1);
      String string0 = "n(cE}cg";
      Object[] objectArray0 = new Object[5];
      defaultDeserializationContext_Impl0.getArrayBuilders();
      objectArray0[0] = (Object) defaultDeserializationContext0;
      objectArray0[1] = (Object) beanDeserializerModifier0;
      objectArray0[2] = (Object) stdKeyDeserializers0;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      objectArray0[4] = (Object) deserializerFactory1;
      try { 
        defaultDeserializationContext0.reportMappingException("n(cE}cg", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // n(cE}cg
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getArrayBuilders();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) deserializationContext0;
      objectArray0[1] = (Object) deserializationContext0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      try { 
        deserializationContext0.reportMappingException("v7]I]", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // v7]I]
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdKey(class0, "EXTERNAL_PROPERTY", "Cannot deserialize value of type %s from String %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      int int0 = 201;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      MockDate mockDate1 = new MockDate((-982), (-982), (-3843));
      MockDate mockDate2 = new MockDate(22L);
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportBadMerge((JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Void> jsonDeserializer0 = (JsonDeserializer<Void>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportBadMerge((JsonDeserializer<?>) jsonDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JavaType[] javaTypeArray0 = new JavaType[5];
      javaTypeArray0[0] = (JavaType) mapType0;
      javaTypeArray0[2] = (JavaType) mapType0;
      JavaType javaType0 = typeFactory0.constructReferenceType(class0, javaTypeArray0[0]);
      javaTypeArray0[2] = javaType0;
      javaTypeArray0[3] = (JavaType) mapType0;
      javaTypeArray0[4] = (JavaType) mapType0;
      MapType mapType1 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      mapType1.withStaticTyping();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleUnknownProperty((JsonParser) null, (JsonDeserializer<?>) null, (Object) null, "s~C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      SimpleModule simpleModule0 = new SimpleModule("com.fasterxml.jackson.databind.node.NumericNode");
      // Undeclared exception!
      try { 
        defaultDeserializationContext1.reportUnknownProperty(simpleModule0, "&?p 31/{=l*Xnj", (JsonDeserializer<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLDataException0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES;
      defaultDeserializationContext0.isEnabled(deserializationFeature0);
      defaultDeserializationContext0.getArrayBuilders();
      ObjectBuffer objectBuffer1 = defaultDeserializationContext0.leaseObjectBuffer();
      assertNotSame(objectBuffer1, objectBuffer0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      defaultDeserializationContext0.reportUnknownProperty(collectionType0, "x", (JsonDeserializer<?>) null);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonDeserializer<ReferenceType> jsonDeserializer0 = (JsonDeserializer<ReferenceType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      defaultDeserializationContext0.reportUnknownProperty(defaultDeserializationContext_Impl0, "Cannot deserialize instance of %s out of %s token", jsonDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-54);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonDeserializer<ResolvedRecursiveType> jsonDeserializer1 = (JsonDeserializer<ResolvedRecursiveType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnknownProperty(jsonParser0, jsonDeserializer1, beanDeserializerFactory0, "Ev.<j%=,|JgoN17");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withoutSharedAttribute(simpleMixInResolver0);
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, contextAttributes1);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) sequenceInputStream0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig2, jsonParser1, injectableValues_Std0);
      Class<Throwable> class0 = Throwable.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.instantiationException(class0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(203);
      TypeFactory.defaultInstance();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl1.mappingException("No content to map due to end-of-input");
      int int0 = 1;
      MockDate.UTC(203, 921, 41, 41, 1, (-281));
      int int1 = 1;
      MockDate.UTC(2368, 41, 1, 7, 3, 3);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.hasSomeOfFeatures(0);
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      defaultDeserializationContext_Impl0.mappingException("com.fasterxml.jackson.annotation.JsonFormat$Shape");
      MockDate.UTC(41, 160, 0, (-131072), (-131072), 0);
      MockDate.UTC(3, 0, 160, 41, 3, (-2384));
      MockDate mockDate0 = new MockDate(41);
      MockDate mockDate1 = null;
      try {
        mockDate1 = new MockDate("\"h.&gr:f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory0.configure(jsonFactory_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<Throwable> class0 = Throwable.class;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-30);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      try { 
        deserializationContext0.reportTrailingTokens((Class<?>) class0, jsonParser1, jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trailing token (of type VALUE_EMBEDDED_OBJECT) found after value (bound as `java.lang.Throwable`): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`
         //  at [Source: (byte[])\"V0\u0013$\uFFFD\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<SimpleType> class0 = SimpleType.class;
      Class<ArrayType> class1 = ArrayType.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(referenceType0, simpleType0, referenceType0);
      JavaType javaType0 = referenceType0.withContentTypeHandler(mapLikeType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      TypeBindings typeBindings1 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) mapLikeType0);
      MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings1, (JavaType) simpleType0, javaTypeArray0, (JavaType) mapLikeType0, (JavaType) simpleType0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ArrayNode arrayNode0 = objectNode0.putArray((String) null);
      NullNode nullNode0 = arrayNode0.nullNode();
      MapType mapType1 = mapType0.withContentTypeHandler(nullNode0);
      MapType mapType2 = mapType1.withStaticTyping();
      javaTypeArray0[0] = (JavaType) mapType2;
      javaTypeArray0[1] = (JavaType) mapLikeType0;
      JavaType javaType1 = TypeFactory.unknownType();
      javaTypeArray0[2] = javaType1;
      javaTypeArray0[3] = (JavaType) mapLikeType0;
      ReferenceType referenceType1 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[3]);
      JavaType javaType2 = referenceType1.getReferencedType();
      deserializationContext0.unknownTypeException(javaType2, (String) null, "Invalid definition for property %s (of type %s): %s");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class3 = Integer.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class3, ";o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultDeserializationContext0.findRootValueDeserializer(mapType0);
      defaultDeserializationContext0.getActiveView();
      Class<CollectionType> class1 = CollectionType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) objectReader0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken0, "/?#%0;q", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '0'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JavaType javaType0 = TypeFactory.unknownType();
      defaultDeserializationContext0.unknownTypeException(javaType0, "", "");
      defaultDeserializationContext0.getFactory();
      defaultDeserializationContext_Impl0.getConfig();
      defaultDeserializationContext0.getContextualType();
      Class<NullNode> class0 = NullNode.class;
      int int0 = 115;
      SQLException sQLException0 = new SQLException("h!", "l[hu|2", 115);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getContextualType();
      JsonParser jsonParser0 = null;
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "#|* L";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) deserializationContext0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) class0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) null;
      Object object1 = new Object();
      objectArray0[7] = object1;
      try { 
        deserializationContext0.reportInputMismatch((Class<?>) class0, "#|* L", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // #|* L
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getFactory();
      defaultDeserializationContext_Impl0.getConfig();
      defaultDeserializationContext0.getContextualType();
      Class<NullNode> class0 = NullNode.class;
      int int0 = 115;
      SQLException sQLException0 = new SQLException("h!", "l[hu|2", 115);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "\"lj_9BAm[W6m]ru]D";
      objectArray0[3] = (Object) beanDeserializerFactory1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[6] = (Object) deserializerFactoryConfig0;
      try { 
        defaultDeserializationContext0.reportInputMismatch((Class<?>) class0, "\"lj_9BAm[W6m]ru]D", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // \"lj_9BAm[W6m]ru]D
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      deserializationContext0.leaseObjectBuffer();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      NullNode nullNode0 = jsonNodeFactory0.nullNode();
      // Undeclared exception!
      try { 
        deserializationContext0.getAttribute(nullNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      deserializationContext0.getArrayBuilders();
      deserializationContext0.getContextualType();
      Class<Object> class0 = Object.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`jeAQ8xU7De4.");
      // Undeclared exception!
      try { 
        deserializationContext0.handleWeirdKey(class0, " Wl0hF5Qu", " Wl0hF5Qu", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory1);
      Class<ArrayType> class0 = ArrayType.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) beanDeserializerFactory1;
      objectArray0[3] = (Object) beanDeserializerFactory1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) beanDeserializerFactory1;
      objectArray0[6] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.handleWeirdKey(class0, "", "qy/", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializerFactory0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((JsonNodeFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = '2';
      charArray0[2] = '+';
      charArray0[3] = '*';
      charArray0[4] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1699, stringReader0, objectReader0, charsToNameCanonicalizer0, charArray0, (-5334), 3, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) '2';
      objectArray0[1] = (Object) objectMapper0;
      objectArray0[2] = (Object) iOContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "N/A", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockDate mockDate0 = new MockDate(0, (-2311), 2176, (-3843), (-2311));
      MockDate mockDate1 = new MockDate(2176, (-2311), (-3843));
      MockDate mockDate2 = new MockDate(22L);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(mockDate1);
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      String string0 = "m-k'2A^$-YeR[S";
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) deserializerFactoryConfig0;
      objectArray0[3] = (Object) "m-k'2A^$-YeR[S";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdNumberValue(class0, (Number) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      // Undeclared exception!
      try { 
        deserializationContext0.findClass("Invalid definition for property %s (of type %s): %s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      MockDate mockDate1 = new MockDate((-982), (-982), (-3843));
      MockDate mockDate2 = new MockDate(22L);
      PipedReader pipedReader0 = new PipedReader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultDeserializationContext0);
      try { 
        objectReader0.readValues((Reader) pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<ReferenceType> class0 = ReferenceType.class;
      deserializationContext0.weirdKeyException(class0, (String) null, "Cannot deserialize instance of %s out of %s token");
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Object> class0 = Object.class;
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonToken0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 13);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, pipedReader0, objectReader0, charsToNameCanonicalizer1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) readerBasedJsonParser0;
      objectArray0[1] = (Object) deserializerFactory0;
      objectArray0[2] = (Object) pipedWriter0;
      objectArray0[3] = (Object) deserializerFactory0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      Iterable<Deserializers> iterable0 = deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getFactory();
      MockDate mockDate0 = new MockDate((-1476), (-1476), 1505, 0, (-3783));
      MockDate mockDate1 = new MockDate((-3783), 1505, (-1));
      MockDate mockDate2 = new MockDate((-4821L));
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating(iterable0);
      mockDate1.before(mockDate0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      MockDate mockDate1 = new MockDate((-982), (-982), (-3843));
      MockDate mockDate2 = new MockDate(22L);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.readerForUpdating("DEFAULT");
      mockDate2.before(mockDate0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.getDeserializationContext();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      DefaultDeserializationContext defaultDeserializationContext1 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext1.leaseObjectBuffer();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.parseDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.getConfig();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Object object0 = new Object();
      objectMapper0.readerForUpdating(object0);
      MockDate mockDate0 = new MockDate(3, 378, 2);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.getContextualType();
      SQLDataException sQLDataException0 = new SQLDataException(":");
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      defaultDeserializationContext0.instantiationException((Class<?>) class1, (Throwable) sQLDataException0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      int int0 = (-3843);
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      MockDate mockDate1 = new MockDate((-982), (-982), (-3843));
      MockDate mockDate2 = new MockDate(22L);
      int int1 = (-2384);
      int int2 = 2141;
      int int3 = (-1751);
      Class<MapType> class0 = MapType.class;
      PipedReader pipedReader0 = new PipedReader();
      ObjectReader[] objectReaderArray0 = new ObjectReader[5];
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(defaultDeserializationContext0);
      objectReaderArray0[0] = objectReader0;
      ObjectReader objectReader1 = objectMapper0.readerForUpdating(objectReader0);
      objectReaderArray0[1] = objectReader1;
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      ObjectReader objectReader2 = new ObjectReader(objectReader0, jsonFactory3);
      objectReaderArray0[2] = objectReader2;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      typeBindings0.findBoundType("");
      ObjectReader objectReader3 = objectMapper0.readerFor((JavaType) null);
      objectReaderArray0[3] = objectReader3;
      ObjectReader objectReader4 = objectMapper0.readerFor(class0);
      objectReaderArray0[4] = objectReader4;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)2;
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0);
      dataFormatReaders_Match0.getReader();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser((IOContext) null, (-394), pipedReader0, (ObjectCodec) null, (CharsToNameCanonicalizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<InputStream> class0 = InputStream.class;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "\"GH6OT{-S[";
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) stdKeyDeserializers0;
      objectArray0[4] = (Object) "\"GH6OT{-S[";
      try { 
        defaultDeserializationContext_Impl0.reportMissingContent("\"GH6OT{-S[", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No content to map due to end-of-input
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Class<PlaceholderForType> class0 = PlaceholderForType.class;
      String string0 = "c";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) deserializerFactory0;
      objectArray0[1] = (Object) "c";
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) "c";
      objectArray0[4] = (Object) deserializerFactory0;
      objectArray0[5] = (Object) beanDeserializerFactory0;
      objectArray0[6] = (Object) beanDeserializerFactory0;
      objectArray0[7] = (Object) beanDeserializerFactory0;
      objectArray0[8] = (Object) objectMapper1;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, "8%046x7R", "8%046x7R", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.deser.BeanDeserializerFactory
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_FIELDS;
      // Undeclared exception!
      try { 
        deserializationContext0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.getFactory();
      defaultDeserializationContext_Impl0.getConfig();
      defaultDeserializationContext0.getContextualType();
      Class<NullNode> class0 = NullNode.class;
      String string0 = "h!";
      SQLException sQLException0 = new SQLException("h!", "l[hu|2", 115);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.instantiationException((Class<?>) class0, (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      String string0 = "";
      Class<CollectionType> class0 = CollectionType.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.getConfig();
      defaultDeserializationContext_Impl0.getDeserializationFeatures();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("g/#]X!`4g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.hasSomeOfFeatures(203);
      TypeFactory.defaultInstance();
      String string0 = "IZ}&MRwav<u";
      String string1 = "";
      Class<Integer> class0 = Integer.class;
      defaultDeserializationContext_Impl0.weirdStringException("", class0, "IZ}&MRwav<u");
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasDeserializationFeatures(0);
      defaultDeserializationContext_Impl0.getContextualType();
      Object object0 = new Object();
      Class<Vector> class0 = Vector.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) pipedInputStream0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class1, "type to register serializer for", "type to register serializer for", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.copy();
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<String> class0 = String.class;
      defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "");
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      Object object0 = new Object();
      Class<DateFormat> class1 = DateFormat.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "!B";
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) jsonToken0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) valueInstantiators_Base0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class1, jsonToken0, "!B", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasDeserializationFeatures(3);
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object object0 = new Object();
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) beanDeserializerFactory0;
      objectArray0[2] = (Object) class0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) defaultDeserializationContext0;
      objectArray0[5] = object0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class1, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-131072));
      coreXMLDeserializers_Std0.getObjectIdReader();
      Integer integer0 = new Integer(1325);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) objectMapper0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      try { 
        defaultDeserializationContext_Impl0.reportInputMismatch((JsonDeserializer<?>) coreXMLDeserializers_Std0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Locale locale0 = Locale.JAPAN;
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      defaultDeserializationContext_Impl0.weirdNativeValueException(locale0, class0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      defaultDeserializationContext0.weirdNativeValueException("NBf,YEr{biz#D/H *Ut", class0);
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[0] = (Object) class0;
      try { 
        defaultDeserializationContext_Impl0.reportMappingException("NBf,YEr{biz#D/H *Ut", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // NBf,YEr{biz#D/H *Ut
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      deserializationContext0.leaseObjectBuffer();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<MapLikeType> class0 = MapLikeType.class;
      // Undeclared exception!
      try { 
        deserializationContext0.mappingException(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<InputStream> class0 = InputStream.class;
      Object object0 = new Object();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleWeirdStringValue(class0, (String) null, "type to register serializer for", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasDeserializationFeatures(0);
      defaultDeserializationContext_Impl0.getContextualType();
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      deserializationContext0.weirdStringException("problem handler tried to resolve into non-subtype: ", class0, "no such class found");
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures(0);
      TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      String string0 = "nfB:T5jq-4rcT'M";
      defaultDeserializationContext0.weirdStringException("IZ}&MRwav<u", class0, "nfB:T5jq-4rcT'M");
      defaultDeserializationContext0.checkUnresolvedObjectId();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext0.mappingException(class0, jsonToken0);
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jsonMappingException0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[3] = (Object) deserializerFactory0;
      objectArray0[4] = (Object) deserializerFactory0;
      defaultDeserializationContext_Impl0.mappingException("uhPVAKB22WU9 J", objectArray0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      ConfigOverrides configOverrides1 = configOverrides0.copy();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class0 = CollectionType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      MapLikeType mapLikeType1 = mapLikeType0.withContentTypeHandler((Object) null);
      MapLikeType mapLikeType2 = mapLikeType1.withKeyType(mapLikeType0);
      mapLikeType2.withKeyType(mapLikeType0);
      Locale locale0 = Locale.KOREA;
      MapLikeType mapLikeType3 = mapLikeType2.withTypeHandler(locale0);
      simpleAbstractTypeResolver0.findTypeMapping(deserializationConfig0, mapLikeType3);
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      defaultDeserializationContext0.mappingException(class1, jsonToken0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportInputMismatch((JsonDeserializer<?>) null, "|mPpx", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      defaultDeserializationContext0.hasSomeOfFeatures(2956);
      ObjectBuffer objectBuffer1 = new ObjectBuffer();
      defaultDeserializationContext0.returnObjectBuffer(objectBuffer1);
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      defaultDeserializationContext0.hasSomeOfFeatures(0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      deserializerFactoryConfig0.deserializers();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasSomeOfFeatures((-3552));
      TypeFactory.defaultInstance();
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      String string0 = null;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      defaultDeserializationContext1.weirdStringException((String) null, class0, (String) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      TypeFactory.unknownType();
      SQLDataException sQLDataException0 = new SQLDataException();
      Class<ResolvedRecursiveType> class1 = ResolvedRecursiveType.class;
      Class<ResolvedRecursiveType> class2 = ResolvedRecursiveType.class;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 4034);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class1);
      valueInstantiator_Base0.getDelegateCreator();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.keyDeserializerInstance((Annotated) null, objectMapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned key deserializer definition of type com.fasterxml.jackson.databind.ObjectMapper; expected type KeyDeserializer or Class<KeyDeserializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.deser.DefaultDeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
      
      deserializationContext0.getConfig();
      // Undeclared exception!
      try { 
        deserializationContext0.parseDate("<GBMis]-cihhiYq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.hasDeserializationFeatures((-2384));
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext0.hasDeserializationFeatures(0);
      Class<InputStream> class0 = InputStream.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      objectArray0[3] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.copy();
      int int0 = 0;
      defaultDeserializationContext1.hasDeserializationFeatures(0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      String string0 = "";
      Object object0 = new Object();
      Class<ArrayType> class0 = ArrayType.class;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) simpleAbstractTypeResolver0;
      objectArray0[1] = (Object) simpleAbstractTypeResolver0;
      objectArray0[2] = (Object) defaultDeserializationContext0;
      objectArray0[4] = object0;
      objectArray0[5] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException(class0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = (DefaultDeserializationContext.Impl)defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl1.setAttribute(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      deserializationContext0.returnObjectBuffer((ObjectBuffer) null);
      Class<Integer> class0 = Integer.class;
      defaultDeserializationContext_Impl0.endOfInputException(class0);
      // Undeclared exception!
      try { 
        deserializationContext0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = deserializationContext0.leaseObjectBuffer();
      assertNotNull(objectBuffer0);
      
      deserializationContext0.returnObjectBuffer(objectBuffer0);
      Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
      deserializationContext0.endOfInputException(class0);
      assertEquals(0, deserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<ArrayType> class0 = ArrayType.class;
      defaultDeserializationContext0.endOfInputException(class0);
      Class<AbstractDeserializer> class1 = AbstractDeserializer.class;
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        MapLikeType.upgradeFrom((JavaType) null, (JavaType) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.MapLikeType", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      deserializerFactoryConfig0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.constructType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) deserializerFactory0;
      objectArray0[1] = (Object) defaultDeserializationContext0;
      objectArray0[2] = (Object) beanDeserializerFactory0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      ObjectBuffer objectBuffer0 = new ObjectBuffer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) deserializationContext0;
      objectArray0[1] = (Object) defaultDeserializationContext_Impl0;
      objectArray0[2] = (Object) objectMapper1;
      objectArray0[3] = (Object) defaultDeserializationContext0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) defaultDeserializationContext0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException((JsonDeserializer<?>) null, jsonToken0, "k*[q\"7jDX2%P`!(", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      Iterable<KeyDeserializers> iterable0 = deserializerFactoryConfig0.keyDeserializers();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DeserializerFactory deserializerFactory1 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory1);
      defaultDeserializationContext_Impl0.getConfig();
      JsonDeserializer<SimpleType> jsonDeserializer0 = (JsonDeserializer<SimpleType>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jsonDeserializer0).handledType();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jsonToken0;
      objectArray0[1] = (Object) deserializerFactory1;
      objectArray0[2] = (Object) deserializerFactoryConfig0;
      objectArray0[3] = (Object) iterable0;
      objectArray0[4] = (Object) "";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) deserializerFactory0;
      objectArray0[7] = (Object) beanDeserializerModifier0;
      objectArray0[8] = (Object) defaultDeserializationContext_Impl0;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.reportWrongTokenException(jsonDeserializer0, jsonToken0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<MapLikeType> class0 = MapLikeType.class;
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, valueInstantiator_Base0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jsonFactory0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) jsonToken0;
      objectArray0[3] = (Object) jsonToken0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) deserializationContext0;
      objectArray0[6] = (Object) objectMapper1;
      objectArray0[7] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        deserializationContext0.reportWrongTokenException(class0, jsonToken0, "JSON", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      objectMapper0.disable(jsonParser_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        deserializationContext0.getBase64Variant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      MockDate mockDate1 = new MockDate((-982), (-982), (-3843));
      MockDate mockDate2 = new MockDate(52L);
      MockDate.UTC((-3843), (-3843), (-1167), (-3843), (-1167), (-3843));
      mockDate0.before(mockDate2);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      MockDate mockDate0 = new MockDate((-982), (-3843), (-3843), (-982), (-3843));
      mockDate0.clone();
      MockDate mockDate1 = new MockDate(52L);
      MockDate.UTC((-3843), (-3843), (-1167), (-3843), (-1167), (-3843));
      mockDate0.before(mockDate1);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.constructCalendar(mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
