/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:43:41 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.core.util.Separators;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.SerializerCache;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.Serializers;
import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.TemporalAmount;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.Stack;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) collectionLikeType0, (BeanProperty) beanProperty_Bogus1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = (JavaType) collectionLikeType0;
      javaTypeArray0[2] = (JavaType) collectionLikeType0;
      javaTypeArray0[3] = javaType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[3]);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionLikeType0);
      CollectionLikeType collectionLikeType1 = collectionType1.withContentTypeHandler(beanSerializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer((JavaType) collectionLikeType1, (BeanProperty) beanProperty_Bogus0);
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      JavaType javaType1 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus1 = new BeanProperty.Bogus();
      serializerProvider0.findPrimaryPropertySerializer(javaType1, (BeanProperty) beanProperty_Bogus1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      serializerProvider0.defaultSerializeDateKey(0L, (JsonGenerator) filteringGeneratorDelegate0);
      System.setCurrentTimeMillis((-424L));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) objectMapper0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) objectMapper0;
      objectArray0[3] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) null, "i}V\"][{%m2JI2gmk", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'm'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      SimpleObjectIdResolver simpleObjectIdResolver1 = (SimpleObjectIdResolver)simpleObjectIdResolver0.newForDeserialization(beanProperty_Bogus0);
      simpleType0.withValueHandler(simpleObjectIdResolver1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.findNullKeySerializer(simpleType0, beanProperty_Bogus0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace("");
      basicBeanDescription0.findProperty(propertyName1);
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getDefaultNullKeySerializer();
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      Class<Throwable> class0 = Throwable.class;
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      objectMapper0._deserializationConfig = null;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, true, (PropertyName) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanProperty_Bogus0;
      beanProperty_Bogus0.findAliases((MapperConfig<?>) null);
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) beanProperty_Bogus0;
      objectArray0[3] = (Object) objectMapper0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) jsonSerializer0;
      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) pOJOPropertyBuilder0, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type N/A): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      POJOPropertiesCollector pOJOPropertiesCollector1 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector1).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector1).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector1).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector1).getType();
      BasicBeanDescription basicBeanDescription1 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector1);
      BeanSerializerBuilder beanSerializerBuilder1 = new BeanSerializerBuilder(basicBeanDescription1);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn(stack0).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn(beanSerializerBuilder1).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Module> class0 = Module.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectMapper0.writerFor(class0);
      serializerProvider0.findTypedValueSerializer(javaType0, false, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1403, 1080);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<HashMap> class0 = HashMap.class;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "J>hNgx8x#=i(RA#[c");
      JavaType javaType0 = TypeFactory.unknownType();
      MapType mapType0 = typeFactory1.constructMapType(class0, javaType0, javaType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType0, mapType0, javaType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) mapLikeType0, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapLikeType cannot be cast to com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.getTimeZone();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findTypedValueSerializer(javaType0, false, (BeanProperty) null);
      Class<DateFormat> class0 = DateFormat.class;
      serializerProvider0.findTypedValueSerializer(class0, true, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer(class0, true, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      MockDate mockDate0 = new MockDate();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-42);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3184), objectMapper0, filterOutputStream0, byteArray0, (byte)71, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-720));
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProviderInstance();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, propertyName0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2355);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(bufferedOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, filterOutputStream0, byteArray0, (byte)101, true);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes(jsonpCharacterEscapes0);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(propertyName0, jsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 3854);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1855, objectMapper0, mockFileOutputStream0, byteArray0, (byte)1, false);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator(serializedString0);
      try { 
        serializerProvider0.defaultSerializeDateValue(3L, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      serializerProvider0.findTypedValueSerializer(javaType0, true, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.findNullKeySerializer(javaType0, beanProperty_Bogus0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) beanProperty_Bogus0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Incompatible types: declared root type (%s) vs %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findValueSerializer(javaType0);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      jsonGenerator0.writeNumber("");
      MockDate mockDate1 = new MockDate(1, 1, 0, 59, 59, (-712));
      serializerProvider0.defaultSerializeDateValue((Date) mockDate1, jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        serializerProvider0.defaultSerializeValue(jsonGenerator0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<MockThrowable> class0 = MockThrowable.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("}vu@KtUMlBr");
      ReferenceType referenceType2 = referenceType1.withValueHandler(objectMapper_DefaultTyping0);
      ReferenceType referenceType3 = (ReferenceType)referenceType2.withContentValueHandler(typeBindings0);
      Object object0 = new Object();
      referenceType3.withContentValueHandler(object0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.TypeBindings cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      objectMapper0.enable(jsonGenerator_FeatureArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      ObjectMapper.findModules();
      objectArray0[3] = (Object) defaultSerializerProvider_Impl0;
      defaultSerializerProvider_Impl0.mappingException("", objectArray0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      defaultSerializerProvider_Impl0.getAnnotationIntrospector();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      Integer integer0 = new Integer(1);
      ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      defaultSerializerProvider_Impl0.findObjectId(integer0, objectIdGenerator0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(objectArray0[0]);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      Class<BeanSerializer> class1 = BeanSerializer.class;
      defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.includeFilterSuppressNulls(objectMapper0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      long long0 = 957L;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 139;
      String string0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "n%6A", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      String string0 = "Argument #%d has no property name, is not Injectable: can not use as Creator %s";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("Argument #%d has no property name, is not Injectable: can not use as Creator %s", (String) null, (-1));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl1;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)3;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLTimeoutException0, "Argument #%d has no property name, is not Injectable: can not use as Creator %s", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findTypeSerializer(javaType0);
      serializerProvider0.findTypedValueSerializer(javaType0, true, (BeanProperty) null);
      serializerProvider0.findValueSerializer(javaType0);
      serializerProvider0.getFilterProvider();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<NamedType> class0 = NamedType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findNullKeySerializer(simpleType0, beanProperty_Bogus0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) beanProperty_Bogus0;
      objectArray0[1] = (Object) "%{8#3kYwenp]s9!";
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "%{8#3kYwenp]s9!", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '{'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, 1, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      try { 
        serializerProvider0.defaultSerializeNull(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, true, (BeanProperty) null);
      defaultSerializerProvider_Impl0.copy();
      Class<DateFormat> class0 = DateFormat.class;
      defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
      defaultSerializerProvider_Impl0.getConfig();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.unknownType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)27;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 1, objectMapper0, byteArrayOutputStream0, byteArray0, 1222, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setHighestNonEscapedChar((-1088));
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(1L, jsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Locale locale0 = Locale.KOREAN;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(0, 0, locale0);
      try { 
        objectMapper0.updateValue(dateFormat0, (Object) dateFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000000412\" (class java.text.SimpleDateFormat), not marked as ignorable (6 known properties: \"numberFormat\", \"dateFormatSymbols\", \"lenient\", \"timeZone\", \"2DigitYearStart\", \"calendar\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.text.SimpleDateFormat[\"com.fasterxml.jackson.core.io.SerializedString@0000000412\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findTypedValueSerializer(javaType0, true, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer(javaType0, true, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      objectMapper0.setTypeFactory(typeFactory0);
      Integer integer0 = new Integer(80);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "dK", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) pOJOPropertiesCollector0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[8] = (Object) null;
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      serializerProvider0.defaultSerializeField((String) null, (Object) null, filteringGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(2597);
      NullNode nullNode0 = NullNode.getInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)serializerProvider0.setAttribute(integer0, nullNode0);
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getWrapperName();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<MockDateFormat> class1 = MockDateFormat.class;
      Class<Annotation> class2 = Annotation.class;
      beanProperty_Bogus0.getContextAnnotation(class2);
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotatedField annotatedField1 = annotatedField0.withAnnotations(annotationMap1);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, annotatedField1, (PropertyMetadata) null);
      defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Std0);
      serializerProvider0.getSerializationView();
      Class<CreatorProperty> class3 = CreatorProperty.class;
      serializerProvider0.findValueSerializer((Class<?>) class3, (BeanProperty) beanProperty_Std0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      serializerProvider0.getLocale();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) typeBindings0;
      objectArray0[1] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("BH*3ox!7tI}ZEC%U?j,", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'U'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonFactory0.enable(jsonParser_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      defaultSerializerProvider_Impl1.getGenerator();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, false);
      defaultSerializerProvider_Impl1.defaultSerializeField((String) null, (Object) null, filteringGeneratorDelegate0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      String string0 = "2%V2P}p2gP";
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot pass null JsonSerializer");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Throwable throwable0 = null;
      String string1 = "";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Cannot pass null JsonSerializer", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '{';
      charArray0[1] = 'd';
      charArray0[2] = 'C';
      charArray0[3] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-488), (Reader) null, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, 0, false);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      UTF8JsonGenerator uTF8JsonGenerator1 = (UTF8JsonGenerator)uTF8JsonGenerator0.overrideStdFeatures((-991), 3);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.defaultSerializeNull(uTF8JsonGenerator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((OutputStream) byteArrayBuilder0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, true, true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.defaultSerializeField("u($S", defaultSerializerProvider_Impl0, filteringGeneratorDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-22));
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      Class<Object> class0 = Object.class;
      serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale locale0 = Locale.PRC;
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance(1, 3, locale0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateFormat0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 739, objectMapper0, pipedOutputStream0, byteArray0, 2, false);
      uTF8JsonGenerator0.getPrettyPrinter();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter((PrettyPrinter) null);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper2.getSerializerProviderInstance();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute(beanProperty_Bogus0, simpleDateFormat0);
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ((SerializerProvider)defaultSerializerProvider_Impl1)._createAndCacheUntypedSerializer(class0);
      defaultSerializerProvider_Impl1.getConfig();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(mapLikeType0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      objectMapper0.canSerialize(class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
      objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findTypedValueSerializer(class1, true, (BeanProperty) null);
      serializerProvider0.getDefaultNullValueSerializer();
      serializerProvider0.findValueSerializer(class1);
      Class<Object> class2 = Object.class;
      serializerProvider0.findPrimaryPropertySerializer(class2, (BeanProperty) null);
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      String string0 = "mT$;/>";
      int int0 = (-7);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      JavaType javaType1 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType) null, javaType1);
      JavaType[] javaTypeArray0 = new JavaType[9];
      javaTypeArray0[0] = javaType0;
      javaTypeArray0[1] = javaType1;
      javaTypeArray0[2] = javaType1;
      javaTypeArray0[3] = javaType0;
      javaTypeArray0[4] = javaType0;
      javaTypeArray0[5] = javaType0;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class3 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class3);
      javaTypeArray0[6] = (JavaType) collectionType0;
      javaTypeArray0[7] = javaType1;
      javaTypeArray0[8] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType1, javaTypeArray0, javaType0, javaType0);
      String string1 = "Incompatible types: declared root type (%s) vs %s";
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException(mapType0, string1, string1);
      SQLWarning sQLWarning0 = new SQLWarning(string0, string0, int0, jsonMappingException0);
      String string2 = "WRAP_EXCEPTIONS";
      serializerProvider0.reportMappingProblem((Throwable) sQLWarning0, string2, (Object[]) javaTypeArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.findValueSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning("B3qK@NNOf!", "B3qK@NNOf!");
      ObjectIdGenerator<MockDateFormat> objectIdGenerator0 = (ObjectIdGenerator<MockDateFormat>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      serializerProvider0.findObjectId(sQLWarning0, objectIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.unknownType();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("~", (Throwable) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLInvalidAuthorizationSpecException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Could not resolve type id '%s' as a subtype of %s", "Could not resolve type id '%s' as a subtype of %s", sQLTimeoutException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("~", "", 262, sQLNonTransientException0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLSyntaxErrorException0, "Could not resolve type id '%s' as a subtype of %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(serializerProvider0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._createUntypedSerializer(simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) sQLNonTransientConnectionException0;
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLNonTransientConnectionException0, "k&?l%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "%e`1D^lM8\"G'";
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[4] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[5] = (Object) beanProperty_Bogus0;
      objectArray0[6] = (Object) "%e`1D^lM8\"G'";
      objectArray0[7] = (Object) beanProperty_Bogus0;
      objectArray0[8] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("%e`1D^lM8\"G'", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != java.lang.Object
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      basicBeanDescription0.getClassInfo();
      Class<DateFormat> class0 = DateFormat.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "7cGm", javaType0);
      try { 
        serializerProvider0.serializerInstance(virtualAnnotatedMember0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned Class java.text.DateFormat; expected Class<JsonSerializer>
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      Class<InputStream> class0 = InputStream.class;
      javaType0.isTypeOrSuperTypeOf(class0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(javaType0, (BeanProperty) null);
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonSerializer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Class<NamedType> class1 = NamedType.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 0, objectReader0, bufferedOutputStream0);
      try { 
        serializerProvider0.defaultSerializeValue(object0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findValueSerializer(javaType0, (BeanProperty) null);
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      MockDate mockDate0 = new MockDate(2971, (-1065), 2971, 0, (-1065));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte) (-66);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 2971, objectMapper0, mockPrintStream0, byteArray0, (-252), false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -252
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findValueSerializer(javaType0, (BeanProperty) null);
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, (TypeBindings) null);
      Class<NullNode> class0 = NullNode.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "", javaType0);
      annotationIntrospector1.findPropertyAliases(virtualAnnotatedMember0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 125, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(1L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-21));
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      serializerProvider0.findValueSerializer(class0);
      // Undeclared exception!
      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.time.chrono.ChronoLocalDate has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<String> jsonSerializer0 = null;
      defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      defaultSerializerProvider_Impl0.getTimeZone();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.findBoundType("YTqJCJa+7{P1l=g");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) null, false, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TypeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setInputDecorator(inputDecorator0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory3);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte) (-1);
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.includeFilterSuppressNulls((Object) null);
      long long0 = 435L;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      jsonFactory1.copy();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("JSON", "gUP0kQRt{w.j5iA1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"gUP0kQRt{w.j5iA1\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProvider();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) objectMapper1;
      objectArray0[1] = (Object) objectMapper1;
      objectArray0[2] = (Object) objectMapper1;
      objectArray0[3] = (Object) objectMapper1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[6] = (Object) objectMapper1;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.getGenerator();
      NullNode nullNode0 = NullNode.instance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1590);
      placeholderForType0.actualType();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._reportIncompatibleRootType(nullNode0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "";
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) simpleType0);
      MapType mapType1 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) mapType0, (JavaType) mapType0);
      MapType mapType2 = (MapType)objectMapper1.constructType(mapType1);
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType((Object) null, mapType2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([map type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.util.HashMap] -> [simple type, class java.util.HashMap]] -> [map type; class java.util.HashMap, [simple type, class java.util.HashMap] -> [simple type, class java.util.HashMap]]]) vs [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getContextualType();
      CollectionLikeType collectionLikeType0 = typeFactory1.constructCollectionLikeType(class0, (JavaType) null);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) collectionLikeType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) null);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      serializerProvider0.findPrimaryPropertySerializer((JavaType) placeholderForType0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Locale.LanguageRange> jsonSerializer0 = (JsonSerializer<Locale.LanguageRange>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jsonSerializer0).toString();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(jsonSerializer0, beanProperty_Bogus0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((List) null).when(pOJOPropertiesCollector0).getProperties();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyName propertyName1 = propertyName0.withNamespace("N/A");
      basicBeanDescription0.findProperty(propertyName1);
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.createArrayNode();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
      serializerProvider0.findValueSerializer(class0, (BeanProperty) null);
      serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) "^%Au8)`Q!T%'~";
      objectArray0[2] = (Object) "^%Au8)`Q!T%'~";
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("^%Au8)`Q!T%'~", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findValueSerializer((JavaType) placeholderForType0);
      serializerProvider0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) null);
      Class<DateFormat> class0 = DateFormat.class;
      serializerProvider0.findKeySerializer(class0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[1] = (Object) "^%Au8)`Q!Tu'~";
      objectArray0[2] = (Object) "^%Au8)`Q!Tu'~";
      Object object0 = new Object();
      objectArray0[3] = object0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("^%Au8)`Q!Tu'~", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapType mapType1 = mapType0.withContentValueHandler(simpleObjectIdResolver0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType1);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) referenceType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findValueSerializer(class1, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      JsonSerializer<Class<Object>> jsonSerializer0 = (JsonSerializer<Class<Object>>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jsonSerializer0).toString();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(jsonSerializer0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getAnnotationIntrospector();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.class;
      serializerProvider0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Bogus0);
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
      serializerProvider0.serializerInstance((Annotated) null, jsonSerializer0);
      serializerProvider0.getFilterProvider();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "; expected Class<JsonDeserializer>");
      defaultSerializerProvider0.getUnknownTypeSerializer(class0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      valueInstantiator_Base0.getDefaultCreator();
      int int0 = 1050;
      Integer integer0 = new Integer(1050);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      serializerProvider0.findValueSerializer((JavaType) placeholderForType0);
      serializerProvider0.findNullKeySerializer((JavaType) null, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
      serializerProvider0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapType mapType1 = mapType0.withContentValueHandler(simpleObjectIdResolver0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType1);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) referenceType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findPrimaryPropertySerializer((JavaType) mapType1, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory.defaultInstance();
      ObjectMapper objectMapper1 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      try { 
        serializerProvider0.findValueSerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn(stack0, (List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer) null, (JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn(stack0, (List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn(beanSerializerBuilder0, (BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      serializerProvider0.findValueSerializer(class0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findTypedValueSerializer((JavaType) collectionType0, true, (BeanProperty) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = new UnknownSerializer();
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      serializerProvider0.findValueSerializer(class0);
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      serializerProvider0.getDefaultPropertyInclusion(class1);
      BeanDescription beanDescription0 = null;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) objectMapper0;
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, "F!c!", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type N/A: F!c!
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findValueSerializer((JavaType) placeholderForType0);
      BeanDescription beanDescription0 = null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) serializerProvider0;
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, "com.fasterxml.jackson.core.io.OutputDecorator", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type N/A: com.fasterxml.jackson.core.io.OutputDecorator
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      Class<NullNode> class0 = NullNode.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      serializerProvider0.getTimeZone();
      serializerProvider0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      MapType mapType1 = mapType0.withContentValueHandler(simpleObjectIdResolver0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapType1, mapType1);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
      objectMapper0.acceptJsonFormatVisitor((JavaType) referenceType0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializerProvider serializerProvider1 = objectMapper0.getSerializerProviderInstance();
      serializerProvider1._unknownTypeSerializer = serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER;
      serializerProvider0.getGenerator();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((-3777L), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      MockDate mockDate0 = new MockDate(0L);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem("JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      defaultSerializerProvider_Impl1.getActiveView();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale_Category0, true);
      File file0 = MockFile.createTempFile("`_?v^", "`_?v^");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, filterOutputStream0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonpCharacterEscapes0.getEscapeSequence((-140));
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      serializerProvider0.defaultSerializeValue(class0, jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectMapper objectMapper1 = new ObjectMapper();
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      MockDate mockDate1 = new MockDate(1, 1, 0, 59, 59, (-712));
      serializerProvider0.defaultSerializeDateValue((Date) mockDate1, jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        serializerProvider0.defaultSerializeValue(jsonGenerator0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"dupDetector\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getSerializerProviderInstance();
      ObjectMapper objectMapper1 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)80, (-4883));
      MapType mapType1 = mapType0.withContentTypeHandler(byteArrayInputStream0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(mapType1, mapType0, mapType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findTypedValueSerializer((JavaType) mapLikeType0, true, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.MapLikeType cannot be cast to com.fasterxml.jackson.databind.type.MapType
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Random.setNextRandom((byte) (-12));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider0.handlePrimaryContextualization(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, (AtomicReference<Throwable>) null);
      Class<DateFormat> class1 = DateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl1)._findExplicitUntypedSerializer(class1);
      defaultSerializerProvider_Impl0.getTypeFactory();
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      serializerProvider0.getTypeFactory();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      Integer integer0 = new Integer(80);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      serializerProvider0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(integer0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      try { 
        serializerProvider0.findValueSerializer(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.text.DateFormat`: Failed to construct BeanSerializer for [simple type, class java.text.DateFormat]: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType0);
      collectionType1.containedTypeOrUnknown(3);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = new UnknownSerializer();
      serializerProvider0.setNullKeySerializer(jsonSerializer0);
      serializerProvider0.findTypedValueSerializer((JavaType) collectionType1, false, (BeanProperty) beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
      serializerProvider0.setNullKeySerializer(jsonSerializer0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      serializerProvider0.getTypeFactory();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-122));
      placeholderForType0.actualType();
      ObjectMapper objectMapper1 = new ObjectMapper();
      objectMapper1.getSerializerProviderInstance();
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, false, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      objectMapper0.reader((ContextAttributes) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) collectionType0);
      collectionType1.containedTypeOrUnknown(3);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      serializerProvider0.setNullKeySerializer(jsonSerializer0);
      serializerProvider0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Bogus0);
      serializerProvider0.findNullValueSerializer(beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      Object[] objectArray0 = new Object[0];
      defaultSerializerProvider_Impl0.mappingException("Invalid definition for property %s (of type %s): %s", objectArray0);
      defaultSerializerProvider_Impl0.copy();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Integer integer0 = new Integer(80);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(simpleObjectIdResolver0, (JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.annotation.SimpleObjectIdResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.findTypedValueSerializer((JavaType) placeholderForType0, true, (BeanProperty) null);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((JavaType) placeholderForType0, (BeanProperty) null);
      Integer integer0 = new Integer((-4259));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonSerializer0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-84);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, 0, true);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(integer0, jsonGeneratorDelegate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      System.setCurrentTimeMillis(3510L);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("5ZP\"`wrxmsZi|Nx;{=(");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getGenerator();
      Class<String> class0 = String.class;
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      objectMapper0.enable(deserializationFeature0);
      SerializationConfig serializationConfig0 = null;
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
      objectMapper0._newWriter((SerializationConfig) null, (JavaType) null, minimalPrettyPrinter0);
      serializerProvider0.getDefaultPropertyInclusion(class0);
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      serializerProvider0.findTypeSerializer(javaType0);
      serializerProvider0.getActiveView();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "=&J+y(FkL", (-536));
      SQLTransientException sQLTransientException0 = new SQLTransientException("=&J+y(FkL", "=&J+y(FkL", sQLRecoverableException0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) sQLTransientException0;
      objectArray0[1] = (Object) "=&J+y(FkL";
      objectArray0[2] = (Object) "=&J+y(FkL";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) sQLRecoverableException0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      sQLRecoverableException0.printStackTrace((PrintWriter) mockPrintWriter0);
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLTransientException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Locale.Category> class0 = Locale.Category.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.copy();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_IS_GETTERS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      serializerProvider0.hasSerializationFeatures(92);
      Random.setNextRandom(8);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-25);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      simpleObjectIdResolver0.newForDeserialization(unknownSerializer0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) simpleObjectIdResolver0, (Object) mockDate0);
      serializerProvider0.findValueSerializer((JavaType) arrayType0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
      serializerProvider0.isEnabled(serializationFeature0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("", "Qbg9sQrT~uE7Y2MS~{Y");
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      serializerProvider0.setNullValueSerializer(jsonSerializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      serializerProvider0.canOverrideAccessModifiers();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.writer();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      serializerProvider0.findObjectId(objectMapper0, objectIdGenerator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      serializerProvider0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(integer0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "]yY(BCwf9>}D");
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      serializerProvider0.hasSerializationFeatures(0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType[] javaTypeArray0 = new JavaType[3];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, (JavaType) null, javaTypeArray0, javaType0);
      ReferenceType referenceType1 = ReferenceType.upgradeFrom(referenceType0, referenceType0);
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      JavaType javaType1 = referenceType2.getAnchorType();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ArrayType arrayType0 = ArrayType.construct(javaType1, typeBindings0, (Object) jsonSerializer0, (Object) mockDateFormat0);
      serializerProvider0.findValueSerializer((JavaType) arrayType0);
      Random.setNextRandom(0);
      JavaType javaType2 = TypeFactory.unknownType();
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      TypeBindings.createIfNeeded(class1, javaType2);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      serializerProvider0.getTypeFactory();
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      serializerProvider0.setNullValueSerializer(jsonSerializer1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      try { 
        serializerProvider0.defaultSerializeDateKey((long) 55296, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      Class<Object> class0 = Object.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      boolean boolean0 = SerializerProvider.CACHE_UNKNOWN_MAPPINGS;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-$$JORLt+3}U|LY.E", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      mockFileOutputStream0.write(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 68, objectMapper0, dataOutputStream0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      serializerProvider0.defaultSerializeDateValue(806L, jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, (OutputStream) null);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setRootValueSeparator((SerializableString) null);
      serializerProvider0.defaultSerializeDateValue((long) 80, jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      serializerProvider0.setNullValueSerializer(jsonSerializer1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      serializerProvider0.getDefaultPropertyFormat(class0);
      Class<NullNode> class1 = NullNode.class;
      serializerProvider0.getDefaultPropertyInclusion(class1);
      serializerProvider0.getConfig();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?G5R8)FJJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      objectMapper0.clearProblemHandlers();
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.defaultVisibility();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PUBLIC_ONLY;
      jsonAutoDetect_Value0.withIsGetterVisibility(jsonAutoDetect_Visibility0);
      JsonAutoDetect.Value jsonAutoDetect_Value1 = JsonAutoDetect.Value.merge(jsonAutoDetect_Value0, jsonAutoDetect_Value0);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value1);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      objectMapper0.setTypeFactory(typeFactory0);
      Integer integer0 = new Integer(80);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      JsonSerializer<Object> jsonSerializer1 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer1);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS;
      defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      Class<Object> class0 = Object.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      Class<Object> class1 = Object.class;
      serializerProvider0.findValueSerializer(class1);
      serializerProvider0.hasSerializationFeatures(2);
      Random.setNextRandom((-492));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      Class<Object> class0 = Object.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      serializerProvider0.hasSerializationFeatures(0);
      Random.setNextRandom(0);
      JavaType javaType0 = TypeFactory.unknownType();
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectIdResolver objectIdResolver0 = simpleObjectIdResolver0.newForDeserialization(byteArrayInputStream0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) jsonFactory0, (Object) objectIdResolver0);
      serializerProvider0.findValueSerializer((JavaType) arrayType0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(40, 40);
      Class<HashMap> class0 = HashMap.class;
      Class<Object> class1 = Object.class;
      Object[] objectArray0 = new Object[9];
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class1;
      SQLWarning sQLWarning0 = new SQLWarning();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      try { 
        defaultSerializerProvider0.reportMappingProblem("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      serializerProvider0.findValueSerializer(class1);
      serializerProvider0.getFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      serializerProvider0.hasSerializationFeatures(0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      serializerProvider0.getAnnotationIntrospector();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      objectMapper0.reader((ContextAttributes) contextAttributes_Impl0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      Class<LinkedHashSet> class1 = LinkedHashSet.class;
      CollectionType collectionType1 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) collectionType0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.setNullKeySerializer(jsonSerializer0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", "", (Throwable) null);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jsonSerializer0;
      objectArray0[1] = (Object) collectionType0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) collectionType1;
      ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLInvalidAuthorizationSpecException0, "", objectArray0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9999);
      defaultSerializerProvider_Impl0.findKeySerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      Random.setNextRandom(80);
      SQLDataException sQLDataException0 = new SQLDataException("", "", 80);
      Object[] objectArray0 = new Object[0];
      ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLDataException0, (String) null, objectArray0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(placeholderForType0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "", "");
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      MockFile mockFile1 = new MockFile("JSON", "CREATOR");
      MockFile mockFile2 = (MockFile)MockFile.createTempFile("JSON", "", (File) mockFile1);
      try { 
        objectMapper0.writeValue((File) mockFile2, (Object) defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[\"annotationIntrospector\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      collectionType0.containedTypeOrUnknown(1094);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<Object> class1 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findKeySerializer((Class<?>) class1, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "");
      Class<Object> class0 = Object.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      serializerProvider0.hasSerializationFeatures(0);
      Random.setNextRandom(1250);
      SerializerCache serializerCache0 = new SerializerCache();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      serializerCache0.typedValueSerializer(class1);
      // Undeclared exception!
      try { 
        serializerProvider0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.getLocale();
      objectMapper0.reader((ContextAttributes) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("JSON", "Cannot access ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      try { 
        serializerProvider0.reportBadDefinition((Class<?>) class0, "LnN3.o2", (Throwable) sQLTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LnN3.o2
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      SQLTransientException sQLTransientException0 = new SQLTransientException("Q4]=o_2OR", "Q4]=o_2OR");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.getLocale();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.findKeySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Bogus0);
      long long0 = (-170L);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      UTF8JsonGenerator uTF8JsonGenerator0 = null;
      try {
        uTF8JsonGenerator0 = new UTF8JsonGenerator((IOContext) null, 0, objectMapper2, (OutputStream) null, byteArray0, (byte)1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, defaultSerializerProvider_Impl0, true);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      Class<Locale.Category> class1 = Locale.Category.class;
      serializerProvider0.getDefaultPropertyInclusion(class1);
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      serializerProvider0.isEnabled(mapperFeature0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      serializerProvider0.findPrimaryPropertySerializer(javaType0, (BeanProperty) null);
      Class<Object> class0 = Object.class;
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      Class<String> class0 = String.class;
      serializerProvider0.getUnknownTypeSerializer(class0);
      serializerProvider0.getFilterProvider();
      serializerProvider0.findValueSerializer(class0);
      serializerProvider0.getFilterProvider();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)serializerProvider0.setAttribute(integer0, mockDateFormat0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      serializerProvider0.findValueSerializer(class0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("on&H~R_RU9t:o,|c$", "]Nf8s8{?GQEO0", 0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]Nf8s8{?GQEO0", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "]Nf8s8{?GQEO0", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      HashMap<TypeKey, JsonSerializer<Object>> hashMap0 = new HashMap<TypeKey, JsonSerializer<Object>>();
      ReadOnlyClassToSerializerMap readOnlyClassToSerializerMap0 = ReadOnlyClassToSerializerMap.from(hashMap0);
      readOnlyClassToSerializerMap0.typedValueSerializer((JavaType) placeholderForType0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.getFilterProvider();
      Class<Locale.Category> class0 = Locale.Category.class;
      serializerProvider0.getDefaultPropertyInclusion(class0);
      serializerProvider0.getGenerator();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Integer integer0 = new Integer(80);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Integer integer1 = new Integer(80);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      NullNode nullNode0 = arrayNode0.nullNode();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)serializerProvider0.setAttribute(integer1, nullNode0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer1);
      Random.setNextRandom(80);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, (ObjectCodec) null, (Writer) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.hasSerializationFeatures(55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures(1351);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Instant instant0 = null;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("Null passed for `valueType` of `findValueSerializer()`", locale_Category0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      Class<Object> class1 = Object.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class1);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField((String) null, class0, writerBasedJsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.reader((ContextAttributes) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
      objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      try { 
        defaultSerializerProvider_Impl1.reportMappingProblem((Throwable) null, " ^fv8AtDY%s'", (Object[]) deserializationFeatureArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  ^fv8AtDY%s'
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockDate mockDate0 = new MockDate(0, 0, 2);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayBuilder0, 2);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext1, 19, (ObjectCodec) null, bufferedOutputStream0, byteArrayBuilder0.NO_BYTES, 0, true);
      byteArrayBuilder0.setCurrentSegmentLength(3);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultSerializerProvider_Impl0.getAttribute(mockDateFormat0);
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
      TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      JavaType javaType0 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(816);
      // Undeclared exception!
      try { 
        TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.util.HashMap with 1 type parameter: class expects 2
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_a");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl3 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl3.copy();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      defaultSerializerProvider_Impl2.setNullKeySerializer(unknownSerializer0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultSerializerProvider0;
      defaultSerializerProvider0.mappingException("r}", objectArray0);
      defaultSerializerProvider_Impl0.getConfig();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getDefaultNullKeySerializer();
      defaultSerializerProvider_Impl1.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl2.getGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl2.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) simpleType0, "JSON", (Throwable) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(1586, 1586);
      TypeFactory typeFactory2 = typeFactory1.withCache(lRUMap0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory3 = typeFactory2.withClassLoader(classLoader0);
      Class<HashMap> class0 = HashMap.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1586);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      MapLikeType mapLikeType0 = mapType0.withKeyType(placeholderForType0);
      ArrayType arrayType0 = typeFactory3.constructArrayType((JavaType) mapLikeType0);
      String string0 = "";
      int int0 = 13;
      DataTruncation dataTruncation0 = new DataTruncation(13, false, false, 13, 13);
      try { 
        serializerProvider0.reportBadDefinition((JavaType) arrayType0, "", (Throwable) dataTruncation0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator((OutputDecorator) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectMapper1);
      jsonFactory5.setCodec(objectMapper1);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory6 = jsonFactory3.enable(jsonGenerator_Feature1);
      JsonFactory jsonFactory7 = jsonFactory6.configure(jsonParser_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t_{", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      mockFileOutputStream0.flush();
      JsonGenerator jsonGenerator0 = jsonFactory7.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.defaultSerializeNull(jsonGenerator0);
      serializerProvider0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      defaultSerializerProvider_Impl0.setNullKeySerializer(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "E?pe?x[/G-";
      objectArray0[1] = (Object) defaultSerializerProvider_Impl0;
      defaultSerializerProvider0.mappingException("E?pe?x[/G-", objectArray0);
      defaultSerializerProvider_Impl0.getConfig();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      String string0 = "5xWMb8t*";
      String string1 = ")u\\S;B(m+@|.m";
      String string2 = "8{g19,9d\\:I]OOL}V'\\";
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Incompatible types: declared root type (%s) vs %s";
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("Incompatible types: declared root type (%s) vs %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("Can only call after BeanDeserializer has been resolved", "Can only call after BeanDeserializer has been resolved");
      try { 
        objectMapper0.writeValue((File) mockFile0, (Object) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"absoluteFile\"]->org.evosuite.runtime.mock.java.io.MockFile[\"path\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)");
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      objectIdGenerators_StringIdGenerator0.generateId((Object) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(defaultSerializerProvider_Impl1, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      MockDate mockDate0 = new MockDate(1013L);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      PipedInputStream pipedInputStream0 = new PipedInputStream(2451);
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setInputDecorator(inputDecorator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-76);
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.findKeySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      String string0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      JavaType javaType0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      long long0 = 0L;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      collectionType0.toCanonical();
      Class<DateFormat> class2 = DateFormat.class;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionType0, collectionType0, collectionType0);
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType1);
      Class<MockDateFormat> class3 = MockDateFormat.class;
      collectionType0.isTypeOrSubTypeOf(class3);
      MapLikeType mapLikeType2 = mapLikeType1.withContentValueHandler(beanSerializer0);
      mapLikeType2.isThrowable();
      JavaType javaType0 = typeFactory0.constructReferenceType(class2, mapLikeType2);
      collectionType0.withHandlersFrom(javaType0);
      typeFactory0.constructRawMapLikeType(class2);
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      BeanProperty beanProperty0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findTypedValueSerializer((JavaType) null, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.actualType();
      BeanProperty beanProperty0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findTypedValueSerializer((JavaType) null, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getActiveView();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[3] = (Object) null;
      defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, (Class<?>) null);
      objectArray0[4] = null;
      objectArray0[5] = (Object) defaultSerializerProvider_Impl0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      serializerProvider0.setNullValueSerializer(jsonSerializer0);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      try { 
        serializerProvider0.defaultSerializeDateKey((long) 55296, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer1);
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy)PropertyNamingStrategy.SNAKE_CASE;
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(writerBasedJsonGenerator0);
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((long) 55296, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      beanProperty_Bogus0.getMember();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory2);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      Class<NamedType> class0 = NamedType.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFile mockFile0 = new MockFile("Can only call after BeanDeserializer has been resolved", "Can only call after BeanDeserializer has been resolved");
      Integer integer0 = new Integer(80);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)serializerProvider0._attributes;
      objectMapper0.writer((ContextAttributes) contextAttributes_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute("Can only call after BeanDeserializer has been resolved", simpleObjectIdResolver0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl1.DEFAULT_NULL_KEY_SERIALIZER);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl2.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0._keySerializer;
      // Undeclared exception!
      try { 
        serializerProvider0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid definition for property %s (of type %s): %s");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int int0 = (-748);
      JsonSerializer<Object> jsonSerializer0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = null;
      BeanProperty beanProperty0 = null;
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3352));
      BeanProperty beanProperty0 = null;
      boolean boolean0 = true;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.findNullKeySerializer(placeholderForType0, (BeanProperty) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.reportBadTypeDefinition((BeanDescription) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      DeserializationConfig deserializationConfig1 = new DeserializationConfig(deserializationConfig0, simpleMixInResolver0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      DeserializationConfig deserializationConfig2 = new DeserializationConfig(deserializationConfig1, contextAttributes0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
      Class<Locale.Category> class0 = Locale.Category.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "L;3SyG/mr3<eZwg[");
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      javaTypeArray0[2] = (JavaType) simpleType0;
      javaTypeArray0[3] = (JavaType) simpleType0;
      javaTypeArray0[4] = (JavaType) simpleType0;
      javaTypeArray0[5] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1], javaTypeArray0[5]);
      JavaType javaType0 = typeFactory1.constructType((Type) mapType0, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation(deserializationConfig2, javaType0, simpleMixInResolver0);
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "", (Object[]) javaTypeArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.util.Locale$Category`: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "Failed to getValue() with method ", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator((OutputDecorator) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory5 = jsonFactory4.setCodec(objectMapper1);
      jsonFactory5.setCodec(objectMapper1);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory6 = jsonFactory3.enable(jsonGenerator_Feature1);
      JsonFactory jsonFactory7 = jsonFactory6.configure(jsonParser_Feature0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t_{", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory7.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      serializerProvider0.defaultSerializeNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_COERCION_OF_SCALARS;
      // Undeclared exception!
      try { 
        serializerProvider0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.setNullKeySerializer(defaultSerializerProvider_Impl2.DEFAULT_NULL_KEY_SERIALIZER);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Locale locale0 = Locale.FRENCH;
      MockDateFormat.getDateTimeInstance(0, 0, locale0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl1.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, (-305), (ObjectCodec) null, (Writer) null);
      DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
      try { 
        defaultSerializerProvider_Impl1.defaultSerializeField("}", dateFormat0, writerBasedJsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      JsonParser.Feature jsonParser_Feature7 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[7] = jsonParser_Feature7;
      JsonParser.Feature jsonParser_Feature8 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[8] = jsonParser_Feature8;
      objectMapper1.disable(jsonParser_FeatureArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)49;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.getLocale();
      Class<NullNode> class0 = NullNode.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey(0L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) writerBasedJsonGenerator0);
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer1);
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.isNonStaticInnerClass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory0);
      assertNotNull(jsonFactory2);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertTrue(jsonFactory2.canParseAsync());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider0.cachedSerializersCount());
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertNotNull(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertNotNull(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
      assertNotNull(defaultDeserializationContext0);
      assertFalse(defaultDeserializationContext0.equals((Object)defaultDeserializationContext_Impl0));
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, defaultDeserializationContext0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2, defaultSerializerProvider0, defaultDeserializationContext0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.includeFilterSuppressNulls(defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JavaType javaType0 = null;
      String string0 = "|=";
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "|=", "|=");
      assertNotNull(invalidTypeIdException0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals("|=", invalidTypeIdException0.getTypeId());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotNull(jsonSerializer0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JavaType javaType0 = null;
      String string0 = "13|s5t[6*8f6(^Z.K$e";
      try { 
        defaultSerializerProvider_Impl0.resolveSubType((JavaType) null, "13|s5t[6*8f6(^Z.K$e");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '13|s5t[6*8f6(^Z.K$e' as a subtype of null: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance(0, 0, locale0);
      assertNotNull(simpleDateFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", simpleDateFormat0.toPattern());
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("EEEE j MMMM aaaa HH' h 'mm z", simpleDateFormat0.toLocalizedPattern());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(simpleDateFormat0, simpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1999);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1999);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isPrimitive());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.hasHandlers());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isFinal());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      Class<DateFormat> class0 = DateFormat.class;
      int int0 = 0;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      assertNotNull(coreXMLDeserializers_Std0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      JavaType javaType0 = coreXMLDeserializers_Std0.getValueType();
      assertNull(javaType0);
      assertEquals(AccessPattern.ALWAYS_NULL, coreXMLDeserializers_Std0.getNullAccessPattern());
      assertFalse(coreXMLDeserializers_Std0.isCachable());
      assertEquals(AccessPattern.CONSTANT, coreXMLDeserializers_Std0.getEmptyAccessPattern());
      
      try { 
        defaultSerializerProvider_Impl1.reportBadDefinition((JavaType) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper2.getSerializerProviderInstance();
      assertNotSame(objectMapper0, objectMapper1);
      assertNotSame(objectMapper0, objectMapper2);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper2, objectMapper0);
      assertNotSame(objectMapper2, objectMapper1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper0.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper2.equals((Object)objectMapper0));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNull(jsonGenerator0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      
      try { 
        objectMapper2.writeValue((JsonGenerator) jsonGeneratorDelegate0, (Object) defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // [no message for java.lang.NullPointerException]
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(defaultSerializerProvider0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertNotNull(objectMapper1);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper2 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper2.equals((Object)objectMapper1));
      assertEquals(5, jsonGenerator_FeatureArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper2.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper1.getSerializerProvider();
      assertNotSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertNotSame(objectMapper1, objectMapper2);
      assertNotSame(objectMapper1, objectMapper0);
      assertNotNull(defaultSerializerProvider_Impl0);
      assertFalse(objectMapper0.equals((Object)objectMapper1));
      assertFalse(objectMapper1.equals((Object)objectMapper2));
      assertFalse(objectMapper1.equals((Object)objectMapper0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      assertNotNull(unknownSerializer0);
      assertFalse(unknownSerializer0.usesObjectId());
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      
      String string0 = null;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      assertNotNull(iOContext0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertNotNull(iOContext1);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      byte[] byteArray0 = iOContext0.allocWriteEncodingBuffer();
      assertSame(iOContext0, iOContext1);
      assertNotNull(byteArray0);
      assertEquals(8000, byteArray0.length);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext1, 0, (ObjectCodec) null, (Writer) null);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(unknownSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      AnnotatedMember annotatedMember0 = beanProperty_Bogus0.getMember();
      assertNull(annotatedMember0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      System.setCurrentTimeMillis(0L);
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Integer> jsonSerializer0 = (JsonSerializer<Integer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertNotNull(jsonFactory2);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(jsonFactory3);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("oD=mpRB?tyst'GO??xN", false);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory3.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
      assertSame(jsonFactory0, jsonFactory2);
      assertSame(jsonFactory0, jsonFactory3);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory3);
      assertSame(jsonFactory1, jsonFactory2);
      assertSame(jsonFactory1, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory0);
      assertSame(jsonFactory2, jsonFactory1);
      assertSame(jsonFactory2, jsonFactory3);
      assertSame(jsonFactory3, jsonFactory2);
      assertSame(jsonFactory3, jsonFactory0);
      assertSame(jsonFactory3, jsonFactory1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory1.canParseAsync());
      assertFalse(jsonFactory1.requiresCustomCodec());
      assertFalse(jsonFactory1.canHandleBinaryNatively());
      assertFalse(jsonFactory1.requiresPropertyOrdering());
      assertTrue(jsonFactory1.canUseCharArrays());
      assertEquals("JSON", jsonFactory1.getFormatName());
      assertEquals(" ", jsonFactory1.getRootValueSeparator());
      assertTrue(jsonFactory2.canParseAsync());
      assertFalse(jsonFactory2.canHandleBinaryNatively());
      assertTrue(jsonFactory2.canUseCharArrays());
      assertFalse(jsonFactory2.requiresCustomCodec());
      assertFalse(jsonFactory2.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory2.getRootValueSeparator());
      assertEquals("JSON", jsonFactory2.getFormatName());
      assertFalse(jsonFactory3.requiresPropertyOrdering());
      assertFalse(jsonFactory3.requiresCustomCodec());
      assertTrue(jsonFactory3.canUseCharArrays());
      assertTrue(jsonFactory3.canParseAsync());
      assertEquals("JSON", jsonFactory3.getFormatName());
      assertFalse(jsonFactory3.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory3.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      assertNotNull(jsonSerializer0);
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      assertNotNull(jsonSerializer1);
      assertFalse(jsonSerializer1.equals((Object)jsonSerializer0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      assertNotNull(typeBindings0);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      Class<Integer> class1 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      assertNotNull(javaType0);
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.useStaticType());
      assertEquals(0, javaType0.containedTypeCount());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.hasHandlers());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isMapLikeType());
      assertFalse(javaType0.isContainerType());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.hasContentType());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isArrayType());
      assertTrue(javaType0.isJavaLangObject());
      assertFalse(javaType0.isAbstract());
      
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.lang.Integer with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JavaType javaType0 = null;
      BeanProperty beanProperty0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      long long0 = 0L;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<Object> class1 = Object.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      assertNotNull(collectionType0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      
      Class<DateFormat> class2 = DateFormat.class;
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionType0, collectionType0, collectionType0);
      assertNotNull(mapLikeType0);
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      
      MapLikeType mapLikeType1 = mapLikeType0.withStaticTyping();
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotNull(mapLikeType1);
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertEquals(1, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType1);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotNull(beanSerializer0);
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertEquals(1, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(beanSerializer0.isUnwrappingSerializer());
      assertFalse(beanSerializer0.usesObjectId());
      
      MapLikeType mapLikeType2 = mapLikeType1.withContentValueHandler(beanSerializer0);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotNull(mapLikeType2);
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertEquals(1, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(beanSerializer0.isUnwrappingSerializer());
      assertFalse(beanSerializer0.usesObjectId());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType2.isContainerType());
      assertTrue(mapLikeType2.isMapLikeType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertFalse(mapLikeType2.isFinal());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertEquals(1, mapLikeType2.containedTypeCount());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      
      ReferenceType referenceType0 = (ReferenceType)typeFactory0.constructReferenceType(class2, mapLikeType2);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertNotNull(referenceType0);
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType2));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType2));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertEquals(1, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(beanSerializer0.isUnwrappingSerializer());
      assertFalse(beanSerializer0.usesObjectId());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType2.isContainerType());
      assertTrue(mapLikeType2.isMapLikeType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertFalse(mapLikeType2.isFinal());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertEquals(1, mapLikeType2.containedTypeCount());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      
      CollectionType collectionType1 = (CollectionType)collectionType0.withHandlersFrom(referenceType0);
      assertSame(collectionType0, collectionType1);
      assertNotSame(mapLikeType0, mapLikeType2);
      assertNotSame(mapLikeType0, mapLikeType1);
      assertNotSame(mapLikeType1, mapLikeType0);
      assertNotSame(mapLikeType1, mapLikeType2);
      assertNotSame(mapLikeType2, mapLikeType0);
      assertNotSame(mapLikeType2, mapLikeType1);
      assertSame(collectionType1, collectionType0);
      assertNotNull(collectionType1);
      assertTrue(mapLikeType0.equals((Object)mapLikeType1));
      assertTrue(mapLikeType0.equals((Object)mapLikeType2));
      assertTrue(mapLikeType1.equals((Object)mapLikeType0));
      assertTrue(mapLikeType1.equals((Object)mapLikeType2));
      assertTrue(mapLikeType2.equals((Object)mapLikeType1));
      assertTrue(mapLikeType2.equals((Object)mapLikeType0));
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.isEnumType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isJavaLangObject());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.useStaticType());
      assertEquals(1, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isPrimitive());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType1.isConcrete());
      assertFalse(mapLikeType1.isAbstract());
      assertTrue(mapLikeType1.isContainerType());
      assertTrue(mapLikeType1.isMapLikeType());
      assertFalse(mapLikeType1.isCollectionLikeType());
      assertFalse(mapLikeType1.isArrayType());
      assertFalse(mapLikeType1.isEnumType());
      assertFalse(mapLikeType1.isInterface());
      assertFalse(mapLikeType1.isPrimitive());
      assertTrue(mapLikeType1.useStaticType());
      assertFalse(mapLikeType1.hasValueHandler());
      assertFalse(mapLikeType1.hasHandlers());
      assertFalse(mapLikeType1.isJavaLangObject());
      assertEquals(1, mapLikeType1.containedTypeCount());
      assertTrue(mapLikeType1.hasContentType());
      assertFalse(mapLikeType1.isFinal());
      assertFalse(beanSerializer0.isUnwrappingSerializer());
      assertFalse(beanSerializer0.usesObjectId());
      assertFalse(mapLikeType2.isAbstract());
      assertTrue(mapLikeType2.isContainerType());
      assertTrue(mapLikeType2.isMapLikeType());
      assertFalse(mapLikeType2.isEnumType());
      assertFalse(mapLikeType2.isCollectionLikeType());
      assertTrue(mapLikeType2.isConcrete());
      assertFalse(mapLikeType2.isJavaLangObject());
      assertFalse(mapLikeType2.isFinal());
      assertTrue(mapLikeType2.hasHandlers());
      assertFalse(mapLikeType2.isPrimitive());
      assertTrue(mapLikeType2.hasContentType());
      assertEquals(1, mapLikeType2.containedTypeCount());
      assertFalse(mapLikeType2.isInterface());
      assertFalse(mapLikeType2.isArrayType());
      assertTrue(mapLikeType2.useStaticType());
      assertFalse(mapLikeType2.hasValueHandler());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isConcrete());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.isMapLikeType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isPrimitive());
      assertTrue(referenceType0.isAbstract());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.useStaticType());
      assertFalse(collectionType1.isJavaLangObject());
      assertFalse(collectionType1.hasValueHandler());
      assertFalse(collectionType1.isMapLikeType());
      assertFalse(collectionType1.isPrimitive());
      assertTrue(collectionType1.isCollectionLikeType());
      assertFalse(collectionType1.isEnumType());
      assertTrue(collectionType1.hasContentType());
      assertFalse(collectionType1.isFinal());
      assertTrue(collectionType1.isConcrete());
      assertFalse(collectionType1.isInterface());
      assertTrue(collectionType1.isContainerType());
      assertFalse(collectionType1.isAbstract());
      assertFalse(collectionType1.hasHandlers());
      assertFalse(collectionType1.isArrayType());
      assertEquals(1, collectionType1.containedTypeCount());
      assertFalse(collectionType1.useStaticType());
      
      MapLikeType mapLikeType3 = typeFactory0.constructRawMapLikeType(class2);
      assertNotSame(mapLikeType3, mapLikeType2);
      assertNotSame(mapLikeType3, mapLikeType1);
      assertNotSame(mapLikeType3, mapLikeType0);
      assertNotNull(mapLikeType3);
      assertFalse(mapLikeType3.equals((Object)mapLikeType2));
      assertFalse(mapLikeType3.equals((Object)mapLikeType1));
      assertFalse(mapLikeType3.equals((Object)mapLikeType0));
      assertFalse(mapLikeType3.isConcrete());
      assertTrue(mapLikeType3.isContainerType());
      assertTrue(mapLikeType3.isMapLikeType());
      assertFalse(mapLikeType3.isCollectionLikeType());
      assertFalse(mapLikeType3.isEnumType());
      assertFalse(mapLikeType3.hasValueHandler());
      assertFalse(mapLikeType3.useStaticType());
      assertFalse(mapLikeType3.isArrayType());
      assertEquals(0, mapLikeType3.containedTypeCount());
      assertTrue(mapLikeType3.isAbstract());
      assertFalse(mapLikeType3.isPrimitive());
      assertFalse(mapLikeType3.isJavaLangObject());
      assertFalse(mapLikeType3.isInterface());
      assertFalse(mapLikeType3.hasHandlers());
      assertTrue(mapLikeType3.hasContentType());
      assertFalse(mapLikeType3.isFinal());
      
      JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl1);
      assertNotNull(jsonFormatVisitorWrapper_Base0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.acceptJsonFormatVisitor(collectionType0, jsonFormatVisitorWrapper_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = defaultSerializerProvider_Impl1.includeFilterSuppressNulls(object0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(boolean0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      Class<?> class0 = defaultSerializerProvider_Impl1.getSerializationView();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNull(class0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotNull(defaultSerializerProvider0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl1;
      objectArray0[1] = (Object) defaultSerializerProvider_Impl1;
      JsonMappingException jsonMappingException0 = defaultSerializerProvider0.mappingException("-t", objectArray0);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider0);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl1);
      assertNotNull(jsonMappingException0);
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider_Impl1));
      assertFalse(defaultSerializerProvider_Impl0.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider0));
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl1));
      assertEquals(2, objectArray0.length);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      JsonGenerator jsonGenerator0 = null;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      MockDate mockDate0 = new MockDate(1013L);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(inputDecorator0).decorate(any(com.fasterxml.jackson.core.io.IOContext.class) , any(byte[].class) , anyInt() , anyInt());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-52);
      jsonFactory3.createParser(byteArray0);
      File file0 = MockFile.createTempFile("JSON", "2>ukH$fJ~");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider0.defaultSerializeDateKey((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "W#T_*iw.", true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-79);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectReader0, (OutputStream) null, byteArray0, (byte) (-77), true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-69L), (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getActiveView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.createInstance((SerializationConfig) null, serializerFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT;
      objectMapper0.reader(deserializationFeature0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonGenerator jsonGenerator0 = serializerProvider0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      MockDateFormat.getTimeInstance();
      IOContext iOContext0 = null;
      int int0 = (-669);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      Class<Object> class0 = Object.class;
      objectMapper0.readerFor(class0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Invalid definition for property %s (of type %s): %s", "Invalid definition for property %s (of type %s): %s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Invalid definition for property %s (of type %s): %s
         //
         verifyException("java.io.PrintStream", e);
      }
  }
}
