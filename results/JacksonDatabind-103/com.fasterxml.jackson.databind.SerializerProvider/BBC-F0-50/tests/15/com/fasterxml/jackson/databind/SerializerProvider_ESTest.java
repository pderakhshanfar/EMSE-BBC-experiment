/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:43:29 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.Date;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.PriorityQueue;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(unknownSerializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      assertFalse(objectMapper1.equals((Object)objectMapper0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TimeZone timeZone0 = serializerProvider0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<ChronoField> class0 = ChronoField.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) stringWriter0);
      defaultSerializerProvider_Impl0.defaultSerializeValue(class0, writerBasedJsonGenerator0);
      assertEquals(32, writerBasedJsonGenerator0.getOutputBuffered());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(batchUpdateException0);
      DataTruncation dataTruncation0 = new DataTruncation(28, false, false, 28, 28, sQLTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Missing external type id property '%s'", "", dataTruncation0);
      Object[] objectArray0 = new Object[9];
      JsonMappingException jsonMappingException0 = ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLNonTransientException0, "Missing external type id property '%s'", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[3];
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.mappingException("]K&fJHJV", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Object object0 = serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures((-9999));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = serializerProvider0.getLocale();
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      JsonInclude.Value jsonInclude_Value0 = serializerProvider0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<JavaType> class0 = JavaType.class;
      JsonFormat.Value jsonFormat_Value0 = serializerProvider0.getDefaultPropertyFormat(class0);
      assertEquals("", jsonFormat_Value0.getPattern());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(arrayType0, javaType0, javaType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapLikeType0);
      NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("Cannot pass null JsonSerializer", "STRICT_DUPLICATE_DETECTION");
      JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertTrue(jsonSerializer1.isUnwrappingSerializer());
      assertNotNull(jsonSerializer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNull(serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      objectMapper0.addMixIn(class0, class1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNull(serializationConfig0.getRootName());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object object0 = new Object();
      Object object1 = serializerProvider0.getAttribute(object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AnnotationIntrospector annotationIntrospector0 = serializerProvider0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerator<ObjectIdResolver> objectIdGenerator0 = (ObjectIdGenerator<ObjectIdResolver>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(objectMapper0, objectIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(class0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<JavaType> class0 = JavaType.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(arrayType0, simpleType0);
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(collectionLikeType0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PriorityQueue> class0 = PriorityQueue.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(collectionType0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute("java.util.PriorityQueue<java.util.PriorityQueue<java.lang.Object>>", beanSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLClientInfoException0, "%s(%d params)", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) null, "Null passed for `valueType` of `findValueSerializer()`", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int[] intArray0 = new int[3];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      Object[] objectArray0 = new Object[1];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) batchUpdateException0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("%7AbcZ^Iw&6wG@>f1", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[6];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("S?+wb", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // S?+wb
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, "WGAHtn;2x6qv=%]Ji?", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = ''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      Class<ChronoField> class1 = ChronoField.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class1, "II-Cg&&_YCEt");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(133);
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) placeholderForType0, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLDataException sQLDataException0 = new SQLDataException((String) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("JSON", "}&4uOH'Y?DAE |7;k*", sQLDataException0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLNonTransientConnectionException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("<5v%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("JSON", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.ser.BeanSerializer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures(56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(javaType0, (JavaType) null);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      Class<TypeIdResolver> class2 = TypeIdResolver.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionType0, javaTypeArray0, (JavaType) simpleType0);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 45, 2341);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.ByteArrayInputStream cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<PriorityQueue> class0 = PriorityQueue.class;
      Class<ClientInfoStatus> class1 = ClientInfoStatus.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, false, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) class0, (Object) objectMapper0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) referenceType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ObjectMapper cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(mockDateFormat0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<POJONode> class0 = POJONode.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      Class<Integer> class1 = Integer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      Boolean boolean0 = Boolean.valueOf("WRAP_ROOT_VALUE");
      Integer integer0 = new Integer(51);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = new PropertyMetadata.MergeInfo((AnnotatedMember) null, true);
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata0 = new PropertyMetadata(boolean0, "", integer0, "", propertyMetadata_MergeInfo0, nulls0, nulls0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, referenceType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((Class<?>) class0, (BeanProperty) beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((JavaType) collectionLikeType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, bufferedOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(objectMapper0, uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<HashMap> class0 = HashMap.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("[map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, (-1281), true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(class0, uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1281
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      try { 
        serializerProvider0.defaultSerializeValue(jsonGenerator0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0, byteArray0, 2430, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeNull(jsonGeneratorDelegate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, (byte) (-105), true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      File file0 = MockFile.createTempFile("JSON", "r9<rd5%(pC'B%aDt");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator(file0, jsonEncoding0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField(") out of range of Java short", ((GeneratorBase) jsonGenerator0).SURR2_FIRST, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      POJONode pOJONode0 = new POJONode(iOContext0);
      try { 
        serializerProvider0.defaultSerializeField("NON_EMTY", pOJONode0, filteringGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.core.io.IOContext[\"sourceReference\"]->com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[\"annotationIntrospector\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      MockFile mockFile0 = new MockFile("JSON");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      byte[] byteArray0 = new byte[6];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-970), objectMapper0, mockFileOutputStream0, byteArray0, 1, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("P&M~~E1@q", jsonFactory0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate(1, 102, 0, 1, 0, (-247));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 385, objectMapper0, objectOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, (OutputStream) null);
      uTF8JsonGenerator0.writeStartObject();
      MockDate mockDate0 = new MockDate(2, 2, 3, 1, 56320, 2);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, dataOutputStream0, byteArray0, (byte)96, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(0L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<HashMap> class0 = HashMap.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1281), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1125, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(0L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0);
      uTF8JsonGenerator0.writeStartObject();
      try { 
        serializerProvider0.defaultSerializeDateValue((long) 55296, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      MockDate mockDate0 = new MockDate(2084, 503, 0, 57343, 0, 80);
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateKey((long) (-1996), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      MockFile mockFile0 = new MockFile("NULL", "fC6XDGf]<A`");
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      try { 
        serializerProvider0.defaultSerializeDateKey((-539L), jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType((Object) null, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<CreatorProperty> jsonSerializer0 = (JsonSerializer<CreatorProperty>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer1 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaType0, javaType0, javaType0);
      ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) mapLikeType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(arrayType0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.handlePrimaryContextualization(beanSerializer0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = serializerProvider0.handlePrimaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertNotNull(jsonSerializer0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      assertNotNull(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<JavaType> class0 = JavaType.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, (AnnotationMap) null, 1706);
      try { 
        defaultSerializerProvider_Impl0.serializerInstance(annotatedParameter0, typeBindings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.type.TypeBindings; expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-534), objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      serializerProvider0.defaultSerializeDateKey((long) 3, (JsonGenerator) filteringGeneratorDelegate0);
      MockDate mockDate0 = new MockDate(2, (-65281), (-65281));
      serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) filteringGeneratorDelegate0);
      assertEquals(2, filteringGeneratorDelegate0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(jsonSerializer0, beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
      boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
      assertTrue(boolean0);
      
      boolean boolean1 = objectMapper0.canSerialize(class0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Integer integer0 = objectIdGenerators_IntSequenceGenerator0.generateId(class0);
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      TypeFactory typeFactory0 = serializationConfig0.getTypeFactory();
      Class<SettableBeanProperty> class1 = SettableBeanProperty.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class1);
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(integer0, collectionLikeType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([collection-like type; class com.fasterxml.jackson.databind.deser.SettableBeanProperty, contains [simple type, class java.lang.Object]]) vs `java.lang.Integer`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(deserializationConfig0, annotationIntrospector0, false, (PropertyName) null);
      JavaType javaType0 = pOJOPropertyBuilder0.getPrimaryType();
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation(deserializationConfig0, javaType0, deserializationConfig0);
      Object[] objectArray0 = new Object[5];
      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder0, "EXISTING_PROPERTY", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property [N/A] (of type `java.lang.Object`): EXISTING_PROPERTY
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, ", field(s): ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): , field(s): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      JavaType javaType0 = objectMapper0.constructType(class0);
      BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, javaType0, simpleMixInResolver0);
      Object[] objectArray0 = new Object[3];
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.text.DateFormat`: Invalid definition for property null (of type null): null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      MockFile mockFile0 = new MockFile("NULL", "fC6XDGf]<A`");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
      defaultSerializerProvider_Impl0.defaultSerializeNull(jsonGenerator0);
      assertEquals(31, jsonGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<JavaType> class0 = JavaType.class;
      MockDate mockDate0 = new MockDate(0, 0, (-590), 0, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1323, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, (-99), false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -99
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0);
      serializerProvider0.defaultSerializeDateValue((long) 55296, (JsonGenerator) uTF8JsonGenerator0);
      assertEquals(5, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, false, false);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.defaultSerializeField((String) null, (Object) null, filteringGeneratorDelegate0);
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, class0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2152, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, (TokenFilter) null, true, true);
      serializerProvider0.defaultSerializeField(")f'I16rY1AS", (Object) null, filteringGeneratorDelegate0);
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(unknownSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, false, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
      
      ObjectWriter objectWriter1 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter1.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer((-2));
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      objectMapper0.writeValueAsBytes(integer0);
      Class<Integer> class0 = Integer.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<ChronoField> class0 = ChronoField.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Class<ChronoField> class0 = ChronoField.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PropertyName propertyName0 = PropertyName.NO_NAME;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null, (BeanProperty) beanProperty_Std0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getDateTimeInstance();
      try { 
        defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) uTF8JsonGenerator0, (Object) simpleDateFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.text.SimpleDateFormat[\"dateFormatSymbols\"]->java.text.DateFormatSymbols[\"zoneStrings\"]->java.lang.String[][102])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<String> class0 = String.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilterProvider filterProvider0 = serializerProvider0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findKeySerializer((Class<?>) null, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLWarning sQLWarning0 = new SQLWarning("x", "x");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLWarning0, "ie8%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getDefaultNullValueSerializer();
      serializerProvider0.setDefaultKeySerializer(jsonSerializer0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<?> class0 = defaultSerializerProvider_Impl0.getActiveView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<?> class0 = defaultSerializerProvider_Impl0.getSerializationView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer(javaType0, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("'m=A}]O0CSmeV's3Q0y", "'m=A}]O0CSmeV's3Q0y");
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) arrayType0, "'m=A}]O0CSmeV's3Q0y", (Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 'm=A}]O0CSmeV's3Q0y
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "Null passed for `valueType` of `findValueSerializer()`", "Qzj` Z");
      assertEquals("Null passed for `valueType` of `findValueSerializer()`", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLDataException sQLDataException0 = new SQLDataException("", "", (-349));
      Class<MockDateFormat> class0 = MockDateFormat.class;
      try { 
        serializerProvider0.reportBadDefinition((Class<?>) class0, "N/A", (Throwable) sQLDataException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, byteArrayBuilder0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        serializerProvider0.defaultSerializeValue(simpleObjectIdResolver0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.annotation.SimpleObjectIdResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Integer integer0 = new Integer((-1977));
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("wEu;hN/%M+:}\"99|-W", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'M'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("6W_ZdHM%Ms[Ce/JHe-", "6W_ZdHM%Ms[Ce/JHe-", (Throwable) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLSyntaxErrorException0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLTransactionRollbackException0, "6W_ZdHM%Ms[Ce/JHe-", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'M'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<TypeKey> class0 = TypeKey.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute(jsonFactory0, class0);
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
