/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:25:15 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.sql.BatchUpdateException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Date;
import java.util.IllegalFormatConversionException;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      try { 
        defaultSerializerProvider_Impl0.resolveSubType(arrayType0, "z`");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'z`' as a subtype of [array type, component type: [simple type, class com.fasterxml.jackson.annotation.JsonFormat$Shape]]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, true, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.setDefaultKeySerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(integer0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NumberSerializers$IntegerSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) unknownSerializer0, (Object) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) resolvedRecursiveType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      serializerProvider0.setNullValueSerializer(unknownSerializer0);
      assertFalse(unknownSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      defaultSerializerProvider_Impl0.setNullKeySerializer(unknownSerializer0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertNotSame(defaultSerializerProvider0, defaultSerializerProvider_Impl0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TimeZone timeZone0 = serializerProvider0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((DataOutput) dataOutputStream0);
      defaultSerializerProvider_Impl0.defaultSerializeValue(typeFactory0, uTF8JsonGenerator0);
      assertEquals(20, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      serializerProvider0.defaultSerializeDateValue((long) 55296, jsonGenerator0);
      assertEquals(5, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.serializerInstance((Annotated) null, unknownSerializer0);
      assertSame(unknownSerializer0, jsonSerializer0);
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[9];
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.mappingException(";D-)9|YZGo-B6!(e", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      UnknownSerializer unknownSerializer0 = (UnknownSerializer)serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
      assertFalse(unknownSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = serializerProvider0.getLocale();
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilterProvider filterProvider0 = serializerProvider0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = serializerProvider0.getConfig();
      assertNull(serializationConfig0.getDefaultMergeable());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AnnotationIntrospector annotationIntrospector0 = serializerProvider0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerator<MockDateFormat> objectIdGenerator0 = (ObjectIdGenerator<MockDateFormat>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId((Object) null, objectIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(simpleType0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) arrayList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(resolvedRecursiveType0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (int[]) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) batchUpdateException0, "", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException((Throwable) null);
      Object[] objectArray0 = new Object[2];
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLInvalidAuthorizationSpecException0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("/'p^oPJ3:u%J8+lx", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'J'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[9];
      try { 
        serializerProvider0.reportMappingProblem("hpUGsqRQ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // hpUGsqRQ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "8n%r", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{class: ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Illegal start/length (%d/%d) wrt input array of %d bytes", (Object[]) stackTraceElementArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != java.lang.StackTraceElement
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("5\"A", "[@I0z");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "[@I0z", (Throwable) sQLTimeoutException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("N/A", sQLSyntaxErrorException0);
      SQLWarning sQLWarning0 = new SQLWarning("N/A", sQLFeatureNotSupportedException0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLWarning0, "2s%5r;eHQ/S", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "");
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLTransactionRollbackException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("!EQHqzW]~C&xO1y*\"%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures((-805));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<DateFormat> class0 = DateFormat.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<InputStream> class1 = InputStream.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(beanSerializer0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.ser.BeanSerializer cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findTypedValueSerializer((JavaType) null, true, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TypeKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      JsonFormat.Value jsonFormat_Value0 = serializerProvider0.getDefaultPropertyFormat(class0);
      DateFormat dateFormat0 = MockDateFormat.getDateInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0, (Object) jsonFormat_Value0, (Object) dateFormat0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) arrayType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, (JavaType) null);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) collectionLikeType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      ReferenceType referenceType0 = ReferenceType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      SimpleType simpleType0 = referenceType0.withContentValueHandler(referenceType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.ReferenceType cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.findObjectId((Object) null, (ObjectIdGenerator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findKeySerializer((JavaType) null, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2756));
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1938), objectMapper0, filterOutputStream0, byteArrayBuilder0.NO_BYTES, 1535, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(class0, uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, unknownSerializer0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 60000);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 2, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(beanProperty_Bogus0, uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object object0 = new Object();
      try { 
        serializerProvider0.defaultSerializeValue(object0, (JsonGenerator) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std((Map<String, Object>) null);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectReader0, mockPrintStream0, byteArray0, 145, true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("Internal error: no creator index for property '%s' (of type %s)", class0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanProperty_Bogus0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`J(/23E", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3222, objectMapper0, mockFileOutputStream0, byteArray0, 0, false);
      try { 
        serializerProvider0.defaultSerializeField("", iOContext0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      MockDate mockDate0 = new MockDate();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanProperty_Bogus0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" T<W", false);
      byte[] byteArray0 = new byte[8];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3856, objectMapper0, mockFileOutputStream0, byteArray0, (byte) (-71), false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -71
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      jsonGenerator0.writeStartObject((Object) mockFileWriter0);
      MockDate mockDate0 = new MockDate(56319, 56320, 55296, 57343, 56319);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0, byteArray0, 597, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(2554L, (JsonGenerator) filteringGeneratorDelegate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(989);
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1649), objectMapper0, byteArrayOutputStream0, byteArray0, (byte) (-124), true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((-2552L), (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -124
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("st:i@^j~/Yyc`");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockFileOutputStream0, byteArrayBuilder0.NO_BYTES, 3, true);
      try { 
        serializerProvider0.defaultSerializeDateValue((-2059L), (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jsonGenerator0.writeStartObject((Object) mockSimpleDateFormat0);
      try { 
        serializerProvider0.defaultSerializeDateValue((long) 55296, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockDate mockDate0 = new MockDate();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey(9223372036854775807L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0, jsonEncoding0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0);
      try { 
        serializerProvider0.defaultSerializeDateKey((long) 2, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(jsonFactory0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(collectionType0, collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([collection type; class java.util.List, contains [simple type, class java.lang.Object]]) vs `com.fasterxml.jackson.databind.type.CollectionType`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class1 = InputStream.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(collectionLikeType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = serializerProvider0.handlePrimaryContextualization(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, true, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      serializerProvider0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = serializerProvider0.getTypeFactory();
      assertNotNull(typeFactory0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNull(serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
      MockDate mockDate0 = new MockDate((-1L));
      serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) filteringGeneratorDelegate0);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("{class: ");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLNonTransientConnectionException0);
      StackTraceElement[] stackTraceElementArray0 = sQLIntegrityConstraintViolationException0.getStackTrace();
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Cannot pass null JsonSerializer", (Object[]) stackTraceElementArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "Cannot pass null JsonSerializer", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "com.fasterxml.jackson.databind.SerializerProvider", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[3];
      try { 
        serializerProvider0.reportBadTypeDefinition((BeanDescription) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type N/A: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1641);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, 0, false);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0);
      serializerProvider0.defaultSerializeNull(jsonGenerator0);
      assertTrue(serializerProvider0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, false);
      serializerProvider0.defaultSerializeDateKey((-2684L), (JsonGenerator) filteringGeneratorDelegate0);
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate((-2428), (-2428), (-2428), (-2428), (-2428));
      JsonFactory jsonFactory0 = new JsonFactory();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) dataOutputStream0, jsonEncoding0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      assertEquals(15, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(2161L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, false);
      defaultSerializerProvider_Impl0.defaultSerializeField((String) null, (Object) null, filteringGeneratorDelegate0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, false, true);
      defaultSerializerProvider_Impl0.defaultSerializeField((String) null, (Object) null, filteringGeneratorDelegate0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(unknownSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, false, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockFileWriter0);
      try { 
        serializerProvider0.defaultSerializeValue(jsonGenerator0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"currentValue\"]->com.fasterxml.jackson.core.json.WriterBasedJsonGenerator[\"outputContext\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"]->com.fasterxml.jackson.core.json.JsonWriteContext[\"parent\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertNotNull(jsonSerializer0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<JsonFormat.Shape> class0 = JsonFormat.Shape.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      objectMapper0.writerFor(class0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class1 = CreatorProperty.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class1);
      assertEquals(7, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>((Throwable) null);
      defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) arrayType0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(class0, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("", (String) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLInvalidAuthorizationSpecException0, "Could not resolve type id '%s' as a subtype of %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getActiveView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getSerializationView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer((JavaType) null, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      int[] intArray0 = new int[6];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) null, "E|", (Throwable) batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // E|
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayDeque> class0 = ArrayDeque.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)serializerProvider0.invalidTypeIdException(collectionType0, "", "");
      assertEquals("", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      long[] longArray0 = new long[8];
      MockThrowable mockThrowable0 = new MockThrowable("7V70j", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, (String) null, 1, longArray0, mockThrowable0);
      try { 
        serializerProvider0.reportBadDefinition((Class<?>) class0, (String) null, (Throwable) batchUpdateException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, (TokenFilter) null, true, true);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      try { 
        serializerProvider0.defaultSerializeField((String) null, simpleObjectIdResolver0, filteringGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.annotation.SimpleObjectIdResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      Object object0 = serializerProvider0.getAttribute(jsonFactory0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(65280);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      JsonInclude.Value jsonInclude_Value0 = serializerProvider0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException("N/A");
      Object[] objectArray0 = new Object[1];
      JsonMappingException jsonMappingException0 = ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLTransientException0, "N/A", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, class0);
      assertSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
      defaultSerializerProvider_Impl0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("com.fasterxml.jackson.databind.util.NameTransformer$1", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }
}
