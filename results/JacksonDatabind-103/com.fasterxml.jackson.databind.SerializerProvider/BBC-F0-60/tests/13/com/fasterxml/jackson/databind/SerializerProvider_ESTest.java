/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 04:00:40 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Writer;
import java.math.BigInteger;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.MinguoDate;
import java.time.temporal.TemporalField;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(17, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      serializerProvider0.setDefaultKeySerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(hashMap0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      assertFalse(defaultSerializerProvider0.equals((Object)defaultSerializerProvider_Impl0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      serializerProvider0.defaultSerializeValue((Object) null, jsonGenerator0);
      assertTrue(jsonGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      serializerProvider0.defaultSerializeNull(jsonGenerator0);
      assertFalse(jsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      SQLDataException sQLDataException0 = new SQLDataException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLDataException0);
      Object[] objectArray0 = new Object[9];
      JsonMappingException jsonMappingException0 = ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLFeatureNotSupportedException0, "JSON", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.CLOSE_CLOSEABLE;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(defaultSerializerProvider_Impl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      SimpleModule simpleModule0 = (SimpleModule)serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
      assertEquals("SimpleModule-23", simpleModule0.getModuleName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(2329);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonGenerator jsonGenerator0 = serializerProvider0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      JsonFormat.Value jsonFormat_Value0 = serializerProvider0.getDefaultPropertyFormat(class0);
      assertFalse(jsonFormat_Value0.hasLocale());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl1.getConfig();
      assertNull(serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(javaType0, objectIdGenerators_StringIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ((SerializerProvider)defaultSerializerProvider_Impl1)._findExplicitUntypedSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl1.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(javaType0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(jsonpCharacterEscapes0.ESCAPE_STANDARD, jsonpCharacterEscapes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Integer integer0 = new Integer(1917);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException(bigInteger0, class0, "iF$,Ud#j+j%Miu");
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) jsonMappingException0, "iF$,Ud#j+j%Miu", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'M'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON", "Kc%f=6s64&L\"S+OaOE", 94);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) objectMapper0;
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLSyntaxErrorException0, "Kc%f=6s64&L\"S+OaOE", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != com.fasterxml.jackson.databind.ObjectMapper
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLWarning sQLWarning0 = new SQLWarning();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLWarning0, "f1rE|o^>_", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[6];
      JsonMappingException jsonMappingException0 = serializerProvider0.mappingException("JSON", objectArray0);
      try { 
        serializerProvider0.reportMappingProblem((Throwable) jsonMappingException0, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("+_1[%0O#g:b84!^3", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) javaType0;
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem(")u,REw@mbX2~4#n%E", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != com.fasterxml.jackson.databind.type.SimpleType
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[8];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("KXQ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // KXQ
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "W.!2;L$@yx40<',L%D-", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'D'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("JSON", "Invalid type definition for type %s: %s", 0);
      try { 
        serializerProvider0.reportBadDefinition((Class<?>) null, "JSON", (Throwable) sQLNonTransientException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) null, "T^sx-Qp0-dT[3/jaCd");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // T^sx-Qp0-dT[3/jaCd
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[5];
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("%R-2yK!T^f", deserializationFeatureArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "", "", 64);
      stackTraceElementArray0[0] = stackTraceElement0;
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("!]at5NA9B%e]WsmPg", stackTraceElementArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != java.lang.StackTraceElement
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapperFeature mapperFeature0 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      // Undeclared exception!
      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.deser.SettableBeanProperty has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures((-3920));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer((JavaType) collectionType0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1093);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(coreXMLDeserializers_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) collectionType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[7];
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) resolvedRecursiveType0, javaTypeArray0, (JavaType) simpleType0);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(resolvedRecursiveType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.ResolvedRecursiveType cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) referenceType0;
      javaTypeArray0[2] = javaType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) referenceType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      ArrayType arrayType0 = ArrayType.construct(javaTypeArray0[2], typeBindings0, (Object) typeBindings0, (Object) javaTypeArray0[1]);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(arrayType0, javaType0, mapType0);
      ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, (JavaType) mapLikeType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.type.TypeBindings cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findTypedValueSerializer((JavaType) simpleType0, true, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.findTypeSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.findKeySerializer((Class<?>) null, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((JavaType) mapLikeType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, (OutputStream) null, byteArray0, (-1), false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(mockDateFormat0, uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, false, false);
      try { 
        serializerProvider0.defaultSerializeValue(object0, filteringGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class java.lang.Object and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      DateFormat dateFormat0 = MockDateFormat.getInstance();
      try { 
        serializerProvider0.defaultSerializeValue(dateFormat0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.text.SimpleDateFormat[\"dateFormatSymbols\"]->java.text.DateFormatSymbols[\"zoneStrings\"]->java.lang.String[][102])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DayOfWeek> class0 = DayOfWeek.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1301, objectReader0, mockPrintStream0, byteArrayBuilder0.NO_BYTES, 1301, true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayBuilder0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      serializerProvider0.setNullValueSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      try { 
        serializerProvider0.defaultSerializeNull(jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeField("", mockDateFormat0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY", true);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2328), objectReader0, mockPrintStream0, byteArray0, 0, true);
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY", "FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY", uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate(2714, (-1690), 3, 1, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 3, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockDate mockDate0 = new MockDate((-2180), 1, 1, 1, 1, (-2180));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0, byteArray0, 1966, true);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      jsonGenerator0.writeStartObject();
      MockDate mockDate0 = new MockDate(2, 2, 0);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(250L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      MinguoDate minguoDate0 = MockMinguoDate.now();
      IOContext iOContext0 = new IOContext(bufferRecycler0, minguoDate0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1522), objectMapper0, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 1, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(0L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockDate mockDate0 = new MockDate((-792), (-792), (-792));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(108);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, objectOutputStream0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDateFormat0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-676), objectMapper0, byteArrayBuilder0);
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      try { 
        serializerProvider0.defaultSerializeDateKey(date0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) charArrayWriter0);
      try { 
        serializerProvider0.defaultSerializeDateKey((long) 0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(objectMapper0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<TemporalField> class0 = TemporalField.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[4];
      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Collection> class0 = Collection.class;
      Class<DateFormat> class1 = DateFormat.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) collectionType0);
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = serializerProvider0.handlePrimaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<MockSimpleDateFormat> jsonSerializer0 = (JsonSerializer<MockSimpleDateFormat>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      JsonSerializer<Object> jsonSerializer1 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
      try { 
        objectMapper0.writeValueAsBytes(jsonSerializer1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class org.evosuite.shaded.org.mockito.internal.invocation.mockref.MockWeakReference and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.databind.JsonSerializer$MockitoMock$1091852344[\"mockitoInterceptor\"]->org.evosuite.shaded.org.mockito.internal.creation.bytebuddy.MockMethodInterceptor[\"mockHandler\"]->org.evosuite.shaded.org.mockito.internal.handler.InvocationNotifierHandler[\"invocationContainer\"]->org.evosuite.shaded.org.mockito.internal.stubbing.InvocationContainerImpl[\"invocationForStubbing\"]->org.evosuite.shaded.org.mockito.internal.invocation.InvocationMatcher[\"invocation\"]->org.evosuite.shaded.org.mockito.internal.invocation.InterceptedInvocation[\"mockRef\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(24);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object object0 = new Object();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(object0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findNullValueSerializer((BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AnnotationIntrospector annotationIntrospector0 = serializerProvider0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object object0 = serializerProvider0.getAttribute(objectMapper0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      BasicBeanDescription basicBeanDescription0 = (BasicBeanDescription)serializationConfig0.introspectClassAnnotations(class0);
      Object[] objectArray0 = new Object[6];
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "Cannot find a Value deserializer for abstract type ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.time.chrono.ChronoLocalDate`: Cannot find a Value deserializer for abstract type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute(objectMapper0, objectMapper0);
      assertSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("@Gb8W)", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, jsonSerializer0);
      assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<DateFormat> class0 = DateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      Class<Collection> class0 = Collection.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType((Object) null, collectionType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([collection type; class java.util.Collection, contains [simple type, class java.lang.Object]]) vs [null]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        serializerProvider0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, filterOutputStream0, byteArray0, (byte)3, true);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 95, objectMapper0, pipedOutputStream0, byteArray0, 1, false);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      try { 
        serializerProvider0.defaultSerializeNull(jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockFile mockFile0 = new MockFile("JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, true);
      serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) filteringGeneratorDelegate0);
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateKey(2147483647L, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      MockDate mockDate0 = new MockDate(0, 4640, 0, 0, 1, 4640);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, jsonGenerator0);
      assertEquals(13, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      serializerProvider0.defaultSerializeDateValue((long) 3, jsonGenerator0);
      assertEquals(1, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<?> jsonSerializer0 = serializerProvider0.handleSecondaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertNotNull(jsonSerializer0);
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      HashMap<String, ChronoLocalDate> hashMap0 = new HashMap<String, ChronoLocalDate>();
      objectMapper0.writeValueAsBytes(hashMap0);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(hashMap0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.MapSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      try { 
        serializerProvider0.defaultSerializeValue(objectMapper0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(17);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) placeholderForType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, false, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, false, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl1.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl1.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<DateFormat> class0 = DateFormat.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0, byteArray0, (byte)119, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(objectWriter0, uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      Class<Object> class0 = Object.class;
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("m{", " entries, hash area of ");
      byte[] byteArray0 = objectMapper0.writeValueAsBytes(sQLTransientConnectionException0);
      assertEquals(2155, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      UnknownSerializer unknownSerializer0 = new UnknownSerializer(class0);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(unknownSerializer0);
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilterProvider filterProvider0 = serializerProvider0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TimeZone timeZone0 = serializerProvider0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Class<Object> class0 = Object.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findKeySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("com.fasterxml.jackson.databind.ObjectMapper$3", "', problem: ", 2716);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLSyntaxErrorException0, "Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getActiveView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getSerializationView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findNullKeySerializer(javaType0, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition(javaType0, "array", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // array
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "`1<HNE;s", "");
      assertEquals("`1<HNE;s", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, false, (BeanProperty) beanProperty_Bogus0);
      assertEquals(6, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      int[] intArray0 = new int[0];
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.SerializationConfig", "");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("W-FLr7+.%", "", intArray0, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "W-FLr7+.%", (Throwable) batchUpdateException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      Class<MockDateFormat> class1 = MockDateFormat.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "kp O&caKdN}", resolvedRecursiveType0);
      try { 
        defaultSerializerProvider_Impl0.serializerInstance(virtualAnnotatedMember0, objectMapper0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.databind.ObjectMapper; expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      JsonInclude.Value jsonInclude_Value0 = serializerProvider0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("!pQz\"<fX;[k.Wl-K", "!pQz\"<fX;[k.Wl-K");
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLFeatureNotSupportedException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = serializerProvider0.getLocale();
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Invalid definition for property %s (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
