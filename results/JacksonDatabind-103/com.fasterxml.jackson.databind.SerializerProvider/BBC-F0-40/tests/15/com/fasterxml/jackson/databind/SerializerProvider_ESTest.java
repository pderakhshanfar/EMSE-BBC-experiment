/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 06:10:41 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.chrono.HijrahDate;
import java.util.Date;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.IllegalFormatFlagsException;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.TreeSet;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<String> class0 = String.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      assertNotNull(jsonSerializer0);
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertNotNull(simpleType0);
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<String> class0 = String.class;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      assertNotNull(serializerFactory0);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(beanSerializerFactory0.equals((Object)serializerFactory0));
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      Class<String> class0 = String.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertNotNull(objectWriter0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)defaultSerializerProvider_Impl0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals("UTC", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(13, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.setAttribute((Object) null, jsonFactory_Feature0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[4];
      JsonMappingException jsonMappingException0 = ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) null, "JSON", objectArray0);
      assertNotNull(jsonMappingException0);
      assertEquals(4, objectArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      boolean boolean0 = defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
      boolean boolean0 = defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      MapperFeature mapperFeature0 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
      boolean boolean0 = defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(objectMapper0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospectorPair annotationIntrospectorPair0 = (AnnotationIntrospectorPair)AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospectorPair0);
      
      PropertyName propertyName0 = PropertyName.construct("JSON");
      assertNotNull(propertyName0);
      assertEquals("JSON", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospectorPair0, false, propertyName0);
      assertNotNull(pOJOPropertyBuilder0);
      assertEquals("JSON", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertEquals("JSON", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertEquals("JSON", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultSerializerProvider_Impl0.includeFilterInstance(pOJOPropertyBuilder0, class0);
      assertNotNull(mockSimpleDateFormat0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals("JSON", propertyName0.getSimpleName());
      assertFalse(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertEquals("JSON", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      assertEquals("JSON", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializationFeatures(2640);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonGenerator jsonGenerator0 = defaultSerializerProvider_Impl0.getGenerator();
      assertNull(jsonGenerator0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonInclude.Value jsonInclude_Value0 = defaultSerializerProvider_Impl0.getDefaultPropertyInclusion((Class<?>) null);
      assertNotNull(jsonInclude_Value0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<RoundingMode> class0 = RoundingMode.class;
      JsonFormat.Value jsonFormat_Value0 = defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
      assertNotNull(jsonFormat_Value0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonFormat_Value0.hasShape());
      assertNull(jsonFormat_Value0.timeZoneAsString());
      assertFalse(jsonFormat_Value0.isLenient());
      assertFalse(jsonFormat_Value0.hasTimeZone());
      assertEquals("", jsonFormat_Value0.getPattern());
      assertEquals(JsonFormat.Shape.ANY, jsonFormat_Value0.getShape());
      assertFalse(jsonFormat_Value0.hasPattern());
      assertNull(jsonFormat_Value0.getLenient());
      assertFalse(jsonFormat_Value0.hasLenient());
      assertFalse(jsonFormat_Value0.hasLocale());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNull(serializationConfig0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
      assertNotNull(stdDateFormat0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      assertNotNull(typeFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<TreeSet> class0 = TreeSet.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      assertNotNull(collectionType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(collectionType0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isAbstract());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isInterface());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isPrimitive());
      assertTrue(collectionType0.isContainerType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(5, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertNotNull(simpleType0);
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(simpleType0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.hasHandlers());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, mockDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("MEqm01&O6{7-lc~J", "MEqm01&O6{7-lc~J", hashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("java.sql.SQLClientInfoException: MEqm01&O6{7-lc~J", sQLClientInfoException0.toString());
      assertEquals("MEqm01&O6{7-lc~J", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("MEqm01&O6{7-lc~J", sQLClientInfoException0.getMessage());
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLClientInfoException0, "j6pt^%WRn?13lP", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'W'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) null, "%x<sq", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("Cannot pass null JsonSerializer", "kkh.9$", 309);
      assertNotNull(sQLNonTransientException0);
      assertEquals("java.sql.SQLNonTransientException: Cannot pass null JsonSerializer", sQLNonTransientException0.toString());
      assertEquals("Cannot pass null JsonSerializer", sQLNonTransientException0.getMessage());
      assertEquals(309, sQLNonTransientException0.getErrorCode());
      assertEquals("kkh.9$", sQLNonTransientException0.getSQLState());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLNonTransientException0, "not a valid representation", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[1];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) null, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSON
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("MaN1>%_`)dnS", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem(")%cxGz#fa5x0ZdSK", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // c != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("z@}y;", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[2];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "%*(XefW4>@m$`IWw8gS", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '*'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Unexpected IOException (of type %s): %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "9@%go'/!Ka";
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "9@%go'/!Ka", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "USE_JAVA_ARRAY_FOR_JSON_ARRAY", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("C($O|#O{", "C($O|#O{");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("C($O|#O{", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: C($O|#O{", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("C($O|#O{", sQLSyntaxErrorException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLSyntaxErrorException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals("C($O|#O{", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: C($O|#O{", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("C($O|#O{", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLSyntaxErrorException: C($O|#O{", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: C($O|#O{", sQLTimeoutException0.getMessage());
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLTimeoutException0, "invalid argument(s) (offset=%d, length=%d) for input array of %d element", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLFeatureNotSupportedException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[6];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("j%_\"K", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("Conflicting %s creators: already had %s creator %s, encountered another: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("BLdn~0Ri*1`%,n", objectArray0);
        fail("Expecting exception: IllegalFormatFlagsException");
      
      } catch(IllegalFormatFlagsException e) {
         //
         // Flags = ','
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) class0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException("%am6v'jr]QB9", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != java.lang.Class
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.mappingException((String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class java.lang.Integer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures((-3017));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      assertNotNull(baseSettings0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      assertNotNull(rootNameLookup0);
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      assertNotNull(serializationConfig0);
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = defaultSerializerProvider_Impl0.createInstance(serializationConfig0, beanSerializerFactory0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl1);
      assertNotSame(defaultSerializerProvider_Impl1, defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(baseSettings0.hasExplicitTimeZone());
      assertNull(configOverrides0.getDefaultMergeable());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertFalse(serializationConfig0.useRootWrapping());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertNull(serializationConfig0.getRootName());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertTrue(defaultSerializerProvider_Impl1.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializationConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<BeanSerializer> class0 = BeanSerializer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
      assertNotNull(mapLikeType0);
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isContainerType());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isFinal());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.useStaticType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isJavaLangObject());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapLikeType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      
      Class<PropertyName> class0 = PropertyName.class;
      Class<Integer> class1 = Integer.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class1, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-898));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      
      Class<DateFormat> class2 = DateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) simpleType0);
      assertNotNull(referenceType0);
      assertEquals(0, javaTypeArray0.length);
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      
      SimpleModule simpleModule0 = new SimpleModule("JSON");
      assertNotNull(simpleModule0);
      assertEquals("JSON", simpleModule0.getModuleName());
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleModule0);
      assertNotNull(referenceType1);
      assertEquals(0, javaTypeArray0.length);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertEquals(0, typeBindings0.size());
      assertTrue(typeBindings0.isEmpty());
      assertFalse(placeholderForType0.hasValueHandler());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertTrue(referenceType0.isAnchorType());
      assertFalse(referenceType0.hasHandlers());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isArrayType());
      assertTrue(referenceType0.isReferenceType());
      assertEquals("JSON", simpleModule0.getModuleName());
      assertFalse(referenceType1.hasValueHandler());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) referenceType1, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.module.SimpleModule cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<DateFormat> class0 = DateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isConcrete());
      assertEquals(0, simpleType0.containedTypeCount());
      assertTrue(simpleType0.isAbstract());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isJavaLangObject());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      assertNotNull(simpleType0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
      assertNotNull(referenceType0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      
      SQLException sQLException0 = new SQLException("", "DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s");
      assertNotNull(sQLException0);
      assertEquals("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(sQLException0);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isArrayType());
      assertTrue(simpleType0.isJavaLangObject());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isFinal());
      assertFalse(referenceType0.isContainerType());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType0.isFinal());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isAbstract());
      assertFalse(referenceType0.useStaticType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.isMapLikeType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertTrue(referenceType0.isAnchorType());
      assertTrue(referenceType0.isJavaLangObject());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isEnumType());
      assertTrue(referenceType0.isReferenceType());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.hasValueHandler());
      assertEquals("DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s", sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("", sQLException0.getMessage());
      assertEquals("java.sql.SQLException: ", sQLException0.toString());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.isAbstract());
      assertTrue(referenceType1.isConcrete());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isEnumType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isMapLikeType());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.hasValueHandler());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isJavaLangObject());
      assertFalse(referenceType1.useStaticType());
      assertTrue(referenceType1.isReferenceType());
      assertEquals(0, referenceType1.containedTypeCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.sql.SQLException cannot be cast to com.fasterxml.jackson.databind.JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<CreatorProperty> class0 = CreatorProperty.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) null, false, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Object> class0 = Object.class;
      JavaType[] javaTypeArray0 = new JavaType[4];
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<UnknownSerializer> class1 = UnknownSerializer.class;
      Class<String> class2 = String.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class1, class2, class2);
      assertNotNull(mapLikeType0);
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.hasContentType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.hasHandlers());
      assertFalse(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasValueHandler());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.isArrayType());
      assertFalse(mapLikeType0.isAbstract());
      assertEquals(0, mapLikeType0.containedTypeCount());
      
      javaTypeArray0[0] = (JavaType) mapLikeType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      assertNotNull(typeBindings0);
      assertEquals(4, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[3], javaTypeArray0, javaTypeArray0[0]);
      assertNotNull(collectionType0);
      assertEquals(4, javaTypeArray0.length);
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertTrue(collectionType0.isCollectionLikeType());
      assertEquals(0, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isContainerType());
      assertTrue(collectionType0.isConcrete());
      assertFalse(collectionType0.isAbstract());
      assertFalse(collectionType0.hasHandlers());
      assertTrue(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isArrayType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isInterface());
      assertTrue(collectionType0.hasContentType());
      assertFalse(collectionType0.isFinal());
      assertFalse(collectionType0.isEnumType());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer(collectionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      Class<Object> class1 = Object.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) vector0);
      assertNotNull(typeBindings0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      assertNotNull(resolvedRecursiveType0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(typeBindings0.isEmpty());
      assertEquals(0, typeBindings0.size());
      assertFalse(resolvedRecursiveType0.isCollectionLikeType());
      assertFalse(resolvedRecursiveType0.isAbstract());
      assertEquals(0, resolvedRecursiveType0.containedTypeCount());
      assertFalse(resolvedRecursiveType0.isInterface());
      assertFalse(resolvedRecursiveType0.isEnumType());
      assertFalse(resolvedRecursiveType0.isArrayType());
      assertFalse(resolvedRecursiveType0.hasValueHandler());
      assertFalse(resolvedRecursiveType0.isPrimitive());
      assertFalse(resolvedRecursiveType0.isMapLikeType());
      assertTrue(resolvedRecursiveType0.hasContentType());
      assertFalse(resolvedRecursiveType0.useStaticType());
      assertFalse(resolvedRecursiveType0.hasHandlers());
      assertFalse(resolvedRecursiveType0.isContainerType());
      assertFalse(resolvedRecursiveType0.isFinal());
      assertTrue(resolvedRecursiveType0.isConcrete());
      assertFalse(resolvedRecursiveType0.isJavaLangObject());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) resolvedRecursiveType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
      Class<DoubleNode> class1 = DoubleNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      assertNotNull(simpleType0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      assertNotNull(referenceType0);
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      ReferenceType referenceType1 = (ReferenceType)referenceType0.withContentTypeHandler(mockDateFormat0);
      assertNotNull(referenceType1);
      assertNotSame(referenceType0, referenceType1);
      assertNotSame(referenceType1, referenceType0);
      assertTrue(referenceType1.equals((Object)referenceType0));
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isAbstract());
      assertFalse(referenceType0.isEnumType());
      assertFalse(referenceType0.isAbstract());
      assertTrue(referenceType0.isAnchorType());
      assertEquals(0, referenceType0.containedTypeCount());
      assertFalse(referenceType0.isCollectionLikeType());
      assertFalse(referenceType0.hasValueHandler());
      assertFalse(referenceType0.isPrimitive());
      assertFalse(referenceType0.isMapLikeType());
      assertFalse(referenceType0.isInterface());
      assertFalse(referenceType0.isContainerType());
      assertFalse(referenceType0.hasHandlers());
      assertFalse(referenceType0.isArrayType());
      assertFalse(referenceType0.isFinal());
      assertTrue(referenceType0.isReferenceType());
      assertTrue(referenceType0.hasContentType());
      assertFalse(referenceType0.useStaticType());
      assertFalse(referenceType0.isJavaLangObject());
      assertTrue(referenceType0.isConcrete());
      assertFalse(referenceType1.isArrayType());
      assertTrue(referenceType1.isReferenceType());
      assertFalse(referenceType1.hasHandlers());
      assertFalse(referenceType1.isInterface());
      assertFalse(referenceType1.isPrimitive());
      assertFalse(referenceType1.isFinal());
      assertFalse(referenceType1.isJavaLangObject());
      assertTrue(referenceType1.isConcrete());
      assertTrue(referenceType1.hasContentType());
      assertFalse(referenceType1.isEnumType());
      assertEquals(0, referenceType1.containedTypeCount());
      assertFalse(referenceType1.isAbstract());
      assertFalse(referenceType1.isCollectionLikeType());
      assertFalse(referenceType1.useStaticType());
      assertFalse(referenceType1.isMapLikeType());
      assertFalse(referenceType1.isContainerType());
      assertFalse(referenceType1.isAnchorType());
      assertFalse(referenceType1.hasValueHandler());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) referenceType1, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.text.MockDateFormat cannot be cast to com.fasterxml.jackson.databind.jsontype.TypeSerializer
         //
         verifyException("com.fasterxml.jackson.databind.ser.BasicSerializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId("", (ObjectIdGenerator<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((Class<?>) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertNotNull(arrayType0);
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.isFinal());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((JavaType) arrayType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      assertNotNull(stdSubtypeResolver0);
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(stdSubtypeResolver0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not use ObjectMapper with non-blocking parser");
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 1, true);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(3, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeNull());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeBinary());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertEquals(1, filteringGeneratorDelegate0.getOutputBuffered());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(objectMapper0, filteringGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // (was java.lang.ArrayIndexOutOfBoundsException) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertNotNull(iOContext0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(45);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0, byteArray0, 3, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, true);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(3, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      assertNotNull(tokenFilter0);
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(3, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(3, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertEquals("TokenFilter.INCLUDE_ALL", tokenFilter0.toString());
      assertTrue(tokenFilter0.includeBinary());
      assertTrue(tokenFilter0.includeRawValue());
      assertTrue(tokenFilter0.includeNull());
      assertEquals(3, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(filteringGeneratorDelegate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      assertNotNull(filterOutputStream0);
      
      byte[] byteArray0 = new byte[3];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, filterOutputStream0, byteArray0, 1, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("VS?L-`DBC^", "VS?L-`DBC^", (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      MockFile mockFile0 = new MockFile(" not a super-type of (declared) class ");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(" not a super-type of (declared) class ", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(" not a super-type of (declared) class ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField((String) null, "", uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      assertNotNull(simpleObjectIdResolver0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleObjectIdResolver0, false);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, pipedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) null, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-142L), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0, byteArray0, (byte)98, true);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(98, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue(3948L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      assertEquals(RoundingMode.HALF_EVEN, roundingMode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, roundingMode0, false);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1294);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 4633, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(4633, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue(1380L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, pipedOutputStream0, byteArray0, 904, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(904, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(2, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-92L), (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) stringWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      
      writerBasedJsonGenerator0.writeStartObject();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("", stringWriter0.toString());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertEquals(1, writerBasedJsonGenerator0.getOutputBuffered());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((-1221L), (JsonGenerator) writerBasedJsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a number, expecting field name (context: Object)
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      DoubleNode doubleNode0 = DoubleNode.valueOf(0.0);
      assertNotNull(doubleNode0);
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, doubleNode0, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      MockFile mockFile0 = new MockFile("", "gJ-Kg[F:G");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-386), objectMapper0, mockPrintStream0, byteArray0, (-107), true);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(doubleNode0.isFloat());
      assertFalse(doubleNode0.isBigInteger());
      assertTrue(doubleNode0.canConvertToLong());
      assertEquals(0.0F, doubleNode0.floatValue(), 0.01F);
      assertFalse(doubleNode0.isBigDecimal());
      assertFalse(doubleNode0.isNaN());
      assertFalse(doubleNode0.isIntegralNumber());
      assertEquals(0, doubleNode0.intValue());
      assertEquals(JsonNodeType.NUMBER, doubleNode0.getNodeType());
      assertFalse(doubleNode0.isShort());
      assertEquals((short)0, doubleNode0.shortValue());
      assertFalse(doubleNode0.isObject());
      assertTrue(doubleNode0.isFloatingPointNumber());
      assertEquals(0.0, doubleNode0.doubleValue(), 0.01);
      assertEquals(0, doubleNode0.size());
      assertFalse(doubleNode0.isMissingNode());
      assertFalse(doubleNode0.isLong());
      assertEquals(0L, doubleNode0.longValue());
      assertTrue(doubleNode0.canConvertToInt());
      assertNull(doubleNode0.textValue());
      assertFalse(doubleNode0.isArray());
      assertTrue(doubleNode0.isDouble());
      assertEquals(JsonParser.NumberType.DOUBLE, doubleNode0.numberType());
      assertFalse(doubleNode0.isInt());
      assertEquals(JsonToken.VALUE_NUMBER_FLOAT, doubleNode0.asToken());
      assertFalse(doubleNode0.booleanValue());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/gJ-Kg[F:G", mockFile0.toString());
      assertEquals("gJ-Kg[F:G", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("/", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-386), uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals((-107), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((-2034L), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((DataOutput) objectOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(4, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(4, byteArrayBuilder0.size());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey(1L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(objectMapper0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "|.X", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      MockDate mockDate0 = new MockDate((-2205L));
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<DateFormat> class0 = DateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<?> jsonSerializer1 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertNotNull(defaultSerializerProvider_Impl1);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, defaultSerializerProvider_Impl1.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      assertNotNull(configOverrides0);
      assertNull(configOverrides0.getDefaultMergeable());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      try { 
        objectMapper0.updateValue(mockSimpleDateFormat0, (Object) configOverrides0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class com.fasterxml.jackson.databind.introspect.VisibilityChecker$Std and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.fasterxml.jackson.databind.cfg.ConfigOverrides[\"defaultVisibility\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-314));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isArrayType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isAbstract());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)defaultSerializerProvider_Impl0.getAnnotationIntrospector();
      assertNotNull(jacksonAnnotationIntrospector0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-259));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findKeySerializer((JavaType) placeholderForType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object object0 = defaultSerializerProvider_Impl0.getAttribute(objectMapper0);
      assertNull(object0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      assertNotNull(simpleDateFormat0);
      assertTrue(simpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toPattern());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(simpleDateFormat0, simpleDateFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[1];
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.mappingException("Y$*G96|@", objectArray0);
      assertNotNull(jsonMappingException0);
      assertEquals(1, objectArray0.length);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer0, jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<BeanSerializer> class0 = BeanSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-663));
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertTrue(placeholderForType0.isConcrete());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isAbstract());
      assertFalse(placeholderForType0.useStaticType());
      assertFalse(placeholderForType0.isPrimitive());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(pipedInputStream0, placeholderForType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ($-662) vs `java.io.PipedInputStream`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNotNull(serializationConfig0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      
      Class<BeanSerializer> class0 = BeanSerializer.class;
      BasicBeanDescription basicBeanDescription0 = (BasicBeanDescription)serializationConfig0.introspectClassAnnotations(class0);
      assertNotNull(basicBeanDescription0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector)ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
      assertNotNull(jacksonAnnotationIntrospector0);
      
      String string0 = "\\u6+i%nI";
      PropertyName propertyName0 = PropertyName.construct(string0);
      assertNotNull(propertyName0);
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("\\u6+i%nI", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder(serializationConfig0, jacksonAnnotationIntrospector0, true, propertyName0);
      assertNotNull(pOJOPropertyBuilder0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(serializationConfig0.shouldSortPropertiesAlphabetically());
      assertFalse(serializationConfig0.useRootWrapping());
      assertNull(serializationConfig0.getDefaultMergeable());
      assertNull(serializationConfig0.getRootName());
      assertEquals(2722236, serializationConfig0.getSerializationFeatures());
      assertTrue(serializationConfig0.isAnnotationProcessingEnabled());
      assertEquals(0, serializationConfig0.mixInCount());
      assertTrue(serializationConfig0.canOverrideAccessModifiers());
      assertNull(propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      assertEquals("\\u6+i%nI", propertyName0.getSimpleName());
      assertTrue(propertyName0.hasSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(pOJOPropertyBuilder0.anyIgnorals());
      assertFalse(pOJOPropertyBuilder0.hasField());
      assertFalse(pOJOPropertyBuilder0.hasConstructorParameter());
      assertEquals("\\u6+i%nI", pOJOPropertyBuilder0.getInternalName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyNamed());
      assertFalse(pOJOPropertyBuilder0.couldSerialize());
      assertFalse(pOJOPropertyBuilder0.hasGetter());
      assertEquals("\\u6+i%nI", pOJOPropertyBuilder0.getName());
      assertFalse(pOJOPropertyBuilder0.isExplicitlyIncluded());
      assertFalse(pOJOPropertyBuilder0.couldDeserialize());
      assertFalse(pOJOPropertyBuilder0.hasSetter());
      assertFalse(pOJOPropertyBuilder0.anyVisible());
      
      Object[] objectArray0 = new Object[2];
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder0, "Current node of type ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property \"\\u6+i%nI\" (of type `com.fasterxml.jackson.databind.ser.BeanSerializer`): Current node of type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[8];
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "JSON", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): JSON
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      Version version0 = jsonFactory0.version();
      assertNotNull(version0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(version0.isUnknownVersion());
      assertEquals(7, version0.getPatchLevel());
      assertEquals(9, version0.getMinorVersion());
      assertEquals("jackson-core", version0.getArtifactId());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      
      SimpleModule simpleModule0 = new SimpleModule(version0);
      assertNotNull(simpleModule0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(version0.isUnknownVersion());
      assertEquals(7, version0.getPatchLevel());
      assertEquals(9, version0.getMinorVersion());
      assertEquals("jackson-core", version0.getArtifactId());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-core", simpleModule0.getModuleName());
      
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyEnumSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.JavaType.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SimpleModule simpleModule1 = simpleModule0.setSerializerModifier(beanSerializerModifier0);
      assertNotNull(simpleModule1);
      assertSame(simpleModule0, simpleModule1);
      assertSame(simpleModule1, simpleModule0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(version0.isUnknownVersion());
      assertEquals(7, version0.getPatchLevel());
      assertEquals(9, version0.getMinorVersion());
      assertEquals("jackson-core", version0.getArtifactId());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-core", simpleModule0.getModuleName());
      assertEquals("jackson-core", simpleModule1.getModuleName());
      
      ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(simpleModule0, simpleModule1);
      assertSame(simpleModule1, simpleModule0);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(version0.isUnknownVersion());
      assertEquals(7, version0.getPatchLevel());
      assertEquals(9, version0.getMinorVersion());
      assertEquals("jackson-core", version0.getArtifactId());
      assertEquals(2, version0.getMajorVersion());
      assertFalse(version0.isUknownVersion());
      assertFalse(version0.isSnapshot());
      assertEquals("com.fasterxml.jackson.core", version0.getGroupId());
      assertEquals("jackson-core", simpleModule0.getModuleName());
      assertEquals("jackson-core", simpleModule1.getModuleName());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.sql.ClientInfoStatus`: Failed to construct BeanSerializer for [simple type, class java.sql.ClientInfoStatus]: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Object[] objectArray0 = new Object[0];
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "com.fasterxml.jackson.core.util.BufferRecyclers", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type N/A: com.fasterxml.jackson.core.util.BufferRecyclers
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      MockFile mockFile0 = new MockFile(" not a super-type of (declared) class ");
      assertNotNull(mockFile0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" not a super-type of (declared) class ", mockFile0.getName());
      assertEquals(" not a super-type of (declared) class ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      
      defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(" not a super-type of (declared) class ", mockFile0.getName());
      assertEquals(" not a super-type of (declared) class ", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3492), objectMapper0, dataOutputStream0, byteArrayBuilder0.NO_BYTES, 209, false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertEquals((-3492), uTF8JsonGenerator0.getFeatureMask());
      assertEquals(209, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertFalse(uTF8JsonGenerator0.isClosed());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "implicitly discovered", false);
      assertNotNull(iOContext0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 0, objectMapper0, (Writer) null);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, true, false);
      assertNotNull(filteringGeneratorDelegate0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
      
      defaultSerializerProvider_Impl0.defaultSerializeDateKey((-1256L), (JsonGenerator) filteringGeneratorDelegate0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertEquals(0, filteringGeneratorDelegate0.getMatchCount());
      assertFalse(filteringGeneratorDelegate0.canWriteBinaryNatively());
      assertEquals(0, filteringGeneratorDelegate0.getOutputBuffered());
      assertTrue(filteringGeneratorDelegate0.canOmitFields());
      assertFalse(filteringGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
      assertFalse(filteringGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(filteringGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, filteringGeneratorDelegate0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      assertNotNull(unknownSerializer0);
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      assertFalse(unknownSerializer0.usesObjectId());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, unknownSerializer0, true);
      assertNotNull(iOContext0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      assertFalse(unknownSerializer0.usesObjectId());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, (OutputStream) null, byteArray0, (-1656), false);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(unknownSerializer0.isUnwrappingSerializer());
      assertFalse(unknownSerializer0.usesObjectId());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(1, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals((-1656), uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1656
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((Writer) stringWriter0);
      assertNotNull(writerBasedJsonGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertEquals(0, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
      
      defaultSerializerProvider_Impl0.defaultSerializeDateValue((-1221L), (JsonGenerator) writerBasedJsonGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("", stringWriter0.toString());
      assertTrue(writerBasedJsonGenerator0.canWriteFormattedNumbers());
      assertTrue(writerBasedJsonGenerator0.canOmitFields());
      assertFalse(writerBasedJsonGenerator0.canWriteObjectId());
      assertEquals(31, writerBasedJsonGenerator0.getFeatureMask());
      assertEquals(5, writerBasedJsonGenerator0.getOutputBuffered());
      assertFalse(writerBasedJsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, writerBasedJsonGenerator0.getHighestEscapedChar());
      assertFalse(writerBasedJsonGenerator0.isClosed());
      assertFalse(writerBasedJsonGenerator0.canWriteTypeId());
      assertEquals(0, writerBasedJsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) pipedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      
      defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      
      defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, jsonGeneratorDelegate0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertEquals(4, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(4, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<ObjectInputStream> class0 = ObjectInputStream.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getUnknownTypeSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)objectMapper0.constructType(class0);
      assertNotNull(simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) simpleType0, false, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.useStaticType());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isInterface());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<NamedType> class0 = NamedType.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(4, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "EFtueMXGDR@");
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(objectMapper0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(4, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(4, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)objectMapper0.constructType(class0);
      assertNotNull(simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isInterface());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.useStaticType());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      
      UTF8JsonGenerator uTF8JsonGenerator0 = (UTF8JsonGenerator)jsonFactory0.createGenerator((OutputStream) bufferedOutputStream0);
      assertNotNull(uTF8JsonGenerator0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0);
      assertNotNull(jsonGeneratorDelegate0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(uTF8JsonGenerator0.isClosed());
      assertEquals(0, uTF8JsonGenerator0.getOutputBuffered());
      assertFalse(uTF8JsonGenerator0.canWriteTypeId());
      assertEquals(0, uTF8JsonGenerator0.getHighestEscapedChar());
      assertFalse(uTF8JsonGenerator0.canWriteFormattedNumbers());
      assertTrue(uTF8JsonGenerator0.canOmitFields());
      assertEquals(31, uTF8JsonGenerator0.getFeatureMask());
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
      assertFalse(uTF8JsonGenerator0.canWriteBinaryNatively());
      assertEquals(0, uTF8JsonGenerator0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteBinaryNatively());
      assertFalse(jsonGeneratorDelegate0.canWriteObjectId());
      assertEquals(0, jsonGeneratorDelegate0.getFormatFeatures());
      assertFalse(jsonGeneratorDelegate0.canWriteFormattedNumbers());
      assertFalse(jsonGeneratorDelegate0.canWriteTypeId());
      assertEquals(0, jsonGeneratorDelegate0.getHighestEscapedChar());
      assertEquals(0, jsonGeneratorDelegate0.getOutputBuffered());
      assertTrue(jsonGeneratorDelegate0.canOmitFields());
      
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue(jsonFactory0, jsonGeneratorDelegate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-259));
      assertNotNull(placeholderForType0);
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) placeholderForType0, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      Class<RoundingMode> class1 = RoundingMode.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      assertNotNull(mapType0);
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertNotNull(beanProperty_Bogus0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0, (BeanProperty) beanProperty_Bogus0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      assertNotNull(jsonSerializer1);
      assertNotSame(jsonSerializer1, jsonSerializer0);
      assertFalse(jsonSerializer1.equals((Object)jsonSerializer0));
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.useStaticType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isEnumType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)objectMapper0.constructType(class0);
      assertNotNull(simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isInterface());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isFinal());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer1);
      assertSame(jsonSerializer1, jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<RoundingMode> class0 = RoundingMode.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      
      JsonSerializer<?> jsonSerializer1 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertNotNull(jsonSerializer1);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer1.usesObjectId());
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      assertNotNull(beanSerializerFactory0);
      
      SerializerFactoryConfig serializerFactoryConfig0 = beanSerializerFactory0.getFactoryConfig();
      assertNotNull(serializerFactoryConfig0);
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      SerializerFactoryConfig serializerFactoryConfig1 = serializerFactoryConfig0.withSerializerModifier(beanSerializerModifier0);
      assertNotNull(serializerFactoryConfig1);
      assertNotSame(serializerFactoryConfig0, serializerFactoryConfig1);
      assertNotSame(serializerFactoryConfig1, serializerFactoryConfig0);
      assertFalse(serializerFactoryConfig1.equals((Object)serializerFactoryConfig0));
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig1.hasKeySerializers());
      assertTrue(serializerFactoryConfig1.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig1.hasSerializers());
      
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withConfig(serializerFactoryConfig1);
      assertNotNull(serializerFactory0);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactoryConfig0, serializerFactoryConfig1);
      assertNotSame(serializerFactoryConfig1, serializerFactoryConfig0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertFalse(serializerFactoryConfig0.equals((Object)serializerFactoryConfig1));
      assertFalse(serializerFactoryConfig1.equals((Object)serializerFactoryConfig0));
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig1.hasKeySerializers());
      assertTrue(serializerFactoryConfig1.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig1.hasSerializers());
      
      ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(serializerFactory0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertNotSame(beanSerializerFactory0, serializerFactory0);
      assertNotSame(serializerFactoryConfig0, serializerFactoryConfig1);
      assertNotSame(serializerFactoryConfig1, serializerFactoryConfig0);
      assertNotSame(serializerFactory0, beanSerializerFactory0);
      assertSame(objectMapper1, objectMapper0);
      assertFalse(beanSerializerFactory0.equals((Object)serializerFactory0));
      assertFalse(serializerFactoryConfig0.equals((Object)serializerFactoryConfig1));
      assertFalse(serializerFactoryConfig1.equals((Object)serializerFactoryConfig0));
      assertFalse(serializerFactory0.equals((Object)beanSerializerFactory0));
      assertEquals(0, objectMapper0.mixInCount());
      assertFalse(serializerFactoryConfig0.hasSerializers());
      assertFalse(serializerFactoryConfig0.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig0.hasKeySerializers());
      assertFalse(serializerFactoryConfig1.hasKeySerializers());
      assertTrue(serializerFactoryConfig1.hasSerializerModifiers());
      assertFalse(serializerFactoryConfig1.hasSerializers());
      assertEquals(0, objectMapper1.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(766);
      assertNotNull(placeholderForType0);
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) placeholderForType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(placeholderForType0.isAbstract());
      assertTrue(placeholderForType0.isJavaLangObject());
      assertFalse(placeholderForType0.isCollectionLikeType());
      assertFalse(placeholderForType0.isEnumType());
      assertTrue(placeholderForType0.isConcrete());
      assertFalse(placeholderForType0.hasValueHandler());
      assertFalse(placeholderForType0.useStaticType());
      assertEquals(0, placeholderForType0.containedTypeCount());
      assertFalse(placeholderForType0.isArrayType());
      assertFalse(placeholderForType0.isPrimitive());
      assertTrue(placeholderForType0.hasContentType());
      assertFalse(placeholderForType0.hasHandlers());
      assertFalse(placeholderForType0.isInterface());
      assertFalse(placeholderForType0.isMapLikeType());
      assertFalse(placeholderForType0.isContainerType());
      assertFalse(placeholderForType0.isFinal());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      Class<JavaType> class0 = JavaType.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertNotNull(objectWriter0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(objectWriter0.hasPrefetchedSerializer());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      
      Clock clock0 = MockClock.systemDefaultZone();
      assertNotNull(clock0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now(clock0);
      assertNotNull(hijrahDate0);
      
      try { 
        objectMapper0.updateValue(mockSimpleDateFormat0, (Object) hijrahDate0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000002227\" (class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat), not marked as ignorable (6 known properties: \"numberFormat\", \"dateFormatSymbols\", \"lenient\", \"timeZone\", \"2DigitYearStart\", \"calendar\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat[\"com.fasterxml.jackson.core.io.SerializedString@0000002227\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      Class<NamedType> class0 = NamedType.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(4, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      FilterProvider filterProvider0 = defaultSerializerProvider_Impl0.getFilterProvider();
      assertNull(filterProvider0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLInvalidAuthorizationSpecException0, "Invalid type definition for type %s: %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.canOverrideAccessModifiers();
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<?> class0 = defaultSerializerProvider_Impl0.getActiveView();
      assertNull(class0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<?> class0 = defaultSerializerProvider_Impl0.getSerializationView();
      assertNull(class0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class1 = HashMap.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class0, class2);
      assertNotNull(mapType0);
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer(mapType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(mapType0.isContainerType());
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isJavaLangObject());
      assertFalse(mapType0.hasValueHandler());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isCollectionLikeType());
      assertTrue(mapType0.hasContentType());
      assertFalse(jsonSerializer0.usesObjectId());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<String> class0 = String.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("?+wk");
      assertNotNull(sQLTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ?+wk", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("?+wk", sQLTransientException0.getMessage());
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientException0);
      assertNotNull(sQLNonTransientException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ?+wk", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("?+wk", sQLTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ?+wk", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransientException: ?+wk", sQLNonTransientException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("h", sQLNonTransientException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ?+wk", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("?+wk", sQLTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: ?+wk", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException: java.sql.SQLTransientException: ?+wk", sQLNonTransientException0.toString());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: h", sQLSyntaxErrorException0.toString());
      assertEquals("h", sQLSyntaxErrorException0.getMessage());
      
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) null, "h", (Throwable) sQLSyntaxErrorException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // h
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      
      SimpleType simpleType0 = (SimpleType)defaultSerializerProvider_Impl0.constructType(class0);
      assertNotNull(simpleType0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      assertNotNull(mapLikeType0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(mapLikeType0, "", "JSON");
      assertNotNull(invalidTypeIdException0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertEquals("", invalidTypeIdException0.getTypeId());
      
      String string0 = objectMapper0.writeValueAsString(invalidTypeIdException0);
      assertNotNull(string0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(14, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertTrue(simpleType0.isPrimitive());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isInterface());
      assertTrue(simpleType0.isFinal());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.useStaticType());
      assertTrue(simpleType0.isAbstract());
      assertTrue(simpleType0.isConcrete());
      assertTrue(mapLikeType0.isAbstract());
      assertFalse(mapLikeType0.isCollectionLikeType());
      assertTrue(mapLikeType0.isContainerType());
      assertTrue(mapLikeType0.isConcrete());
      assertFalse(mapLikeType0.isInterface());
      assertTrue(mapLikeType0.hasContentType());
      assertFalse(mapLikeType0.isEnumType());
      assertTrue(mapLikeType0.isMapLikeType());
      assertFalse(mapLikeType0.useStaticType());
      assertFalse(mapLikeType0.hasHandlers());
      assertTrue(mapLikeType0.isPrimitive());
      assertFalse(mapLikeType0.hasValueHandler());
      assertTrue(mapLikeType0.isFinal());
      assertFalse(mapLikeType0.isJavaLangObject());
      assertFalse(mapLikeType0.isArrayType());
      assertEquals(0, mapLikeType0.containedTypeCount());
      assertEquals("", invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      
      Class<RoundingMode> class0 = RoundingMode.class;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("}wq/'", sQLTimeoutException0);
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("", sQLTimeoutException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("}wq/'", sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException: }wq/'", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "*Usb%QE", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // *Usb%QE
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<DoubleNode> class0 = DoubleNode.class;
      SimpleType simpleType0 = (SimpleType)objectMapper0.constructType(class0);
      assertNotNull(simpleType0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(simpleType0.isConcrete());
      assertFalse(simpleType0.isCollectionLikeType());
      assertFalse(simpleType0.isFinal());
      assertFalse(simpleType0.isAbstract());
      assertFalse(simpleType0.isJavaLangObject());
      assertFalse(simpleType0.hasValueHandler());
      assertEquals(0, simpleType0.containedTypeCount());
      assertFalse(simpleType0.useStaticType());
      assertFalse(simpleType0.hasHandlers());
      assertFalse(simpleType0.isArrayType());
      assertFalse(simpleType0.isEnumType());
      assertFalse(simpleType0.isContainerType());
      assertFalse(simpleType0.isMapLikeType());
      assertFalse(simpleType0.hasContentType());
      assertFalse(simpleType0.isPrimitive());
      assertFalse(simpleType0.isInterface());
      
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((JavaType) simpleType0, "Invalid type definition for type %s: %s");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type %s: %s
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      boolean boolean0 = defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializationFeatures(0);
      assertTrue(boolean0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      assertNotNull(defaultSerializerProvider_Impl0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(defaultSerializerProvider_Impl0.canOverrideAccessModifiers());
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("0jA*A_9)5Y# }@W}", "!PW!G", 0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("0jA*A_9)5Y# }@W}", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("!PW!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 0jA*A_9)5Y# }@W}", sQLIntegrityConstraintViolationException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLIntegrityConstraintViolationException0);
      assertNotNull(batchUpdateException0);
      assertEquals("0jA*A_9)5Y# }@W}", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("!PW!G", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 0jA*A_9)5Y# }@W}", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: 0jA*A_9)5Y# }@W}", batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLIntegrityConstraintViolationException: 0jA*A_9)5Y# }@W}", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) batchUpdateException0, "#Dajr;/F5%_Usa'1jox", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '_'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      try { 
        objectMapper0.updateValue(mockSimpleDateFormat0, (Object) mockSimpleDateFormat0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"com.fasterxml.jackson.core.io.SerializedString@0000000404\" (class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat), not marked as ignorable (6 known properties: \"numberFormat\", \"dateFormatSymbols\", \"lenient\", \"timeZone\", \"2DigitYearStart\", \"calendar\"])
         //  at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat[\"com.fasterxml.jackson.core.io.SerializedString@0000000404\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(58);
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(placeholderForType0);
      assertNull(typeSerializer0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = serializerProvider0.getLocale();
      ObjectIdGenerator<UnknownSerializer> objectIdGenerator0 = (ObjectIdGenerator<UnknownSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(locale0, objectIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockSimpleDateFormat0, true);
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, (ObjectCodec) null, pipedOutputStream0, byteArray0, (-2109), true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(objectMapper0, uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2109
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("Incompatible types: declared root type (%s) vs %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
