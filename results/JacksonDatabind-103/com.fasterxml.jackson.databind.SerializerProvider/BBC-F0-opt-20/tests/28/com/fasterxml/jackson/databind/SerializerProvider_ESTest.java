/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 00:36:51 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.MissingNode;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.ser.BeanSerializer;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer;
import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import com.fasterxml.jackson.databind.util.TypeKey;
import java.io.ByteArrayOutputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.text.DateFormat;
import java.time.chrono.HijrahEra;
import java.util.Date;
import java.util.FormatFlagsConversionMismatchException;
import java.util.HashMap;
import java.util.IllegalFormatConversionException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.MissingFormatWidthException;
import java.util.Stack;
import java.util.TimeZone;
import java.util.UnknownFormatConversionException;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerProvider_ESTest extends SerializerProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.findNullKeySerializer((JavaType) null, beanProperty_Bogus0);
      assertSame(jsonSerializer1, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      JsonSerializer<Object> jsonSerializer1 = defaultSerializerProvider_Impl0.getDefaultNullKeySerializer();
      assertFalse(jsonSerializer1.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<BeanSerializer> class0 = BeanSerializer.class;
      defaultSerializerProvider_Impl0.findTypedValueSerializer((Class<?>) class0, true, (BeanProperty) beanProperty_Bogus0);
      assertEquals(4, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<DateFormat> class0 = DateFormat.class;
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SimpleType simpleType0 = (SimpleType)beanProperty_Bogus0.getType();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      defaultSerializerProvider_Impl0.setNullValueSerializer(jsonSerializer0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertFalse(defaultSerializerProvider_Impl1.equals((Object)defaultSerializerProvider_Impl0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
      defaultSerializerProvider_Impl0.setNullKeySerializer(jsonSerializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TimeZone timeZone0 = serializerProvider0.getTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 323, objectMapper0, mockPrintStream0, byteArray0, 0, false);
      defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
      assertFalse(uTF8JsonGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate((-1347), (-1931), (-1931), (-1931), (-1347), (-1347));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDateFormat0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
      serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
      assertEquals(15, uTF8JsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      serializerProvider0.defaultSerializeDateValue((-943L), jsonGenerator0);
      assertEquals(4, jsonGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, (Object) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("IGNORE_UNDEFINED");
      Object[] objectArray0 = new Object[4];
      JsonMappingException jsonMappingException0 = ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLTransactionRollbackException0, "IGNORE_UNDEFINED", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Object[] objectArray0 = new Object[0];
      JsonMappingException jsonMappingException0 = serializerProvider0.mappingException("=9H;_Rq9KGi'G'=J", objectArray0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
      boolean boolean0 = serializerProvider0.isEnabled(serializationFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.USE_ANNOTATIONS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      boolean boolean0 = serializerProvider0.isEnabled(mapperFeature0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls((Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MissingNode missingNode0 = MissingNode.getInstance();
      boolean boolean0 = defaultSerializerProvider_Impl0.includeFilterSuppressNulls(missingNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object object0 = defaultSerializerProvider_Impl0.includeFilterInstance((BeanPropertyDefinition) null, (Class<?>) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      UnknownSerializer unknownSerializer0 = (UnknownSerializer)serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
      assertFalse(unknownSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Locale locale0 = serializerProvider0.getLocale();
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonGenerator jsonGenerator0 = serializerProvider0.getGenerator();
      assertNull(jsonGenerator0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory1.createGenerator((DataOutput) null, jsonEncoding0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)defaultSerializerProvider_Impl0.getGenerator();
      assertTrue(writerBasedJsonGenerator1.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator)jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      defaultSerializerProvider_Impl0.serializeValue((JsonGenerator) writerBasedJsonGenerator0, (Object) null);
      WriterBasedJsonGenerator writerBasedJsonGenerator1 = (WriterBasedJsonGenerator)defaultSerializerProvider_Impl0.getGenerator();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertNull(serializationConfig0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setAttribute(objectMapper0, objectMapper0);
      ObjectMapper objectMapper1 = (ObjectMapper)defaultSerializerProvider_Impl0.getAttribute(objectMapper0);
      assertEquals(0, objectMapper1.mixInCount());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      AnnotationIntrospector annotationIntrospector0 = serializerProvider0.getAnnotationIntrospector();
      assertNotNull(annotationIntrospector0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(javaType0);
      assertNull(typeSerializer0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      ObjectIdGenerator<SimpleType> objectIdGenerator0 = (ObjectIdGenerator<SimpleType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      doReturn((ObjectIdGenerator) null).when(objectIdGenerator0).newForSerialization(any());
      WritableObjectId writableObjectId0 = serializerProvider0.findObjectId(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, objectIdGenerator0);
      assertNotNull(writableObjectId0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findKeySerializer((JavaType) mapType0, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.canOverrideAccessModifiers();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable((JsonSerializer<?>) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable(unknownSerializer0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertSame(unknownSerializer0, jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<InputStream> class0 = InputStream.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) contextAttributes_Impl0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<TypeKey> class0 = TypeKey.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      SimpleType simpleType0 = (SimpleType)typeFactory0.constructParametricType(class0, classArray0);
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer(simpleType0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      Class<HijrahEra> class0 = HijrahEra.class;
      Class<HashMap> class1 = HashMap.class;
      Class<MissingNode> class2 = MissingNode.class;
      Class<BeanSerializer> class3 = BeanSerializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class1, class2, class3);
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) mapType0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(collectionLikeType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setAttribute(defaultSerializerProvider_Impl0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, defaultSerializerProvider_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<TypeKey> class0 = TypeKey.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) linkedList0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<BeanSerializer> class1 = BeanSerializer.class;
      AnnotationMap annotationMap0 = AnnotationMap.of(class1, (Annotation) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      // Undeclared exception!
      try { 
        serializerProvider0.serializerInstance(annotatedField0, class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.ser.BeanSerializer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      int[] intArray0 = new int[2];
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ICzRD%P|0w)BTGa", "ICzRD%P|0w)BTGa");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ICzRD%P|0w)BTGa", "ICzRD%P|0w)BTGa", intArray0, sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) batchUpdateException0, "ICzRD%P|0w)BTGa", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'P'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLTransientException0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, sQLTimeoutException0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLWarning0, "Could not resolve type id '%s' as a subtype of %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("$L^-hr#%-oz*", "$L^-hr#%-oz*", (Map<String, ClientInfoStatus>) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLClientInfoException0, "PG~#+p&YtIz$%AisTj;", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // a != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("(%#c6#(:O/p#VU", "(%#c6#(:O/p#VU", 1);
      SQLWarning sQLWarning0 = new SQLWarning("(%#c6#(:O/p#VU", sQLInvalidAuthorizationSpecException0);
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLWarning0, "(%#c6#(:O/p#VU", objectArray0);
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = c, Flags = #
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Rn");
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLNonTransientConnectionException0, (String) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("]a%-q(t", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) serializerProvider0;
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("7Lo@3cp}c:9:%g3", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((String) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[3];
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem("", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "q%OGO1", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "1WGE3%5X*A", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // x != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[6];
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type N/A: 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "aYUpL_cB9;%", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '%'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) null, "<>VYEl\"\"NW/%-X", objectArray0);
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-X
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Incompatible types: declared root type (%s) vs %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "XC78WUYwA[% gc^'", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
      doReturn((JavaType) null).when(typeModifier0).modifyType(any(com.fasterxml.jackson.databind.JavaType.class) , any(java.lang.reflect.Type.class) , any(com.fasterxml.jackson.databind.type.TypeBindings.class) , any(com.fasterxml.jackson.databind.type.TypeFactory.class));
      doReturn((String) null).when(typeModifier0).toString();
      TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
      objectMapper0.setTypeFactory(typeFactory1);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null JsonSerializer", "CREATOR", 1135, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null JsonSerializer", "Z!bF54D]H4", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        serializerProvider0.reportBadDefinition((Class<?>) class0, "Cannot pass null JsonSerializer", (Throwable) sQLRecoverableException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TypeModifier null (of type com.fasterxml.jackson.databind.type.TypeModifier$MockitoMock$94097028) return null for type [simple type, class com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("HLiUT<;..,HHS-\"fZ", class0, "Could not resolve type id '%s' as a subtype of %s");
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) null, "0", (Throwable) jsonMappingException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      try { 
        serializerProvider0.reportBadDefinition((JavaType) resolvedRecursiveType0, "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLClientInfoException0, "b%r$/CH1@XC|", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultSerializerProvider_Impl0;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) null, "+~i?hfw:@!%E;Rh7", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // e != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("3'p,o@V%Z.Z}p", objectArray0);
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Z'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("Could not resolve type id '%s' as a subtype of %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) serializerProvider0;
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException(".}<9Eq:D%o6{r", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // o != com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isUnknownTypeSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_NULL_MAP_VALUES;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(serializationFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<BeanSerializer> class0 = BeanSerializer.class;
      // Undeclared exception!
      try { 
        serializerProvider0.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Class com.fasterxml.jackson.databind.ser.BeanSerializer has no default (no arg) constructor
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.hasSerializationFeatures(128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<JavaType> class0 = JavaType.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl0.copy();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        serializerProvider0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getFilterProvider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getDefaultPropertyFormat(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAttribute(mockPrintStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer(javaType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect jsonAutoDetect0 = mock(JsonAutoDetect.class, new ViolatedAssumptionAnswer());
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).creatorVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).fieldVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).getterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).isGetterVisibility();
      doReturn((JsonAutoDetect.Visibility) null).when(jsonAutoDetect0).setterVisibility();
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.from(jsonAutoDetect0);
      objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer(javaType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      SimpleType simpleType0 = referenceType0.withContentValueHandler(referenceType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findValueSerializer((JavaType) arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setSerializerFactory((SerializerFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer(javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) simpleType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[1]);
      ReferenceType referenceType1 = referenceType0.withContentValueHandler(simpleType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findValueSerializer((JavaType) referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<List> class0 = List.class;
      // Undeclared exception!
      try { 
        serializerProvider0.findTypedValueSerializer(class0, true, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class1 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      PropertyName propertyName0 = new PropertyName((String) null);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "IswKq_@ilJ:", true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, collectionType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, (AnnotatedParameter) null, 1354, (Object) null, (PropertyMetadata) null);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, false, (BeanProperty) creatorProperty0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, (JavaType) null, (JavaType) null);
      // Undeclared exception!
      try { 
        serializerProvider0.findTypedValueSerializer((JavaType) mapLikeType0, false, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) mapType0, typeBindings0, (Object) typeBindings0, (Object) javaType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, arrayType0);
      // Undeclared exception!
      try { 
        serializerProvider0.findTypedValueSerializer((JavaType) referenceType0, true, (BeanProperty) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findTypeSerializer(arrayType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<DateFormat> class0 = DateFormat.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      Class<JavaType> class1 = JavaType.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = javaType0;
      MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0, javaTypeArray0[0]);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, javaTypeArray0, javaTypeArray0[0]);
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(class1);
      // Undeclared exception!
      try { 
        serializerProvider0.findPrimaryPropertySerializer((JavaType) referenceType1, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findObjectId(defaultSerializerProvider_Impl0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer(class0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        serializerProvider0.findKeySerializer((Class<?>) null, (BeanProperty) beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 41, objectMapper0, dataOutputStream0, byteArray0, 41, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(javaType0, uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MissingNode missingNode0 = MissingNode.getInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "u", true);
      MockFile mockFile0 = new MockFile("/d*Hfu", "/d*Hfu");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byte[] byteArray0 = new byte[9];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0, byteArray0, (byte) (-42), true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue(missingNode0, uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockFileOutputStream0, jsonEncoding0);
      try { 
        serializerProvider0.defaultSerializeValue(jsonFactory0, jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 3, objectMapper0, pipedWriter0);
      try { 
        serializerProvider0.defaultSerializeValue(pipedWriter0, writerBasedJsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No serializer found for class java.io.PipedWriter and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1348, objectMapper0, filterOutputStream0);
      try { 
        serializerProvider0.defaultSerializeValue(dateFormat0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Loop has been executed more times than the allowed 10000 (through reference chain: java.text.SimpleDateFormat[\"dateFormatSymbols\"]->java.text.DateFormatSymbols[\"zoneStrings\"]->java.lang.String[][102])
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1251, objectMapper0, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultSerializerProvider_Impl0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-1), objectMapper0, byteArrayOutputStream0, byteArray0, (-3487), false);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull(uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField((String) null, defaultSerializerProvider_Impl0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object object0 = new Object();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, coreXMLDeserializers_Std0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3266, (ObjectCodec) null, byteArrayOutputStream0);
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeField("[ObjectId: key=%s, type=%s, scope=%s]", object0, uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate((-2262), (-673), 68, (-3298), 0, (-2262));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[2];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1251, objectMapper0, byteArrayOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate(162L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDate0, true);
      StringReader stringReader0 = new StringReader("Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1732), stringReader0, objectMapper0, charsToNameCanonicalizer0);
      ByteArrayBuilder byteArrayBuilder0 = readerBasedJsonParser0._getByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, true);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate(2, 2, (-3601), (-1), (-1));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Invalid type definition for type %s: %s", false);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3601), objectMapper0, mockFileOutputStream0, byteArray0, 3, true);
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1023, objectMapper0, pipedOutputStream0, byteArray0, 3, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(0L, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDateFormat0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("N/A");
      byte[] byteArray0 = new byte[7];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1220, objectMapper0, mockPrintStream0, byteArray0, 54, true);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue(1000000000L, (JsonGenerator) jsonGeneratorDelegate0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.io.NumberOutput", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate(0L);
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockDate mockDate0 = new MockDate();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDateFormat0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("M2)diNkFW/7kR", false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 65536, objectMapper0, mockFileOutputStream0);
      try { 
        serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) uTF8JsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      try { 
        serializerProvider0.defaultSerializeDateKey((-2646L), jsonGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<String> class0 = String.class;
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(class0, (JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl1)._handleResolvable(jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._dateFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((Class<?>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unrecognized Type: [null]
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicClassIntrospector", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Module> class0 = Module.class;
      Class<ClassNameIdResolver> class1 = ClassNameIdResolver.class;
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[0];
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      ReferenceType referenceType1 = referenceType0.withContentTypeHandler(objectIdGenerators_UUIDGenerator0);
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._createAndCacheUntypedSerializer(referenceType1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) basicBeanDescription0, "", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handleSecondaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<UnknownSerializer> jsonSerializer0 = (JsonSerializer<UnknownSerializer>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jsonSerializer0).toString();
      JsonSerializer<?> jsonSerializer1 = defaultSerializerProvider_Impl0.handleSecondaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertFalse(jsonSerializer1.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class1 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, true, (BeanProperty) null);
      defaultSerializerProvider_Impl0.handlePrimaryContextualization(jsonSerializer0, (BeanProperty) null);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization((JsonSerializer<?>) null, (BeanProperty) null);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<?> jsonSerializer0 = defaultSerializerProvider_Impl0.handlePrimaryContextualization(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER, (BeanProperty) null);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER;
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer(jsonSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Object> class0 = Object.class;
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getUnknownTypeSerializer(class0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, false, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) collectionType0, (BeanProperty) null);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullValueSerializer((BeanProperty) null);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getAnnotationIntrospector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.findKeySerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MissingNode missingNode0 = MissingNode.getInstance();
      Object object0 = serializerProvider0.getAttribute(missingNode0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SerializationConfig serializationConfig0 = defaultSerializerProvider_Impl0.getConfig();
      assertEquals(0, serializationConfig0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.mappingException("5u#P", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findNullKeySerializer(javaType0, beanProperty_Bogus0);
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      JsonFormat.Value jsonFormat_Value0 = serializerProvider0.getDefaultPropertyFormat(class0);
      assertNull(jsonFormat_Value0.timeZoneAsString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<NamedType> class0 = NamedType.class;
      NamedType namedType0 = new NamedType(class0, "");
      ((SerializerProvider)defaultSerializerProvider_Impl1)._dateFormat();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = (DefaultSerializerProvider.Impl)defaultSerializerProvider_Impl1.setAttribute(namedType0, mockDateFormat0);
      StdDateFormat stdDateFormat0 = (StdDateFormat)((SerializerProvider)defaultSerializerProvider_Impl2)._dateFormat();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Module> class0 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      ((SerializerProvider)defaultSerializerProvider_Impl0)._handleResolvable(jsonSerializer0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.serializerInstance((Annotated) null, serializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(jsonSerializer0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      defaultSerializerProvider_Impl0.findKeySerializer((Class<?>) class1, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<UnknownSerializer> class0 = UnknownSerializer.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      SQLWarning sQLWarning0 = new SQLWarning();
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLWarning0);
      boolean boolean0 = defaultSerializerProvider_Impl0.hasSerializerFor(class0, atomicReference0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      ((SerializerProvider)defaultSerializerProvider_Impl1)._findExplicitUntypedSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl1.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0)._reportIncompatibleRootType(objectMapper0, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Incompatible types: declared root type ([simple type, class java.lang.Object]) vs `com.fasterxml.jackson.databind.ObjectMapper`
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("+alt", "+alt");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) basicBeanDescription0, (BeanPropertyDefinition) pOJOPropertyBuilder0, "+alt", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      try { 
        defaultSerializerProvider_Impl0.reportBadPropertyDefinition((BeanDescription) null, (BeanPropertyDefinition) null, "Cannot find a deserializer for type ", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid definition for property N/A (of type N/A): Cannot find a deserializer for type 
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifyMapSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.type.MapType.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn((List) null).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((BeanSerializerBuilder) null).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      try { 
        serializerProvider0.findValueSerializer((JavaType) mapType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid type definition for type `java.util.HashMap`: Failed to construct BeanSerializer for [map type; class java.util.HashMap, [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]] -> [map type; class java.util.HashMap, [simple type, class java.lang.Object] -> [simple type, class java.lang.Object]]]: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadTypeDefinition((BeanDescription) null, "Can not %s, expecting field name (context: %s)", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeNull((JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) objectOutputStream0, jsonEncoding0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, true);
      serializerProvider0.defaultSerializeDateKey((Date) mockDate0, (JsonGenerator) filteringGeneratorDelegate0);
      assertEquals(0, filteringGeneratorDelegate0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateKey((long) 2, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((Date) mockDate0, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((-22L), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
      objectMapper0.disable(serializationFeature0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeDateValue((-22L), (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.defaultSerializeValue((Object) null, (JsonGenerator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.NullSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      JsonSerializer<Object> jsonSerializer0 = ((SerializerProvider)defaultSerializerProvider_Impl0)._handleContextualResolvable((JsonSerializer<?>) null, beanProperty_Bogus0);
      assertNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      UnknownSerializer unknownSerializer0 = new UnknownSerializer();
      boolean boolean0 = serializerProvider0.isUnknownTypeSerializer(unknownSerializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      boolean boolean0 = defaultSerializerProvider_Impl0.isUnknownTypeSerializer((JsonSerializer<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.enableDefaultTyping();
      Class<InputStream> class0 = InputStream.class;
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ObjectReader objectReader0 = objectMapper0.reader();
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<Vector> class1 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class1, class0);
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, true, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findTypedValueSerializer((JavaType) collectionType0, true, (BeanProperty) null);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Module> class0 = Module.class;
      objectMapper0.writerFor(class0);
      ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
      assertTrue(objectWriter0.hasPrefetchedSerializer());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.TYPE;
      defaultSerializerProvider_Impl0.findTypedValueSerializer(class0, false, (BeanProperty) null);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      MockFile mockFile0 = new MockFile("Q~OVsXJ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, mockPrintStream0);
      defaultSerializerProvider_Impl0.defaultSerializeValue("Q~OVsXJ", uTF8JsonGenerator0);
      defaultSerializerProvider_Impl0.defaultSerializeValue("Q~OVsXJ", uTF8JsonGenerator0);
      assertEquals(19, uTF8JsonGenerator0.getOutputBuffered());
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer<DateFormat>) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn(stack0).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn(beanSerializerBuilder0).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockDateFormat> class0 = MockDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<DateFormat> class0 = DateFormat.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<DateFormat> class1 = DateFormat.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) collectionType0);
      PropertyName propertyName0 = PropertyName.construct("X/!ZJvC");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, collectionType0, propertyName0, (AnnotatedMember) null, (PropertyMetadata) null);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) collectionType0, (BeanProperty) beanProperty_Std0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer<DateFormat>) null).when(beanSerializerModifier0).modifyMapSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.type.MapType.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn((JsonSerializer) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn(stack0).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn(beanSerializerBuilder0).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
      assertNotNull(jsonSerializer0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = defaultSerializerProvider_Impl0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, mapType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) mapType0, (BeanProperty) beanProperty_Std0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
      Stack<BeanPropertyWriter> stack0 = new Stack<BeanPropertyWriter>();
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder((BeanDescription) null);
      BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(beanSerializerModifier0).changeProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn((JsonSerializer<DateFormat>) null).when(beanSerializerModifier0).modifyMapSerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.type.MapType.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn((JsonSerializer<DateFormat>) null).when(beanSerializerModifier0).modifySerializer(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.JsonSerializer.class));
      doReturn(stack0).when(beanSerializerModifier0).orderProperties(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , anyList());
      doReturn(beanSerializerBuilder0).when(beanSerializerModifier0).updateBuilder(any(com.fasterxml.jackson.databind.SerializationConfig.class) , any(com.fasterxml.jackson.databind.BeanDescription.class) , any(com.fasterxml.jackson.databind.ser.BeanSerializerBuilder.class));
      SerializerFactory serializerFactory0 = beanSerializerFactory0.withSerializerModifier(beanSerializerModifier0);
      objectMapper0.setSerializerFactory(serializerFactory0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<HashMap> class0 = HashMap.class;
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertNotNull(jsonSerializer0);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      defaultSerializerProvider_Impl0.findValueSerializer((JavaType) mapType0);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<InputStream> class0 = InputStream.class;
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertFalse(boolean0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      SimpleType simpleType0 = (SimpleType)TypeFactory.unknownType();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.findValueSerializer((JavaType) simpleType0, (BeanProperty) null);
      assertNotNull(jsonSerializer0);
      assertEquals(2, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      try { 
        serializerProvider0.findValueSerializer((JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Null passed for `valueType` of `findValueSerializer()`
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findPrimaryPropertySerializer((JavaType) simpleType0, (BeanProperty) beanProperty_Bogus0);
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(1, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      ((SerializerProvider)defaultSerializerProvider_Impl0)._findExplicitUntypedSerializer(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      defaultSerializerProvider_Impl0.findValueSerializer((Class<?>) class0, (BeanProperty) beanProperty_Bogus0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<ClassNameIdResolver> class0 = ClassNameIdResolver.class;
      serializerProvider0.findValueSerializer(class0);
      StringWriter stringWriter0 = new StringWriter(1995);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class1 = Integer.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(simpleType0, simpleType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      javaTypeArray0[0] = (JavaType) simpleType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) collectionLikeType0, javaTypeArray0, javaTypeArray0[0], (JavaType) collectionLikeType0);
      JavaType javaType0 = typeFactory0.constructReferenceType(class1, mapType0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(javaType0, typeFactory0);
      objectMapper0.writeValue((Writer) stringWriter0, (Object) classNameIdResolver0);
      assertEquals("{\"mechanism\":\"CLASS\",\"descForKnownTypeIds\":\"class name used as type id\"}", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.setNullKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      // Undeclared exception!
      try { 
        serializerProvider0.setNullValueSerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.setNullValueSerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      assertEquals(0, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.setDefaultKeySerializer((JsonSerializer<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null JsonSerializer
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      defaultSerializerProvider_Impl0.setDefaultKeySerializer(defaultSerializerProvider_Impl0.DEFAULT_NULL_KEY_SERIALIZER);
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      defaultSerializerProvider_Impl0.findValueSerializer(class0);
      assertEquals(3, defaultSerializerProvider_Impl0.cachedSerializersCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      FilterProvider filterProvider0 = serializerProvider0.getFilterProvider();
      assertNull(filterProvider0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTimeZone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLWarning sQLWarning0 = new SQLWarning("Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", "Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)", sQLTimeoutException0);
      Object[] objectArray0 = new Object[5];
      try { 
        serializerProvider0.reportMappingProblem((Throwable) sQLWarning0, "AUTO", objectArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AUTO
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonSerializer<Object> jsonSerializer0 = serializerProvider0.getDefaultNullKeySerializer();
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        serializerProvider0.canOverrideAccessModifiers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonSerializer<Object> jsonSerializer0 = defaultSerializerProvider_Impl0.getDefaultNullValueSerializer();
      assertFalse(jsonSerializer0.usesObjectId());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<?> class0 = defaultSerializerProvider_Impl0.getActiveView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<?> class0 = serializerProvider0.getSerializationView();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProviderInstance();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<SimpleModule> class0 = SimpleModule.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.includeFilterInstance((BeanPropertyDefinition) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class1);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "pgGSw&-.8", 0, batchUpdateException0);
      try { 
        serializerProvider0.reportBadDefinition((JavaType) mapLikeType0, "L", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // L
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)serializerProvider0.invalidTypeIdException(collectionType0, (String) null, "FAIL_ON_NULL_CREATOR_PROPERTIES");
      assertNull(invalidTypeIdException0.getTypeId());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportBadDefinition((Class<?>) class0, "a2Wki", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<FilterInputStream> class1 = FilterInputStream.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[4];
      javaTypeArray0[0] = javaType0;
      ReferenceType referenceType0 = ReferenceType.construct(class1, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[0]);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "c|v.q!*&", referenceType0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      try { 
        serializerProvider0.serializerInstance(virtualAnnotatedMember0, objectIdGenerators_IntSequenceGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // AnnotationIntrospector returned serializer definition of type com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator; expected type JsonSerializer or Class<JsonSerializer> instead
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.isEnabled(mapperFeature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      boolean boolean0 = serializerProvider0.hasSerializationFeatures((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<InputStream> class0 = InputStream.class;
      JsonInclude.Value jsonInclude_Value0 = serializerProvider0.getDefaultPropertyInclusion(class0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = (DefaultSerializerProvider.Impl)objectMapper0.getSerializerProvider();
      SQLDataException sQLDataException0 = new SQLDataException("EO_m<G9", (Throwable) null);
      // Undeclared exception!
      try { 
        ((SerializerProvider)defaultSerializerProvider_Impl0).mappingException((Throwable) sQLDataException0, "EO_m<G9", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      Class<Integer> class0 = Integer.class;
      Class<TypeKey> class1 = TypeKey.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) linkedList0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeSerializer typeSerializer0 = serializerProvider0.findTypeSerializer(resolvedRecursiveType0);
      assertNull(typeSerializer0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      // Undeclared exception!
      try { 
        serializerProvider0.getLocale();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        serializerProvider0.reportMappingProblem("Incompatible types: declared root type (%s) vs %s", objectArray0);
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }
}
