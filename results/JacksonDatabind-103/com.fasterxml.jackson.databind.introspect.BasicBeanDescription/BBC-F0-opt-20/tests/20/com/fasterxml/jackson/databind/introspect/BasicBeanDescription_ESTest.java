/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 23:18:46 GMT 2021
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.type.ClassKey;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.InputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicBeanDescription_ESTest extends BasicBeanDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<ObjectIdGenerators.StringIdGenerator>[] classArray0 = (Class<ObjectIdGenerators.StringIdGenerator>[]) Array.newInstance(Class.class, 3);
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      classArray0[0] = class0;
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      classArray0[1] = class1;
      Class<ObjectIdGenerators.StringIdGenerator> class2 = ObjectIdGenerators.StringIdGenerator.class;
      classArray0[2] = class2;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      List<AnnotatedMethod> list0 = basicBeanDescription0.getFactoryMethods();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      List<AnnotatedConstructor> list0 = basicBeanDescription0.getConstructors();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertEquals(17, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, mapLikeType0, annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<AnnotatedParameter>[] classArray0 = (Class<AnnotatedParameter>[]) Array.newInstance(Class.class, 8);
      Constructor<?> constructor0 = basicBeanDescription0.findSingleArgConstructor(classArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0.findSerializationConverter();
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JsonInclude.Value jsonInclude_Value0 = basicBeanDescription0.findPropertyInclusion((JsonInclude.Value) null);
      assertNull(jsonInclude_Value0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      ArrayList<BeanPropertyDefinition> arrayList0 = new ArrayList<BeanPropertyDefinition>();
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.addElement((BeanPropertyDefinition) null);
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<?> class0 = basicBeanDescription0.findPOJOBuilder();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<AnnotatedField>[] classArray0 = (Class<AnnotatedField>[]) Array.newInstance(Class.class, 4);
      Method method0 = basicBeanDescription0.findFactoryMethod(classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0.findDeserializationConverter();
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      assertNull(annotatedConstructor0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      assertEquals(0, annotatedConstructor0.getAnnotationCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findBackReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
      JsonInclude.Include jsonInclude_Include1 = JsonInclude.Include.NON_ABSENT;
      ArrayList<BeanPropertyDefinition> arrayList0 = new ArrayList<BeanPropertyDefinition>();
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.addElement((BeanPropertyDefinition) null);
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0._createConverter((Object) null);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.isFactoryMethod((AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, collectionLikeType0, (AnnotatedClass) null);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      Class<InputStream>[] classArray0 = (Class<InputStream>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod((String) null, classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      basicBeanDescription0.findBackReferences();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.add((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findBackReferenceProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.addProperty((BeanPropertyDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0._findCreatorPropertyName((AnnotatedParameter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription((POJOPropertiesCollector) null, resolvedRecursiveType0, (AnnotatedClass) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      Class<Object> class1 = Object.class;
      LinkedList<JavaType> linkedList0 = new LinkedList<JavaType>(arrayList0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, linkedList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, deserializationConfig0, (TypeFactory) null);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription(deserializationConfig0, simpleType0, annotatedClass0, stack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      String string0 = basicBeanDescription0.findClassDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ANY;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forShape(jsonFormat_Shape0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findExpectedFormat(jsonFormat_Value0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
      BeanPropertyDefinition beanPropertyDefinition0 = basicBeanDescription0.findProperty(propertyName0);
      assertEquals("", beanPropertyDefinition0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.cfg.BaseSettings", "com.fasterxml.jackson.databind.cfg.BaseSettings");
      BeanPropertyDefinition beanPropertyDefinition0 = basicBeanDescription0.findProperty(propertyName1);
      assertNull(beanPropertyDefinition0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.add((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findProperty((PropertyName) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      PropertyName propertyName0 = PropertyName.construct("'R&");
      boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<String> class0 = String.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      Class<CharBuffer> class1 = CharBuffer.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(annotatedClass0, class1, (String) null, collectionType0);
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(virtualAnnotatedMember0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Converter definition of type com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember; expected type Converter or Class<Converter> instead
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.introspect.AnnotatedParameter; expected Class<Converter>
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.addElement((BeanPropertyDefinition) null);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) priorityQueue0);
      // Undeclared exception!
      try { 
        basicBeanDescription0._findPropertyFields(list0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(linkedHashSet0, true);
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
      assertNull(jsonPOJOBuilder_Value0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(basicBeanDescription0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Map<String, AnnotatedMember> map0 = basicBeanDescription0.findBackReferenceProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
      assertSame(jsonInclude_Value0, jsonInclude_Value1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      Class<AnnotatedConstructor> class0 = AnnotatedConstructor.class;
      MappingIterator<AnnotatedConstructor> mappingIterator0 = objectMapper0.readValues((JsonParser) null, class0);
      assertNotNull(mappingIterator0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      Class<Module> class2 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class0, arrayList0, class1, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, simpleType0, annotatedClass0, stack0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to instantiate bean of type java.lang.annotation.Annotation: (java.lang.InstantiationException) null
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) mapLikeType0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Object object0 = basicBeanDescription0.instantiateBean(false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      Object object0 = basicBeanDescription0.instantiateBean(false);
      assertNull(object0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Map<Object, AnnotatedMember> map0 = basicBeanDescription0.findInjectables();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterAccessor();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      List<AnnotatedConstructor> list0 = basicBeanDescription0.getConstructors();
      Class<AnnotatedField> class0 = AnnotatedField.class;
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, list0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.resolveType(objectIdGenerator_IdKey0.scope);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
      PropertyName propertyName1 = PropertyName.construct("com.fasterxml.jackson.databind.cfg.BaseSettings", "com.fasterxml.jackson.databind.cfg.BaseSettings");
      POJOPropertyBuilder pOJOPropertyBuilder1 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName1);
      boolean boolean0 = basicBeanDescription0.addProperty(pOJOPropertyBuilder1);
      assertEquals(2, stack0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Annotation> class0 = Annotation.class;
      Class<ClassKey> class1 = ClassKey.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
      ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
      AnnotationCollector.NoAnnotations annotationCollector_NoAnnotations0 = new AnnotationCollector.NoAnnotations();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotatedClass annotatedClass0 = new AnnotatedClass(simpleType0, class1, arrayList0, class0, annotationCollector_NoAnnotations0, typeBindings0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null, typeFactory0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, mapLikeType0, annotatedClass0, stack0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      stack0.add((BeanPropertyDefinition) pOJOPropertyBuilder0);
      boolean boolean0 = basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Vector<BeanPropertyDefinition> vector0 = new Vector<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) vector0;
      vector0.addElement((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.removeProperty("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      boolean boolean0 = basicBeanDescription0.removeProperty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, collectionLikeType0, (AnnotatedClass) null);
      TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("", (Class<?>[]) null);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      boolean boolean0 = basicBeanDescription0.hasKnownClassAnnotations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.PROTECTED_AND_PUBLIC;
      JsonAutoDetect.Visibility jsonAutoDetect_Visibility1 = JsonAutoDetect.Visibility.NONE;
      JsonAutoDetect.Value jsonAutoDetect_Value0 = JsonAutoDetect.Value.construct(jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility0, jsonAutoDetect_Visibility1, jsonAutoDetect_Visibility1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultVisibility(jsonAutoDetect_Value0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper1);
      assertNotNull(objectReader0);
  }
}
