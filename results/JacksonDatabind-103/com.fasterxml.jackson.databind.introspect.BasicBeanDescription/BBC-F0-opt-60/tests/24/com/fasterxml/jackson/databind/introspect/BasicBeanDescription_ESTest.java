/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 04:28:33 GMT 2021
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicBeanDescription_ESTest extends BasicBeanDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      List<AnnotatedMethod> list0 = basicBeanDescription0.getFactoryMethods();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      basicBeanDescription0._defaultViews = classArray0;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      List<AnnotatedConstructor> list0 = basicBeanDescription0.getConstructors();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      boolean boolean0 = basicBeanDescription0.hasKnownClassAnnotations();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertEquals(1041, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(577);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, placeholderForType0, annotatedClass0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0.findSerializationConverter();
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.construct(jsonInclude_Include0, jsonInclude_Include0);
      JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
      assertSame(jsonInclude_Value0, jsonInclude_Value1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      ArrayList<BeanPropertyDefinition> arrayList0 = new ArrayList<BeanPropertyDefinition>();
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(578);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("QkUa}@}v5^B?|$~b");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      basicBeanDescription0.findProperties();
      assertEquals(1, stack0.size());
      assertEquals("[[Property 'QkUa}@}v5^B?|$~b'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<?> class0 = basicBeanDescription0.findPOJOBuilder();
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      Class<AnnotatedParameter>[] classArray0 = (Class<AnnotatedParameter>[]) Array.newInstance(Class.class, 2);
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("J~ViV0\"-", classArray0);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findJsonValueAccessor();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0.findDeserializationConverter();
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      basicBeanDescription0._defaultViewsResolved = true;
      Class<ObjectIdGenerators.StringIdGenerator>[] classArray0 = (Class<ObjectIdGenerators.StringIdGenerator>[]) Array.newInstance(Class.class, 4);
      Class<?>[] classArray1 = basicBeanDescription0.findDefaultViews();
      assertNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      basicBeanDescription0._defaultViewsResolved = true;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = basicBeanDescription0.findDefaultViews();
      assertNull(classArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      assertNull(annotatedConstructor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findBackReferences();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(578);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("QPkUa}@}v5^B?|$~b");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      basicBeanDescription0._properties();
      assertEquals("[[Property 'QPkUa}@}v5^B?|$~b'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Converter<Object, Object> converter0 = basicBeanDescription0._createConverter((Object) null);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) linkedList0;
      linkedList0.add((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.removeProperty("&*$BnH/Jl+WlkfX2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.isFactoryMethod((AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.instantiateBean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      PropertyName propertyName0 = new PropertyName("&*$BnH/Jl+WlkfX", "&*$BnH/Jl+WlkfX");
      boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.hasKnownClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getConstructors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.getClassAnnotations();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1116268359));
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      // Undeclared exception!
      try { 
        BasicBeanDescription.forOtherUse(deserializationConfig0, placeholderForType0, annotatedClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<AnnotatedField> class1 = AnnotatedField.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null);
      Class<Locale.LanguageRange>[] classArray0 = (Class<Locale.LanguageRange>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findSingleArgConstructor(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      PropertyName propertyName0 = new PropertyName("&*$BnH/Jl+WlkfX", "&*$BnH/Jl+WlkfX");
      BeanPropertyDefinition beanPropertyDefinition0 = basicBeanDescription0.findProperty(propertyName0);
      assertNull(beanPropertyDefinition0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<SimpleModule> class0 = SimpleModule.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forOtherUse((MapperConfig<?>) null, mapLikeType0, (AnnotatedClass) null);
      Class<POJOPropertyBuilder>[] classArray0 = (Class<POJOPropertyBuilder>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findFactoryMethod(classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) linkedList0;
      linkedList0.add((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findBackReferences();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) linkedList0;
      linkedList0.add((BeanPropertyDefinition) null);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findBackReferenceProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, (JavaType) null, annotatedClass0, stack0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.bindingsForBeanType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("QkUa}@}v5^B?|$~b");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.addProperty((BeanPropertyDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      basicBeanDescription0._properties = (List<BeanPropertyDefinition>) linkedList0;
      linkedList0.add((BeanPropertyDefinition) null);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayDeque0);
      // Undeclared exception!
      try { 
        basicBeanDescription0._findPropertyFields(list0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0._findCreatorPropertyName((AnnotatedParameter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription((POJOPropertiesCollector) null, (JavaType) null, annotatedClass0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(338);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("MISSING", "MISSING");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      basicBeanDescription0.findProperty(propertyName0);
      assertFalse(stack0.isEmpty());
      assertEquals("[[Property '{MISSING}MISSING'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(578);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("QkUa}@}v5^B?|$~b");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
      assertEquals("[[Property 'QkUa}@}v5^B?|$~b'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.type.CollectionLikeType; expected Class<Converter>
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, (JavaType) null, annotatedClass0, stack0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, false, (PropertyName) null, (PropertyName) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(annotatedClass0, (Field) null, annotationMap0);
      pOJOPropertyBuilder0.addField(annotatedField0, (PropertyName) null, false, true, true);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(arrayDeque0, false);
      assertFalse(stack0.empty());
      assertFalse(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, (JavaType) null, annotatedClass0, stack0);
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, false, (PropertyName) null, (PropertyName) null);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      basicBeanDescription0._findPropertyFields(arrayDeque0, false);
      assertEquals("[[Property 'null'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
      assertFalse(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      String string0 = basicBeanDescription0.findClassDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
      assertNull(jsonPOJOBuilder_Value0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<ObjectIdGenerators.StringIdGenerator>[] classArray0 = (Class<ObjectIdGenerators.StringIdGenerator>[]) Array.newInstance(Class.class, 4);
      Method method0 = basicBeanDescription0.findFactoryMethod(classArray0);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      Class<AnnotatedMethod>[] classArray0 = (Class<AnnotatedMethod>[]) Array.newInstance(Class.class, 9);
      Constructor<?> constructor0 = basicBeanDescription0.findSingleArgConstructor(classArray0);
      assertNull(constructor0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory_Feature0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Map<String, AnnotatedMember> map0 = basicBeanDescription0.findBackReferenceProperties();
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JsonInclude.Value jsonInclude_Value0 = basicBeanDescription0.findPropertyInclusion((JsonInclude.Value) null);
      assertNull(jsonInclude_Value0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[7];
      MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
      mapperFeatureArray0[0] = mapperFeature0;
      mapperFeatureArray0[1] = mapperFeatureArray0[0];
      mapperFeatureArray0[2] = mapperFeatureArray0[1];
      MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[3] = mapperFeature1;
      mapperFeatureArray0[4] = mapperFeature1;
      mapperFeatureArray0[5] = mapperFeatureArray0[0];
      mapperFeatureArray0[6] = mapperFeatureArray0[0];
      objectMapper0.disable(mapperFeatureArray0);
      Class<AnnotatedField> class0 = AnnotatedField.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
      Class<JavaType> class0 = JavaType.class;
      boolean boolean0 = objectMapper0.canSerialize(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forPattern(" A:}(mo!HiNOhOv");
      // Undeclared exception!
      try { 
        basicBeanDescription0.findExpectedFormat(jsonFormat_Value0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Object object0 = basicBeanDescription0.instantiateBean(false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Map<Object, AnnotatedMember> map0 = basicBeanDescription0.findInjectables();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterAccessor();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<ObjectIdGenerators.StringIdGenerator> class0 = ObjectIdGenerators.StringIdGenerator.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0.resolveType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1992));
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = new PropertyName("(): return type is not instance of java.util.Map");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, (PropertyName) null, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      basicBeanDescription0.findProperty((PropertyName) null);
      assertFalse(stack0.isEmpty());
      assertEquals("[[Property '(): return type is not instance of java.util.Map'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(338);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      PropertyName propertyName0 = PropertyName.construct("MISSING", "MISSING");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, (AnnotationIntrospector) null, true, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      boolean boolean0 = basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      assertFalse(stack0.empty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2042));
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, placeholderForType0, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("jkUa}@}v5^B?|$~b");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, true, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      assertFalse(stack0.empty());
      
      boolean boolean0 = basicBeanDescription0.removeProperty("jkUa}@}v5^B?|$~b");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      AnnotatedClass annotatedClass0 = new AnnotatedClass(class0);
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, (JavaType) null, annotatedClass0, stack0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      PropertyName propertyName0 = PropertyName.construct("MISSING", "MISSING");
      POJOPropertyBuilder pOJOPropertyBuilder0 = new POJOPropertyBuilder((MapperConfig<?>) null, annotationIntrospector0, false, propertyName0, propertyName0);
      basicBeanDescription0.addProperty(pOJOPropertyBuilder0);
      boolean boolean0 = basicBeanDescription0.removeProperty("MISgSING");
      assertEquals("[[Property '{MISSING}MISSING'; ctors: null, field(s): null, getter(s): null, setter(s): null]]", stack0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
      assertEquals(0, typeBindings0.size());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Class<VirtualAnnotatedMember> class0 = VirtualAnnotatedMember.class;
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      Class<JavaType> class1 = JavaType.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      BasicBeanDescription basicBeanDescription0 = new BasicBeanDescription((MapperConfig<?>) null, resolvedRecursiveType0, (AnnotatedClass) null, stack0);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findMethod("valueOf", (Class<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(classNameIdResolver0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Converter definition of type com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver; expected type Converter or Class<Converter> instead
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }
}
