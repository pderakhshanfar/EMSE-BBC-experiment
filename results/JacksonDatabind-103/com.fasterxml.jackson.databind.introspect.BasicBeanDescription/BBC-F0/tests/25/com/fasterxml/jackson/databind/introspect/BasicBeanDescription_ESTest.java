/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:00:21 GMT 2020
 */

package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.File;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.CharBuffer;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BasicBeanDescription_ESTest extends BasicBeanDescription_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Class<POJOPropertyBuilder>[] classArray0 = (Class<POJOPropertyBuilder>[]) Array.newInstance(Class.class, 9);
      basicBeanDescription0._defaultViews = classArray0;
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      List<AnnotatedMethod> list0 = basicBeanDescription0.getFactoryMethods();
      assertNotNull(list0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      List<AnnotatedConstructor> list0 = basicBeanDescription0.getConstructors();
      assertNotNull(list0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      boolean boolean0 = basicBeanDescription0.hasKnownClassAnnotations();
      assertFalse(boolean0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      ObjectIdInfo objectIdInfo0 = basicBeanDescription0.getObjectIdInfo();
      assertNull(objectIdInfo0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      AnnotatedClass annotatedClass0 = basicBeanDescription0.getClassInfo();
      assertNotNull(annotatedClass0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertFalse(annotatedClass0.hasAnnotations());
      assertEquals(1041, annotatedClass0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
      assertNotNull(annotations0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      assertEquals(0, annotations0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      Converter<Object, Object> converter0 = basicBeanDescription0.findSerializationConverter();
      assertNull(converter0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      JsonInclude jsonInclude0 = mock(JsonInclude.class, new ViolatedAssumptionAnswer());
      doReturn((JsonInclude.Include) null).when(jsonInclude0).content();
      doReturn((Class) null).when(jsonInclude0).contentFilter();
      doReturn((JsonInclude.Include) null).when(jsonInclude0).value();
      doReturn((Class) null).when(jsonInclude0).valueFilter();
      JsonInclude.Value jsonInclude_Value0 = new JsonInclude.Value(jsonInclude0);
      assertNotNull(jsonInclude_Value0);
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      
      JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
      assertSame(jsonInclude_Value0, jsonInclude_Value1);
      assertSame(jsonInclude_Value1, jsonInclude_Value0);
      assertNotNull(jsonInclude_Value1);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value0.getContentInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value1.getValueInclusion());
      assertEquals(JsonInclude.Include.USE_DEFAULTS, jsonInclude_Value1.getContentInclusion());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      Stack<BeanPropertyDefinition> stack0 = new Stack<BeanPropertyDefinition>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertNotNull(list0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Class<?> class0 = basicBeanDescription0.findPOJOBuilder();
      assertNull(class0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findJsonValueAccessor();
      assertNull(annotatedMember0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      Converter<Object, Object> converter0 = basicBeanDescription0.findDeserializationConverter();
      assertNull(converter0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
      assertNull(annotatedConstructor0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findBackReferences();
      assertNull(list0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      LinkedList<BeanPropertyDefinition> linkedList0 = new LinkedList<BeanPropertyDefinition>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<BeanPropertyDefinition> list0 = basicBeanDescription0._properties();
      assertNotNull(list0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Converter<Object, Object> converter0 = basicBeanDescription0._createConverter((Object) null);
      assertNull(converter0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      boolean boolean0 = basicBeanDescription0.removeProperty("/<*~-(3=zo{");
      assertFalse(boolean0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.isFactoryMethod((AnnotatedMethod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      assertNotNull(propertyName0);
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      
      boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
      assertFalse(boolean0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertEquals("", propertyName0.getSimpleName());
      assertTrue(propertyName0.isEmpty());
      assertFalse(propertyName0.hasNamespace());
      assertFalse(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forSerialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        BasicBeanDescription.forDeserialization((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      List<BeanPropertyDefinition> list0 = basicBeanDescription0.findProperties();
      assertNotNull(list0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Map<String, AnnotatedMember> map0 = basicBeanDescription0.findBackReferenceProperties();
      assertNull(map0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0.addProperty((BeanPropertyDefinition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0._findCreatorPropertyName((AnnotatedParameter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = null;
      try {
        basicBeanDescription0 = new BasicBeanDescription((POJOPropertiesCollector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      PropertyName propertyName0 = PropertyName.construct("JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)", "JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)");
      assertNotNull(propertyName0);
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)", propertyName0.getSimpleName());
      assertEquals("JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
      
      BeanPropertyDefinition beanPropertyDefinition0 = basicBeanDescription0.findProperty(propertyName0);
      assertNull(beanPropertyDefinition0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertTrue(propertyName0.hasSimpleName());
      assertTrue(propertyName0.hasNamespace());
      assertEquals("JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)", propertyName0.getSimpleName());
      assertEquals("JsonFormat.Value(pattern=null,shape=ANY,lenient=true,locale=null,timezone=null)", propertyName0.getNamespace());
      assertFalse(propertyName0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Class java.lang.Object; expected Class<Converter>
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer0);
      assertEquals(5, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        basicBeanDescription0._createConverter(charBuffer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // AnnotationIntrospector returned Converter definition of type java.nio.HeapCharBuffer; expected type Converter or Class<Converter> instead
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      assertNotNull(jsonNodeFactory0);
      
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode(0);
      assertNotNull(arrayNode0);
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      
      List<String> list0 = arrayNode0.findValuesAsText((String) null);
      assertNotNull(list0);
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedHashMap<String, AnnotatedField> linkedHashMap0 = basicBeanDescription0._findPropertyFields(list0, false);
      assertNotNull(linkedHashMap0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertEquals("", arrayNode0.asText());
      assertEquals(JsonToken.START_ARRAY, arrayNode0.asToken());
      assertNull(arrayNode0.textValue());
      assertEquals(JsonNodeType.ARRAY, arrayNode0.getNodeType());
      assertFalse(arrayNode0.isFloat());
      assertFalse(arrayNode0.isBigInteger());
      assertFalse(arrayNode0.isMissingNode());
      assertFalse(arrayNode0.isBigDecimal());
      assertFalse(arrayNode0.isInt());
      assertFalse(arrayNode0.booleanValue());
      assertFalse(arrayNode0.isShort());
      assertNull(arrayNode0.numberType());
      assertFalse(arrayNode0.isObject());
      assertTrue(arrayNode0.isArray());
      assertFalse(arrayNode0.isLong());
      assertFalse(arrayNode0.isFloatingPointNumber());
      assertEquals(0, arrayNode0.size());
      assertFalse(arrayNode0.isIntegralNumber());
      assertFalse(arrayNode0.isDouble());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      String string0 = basicBeanDescription0.findClassDescription();
      assertNull(string0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
      assertNull(jsonPOJOBuilder_Value0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
      
      Class<CharBuffer>[] classArray0 = (Class<CharBuffer>[]) Array.newInstance(Class.class, 8);
      Method method0 = basicBeanDescription0.findFactoryMethod(classArray0);
      assertEquals(8, classArray0.length);
      assertNull(method0);
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      assertNull(basicBeanDescription0.findClassDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Constructor<?> constructor0 = basicBeanDescription0.findSingleArgConstructor(classArray0);
      assertEquals(3, classArray0.length);
      assertNull(constructor0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      mapperFeatureArray0[0] = mapperFeature0;
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(mapperFeatureArray0[0]);
      assertEquals(9, mapperFeatureArray0.length);
      assertNotNull(objectReader0);
      assertEquals(0, objectMapper0.mixInCount());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
      assertNull(annotatedMember0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      assertNotNull(basicBeanDescription0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
      
      JsonInclude.Value jsonInclude_Value0 = basicBeanDescription0.findPropertyInclusion((JsonInclude.Value) null);
      assertNull(jsonInclude_Value0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertFalse(basicBeanDescription0.hasKnownClassAnnotations());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.DEFAULT_VIEW_INCLUSION;
      ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
      MockFile mockFile0 = new MockFile("type to regster key deserializer for", "type to regster key deserializer for");
      // Undeclared exception!
      try { 
        objectMapper1.writeValue((File) mockFile0, (Object) objectMapper0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/fasterxml/jackson/databind/JsonMappingException$Reference
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      // Undeclared exception!
      try { 
        basicBeanDescription0.findDefaultViews();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      objectMapper0.setAnnotationIntrospectors(annotationIntrospector0, annotationIntrospector0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(annotationIntrospector0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      JsonFormat.Value jsonFormat_Value0 = JsonFormat.Value.forLeniency(true);
      // Undeclared exception!
      try { 
        basicBeanDescription0.findExpectedFormat(jsonFormat_Value0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      Object object0 = basicBeanDescription0.instantiateBean(false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      Map<Object, AnnotatedMember> map0 = basicBeanDescription0.findInjectables();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
      AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterAccessor();
      assertNull(annotatedMember0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
      JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        basicBeanDescription0.resolveType(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.BasicBeanDescription", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Set<String> set0 = basicBeanDescription0.getIgnoredPropertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findJsonValueMethod();
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
      assertTrue(typeBindings0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod("oJ", classArray0);
      assertNull(annotatedMethod0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
      assertNotNull(objectReader0);
  }
}
