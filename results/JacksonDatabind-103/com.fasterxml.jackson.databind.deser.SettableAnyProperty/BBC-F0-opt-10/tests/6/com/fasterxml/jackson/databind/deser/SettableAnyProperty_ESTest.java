/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 08:43:27 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationCollector;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.EnumResolver;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.SequenceInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.chrono.IsoEra;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Long long0 = new Long(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 2);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 419, (-670), false);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException((JsonParser) uTF8StreamJsonParser0, (JavaType) null, jsonToken0, "[3k<XXEOMbF");
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      settableAnyProperty0._throwAsIOE(jsonMappingException0, deserializerFactory0, objectIdGenerators_UUIDGenerator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      System.setCurrentTimeMillis((-156L));
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<ObjectIdReferenceProperty> class1 = ObjectIdReferenceProperty.class;
      Class<IsoEra> class2 = IsoEra.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) simpleType0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CollectionType collectionType2 = collectionType1.withValueHandler(typeBindings0);
      CollectionType collectionType3 = collectionType2.withContentTypeHandler(collectionType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, collectionType3, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, beanProperty_Bogus0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(4096);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.clearProblemHandlers();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'f';
      charArray0[2] = 'J';
      charArray0[3] = 'E';
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-85);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-813), (byte) (-85));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(89);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4096, sequenceInputStream0, objectMapper0, byteQuadsCanonicalizer1, byteArray0, 0, 183, false);
      try { 
        settableAnyProperty0.deserializeAndSet(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0, (Object) null, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("JSON");
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "JSON", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, virtualAnnotatedMember0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property '[virtual java.sql.ClientInfoStatus#JSON]' of class java.sql.ClientInfoStatus (expected type: null; actual type: [null]), problem: JSON
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFactory jsonFactory0 = new JsonFactory();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "JSON", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, virtualAnnotatedMember0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property '[virtual java.sql.ClientInfoStatus#JSON]' of class java.sql.ClientInfoStatus (expected type: null; actual type: [null]) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<JavaType> class0 = JavaType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ReferenceType referenceType1 = referenceType0.withTypeHandler("");
      ReferenceType referenceType2 = referenceType1.withStaticTyping();
      ReferenceType referenceType3 = referenceType2.withValueHandler((Object) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set("", referenceType3, javaType0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getProperty();
      SQLDataException sQLDataException0 = new SQLDataException("com.fasterxml.jackson.annotation.ObjectIdGenerators$None", " (no error message provided)");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLDataException0);
      MockIOException mockIOException0 = new MockIOException(sQLTransientException0);
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, (Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.with(formatFeature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(jsonParser_Feature0);
      settableAnyProperty0.fixAccess(deserializationConfig2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JsonDeserializer<Object> jsonDeserializer0 = null;
      JavaType javaType0 = TypeFactory.unknownType();
      Class<ClientInfoStatus> class0 = ClientInfoStatus.class;
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      EnumResolver enumResolver0 = EnumResolver.constructUnsafe(class0, annotationIntrospector1);
      KeyDeserializer keyDeserializer0 = StdKeyDeserializers.constructEnumKeyDeserializer(enumResolver0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, javaType0, keyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String string0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "2,j:r0s/oVsYX", (Throwable) null);
      try { 
        settableAnyProperty0._throwAsIOE(sQLTransientException0, (Object) null, javaType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      Object object0 = null;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, beanProperty_Bogus0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader(4096);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'f';
      charArray0[2] = 'J';
      charArray0[3] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 4096, pipedReader0, objectMapper2, charsToNameCanonicalizer1, charArray0, 0, 183, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      try { 
        settableAnyProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 323);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      settableAnyProperty0.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AnnotationMap annotationMap0 = new AnnotationMap();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      Class<Integer> class0 = Integer.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, javaType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct((String) null, (String) null);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, (PropertyMetadata) null);
      BeanProperty.Std beanProperty_Std1 = new BeanProperty.Std(beanProperty_Std0, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std1, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Class<InputStream> class0 = InputStream.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl1.invalidTypeIdException((JavaType) null, "1R", "/eB IH=1Vz@");
      try { 
        settableAnyProperty1._throwAsIOE(jsonMappingException0, "/eB IH=1Vz@", (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '1R' as a subtype of null: /eB IH=1Vz@
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      Class<ObjectIdReferenceProperty> class1 = ObjectIdReferenceProperty.class;
      Class<ObjectIdReferenceProperty> class2 = ObjectIdReferenceProperty.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, mapType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = null;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      SQLDataException sQLDataException0 = new SQLDataException("; expected type Converter or Class<Converter> instead", "");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(sQLDataException0);
      sQLDataException0.initCause(sQLTransactionRollbackException0);
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransactionRollbackException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("{yb7^?g@uNx+I7fu", "{yb7^?g@uNx+I7fu", (-2179), sQLWarning0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("}AZ?FosA^", sQLTransactionRollbackException0);
      // Undeclared exception!
      settableAnyProperty0._throwAsIOE(sQLTransientException0, (Object) null, mockIllegalArgumentException0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null, jsonTypeInfo_As0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (KeyDeserializer) null, jsonDeserializer0, asPropertyTypeDeserializer1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(jsonTypeInfo_As0, beanProperty_Bogus0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory.defaultInstance();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(",A}%+IA0b", sQLRecoverableException0);
      Object object0 = new Object();
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      // Undeclared exception!
      try { 
        settableAnyProperty1._throwAsIOE(mockIllegalArgumentException0, stack0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(" (expected type: ", "7d.~t*J}");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("", sQLRecoverableException0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        settableAnyProperty1._throwAsIOE(mockIllegalArgumentException0, object0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<InputStream> class0 = InputStream.class;
      classNameIdResolver0.idFromValueAndType((Object) null, class0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, collectionType1, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      settableAnyProperty0.getType();
      SettableAnyProperty settableAnyProperty1 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty1.set(typeFactory0, (Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, collectionType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Annotation> class1 = Annotation.class;
      beanProperty_Bogus0.getAnnotation(class1);
      AnnotationCollector.OneAnnotation annotationCollector_OneAnnotation0 = new AnnotationCollector.OneAnnotation(class0, (Annotation) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty((PropertyName) null, (JavaType) null, (PropertyName) null, asPropertyTypeDeserializer0, annotationCollector_OneAnnotation0, (AnnotatedParameter) null, 0, beanProperty_Bogus0, propertyMetadata0);
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, (PropertyName) null);
      SettableBeanProperty settableBeanProperty0 = creatorProperty1.withNullProvider((NullValueProvider) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(settableBeanProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      Class<AnnotatedField> class0 = AnnotatedField.class;
      StdKeyDeserializer.forType(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl1, beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-2011L));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      settableAnyProperty0.getProperty();
      settableAnyProperty0.getProperty();
      settableAnyProperty0.hasValueDeserializer();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(jsonTypeInfo_As0, (Object) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-2011L));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-2011L));
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, false, (JavaType) null, jsonTypeInfo_As0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      jsonParserSequence0.skipChildren();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      settableAnyProperty0.getProperty();
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertNotNull(settableAnyProperty1);
      
      JavaType javaType0 = settableAnyProperty1.getType();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty0.equals((Object)settableAnyProperty1));
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertNull(javaType0);
      
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty0.equals((Object)settableAnyProperty1));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertFalse(boolean0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertNotNull(nonBlockingJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) nonBlockingJsonParser0, (JsonParser) nonBlockingJsonParser0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertNotNull(jsonParserSequence0);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertFalse(jsonParserSequence1.isNaN());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertNotNull(jsonParserSequence1);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertEquals("SimpleModule-21", simpleModule0.getModuleName());
      assertNotNull(simpleModule0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(classNameIdResolver0, (Object) null, simpleModule0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      BeanProperty beanProperty0 = null;
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      boolean boolean0 = true;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      assertFalse(asPropertyTypeDeserializer1.equals((Object)asPropertyTypeDeserializer0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer1.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer1.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer1);
      
      String string0 = null;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null, (-611), (Throwable) null);
      assertEquals((-611), sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertNotNull(sQLNonTransientException0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer1);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)asPropertyTypeDeserializer1));
      assertFalse(asPropertyTypeDeserializer1.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer1.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer1.getTypeInclusion());
      assertNotNull(settableAnyProperty0);
      
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertFalse(asPropertyTypeDeserializer0.equals((Object)asPropertyTypeDeserializer1));
      assertFalse(asPropertyTypeDeserializer1.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertNotSame(asPropertyTypeDeserializer0, asPropertyTypeDeserializer1);
      assertNotSame(asPropertyTypeDeserializer1, asPropertyTypeDeserializer0);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer1.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer1.getTypeInclusion());
      assertNotNull(settableAnyProperty1);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertNotNull(settableAnyProperty1);
      
      JavaType javaType0 = settableAnyProperty1.getType();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty0.equals((Object)settableAnyProperty1));
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertNull(javaType0);
      
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(settableAnyProperty0.equals((Object)settableAnyProperty1));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertFalse(boolean0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNotNull(nonBlockingJsonParser0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) nonBlockingJsonParser0, (JsonParser) nonBlockingJsonParser0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertNotNull(jsonParserSequence0);
      
      JsonParserSequence jsonParserSequence1 = (JsonParserSequence)jsonParserSequence0.skipChildren();
      assertSame(jsonParserSequence0, jsonParserSequence1);
      assertSame(jsonParserSequence1, jsonParserSequence0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canParseAsync());
      assertFalse(jsonParserSequence0.requiresCustomCodec());
      assertFalse(jsonParserSequence0.canReadTypeId());
      assertFalse(jsonParserSequence0.isNaN());
      assertFalse(jsonParserSequence0.canReadObjectId());
      assertEquals(0, jsonParserSequence0.getFormatFeatures());
      assertEquals(2, jsonParserSequence0.containedParsersCount());
      assertEquals(8193, jsonParserSequence0.getFeatureMask());
      assertEquals(8193, jsonParserSequence1.getFeatureMask());
      assertEquals(0, jsonParserSequence1.getFormatFeatures());
      assertEquals(2, jsonParserSequence1.containedParsersCount());
      assertFalse(jsonParserSequence1.canParseAsync());
      assertFalse(jsonParserSequence1.canReadTypeId());
      assertFalse(jsonParserSequence1.isNaN());
      assertFalse(jsonParserSequence1.canReadObjectId());
      assertFalse(jsonParserSequence1.requiresCustomCodec());
      assertNotNull(jsonParserSequence1);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParserSequence1, (DeserializationContext) null, (Object) null, " 3IC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer1 = new AsPropertyTypeDeserializer(asPropertyTypeDeserializer0, beanProperty_Bogus0);
      assertFalse(asPropertyTypeDeserializer1.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer1.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer1.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer1);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer1);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)asPropertyTypeDeserializer1));
      assertFalse(asPropertyTypeDeserializer1.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer1.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer1.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      String string0 = "v1O&l^";
      Throwable throwable0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      boolean boolean0 = true;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      String string0 = " 3IC";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertNotNull(sQLNonTransientException0);
      
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty1);
      
      // Undeclared exception!
      try { 
        settableAnyProperty1.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      JsonDeserializer<Object> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      String string0 = " 3IC";
      String string1 = "Unresolved forward reference but no identity info.";
      IsoEra isoEra0 = IsoEra.BCE;
      assertEquals(IsoEra.BCE, isoEra0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, (Object) null, isoEra0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      annotatedField0.fixAccess(true);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      
      JsonDeserializer<Object> jsonDeserializer0 = null;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      Class<?> class2 = asPropertyTypeDeserializer0.getDefaultImpl();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNull(class2);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNull(beanProperty0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      try { 
        settableAnyProperty0._throwAsIOE(sQLNonTransientException0, typeDeserializer0, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  3IC
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertNotNull(classNameIdResolver0);
      
      Class<List> class2 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class2, class2);
      assertFalse(collectionType0.hasHandlers());
      assertFalse(collectionType0.isArrayType());
      assertEquals(1, collectionType0.containedTypeCount());
      assertTrue(collectionType0.isAbstract());
      assertFalse(collectionType0.useStaticType());
      assertFalse(collectionType0.hasValueHandler());
      assertFalse(collectionType0.isPrimitive());
      assertFalse(collectionType0.isJavaLangObject());
      assertFalse(collectionType0.isMapLikeType());
      assertTrue(collectionType0.isContainerType());
      assertFalse(collectionType0.isEnumType());
      assertTrue(collectionType0.hasContentType());
      assertTrue(collectionType0.isCollectionLikeType());
      assertFalse(collectionType0.isConcrete());
      assertTrue(collectionType0.isInterface());
      assertFalse(collectionType0.isFinal());
      assertNotNull(collectionType0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(boolean0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("", beanProperty_Bogus0.getName());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      
      try { 
        settableAnyProperty0._throwAsIOE(sQLNonTransientException0, (Object) null, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  3IC
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      boolean boolean0 = true;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      String string0 = " 3IC";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertNotNull(sQLNonTransientException0);
      
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(settableAnyProperty1, settableAnyProperty0);
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty1);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-1976L));
      Class<IsoEra> class0 = IsoEra.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNotNull(beanProperty_Bogus0);
      
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = beanProperty_Bogus0.getContextAnnotation(class1);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertNull(annotation0);
      
      AnnotationMap annotationMap0 = AnnotationMap.of(class0, (Annotation) null);
      assertEquals(1, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertNotNull(classNameIdResolver0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asPropertyTypeDeserializer0.forProperty(beanProperty_Bogus0);
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertNotSame(asPropertyTypeDeserializer0, typeDeserializer0);
      assertNotSame(typeDeserializer0, asPropertyTypeDeserializer0);
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertFalse(asPropertyTypeDeserializer0.equals((Object)typeDeserializer0));
      assertFalse(typeDeserializer0.equals((Object)asPropertyTypeDeserializer0));
      assertFalse(beanProperty_Bogus0.isRequired());
      assertEquals("", beanProperty_Bogus0.getName());
      assertFalse(beanProperty_Bogus0.isVirtual());
      assertEquals(1, annotationMap0.size());
      assertEquals(1, annotatedField0.getAnnotationCount());
      assertEquals("class name used as type id", classNameIdResolver0.getDescForKnownTypeIds());
      assertEquals(JsonTypeInfo.Id.CLASS, classNameIdResolver0.getMechanism());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" 3IC", "Unresolved forward reference but no identity info.", 0, (Throwable) null);
      assertEquals("Unresolved forward reference but no identity info.", sQLNonTransientException0.getSQLState());
      assertEquals(" 3IC", sQLNonTransientException0.getMessage());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException:  3IC", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      try { 
        settableAnyProperty0._throwAsIOE(sQLNonTransientException0, (Object) null, typeFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         //  3IC
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }
}
