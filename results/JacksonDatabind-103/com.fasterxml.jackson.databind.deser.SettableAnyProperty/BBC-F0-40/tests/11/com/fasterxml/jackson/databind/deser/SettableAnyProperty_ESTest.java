/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 07:56:10 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.sql.SQLSyntaxErrorException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(settableAnyProperty0, (Object) null, javaType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "|*woj>", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, (Object) null, "~d");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null, (String) null, 0);
      try { 
        settableAnyProperty0._throwAsIOE(sQLSyntaxErrorException0, (Object) null, settableAnyProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-19));
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      assertTrue(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "~d", javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class com.fasterxml.jackson.databind.introspect.AnnotatedMethod]", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "~d", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertNull(javaType1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      SimpleType simpleType0 = (SimpleType)typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, simpleType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, "AUTO_DETECT_GETTERS", true, simpleType0);
      SimpleType simpleType1 = simpleType0.withStaticTyping();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, simpleType1, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      SimpleType simpleType2 = (SimpleType)settableAnyProperty0.getType();
      assertTrue(simpleType2.isConcrete());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertFalse(javaType1.isInterface());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionLikeType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertSame(javaType0, collectionLikeType0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];R9x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(beanProperty0.isRequired());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "~d", javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set("%}a&e\fYX,eYG", virtualAnnotatedMember0, beanProperty_Std0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "AUTO_DETECT_GETTERS", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      File file0 = MockFile.createTempFile("Cannot use Object Id with Builder-basedRdeserialization (type ", "Cannot use Object Id with Builder-basedRdeserialization (type ");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, jsonpCharacterEscapes0, "0O");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];R9x1wp[/'", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, typeFactory0, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, javaType0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, (String) null, false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(javaType0, "", "wjl6g:Eb");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, asWrapperTypeDeserializer0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of [simple type, class int]: wjl6g:Eb
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Module> class0 = Module.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "vv12.VUr7Kb.aK+ Tqv", javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(jsonParser0, (String) null);
      NamedType namedType0 = new NamedType(class0, "Qi~/1pB");
      try { 
        settableAnyProperty0._throwAsIOE(unresolvedForwardReference0, namedType0, jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, javaType0, jsonDeserializer0, (TypeDeserializer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Boolean boolean0 = Boolean.valueOf(false);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "", (Integer) null, "");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Q;;]*", javaType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "", true, javaType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, (JavaType) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'null' of class int (expected type: null; actual type: `com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      Boolean boolean0 = Boolean.FALSE;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring", (Integer) null, "com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring", javaType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "Bd", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, jsonDeserializer0, asWrapperTypeDeserializer0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring");
      ObjectIdGenerators.UUIDGenerator objectIdGenerators_UUIDGenerator0 = new ObjectIdGenerators.UUIDGenerator();
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring", objectIdGenerators_UUIDGenerator0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring' of class int (expected type: [simple type, class int]; actual type: `com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator`), problem: com.fasterxml.jackson.databind.deser.SettableAnyProperty$AnySettrReferring
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "~d", false, (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, classNameIdResolver0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, settableAnyProperty0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2146, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "+1j2?O#wk", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet((JsonParser) null, (DeserializationContext) null, propertyMetadata0, "!\":|hj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("', problem: ");
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null, "E^kpf~LRAad[IzM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "~Nd", true, (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];R9x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "|*woj>", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];R9x1wp[/'", false, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(beanProperty_Std0, beanProperty0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "~Nd", true, (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertNotSame(settableAnyProperty0, settableAnyProperty1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Integer> class0 = Integer.TYPE;
      JavaType javaType0 = typeFactory0.constructType((Type) class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(javaType0, (TypeIdResolver) null, "];R9x1wp[/'", true, javaType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }
}
