/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 08:51:33 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.format.MatchStrength;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReferenceProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.reflect.Field;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.time.chrono.ChronoLocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "xK", true, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, annotatedField0, placeholderForType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, ",K", false, placeholderForType0, jsonTypeInfo_As0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forSerialization(pOJOPropertiesCollector0);
      KeyDeserializer keyDeserializer0 = stdKeyDeserializers0.findKeyDeserializer(placeholderForType0, (DeserializationConfig) null, basicBeanDescription0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, placeholderForType0, keyDeserializer0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(218);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<List> class0 = List.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "<", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "<", false, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer0, asPropertyTypeDeserializer0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertTrue(deserializationConfig0.canOverrideAccessModifiers());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "xK", placeholderForType0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "value not one of declared Enum instance names for %s", false, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, annotatedField0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      try { 
        settableAnyProperty0._throwAsIOE(sQLTimeoutException0, (Object) null, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "JSON", false, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, asExternalTypeDeserializer0);
      PropertyName propertyName0 = PropertyName.construct("");
      LongNode longNode0 = LongNode.valueOf((-6));
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, propertyName0, longNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-36));
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, placeholderForType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.equals((Object)settableAnyProperty0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "xdsK", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "value not one of declared Enum instance names for %s", true, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class com.fasterxml.jackson.databind.node.LongNode]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "PAME", (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, classNameIdResolver0, "!C]EZ +0lH^tjw\"? ", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, virtualAnnotatedMember0, (JavaType) null, jsonDeserializer0, asWrapperTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, annotatedField0, arrayType1, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isAbstract());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, annotatedField0, arrayType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertEquals(0, javaType0.containedTypeCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      Class<Module> class0 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, resolvedRecursiveType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<LongNode> class1 = LongNode.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      Class<PropertyName> class2 = PropertyName.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      CollectionType collectionType1 = collectionType0.withContentTypeHandler(mockIllegalArgumentException0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType1, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "B)3(/1>4|?X3K}k'in", true, collectionType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType1, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isInterface());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, (TypeIdResolver) null, "Cannot create polymorphic instances with external type ids (%s -> %s)", false, javaType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, jsonDeserializer0, asPropertyTypeDeserializer0);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertFalse(javaType1.hasHandlers());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<LongNode> class1 = LongNode.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      Class<PropertyName> class2 = PropertyName.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "B)3(/1>4|?X3K}k'in", true, collectionType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      Class<Module> class0 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "", true, (JavaType) null, jsonTypeInfo_As0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, resolvedRecursiveType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Object object0 = settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "&K", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "&K", true, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, asPropertyTypeDeserializer0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1951));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, (TypeIdResolver) null, "#zFV%u", true, placeholderForType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("No native support for writing embedded objects of type ");
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, simpleObjectIdResolver0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(10);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(placeholderForType0, classNameIdResolver0, (String) null, true, placeholderForType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, placeholderForType0, jsonDeserializer1, asArrayTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<PipedInputStream> class1 = PipedInputStream.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class0, class1);
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, mapType0, "=ebg");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of $11: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "x-I?`<", true, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, annotatedField0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)83;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte)1, 180);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1338);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "*]", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer1, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-658));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("JSON");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("JSON", sQLSyntaxErrorException0);
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, jsonFactory0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "aL>u@Fvxv", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      MockIOException mockIOException0 = new MockIOException("");
      MatchStrength matchStrength0 = MatchStrength.NO_MATCH;
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, matchStrength0, resolvedRecursiveType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-16842752));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, (Object) null, deserializerFactoryConfig0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.annotation.ObjectIdResolver` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type [null]: incompatible types
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      Class<ReferenceType> class0 = ReferenceType.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, jsonpCharacterEscapes0.ESCAPE_STANDARD, jsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: JSON
         //  at [Source: (PipedReader); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      Class<Module> class0 = Module.class;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "JSON", false, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(jsonDeserializer0, settableAnyProperty0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(placeholderForType0, classNameIdResolver0, "JSON", false, placeholderForType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, asExternalTypeDeserializer0);
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of $-5: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "", false, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, annotatedField0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, placeholderForType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(568);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Y", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("com.fasterxml.jackson.databind.ser.FilterProvider", "com.fasterxml.jackson.databind.ser.FilterProvider");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("8a&.Ovil7%;99`9}", sQLNonTransientConnectionException0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 568);
      LongNode longNode0 = new LongNode(568);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, pipedInputStream0, longNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'java.io.PipedInputStream@73741a7e' of class java.time.chrono.ChronoLocalDate (expected type: $569; actual type: `com.fasterxml.jackson.databind.node.LongNode`), problem: 8a&.Ovil7%;99`9}
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(513);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "+Y", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException((String) null, sQLNonTransientConnectionException0);
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      Class<ObjectIdResolver> class1 = ObjectIdResolver.class;
      NamedType namedType0 = new NamedType(class1, "");
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, objectIdGenerators_IntSequenceGenerator0, namedType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.annotation.ObjectIdGenerators$IntSequenceGenerator@5' of class java.time.chrono.ChronoLocalDate (expected type: $514; actual type: `com.fasterxml.jackson.databind.jsontype.NamedType`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "value not one of declared Enum instance names for %s", true, placeholderForType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, (TypeBindings) null);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, annotatedField0, placeholderForType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(typeResolutionContext_Basic0, objectIdReferenceProperty1, annotatedField0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1338);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "*]", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer1, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(placeholderForType0, placeholderForType0);
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, referenceType0, "*]");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "kC", (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "kC", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty0, virtualAnnotatedMember0, (JavaType) null, jsonDeserializer0, asPropertyTypeDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, (Object) null, "(if");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1333);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "*]", placeholderForType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, "*]", true, placeholderForType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, virtualAnnotatedMember0, placeholderForType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-2188));
      Class<AnnotatedField> class0 = AnnotatedField.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "A,C!=:5f", placeholderForType0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, placeholderForType0, jsonDeserializer0, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
      Class<LongNode> class1 = LongNode.class;
      Stack<JavaType> stack0 = new Stack<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class1, (List<JavaType>) stack0);
      Class<PropertyName> class2 = PropertyName.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class2);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(collectionType0, classNameIdResolver0, "B)3(/1>4|?X3K}k'in", true, collectionType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3));
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, (AnnotationMap) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(placeholderForType0, classNameIdResolver0, (String) null, false, placeholderForType0, jsonTypeInfo_As0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, placeholderForType0, jsonDeserializer0, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNotNull(beanProperty0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ObjectIdReferenceProperty objectIdReferenceProperty0 = mock(ObjectIdReferenceProperty.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      ObjectIdReferenceProperty objectIdReferenceProperty1 = new ObjectIdReferenceProperty(objectIdReferenceProperty0, jsonDeserializer0, jsonDeserializer0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-6));
      JsonDeserializer<Object> jsonDeserializer1 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(placeholderForType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      Class<Module> class0 = Module.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(objectIdReferenceProperty1, (AnnotatedMember) null, resolvedRecursiveType0, jsonDeserializer1, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }
}
