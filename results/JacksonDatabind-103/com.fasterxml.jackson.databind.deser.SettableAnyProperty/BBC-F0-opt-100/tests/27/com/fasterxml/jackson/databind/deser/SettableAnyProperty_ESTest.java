/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 02:18:09 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BasicDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.lang.reflect.Field;
import java.sql.SQLTransientConnectionException;
import java.util.List;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Illegal index ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      // Undeclared exception!
      try { 
        settableAnyProperty0.set("Illegal index ", propertyMetadata0, jsonFactory_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("CREATOR");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      NamedType namedType0 = new NamedType(class0, "");
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(namedType0, annotationMap0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Illegal index ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("_", "_", 2048);
      try { 
        settableAnyProperty0._throwAsIOE(sQLTransientConnectionException0, propertyName0, creatorProperty0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // _
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("CREATOR", "CREATOR");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      ObjectIdGenerator<AnnotatedField> objectIdGenerator0 = (ObjectIdGenerator<AnnotatedField>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
      JsonDeserializer<Integer> jsonDeserializer0 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      ObjectIdReader objectIdReader0 = ObjectIdReader.construct((JavaType) null, propertyName0, objectIdGenerator0, jsonDeserializer0, creatorProperty0, simpleObjectIdResolver0);
      JsonDeserializer<Object> jsonDeserializer1 = objectIdReader0.getDeserializer();
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(jsonDeserializer1);
      assertTrue(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null, "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Illegal index ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3585);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType1, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3574);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.isArrayType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("CREATOR");
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2029, (Object) null, (PropertyMetadata) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, annotatedField0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertTrue(javaType1.isConcrete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null, "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Il$egal indx", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(creatorProperty0, beanProperty0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName((String) null, "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Illegal index ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      CreatorProperty creatorProperty1 = (CreatorProperty)settableAnyProperty0.getProperty();
      assertFalse(creatorProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2004), (Object) null, propertyMetadata0);
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, jsonDeserializer1, (TypeDeserializer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DoubleNode doubleNode0 = new DoubleNode((-2004));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
      Object object0 = settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
      assertEquals("[]", object0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("", "Properties=[");
      AnnotationMap annotationMap0 = new AnnotationMap();
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = new Integer(2048);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "Illegal index ", integer0, (String) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (KeyDeserializer) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParserDelegate0, defaultDeserializationContext_Impl0, jsonDeserializer0, "' of class ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("','", (Throwable) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, mockIllegalArgumentException0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException();
      Object object0 = new Object();
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, (Object) null, object0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "ALLOW_COMMENTS", "j0");
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, stack0, defaultSerializerProvider_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'ALLOW_COMMENTS' as a subtype of null: j0
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      Class<AnnotatedField> class0 = AnnotatedField.class;
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, ", problem: ");
      IntNode intNode0 = IntNode.valueOf((-1309));
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, intNode0, arrayNode0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_STRING: , problem: 
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "LREOR", (JavaType) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, "LREOR", annotatedField0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[8];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<AnnotatedField> class0 = AnnotatedField.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "+IhF", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertFalse(deserializationConfig0.requiresFullValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Deserialization of %s by passing existing Builder (%s) instance not supported", (JavaType) null);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, mockIllegalArgumentException0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'null' of class java.lang.Object (expected type: null; actual type: `org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<AnnotatedField> class0 = AnnotatedField.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "+IGF", (JavaType) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("+IGF");
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'null' of class com.fasterxml.jackson.databind.introspect.AnnotatedField (expected type: null; actual type: `java.lang.Class`), problem: +IGF
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2004), (Object) null, propertyMetadata0);
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      JsonDeserializer<List<PropertyName>> jsonDeserializer0 = (JsonDeserializer<List<PropertyName>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.databind.DeserializationContext.class));
      CreatorProperty creatorProperty1 = new CreatorProperty(creatorProperty0, jsonDeserializer0, jsonDeserializer0);
      JsonDeserializer<Object> jsonDeserializer1 = creatorProperty1.getValueDeserializer();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, jsonDeserializer1, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asArrayTypeDeserializer0);
      ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = PropertyName.construct("");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, (PropertyName) null, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-2004), (Object) null, propertyMetadata0);
      JsonDeserializer<Object> jsonDeserializer0 = creatorProperty0.getValueDeserializer();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "Deserialization of %s by passing existing Builder (%s) instance not supported", (JavaType) null);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, typeBindings0, "Deserialization of %s by passing existing Builder (%s) instance not supported");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3574);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, collectionType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "CREATOR", (JavaType) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "CREATOR", (JavaType) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PropertyName propertyName0 = new PropertyName("CREATOR", "CREATOR");
      AnnotationMap annotationMap0 = new AnnotationMap();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2048, annotationMap0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.hasContentType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "CREATOR", (JavaType) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PropertyName propertyName0 = BasicDeserializerFactory.UNWRAPPED_CREATOR_PARAM_NAME;
      AnnotationMap annotationMap0 = new AnnotationMap();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "CREATOR", (JavaType) null);
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, (JavaType) null, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, 2018, (Object) null, (PropertyMetadata) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(creatorProperty0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class java.lang.Object]", string0);
  }
}
