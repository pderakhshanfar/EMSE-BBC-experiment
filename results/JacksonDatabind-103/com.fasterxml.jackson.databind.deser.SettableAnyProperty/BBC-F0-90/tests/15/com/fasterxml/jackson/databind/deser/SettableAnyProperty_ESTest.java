/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:55:32 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.util.ConcurrentModificationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "J[$npG$D]$utf", false, resolvedRecursiveType0);
      KeyDeserializer keyDeserializer0 = StdKeyDeserializers.constructDelegatingKeyDeserializer((DeserializationConfig) null, referenceType0, coreXMLDeserializers_Std0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, keyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-41));
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, resolvedRecursiveType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1933);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1933);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, placeholderForType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      DataTruncation dataTruncation0 = new DataTruncation(258, false, true, 1933, 1933, (Throwable) null);
      try { 
        settableAnyProperty0._throwAsIOE(dataTruncation0, typeFactory0, annotationMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Data truncation
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1933);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1933);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, placeholderForType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<JsonTypeInfo.As> class0 = JsonTypeInfo.As.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, (String) null, true, collectionType0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, typeResolutionContext_Basic0, annotationMap0, 987);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedParameter0, collectionType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.isConcrete());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 568);
      ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, typeBindings0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNotNull(javaType0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1138);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "", false, referenceType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      settableAnyProperty0.getProperty();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "6N*`u9$+r(4(", false, referenceType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(beanProperty_Std0, beanProperty0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, (TypeIdResolver) null, "J3\"O<KG<hlIB`,FI", true, referenceType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e'&ap", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e'&ap", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(asPropertyTypeDeserializer0, integer0, "");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "j\"RStd~-", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      arrayNode0.insert(32768, 32768);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.nextLongValue((-1L));
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, (DeserializationContext) null, (Object) null, "j\"RStd~-");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "j\"RStd~-", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      arrayNode0.insert(32768, 32768);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.nextLongValue((-1L));
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(filteringParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e] &p", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e] &p", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.introspect.AnnotatedField' as a subtype of [reference type, class com.fasterxml.jackson.databind.introspect.AnnotatedField<com.fasterxml.jackson.databind.introspect.AnnotatedField><[recursive type; UNRESOLVED>]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, ") [", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("rACG>iO;r9T");
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, coreXMLDeserializers_Std0, jsonNodeFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 568);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      MockIOException mockIOException0 = new MockIOException();
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, (Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "7ryi5sD1uN*2^(A", "Bs}_;*lej5'$");
      Class<PropertyName> class0 = PropertyName.class;
      NamedType namedType0 = new NamedType(class0, "] that wasn't previously registered.");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, namedType0, namedType0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '7ryi5sD1uN*2^(A' as a subtype of null: Bs}_;*lej5'$
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1955);
      Class<DataInputStream> class1 = DataInputStream.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class1, "kAtaX{", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference((JsonParser) null, "kAtaX{");
      try { 
        settableAnyProperty0._throwAsIOE(unresolvedForwardReference0, (Object) null, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "j\"RStd~-", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(filteringParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 1469);
      JsonParser jsonParser0 = arrayNode0.traverse();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "j\"RStd~-", true, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "j\"RStd~-", referenceType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, classNameIdResolver0, dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver@3' of class int (expected type: null; actual type: `java.io.DataInputStream`), problem: 
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, classNameIdResolver0, dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver@3' of class int (expected type: null; actual type: `java.io.DataInputStream`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1933);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1933);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, placeholderForType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      Class<IllegalArgumentException> class1 = IllegalArgumentException.class;
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, typeBindings0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, class1, resolvedRecursiveType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, ") [", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(class0, typeFactory0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, (TypeDeserializer) null);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, jsonDeserializer0, false);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)43, 3600);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3169, byteArrayInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, 56319, 0, false);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        settableAnyProperty0.deserializeAndSet(uTF8StreamJsonParser0, deserializationContext0, (Object) null, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e'&ap", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e'&ap", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      File file0 = MockFile.createTempFile("JSON", "");
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      JsonTypeInfo.As jsonTypeInfo_As1 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, jsonTypeInfo_As1, "com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'com.fasterxml.jackson.databind.introspect.AnnotatedField' as a subtype of [reference type, class com.fasterxml.jackson.databind.introspect.AnnotatedField<com.fasterxml.jackson.databind.introspect.AnnotatedField><[recursive type; UNRESOLVED>]: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e'&ap", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e'&ap", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, class0, "2zX0v5}e'&ap");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e] &p", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e] &p", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class2 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "\"i}bb1R", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      boolean boolean0 = settableAnyProperty1.hasValueDeserializer();
      assertFalse(boolean0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      Class<String> class1 = String.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class2 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 32768);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "\"i}bb1R", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[1] = (JavaType) resolvedRecursiveType0;
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class1, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[1]);
      Boolean boolean0 = Boolean.valueOf("6N*`u9$+r(4(");
      Integer integer0 = new Integer(3415);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(boolean0, "6N*`u9$+r(4(", integer0, "");
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "6N*`u9$+r(4(", false, referenceType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(beanProperty0, beanProperty_Std0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1935);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-41));
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess(deserializationConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1399);
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(referenceType0, (TypeFactory) null);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "2zX0v5}e'&ap", false, referenceType0, jsonTypeInfo_As0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic((TypeFactory) null, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "2zX0v5}e'&ap", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      assertTrue(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      Class<Object> class1 = Object.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 32795);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "j\"RStd~-", true, resolvedRecursiveType0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, "j\"Rtd1u~-", referenceType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, referenceType0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class java.lang.Object]", string0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }
}
