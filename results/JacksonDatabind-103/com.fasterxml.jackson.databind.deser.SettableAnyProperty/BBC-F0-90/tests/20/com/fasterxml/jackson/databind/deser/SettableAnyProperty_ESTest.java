/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 05:58:42 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.lang.reflect.Field;
import java.sql.ClientInfoStatus;
import java.sql.SQLRecoverableException;
import java.sql.SQLWarning;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "I", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std1 = new CoreXMLDeserializers.Std(class1, 15);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std1);
      assertTrue(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      SQLWarning sQLWarning0 = new SQLWarning("", "", sQLRecoverableException0);
      try { 
        settableAnyProperty0._throwAsIOE(sQLWarning0, valueInstantiator_Base0, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "B]K%tJqfZLaR", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asArrayTypeDeserializer0);
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      assertFalse(settableAnyProperty1.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "_=", false, resolvedRecursiveType0);
      Class<ClientInfoStatus> class2 = ClientInfoStatus.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class2, "<i%~", resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class java.sql.ClientInfoStatus]", string0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<Object> class1 = Object.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[0];
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, (JavaType) simpleType0);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", collectionType1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(simpleType0, classNameIdResolver0, "", true, collectionType1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, collectionType1, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertSame(javaType0, collectionType1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType[] javaTypeArray0 = new JavaType[6];
      javaTypeArray0[0] = (JavaType) resolvedRecursiveType0;
      javaTypeArray0[5] = (JavaType) resolvedRecursiveType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, (JavaType) resolvedRecursiveType0, javaTypeArray0, javaTypeArray0[5], javaTypeArray0[0]);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(mapType0, classNameIdResolver0, (String) null, false, mapType0, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, mapType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertFalse(javaType0.hasValueHandler());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Integer> class0 = Integer.TYPE;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<AnnotatedField> class1 = AnnotatedField.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 1);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "byte", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyName propertyName0 = PropertyName.construct("kg_n", "kg_n");
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "kg_n", javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, javaType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JavaType javaType1 = settableAnyProperty0.getType();
      assertFalse(javaType1.isArrayType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "byte", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      settableAnyProperty0.getProperty();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "byte", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNotNull(beanProperty0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 3);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "C", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, jsonDeserializer0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, class0, "FV,bMYh^y&ag:L^C");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 5);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "JSON", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty1 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      try { 
        settableAnyProperty1.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, settableAnyProperty0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of [recursive type; UNRESOLVED: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "java.lang.Object", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, jsonDeserializer0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 5);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, "JSON", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'java.lang.Object' as a subtype of [recursive type; UNRESOLVED: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, " (no error message provided)", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, (Object) null, propertyMetadata0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, " (no error message provided)", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      MockIOException mockIOException0 = new MockIOException("%]");
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, stdKeyDeserializer0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 15);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, " (no error message provided)", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "", " (no error message provided)");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, stdKeyDeserializer0, stdKeyDeserializer0.TYPE_BOOLEAN);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '' as a subtype of [recursive type; UNRESOLVED:  (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 5);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "e%", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, (Object) null, propertyMetadata0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected VALUE_TRUE: JSON
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 6);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "java.lang.Object", false, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, stdKeyDeserializer0, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, (AnnotatedMember) null, (PropertyMetadata) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, javaType0, (KeyDeserializer) null, jsonDeserializer0, (TypeDeserializer) null);
      try { 
        settableAnyProperty0.deserialize(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "!.[hlehqR)", javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, virtualAnnotatedMember0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, propertyMetadata0, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.databind.PropertyMetadata@4' of class java.lang.Object (expected type: [simple type, class java.lang.Object]; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "!.[hlehqR)", javaType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, javaType0, (PropertyName) null, virtualAnnotatedMember0, propertyMetadata0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, virtualAnnotatedMember0, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("!.[hlehqR)");
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, propertyMetadata0, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'com.fasterxml.jackson.databind.PropertyMetadata@4' of class java.lang.Object (expected type: [simple type, class java.lang.Object]; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`), problem: !.[hlehqR)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "Do not know how to construct standard type serializer for inclusion type: ", false, (JavaType) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(valueInstantiator_Base0, class0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(resolvedRecursiveType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "I", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(valueInstantiator_Base0, asExternalTypeDeserializer0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "Do not know how to construct standard type serializer for inclusion type: ", true, resolvedRecursiveType0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, mockIllegalArgumentException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JsonFactory jsonFactory0 = new JsonFactory();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Class<Object> class0 = Object.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, (AnnotatedMember) null, javaType0, stdKeyDeserializer0, jsonDeserializer0, (TypeDeserializer) null);
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl0, (Object) null, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No _valueDeserializer assigned
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", false, resolvedRecursiveType0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "; expected Class<Converter>", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "Do not know how to construct standard type serializer for inclusion type: ", false, (JavaType) null);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, (JavaType) null, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      settableAnyProperty0.getType();
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "com.fasterxml.jackson.databind.MapperFeature", true, resolvedRecursiveType0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, annotatedField0, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
      assertTrue(settableAnyProperty0.hasValueDeserializer());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, (JavaType) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, resolvedRecursiveType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, "", true, resolvedRecursiveType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, resolvedRecursiveType0, (KeyDeserializer) null, coreXMLDeserializers_Std0, asExternalTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }
}
