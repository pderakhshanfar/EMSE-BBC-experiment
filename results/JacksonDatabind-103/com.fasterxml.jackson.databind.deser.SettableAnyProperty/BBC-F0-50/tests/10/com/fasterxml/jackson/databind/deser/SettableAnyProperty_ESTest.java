/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 05:53:11 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerBuilder;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.math.RoundingMode;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.time.chrono.JapaneseDate;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, javaType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = null;
      JavaType javaType0 = null;
      TypeDeserializer typeDeserializer0 = null;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SQLException sQLException0 = new SQLException("GTmm!>T=PjG&'(Y@", "Q@u,5|enMm:LO=zIO");
      SQLDataException sQLDataException0 = new SQLDataException(sQLException0);
      sQLException0.initCause(sQLDataException0);
      // Undeclared exception!
      settableAnyProperty0._throwAsIOE(sQLException0, (Object) null, (Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jacksn.databind.ser.BeanSerialierModifier", (JavaType) null);
      Class<Locale> class1 = Locale.class;
      Class<Annotation> class2 = Annotation.class;
      Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class3, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, javaType0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      StdKeyDeserializer.forType(class2);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      settableAnyProperty0.toString();
      settableAnyProperty0.getType();
      System.setCurrentTimeMillis(1627L);
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(class3, (Object) null, simpleObjectIdResolver0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "=n", (JavaType) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      DeserializationConfig deserializationConfig1 = deserializationConfig0.without(formatFeature0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      DeserializationConfig deserializationConfig2 = deserializationConfig1.with(contextAttributes0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      DeserializationConfig deserializationConfig3 = deserializationConfig2.with(jsonNodeFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      DeserializationConfig deserializationConfig4 = deserializationConfig3.withFeatures(jsonParser_FeatureArray0);
      settableAnyProperty0.fixAccess(deserializationConfig4);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, objectMapper0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "@5", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      JsonParser jsonParser0 = jsonFactory4.createParser(" (one known property: \"");
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, (Object) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Object> class0 = Object.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "com.fasterxml.jacksn.databind.ser.BeanSerialierModifier", (JavaType) null);
      Class<Locale> class1 = Locale.class;
      Class<ObjectIdResolver> class2 = ObjectIdResolver.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class2, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withContentType((JavaType) null);
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, javaType0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(class2, (Object) null, simpleObjectIdResolver0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Class<SimpleModule> class0 = SimpleModule.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2625));
      settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
      settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "' of class ", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, class0, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'class java.lang.IllegalArgumentException' of class java.lang.IllegalArgumentException (expected type: null; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeserializationConfig deserializationConfig0 = null;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("K{d)o[pm+uh{@s,7x");
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory3.enable(jsonFactory_Feature0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(sQLNonTransientException0);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      ObjectIdGenerators.StringIdGenerator objectIdGenerators_StringIdGenerator0 = new ObjectIdGenerators.StringIdGenerator();
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, japaneseDate0, objectIdGenerators_StringIdGenerator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "' of class ", (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("' of class ");
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, class0, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'class java.lang.IllegalArgumentException' of class java.lang.IllegalArgumentException (expected type: null; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`), problem: ' of class 
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonDeserializer<Object> jsonDeserializer0 = null;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)40;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      Class<String> class0 = String.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "com.fasterxml.jackson.databind.deser.SettableAnyProperty");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, "JSON", "com.fasterxml.jackson.databind.deser.SettableAnyProperty");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected START_OBJECT: com.fasterxml.jackson.databind.deser.SettableAnyProperty
         //  at [Source: (byte[])\"4\u001B(\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "6+wcw(mA", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeDeserializer typeDeserializer0 = null;
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "3uex", "3uex");
      try { 
        settableAnyProperty0._throwAsIOE(jsonMappingException0, jsonMappingException0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id '3uex' as a subtype of null: 3uex
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "6+wcw(mA", (JavaType) null);
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(annotationMap0, (Object) null, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "6+wcw(mA", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(linkedList0, annotationMap0, simpleObjectIdResolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
      beanSerializerBuilder0.getClassInfo();
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, (AnnotationMap) null);
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      annotatedField0.equals(arrayList0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "6+wcw(mA", (JavaType) null);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Bogus0, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeFactory.defaultInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1477));
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, placeholderForType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<TypeIdResolver> class1 = TypeIdResolver.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class1, 15711167);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      settableAnyProperty0.hasValueDeserializer();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeFactory.defaultInstance();
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      DeserializationConfig deserializationConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationFeature0, deserializationFeatureArray0);
      ArrayNode arrayNode0 = objectMapper2.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PropertyMetadata.MergeInfo.createForDefaults((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Object> class0 = Object.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0);
      SimpleModule simpleModule0 = new SimpleModule("");
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, defaultDeserializationContext_Impl1, simpleModule0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      JsonDeserializer<Object> jsonDeserializer0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "I", false, arrayType0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "ahO{<=L]9<8#j!/Z", true, arrayType0);
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 56);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, coreXMLDeserializers_Std0, asWrapperTypeDeserializer0);
      settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, arrayType0);
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      Integer integer0 = new Integer((-1692));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) false, "", integer0, "");
      Integer integer1 = new Integer((-1692));
      propertyMetadata0.withIndex(integer1);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_REQUIRED;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, arrayType0, propertyName1, (AnnotatedMember) null, propertyMetadata1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      // Undeclared exception!
      try { 
        settableAnyProperty1.set(class1, (Object) null, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, arrayType0);
      PropertyName propertyName0 = new PropertyName("");
      PropertyName propertyName1 = propertyName0.withSimpleName("");
      Integer integer0 = new Integer((-1692));
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) false, "", integer0, "");
      Integer integer1 = new Integer((-1692));
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withIndex(integer1);
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withRequired((Boolean) false);
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName1, arrayType0, propertyName1, (AnnotatedMember) null, propertyMetadata2);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty(beanProperty_Std0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      SettableAnyProperty settableAnyProperty1 = settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      // Undeclared exception!
      try { 
        settableAnyProperty1.set(class1, (Object) null, beanProperty_Std0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      Class<PropertyName> class2 = PropertyName.class;
      Class<ObjectIdGenerators.StringIdGenerator> class3 = ObjectIdGenerators.StringIdGenerator.class;
      typeFactory0.constructMapLikeType(class1, class2, class3);
      String string0 = "zLOL";
      NamedType namedType0 = new NamedType(class1, "zLOL");
      JsonDeserializer<Object> jsonDeserializer0 = null;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "zLOL", false, arrayType0);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      settableAnyProperty0.hasValueDeserializer();
      JsonParser jsonParser0 = null;
      DeserializationContext deserializationContext0 = null;
      Class<RoundingMode> class4 = RoundingMode.class;
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE((Exception) null, propertyMetadata_MergeInfo0, propertyMetadata_MergeInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      Class<String> class2 = String.class;
      NamedType namedType0 = new NamedType(class2, "");
      JsonDeserializer<Object> jsonDeserializer0 = null;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "oc4s}J1ag1x0~0/2/.", false, arrayType0);
      asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      List<JavaType> list0 = arrayType0.getInterfaces();
      TypeBindings typeBindings0 = TypeBindings.create(class1, list0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      Class<SimpleType> class3 = SimpleType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class3, "", arrayType0);
      virtualAnnotatedMember0.getAnnotated();
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotationMap annotationMap1 = AnnotationMap.merge(annotationMap0, annotationMap0);
      AnnotatedField annotatedField0 = new AnnotatedField(typeResolutionContext_Basic0, (Field) null, annotationMap1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, arrayType0, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'o';
      charArray0[2] = 'n';
      charArray0[3] = ')';
      charArray0[4] = 'A';
      charArray0[5] = 'w';
      charArray0[6] = '/';
      charArray0[7] = 's';
      charArray0[8] = 'C';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 0, 0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(defaultDeserializationContext_Impl0, beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParserDelegate0, defaultDeserializationContext0, "", "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      arrayType0.isTypeOrSubTypeOf(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      Class<SimpleType> class2 = SimpleType.class;
      StdKeyDeserializer.forType(class2);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType0, (KeyDeserializer) null, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      System.setCurrentTimeMillis(1227L);
      settableAnyProperty0.hasValueDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, (DefaultDeserializationContext) null);
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector1);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'u';
      charArray0[1] = 'O';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = '=';
      charArray0[5] = 'Y';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      assertFalse(propertyMetadata_MergeInfo0.fromDefaults);
      assertNotNull(propertyMetadata_MergeInfo0);
      
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      assertNull(annotatedMember0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNotNull(arrayType0);
      
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertNotNull(namedType0);
      
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertNotNull(arrayType1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNotNull(asWrapperTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNull(beanProperty0);
      
      System.setCurrentTimeMillis(0L);
      boolean boolean2 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.hasContentType());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isEnumType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.hasHandlers());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isFinal());
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.useStaticType());
      assertTrue(arrayType1.isFinal());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.hasHandlers());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.isConcrete());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(arrayType1.isEnumType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(boolean2);
      
      MockException mockException0 = new MockException("");
      MockIOException mockIOException0 = new MockIOException(mockException0);
      Integer integer0 = Integer.getInteger("", 101);
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, (Object) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-57), (byte) (-121), (byte)0, (byte)63, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType0, (TypeIdResolver) null, "", false, arrayType0);
      asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, asWrapperTypeDeserializer0);
      settableAnyProperty0.getProperty();
      System.setCurrentTimeMillis(1412L);
      settableAnyProperty0.hasValueDeserializer();
      settableAnyProperty0.getType();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      assertFalse(propertyMetadata_MergeInfo0.fromDefaults);
      assertNotNull(propertyMetadata_MergeInfo0);
      
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      assertNull(annotatedMember0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertNotNull(arrayType0);
      
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      assertNull(namedType0.getName());
      assertFalse(namedType0.hasName());
      assertNotNull(namedType0);
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNotNull(arrayType1);
      
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo1 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      assertFalse(propertyMetadata_MergeInfo1.fromDefaults);
      assertFalse(propertyMetadata_MergeInfo1.equals((Object)propertyMetadata_MergeInfo0));
      assertNotSame(propertyMetadata_MergeInfo1, propertyMetadata_MergeInfo0);
      assertNotNull(propertyMetadata_MergeInfo1);
      
      boolean boolean2 = arrayType1.isTypeOrSubTypeOf(class1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertFalse(boolean2);
      
      boolean boolean3 = arrayType0.isTypeOrSubTypeOf(class0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertNotSame(arrayType0, arrayType1);
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(boolean3);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNotNull(asWrapperTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNotNull(settableAnyProperty0);
      
      JavaType javaType0 = settableAnyProperty0.getType();
      assertTrue(javaType0.equals((Object)arrayType0));
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertSame(javaType0, arrayType1);
      assertNotSame(javaType0, arrayType0);
      assertNotSame(arrayType0, javaType0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(arrayType1, javaType0);
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertTrue(javaType0.useStaticType());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.isMapLikeType());
      assertTrue(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertEquals(0, javaType0.containedTypeCount());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isContainerType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNotNull(javaType0);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType0.equals((Object)javaType0));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertNotSame(arrayType0, javaType0);
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(arrayType1, javaType0);
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.hasHandlers());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.hasValueHandler());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.useStaticType());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertNull(beanProperty0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, typeDeserializer0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      assertFalse(propertyMetadata_MergeInfo0.fromDefaults);
      assertNotNull(propertyMetadata_MergeInfo0);
      
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      assertNull(annotatedMember0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertNotNull(arrayType0);
      
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertNotNull(namedType0);
      
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertNotNull(arrayType1);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertNotNull(asWrapperTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertTrue(arrayType0.isConcrete());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType0.isJavaLangObject());
      assertFalse(arrayType0.useStaticType());
      assertFalse(arrayType0.hasHandlers());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isAbstract());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.isEnumType());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isPrimitive());
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertTrue(arrayType1.isContainerType());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertEquals(0, arrayType1.containedTypeCount());
      assertFalse(arrayType1.isInterface());
      assertTrue(arrayType1.isArrayType());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.useStaticType());
      assertFalse(arrayType1.isPrimitive());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.isAbstract());
      assertTrue(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertTrue(arrayType1.isFinal());
      assertTrue(arrayType1.isConcrete());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNull(beanProperty0);
      
      System.setCurrentTimeMillis(0L);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTimeoutException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTimeoutException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNotNull(sQLTransientConnectionException0);
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("IhQ,Y", "", 2305, sQLTransientConnectionException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: java.sql.SQLTimeoutException", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.SQLTimeoutException", sQLTransientConnectionException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals(2305, sQLTimeoutException1.getErrorCode());
      assertEquals("", sQLTimeoutException1.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: IhQ,Y", sQLTimeoutException1.toString());
      assertEquals("IhQ,Y", sQLTimeoutException1.getMessage());
      assertNotNull(sQLTimeoutException1);
      
      try { 
        settableAnyProperty0._throwAsIOE(sQLTimeoutException1, (Object) null, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForTypeOverride((AnnotatedMember) null);
      assertFalse(propertyMetadata_MergeInfo0.fromDefaults);
      assertNotNull(propertyMetadata_MergeInfo0);
      
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      assertNull(annotatedMember0);
      
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertNotNull(arrayType0);
      
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      assertFalse(namedType0.hasName());
      assertNull(namedType0.getName());
      assertNotNull(namedType0);
      
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.useStaticType());
      assertNotNull(arrayType1);
      
      boolean boolean2 = arrayType0.isTypeOrSubTypeOf(class0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(arrayType0, arrayType1);
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(boolean2);
      
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.useStaticType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertNotNull(asWrapperTypeDeserializer0);
      
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.useStaticType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(typeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.useStaticType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNotNull(settableAnyProperty0);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertTrue(arrayType0.equals((Object)arrayType1));
      assertTrue(arrayType1.equals((Object)arrayType0));
      assertNotSame(arrayType0, arrayType1);
      assertNotSame(arrayType1, arrayType0);
      assertSame(asWrapperTypeDeserializer0, typeDeserializer0);
      assertSame(typeDeserializer0, asWrapperTypeDeserializer0);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(arrayType0.isInterface());
      assertTrue(arrayType0.hasContentType());
      assertFalse(arrayType0.isCollectionLikeType());
      assertFalse(arrayType0.isMapLikeType());
      assertFalse(arrayType0.hasValueHandler());
      assertFalse(arrayType0.isPrimitive());
      assertTrue(arrayType0.isArrayType());
      assertFalse(arrayType0.isEnumType());
      assertEquals(0, arrayType0.containedTypeCount());
      assertFalse(arrayType0.useStaticType());
      assertTrue(arrayType0.isContainerType());
      assertFalse(arrayType0.isAbstract());
      assertFalse(arrayType0.hasHandlers());
      assertTrue(arrayType0.isConcrete());
      assertFalse(arrayType0.isJavaLangObject());
      assertTrue(arrayType0.isFinal());
      assertFalse(arrayType1.isMapLikeType());
      assertFalse(arrayType1.isAbstract());
      assertFalse(arrayType1.isJavaLangObject());
      assertFalse(arrayType1.hasValueHandler());
      assertFalse(arrayType1.isPrimitive());
      assertTrue(arrayType1.isFinal());
      assertFalse(arrayType1.isInterface());
      assertFalse(arrayType1.isEnumType());
      assertFalse(arrayType1.hasHandlers());
      assertTrue(arrayType1.hasContentType());
      assertFalse(arrayType1.isCollectionLikeType());
      assertTrue(arrayType1.isContainerType());
      assertTrue(arrayType1.isArrayType());
      assertTrue(arrayType1.isConcrete());
      assertEquals(0, arrayType1.containedTypeCount());
      assertTrue(arrayType1.useStaticType());
      assertEquals("", asWrapperTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, asWrapperTypeDeserializer0.getTypeInclusion());
      assertEquals(JsonTypeInfo.As.WRAPPER_OBJECT, typeDeserializer0.getTypeInclusion());
      assertEquals("", typeDeserializer0.getPropertyName());
      assertNull(beanProperty0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set((Object) null, typeDeserializer0, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, asWrapperTypeDeserializer0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'l';
      charArray0[2] = ':';
      charArray0[3] = '`';
      charArray0[4] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 3, 1369, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(jsonParser0, deserializationContext0, asWrapperTypeDeserializer0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      arrayType0.findSuperType(class0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      settableAnyProperty0.getProperty();
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1412L);
      Random.setNextRandom(2305);
      System.setCurrentTimeMillis(2305);
      Random.setNextRandom(2305);
      PropertyMetadata.MergeInfo propertyMetadata_MergeInfo0 = PropertyMetadata.MergeInfo.createForPropertyOverride((AnnotatedMember) null);
      AnnotatedMember annotatedMember0 = propertyMetadata_MergeInfo0.getter;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<InputStream> class0 = InputStream.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      Class<String> class1 = String.class;
      NamedType namedType0 = new NamedType(class1, "");
      ArrayType arrayType1 = arrayType0.withContentValueHandler(namedType0);
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(arrayType1, (TypeIdResolver) null, "", false, arrayType1);
      TypeDeserializer typeDeserializer0 = asWrapperTypeDeserializer0.forProperty((BeanProperty) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, arrayType1, (JsonDeserializer<Object>) null, typeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }
}
