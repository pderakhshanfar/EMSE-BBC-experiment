/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 20:45:07 GMT 2021
 */

package com.fasterxml.jackson.databind.deser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerBase;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableAnyProperty;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference;
import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedField;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.PipedReader;
import java.lang.reflect.Field;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SettableAnyProperty_ESTest extends SettableAnyProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      Class<String> class0 = String.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1758);
      settableAnyProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer((JavaType) null, (TypeIdResolver) null, "JSON", true, (JavaType) null);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (KeyDeserializer) null, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      settableAnyProperty0.fixAccess(deserializationConfig0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      SQLException sQLException0 = new SQLException();
      try { 
        settableAnyProperty0._throwAsIOE(sQLException0, (Object) null, asPropertyTypeDeserializer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // N/A
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      settableAnyProperty0.withValueDeserializer((JsonDeserializer<Object>) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withStaticTyping();
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, mapType1, jsonTypeInfo_As0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, mapType1, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNotSame(mapType0, javaType0);
      assertNotSame(mapType0, mapType1);
      assertSame(mapType1, javaType0);
      assertNotSame(mapType1, mapType0);
      assertNotSame(javaType0, mapType0);
      assertSame(javaType0, mapType1);
      assertFalse(mapType0.isPrimitive());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isInterface());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.hasHandlers());
      assertTrue(mapType0.hasContentType());
      assertTrue(mapType0.isMapLikeType());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isAbstract());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.hasHandlers());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.useStaticType());
      assertFalse(mapType1.isInterface());
      assertFalse(mapType1.isPrimitive());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.isEnumType());
      assertFalse(mapType1.isJavaLangObject());
      assertTrue(mapType1.isConcrete());
      assertEquals(2, mapType1.containedTypeCount());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isInterface());
      assertFalse(javaType0.isArrayType());
      assertFalse(javaType0.isAbstract());
      assertEquals(2, javaType0.containedTypeCount());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.hasValueHandler());
      assertTrue(javaType0.useStaticType());
      assertFalse(javaType0.isPrimitive());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isEnumType());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isCollectionLikeType());
      assertTrue(javaType0.isMapLikeType());
      assertFalse(javaType0.hasHandlers());
      assertTrue(javaType0.hasContentType());
      assertNotNull(javaType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(javaType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      assertNotNull(typeFactory0);
      
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertNotNull(mapType0);
      
      MapType mapType1 = mapType0.withKeyTypeHandler("Unresolved forward reference but no identity info.");
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertNotNull(mapType1);
      assertTrue(mapType1.equals((Object)mapType0));
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, mapType1, jsonTypeInfo_As0);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, mapType1, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNotSame(mapType0, javaType0);
      assertNotSame(mapType0, mapType1);
      assertNotSame(mapType1, mapType0);
      assertSame(mapType1, javaType0);
      assertSame(javaType0, mapType1);
      assertNotSame(javaType0, mapType0);
      assertTrue(mapType0.isMapLikeType());
      assertFalse(mapType0.hasValueHandler());
      assertFalse(mapType0.isCollectionLikeType());
      assertFalse(mapType0.hasHandlers());
      assertFalse(mapType0.isPrimitive());
      assertTrue(mapType0.isContainerType());
      assertFalse(mapType0.isEnumType());
      assertFalse(mapType0.isInterface());
      assertTrue(mapType0.hasContentType());
      assertFalse(mapType0.isFinal());
      assertFalse(mapType0.isArrayType());
      assertFalse(mapType0.useStaticType());
      assertEquals(2, mapType0.containedTypeCount());
      assertFalse(mapType0.isJavaLangObject());
      assertTrue(mapType0.isConcrete());
      assertFalse(mapType0.isAbstract());
      assertTrue(mapType1.hasContentType());
      assertFalse(mapType1.isArrayType());
      assertFalse(mapType1.isFinal());
      assertFalse(mapType1.useStaticType());
      assertFalse(mapType1.isAbstract());
      assertTrue(mapType1.isConcrete());
      assertFalse(mapType1.isJavaLangObject());
      assertFalse(mapType1.isEnumType());
      assertTrue(mapType1.hasHandlers());
      assertEquals(2, mapType1.containedTypeCount());
      assertTrue(mapType1.isMapLikeType());
      assertFalse(mapType1.hasValueHandler());
      assertFalse(mapType1.isCollectionLikeType());
      assertTrue(mapType1.isContainerType());
      assertFalse(mapType1.isPrimitive());
      assertFalse(mapType1.isInterface());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertTrue(javaType0.isConcrete());
      assertFalse(javaType0.isFinal());
      assertFalse(javaType0.isEnumType());
      assertTrue(javaType0.hasContentType());
      assertTrue(javaType0.isMapLikeType());
      assertFalse(javaType0.isPrimitive());
      assertFalse(javaType0.isInterface());
      assertTrue(javaType0.isContainerType());
      assertFalse(javaType0.isCollectionLikeType());
      assertFalse(javaType0.isJavaLangObject());
      assertFalse(javaType0.useStaticType());
      assertTrue(javaType0.hasHandlers());
      assertFalse(javaType0.hasValueHandler());
      assertFalse(javaType0.isArrayType());
      assertEquals(2, javaType0.containedTypeCount());
      assertFalse(javaType0.isAbstract());
      assertNotNull(javaType0);
      assertTrue(mapType0.equals((Object)mapType1));
      assertTrue(mapType1.equals((Object)mapType0));
      assertTrue(javaType0.equals((Object)mapType0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "DW#", true, (JavaType) null);
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("DW#", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertNotNull(propertyMetadata0);
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertNotNull(beanProperty_Std0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("DW#", asPropertyTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertSame(beanProperty_Std0, beanProperty0);
      assertSame(beanProperty0, beanProperty_Std0);
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("DW#", asPropertyTypeDeserializer0.getPropertyName());
      assertNull(propertyMetadata0.getValueNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertFalse(propertyMetadata0.hasIndex());
      assertNull(propertyMetadata0.getIndex());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertFalse(beanProperty0.isVirtual());
      assertFalse(beanProperty0.isRequired());
      assertNotNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", true, (JavaType) null);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      JsonDeserializer<Object> jsonDeserializer0 = SettableBeanProperty.MISSING_VALUE_DESERIALIZER;
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertNotNull(jsonDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, jsonDeserializer0, asPropertyTypeDeserializer0);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNotNull(jsonFactory0);
      
      char[] charArray0 = new char[9];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Object object0 = settableAnyProperty0.deserialize(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals(AccessPattern.DYNAMIC, jsonDeserializer0.getEmptyAccessPattern());
      assertFalse(jsonDeserializer0.isCachable());
      assertEquals(AccessPattern.CONSTANT, jsonDeserializer0.getNullAccessPattern());
      assertTrue(settableAnyProperty0.hasValueDeserializer());
      assertEquals(0, objectMapper0.mixInCount());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXISTING_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXISTING_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<SerializationFeature> class0 = SerializationFeature.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertNotNull(virtualAnnotatedMember0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      PropertyName propertyName0 = BeanDeserializerBase.TEMP_PROPERTY_NAME;
      assertFalse(propertyName0.isEmpty());
      assertTrue(propertyName0.hasSimpleName());
      assertNull(propertyName0.getNamespace());
      assertEquals("#temporary-name", propertyName0.getSimpleName());
      assertFalse(propertyName0.hasNamespace());
      assertNotNull(propertyName0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set("", propertyName0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember cannot be cast to com.fasterxml.jackson.databind.introspect.AnnotatedMethod
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2E6Oo.G");
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("2E6Oo.G", sQLTimeoutException0.getMessage());
      assertNotNull(sQLTimeoutException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("2E6Oo.G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTimeoutException: 2E6Oo.G", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      SQLTimeoutException sQLTimeoutException1 = (SQLTimeoutException)sQLTimeoutException0.initCause(sQLSyntaxErrorException0);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("2E6Oo.G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLTimeoutException: 2E6Oo.G", sQLSyntaxErrorException0.toString());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals("2E6Oo.G", sQLTimeoutException1.getMessage());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNotNull(sQLTimeoutException1);
      
      SQLDataException sQLDataException0 = new SQLDataException("Fjz", "Invalid type definition for type %s: %s", 67, sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: 2E6Oo.G", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("2E6Oo.G", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLDataException: Fjz", sQLDataException0.toString());
      assertEquals("Fjz", sQLDataException0.getMessage());
      assertEquals("Invalid type definition for type %s: %s", sQLDataException0.getSQLState());
      assertEquals(67, sQLDataException0.getErrorCode());
      assertNotNull(sQLDataException0);
      
      // Undeclared exception!
      settableAnyProperty0._throwAsIOE(sQLDataException0, "Fjz", "2E6Oo.G");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      MockIOException mockIOException0 = new MockIOException("");
      assertNotNull(mockIOException0);
      
      Integer integer0 = new Integer(1606);
      assertEquals(1606, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        settableAnyProperty0._throwAsIOE(mockIOException0, (Object) null, integer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forwr referece but no identity info.", true, (JavaType) null);
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forwr referece but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forwr referece but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "Unresolved forwr referece but no identity info.");
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNull(invalidTypeIdException0.getTypeId());
      assertNotNull(invalidTypeIdException0);
      
      try { 
        settableAnyProperty0._throwAsIOE(invalidTypeIdException0, defaultDeserializationContext_Impl0, (Object) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Missing type id when trying to resolve subtype of null: Unresolved forwr referece but no identity info.
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[4];
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonFactory0.createParser(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
      assertNull(readerBasedJsonParser0.currentToken());
      assertFalse(readerBasedJsonParser0.hasCurrentToken());
      assertFalse(readerBasedJsonParser0.hasTextCharacters());
      assertFalse(readerBasedJsonParser0.canParseAsync());
      assertFalse(readerBasedJsonParser0.isNaN());
      assertFalse(readerBasedJsonParser0.canReadTypeId());
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
      assertFalse(readerBasedJsonParser0.requiresCustomCodec());
      assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
      assertEquals(8193, readerBasedJsonParser0.getFeatureMask());
      assertNull(readerBasedJsonParser0.getLastClearedToken());
      assertNull(readerBasedJsonParser0.getCurrentToken());
      assertNull(readerBasedJsonParser0.getCurrentName());
      assertFalse(readerBasedJsonParser0.isClosed());
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
      assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
      assertFalse(readerBasedJsonParser0.canReadObjectId());
      assertEquals(0, readerBasedJsonParser0.currentTokenId());
      assertNotNull(readerBasedJsonParser0);
      
      JsonLocation jsonLocation0 = JsonLocation.NA;
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1), jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1), jsonLocation0.getLineNr());
      assertNotNull(jsonLocation0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
      Class<SimpleModule> class1 = SimpleModule.class;
      NamedType namedType0 = new NamedType(class1, "JSON");
      assertEquals("JSON", namedType0.getName());
      assertTrue(namedType0.hasName());
      assertNotNull(namedType0);
      
      ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, namedType0);
      assertEquals("JSON", namedType0.getName());
      assertTrue(namedType0.hasName());
      assertNotNull(objectIdGenerator_IdKey0);
      
      ReadableObjectId readableObjectId0 = defaultDeserializationContext_Impl0.createReadableObjectId(objectIdGenerator_IdKey0);
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertEquals("JSON", namedType0.getName());
      assertTrue(namedType0.hasName());
      assertNotNull(readableObjectId0);
      
      UnresolvedForwardReference unresolvedForwardReference0 = new UnresolvedForwardReference(readerBasedJsonParser0, ";+= R", jsonLocation0, readableObjectId0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(unresolvedForwardReference0);
      assertEquals(500, JsonLocation.MAX_CONTENT_SNIPPET);
      
      try { 
        settableAnyProperty0._throwAsIOE(unresolvedForwardReference0, beanDeserializerFactory0, readerBasedJsonParser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = (UTF8StreamJsonParser)jsonFactory0.createParser(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, uTF8StreamJsonParser0.currentTokenId());
      assertFalse(uTF8StreamJsonParser0.isNaN());
      assertNull(uTF8StreamJsonParser0.currentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canParseAsync());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(8193, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.fixAccess((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "t{r}~J_15Q", (JavaType) null);
      assertEquals("t{r}~J_15Q", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertNotNull(virtualAnnotatedMember0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertEquals("t{r}~J_15Q", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      String string0 = settableAnyProperty0.toString();
      assertEquals("[any property on class com.fasterxml.jackson.databind.JavaType]", string0);
      assertEquals("t{r}~J_15Q", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<AnnotatedField> class0 = AnnotatedField.class;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      doReturn((AnnotatedClass) null).when(pOJOPropertiesCollector0).getClassDef();
      doReturn((MapperConfig) null).when(pOJOPropertiesCollector0).getConfig();
      doReturn((ObjectIdInfo) null).when(pOJOPropertiesCollector0).getObjectIdInfo();
      doReturn((JavaType) null).when(pOJOPropertiesCollector0).getType();
      BasicBeanDescription basicBeanDescription0 = BasicBeanDescription.forDeserialization(pOJOPropertiesCollector0);
      assertNull(basicBeanDescription0.findClassDescription());
      assertNotNull(basicBeanDescription0);
      
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "EJ`3'Dn2 5Df9h,-(", (JavaType) null);
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("EJ`3'Dn2 5Df9h,-(", virtualAnnotatedMember0.getName());
      assertNotNull(virtualAnnotatedMember0);
      
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "", false, (JavaType) null);
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals("EJ`3'Dn2 5Df9h,-(", virtualAnnotatedMember0.getName());
      assertEquals("", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("");
      assertNotNull(mockIllegalArgumentException0);
      
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, virtualAnnotatedMember0, basicBeanDescription0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property '[virtual com.fasterxml.jackson.databind.introspect.AnnotatedField#EJ`3'Dn2 5Df9h,-(]' of class com.fasterxml.jackson.databind.introspect.AnnotatedField (expected type: null; actual type: `com.fasterxml.jackson.databind.introspect.BasicBeanDescription`), problem: 
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException();
      assertNotNull(mockIllegalArgumentException0);
      
      Class<AnnotatedField> class0 = AnnotatedField.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "Generatr of type ", (JavaType) null);
      assertEquals("Generatr of type ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertNotNull(virtualAnnotatedMember0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, virtualAnnotatedMember0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertEquals("Generatr of type ", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, (Object) null, virtualAnnotatedMember0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Problem deserializing \"any\" property 'null' of class com.fasterxml.jackson.databind.introspect.AnnotatedField (expected type: null; actual type: `com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember`) (no error message provided)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "DW#", true, (JavaType) null);
      assertEquals("DW#", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertNotNull(propertyMetadata0);
      
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, (JavaType) null, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertNotNull(beanProperty_Std0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty(beanProperty_Std0, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals("DW#", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNull(propertyMetadata0.getIndex());
      assertFalse(propertyMetadata0.hasDefaultValue());
      assertNull(propertyMetadata0.getRequired());
      assertNull(propertyMetadata0.getDescription());
      assertNull(propertyMetadata0.getContentNulls());
      assertNull(propertyMetadata0.getDefaultValue());
      assertFalse(propertyMetadata0.isRequired());
      assertNull(propertyMetadata0.getValueNulls());
      assertFalse(propertyMetadata0.hasIndex());
      assertFalse(beanProperty_Std0.isRequired());
      assertFalse(beanProperty_Std0.isVirtual());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException("0.}sqqz4^;4,?Bf}");
      assertNotNull(mockIllegalArgumentException0);
      
      JsonSerializer<Object> jsonSerializer0 = SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER;
      assertFalse(jsonSerializer0.isUnwrappingSerializer());
      assertFalse(jsonSerializer0.usesObjectId());
      assertNotNull(jsonSerializer0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0._throwAsIOE(mockIllegalArgumentException0, "DW#", jsonSerializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<SerializationFeature> class0 = SerializationFeature.class;
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, "", (JavaType) null);
      assertEquals(0, virtualAnnotatedMember0.getAnnotationCount());
      assertEquals("", virtualAnnotatedMember0.getName());
      assertEquals(0, virtualAnnotatedMember0.getModifiers());
      assertNotNull(virtualAnnotatedMember0);
      
      AnnotationMap annotationMap0 = new AnnotationMap();
      assertEquals(0, annotationMap0.size());
      assertNotNull(annotationMap0);
      
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertNotNull(annotatedField0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertEquals(0, annotationMap0.size());
      assertEquals(0, annotatedField0.getAnnotationCount());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      POJONode pOJONode0 = new POJONode((Object) null);
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isLong());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isBigInteger());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isShort());
      assertFalse(pOJONode0.isInt());
      assertEquals("null", pOJONode0.asText());
      assertNotNull(pOJONode0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(virtualAnnotatedMember0, annotationMap0, pOJONode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertNotNull(asPropertyTypeDeserializer0);
      
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      assertEquals("Unresolved forward reference but no identity info.", asPropertyTypeDeserializer0.getPropertyName());
      assertEquals(JsonTypeInfo.As.EXTERNAL_PROPERTY, asPropertyTypeDeserializer0.getTypeInclusion());
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertNotNull(bufferRecycler0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.set(pipedReader0, (Object) null, bufferRecycler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      assertFalse(settableAnyProperty0.hasValueDeserializer());
      assertNotNull(settableAnyProperty0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertNotNull(objectMapper0);
      
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonFactory0.createNonBlockingByteArrayParser();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, nonBlockingJsonParser0.getTokenLineNr());
      assertFalse(nonBlockingJsonParser0.isExpectedStartArrayToken());
      assertFalse(nonBlockingJsonParser0.isClosed());
      assertNull(nonBlockingJsonParser0.getCurrentName());
      assertTrue(nonBlockingJsonParser0.needMoreInput());
      assertEquals(0L, nonBlockingJsonParser0.getTokenCharacterOffset());
      assertEquals(0, nonBlockingJsonParser0.getTextOffset());
      assertFalse(nonBlockingJsonParser0.isNaN());
      assertFalse(nonBlockingJsonParser0.canReadObjectId());
      assertFalse(nonBlockingJsonParser0.hasTextCharacters());
      assertFalse(nonBlockingJsonParser0.hasCurrentToken());
      assertNull(nonBlockingJsonParser0.currentToken());
      assertEquals(0, nonBlockingJsonParser0.getTextLength());
      assertEquals(0, nonBlockingJsonParser0.currentTokenId());
      assertEquals(1, nonBlockingJsonParser0.getTokenColumnNr());
      assertFalse(nonBlockingJsonParser0.canReadTypeId());
      assertEquals(8193, nonBlockingJsonParser0.getFeatureMask());
      assertTrue(nonBlockingJsonParser0.canParseAsync());
      assertEquals(0, nonBlockingJsonParser0.getCurrentTokenId());
      assertEquals(0, nonBlockingJsonParser0.getFormatFeatures());
      assertFalse(nonBlockingJsonParser0.requiresCustomCodec());
      assertNull(nonBlockingJsonParser0.getLastClearedToken());
      assertNull(nonBlockingJsonParser0.getCurrentToken());
      assertNotNull(nonBlockingJsonParser0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl)objectMapper0.getDeserializationContext();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, objectMapper0.mixInCount());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserialize(nonBlockingJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedReader pipedReader0 = new PipedReader();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
      // Undeclared exception!
      try { 
        settableAnyProperty0.deserializeAndSet(readerBasedJsonParser0, defaultDeserializationContext_Impl0, jsonTypeInfo_Id0, "GB+NyhKkYWgKmFU6cQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      Class<CreatorProperty> class0 = CreatorProperty.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 1);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, coreXMLDeserializers_Std0, asPropertyTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      boolean boolean0 = settableAnyProperty0.hasValueDeserializer();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AnnotationMap annotationMap0 = new AnnotationMap();
      AnnotatedField annotatedField0 = new AnnotatedField((TypeResolutionContext) null, (Field) null, annotationMap0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, annotatedField0, (JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      // Undeclared exception!
      try { 
        settableAnyProperty0.readResolve();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing method (broken JDK (de)serialization?)
         //
         verifyException("com.fasterxml.jackson.databind.deser.SettableAnyProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      BeanProperty beanProperty0 = settableAnyProperty0.getProperty();
      assertNull(beanProperty0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, "Unresolved forward reference but no identity info.", true, (JavaType) null, jsonTypeInfo_As0);
      SettableAnyProperty settableAnyProperty0 = new SettableAnyProperty((BeanProperty) null, (AnnotatedMember) null, (JavaType) null, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0);
      JavaType javaType0 = settableAnyProperty0.getType();
      assertNull(javaType0);
  }
}
