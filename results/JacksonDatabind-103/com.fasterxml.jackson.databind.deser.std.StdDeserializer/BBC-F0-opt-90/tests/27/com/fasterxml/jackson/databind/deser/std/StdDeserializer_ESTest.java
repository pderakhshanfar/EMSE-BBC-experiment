/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:14:31 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.time.temporal.ChronoField;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_BooleanDeserializer0._intOverflow((-2147483648L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<Object, String>) null, (JavaType) null, dateDeserializers_CalendarDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(32767);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1452));
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>((Converter<Object, ObjectIdResolver>) null, placeholderForType0, (JsonDeserializer<?>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-32768));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Short short0 = new Short((short) (-128));
      Class<Short> class0 = Short.class;
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      boolean boolean0 = numberDeserializers_ShortDeserializer0._byteOverflow((short) (-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("9^/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Converter<Object, Long> converter0 = (Converter<Object, Long>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Integer, BuilderBasedDeserializer> converter1 = (Converter<Integer, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter1);
      Converter<Object, BuilderBasedDeserializer> converter2 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<JavaType> class0 = JavaType.class;
      JsonDeserializer<Module> jsonDeserializer0 = (JsonDeserializer<Module>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
      doReturn(class0, (Class) null).when(jsonDeserializer0).handledType();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter2, javaType0, jsonDeserializer0);
      StdDelegatingDeserializer<Long> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Long>(converter0, javaType0, stdDelegatingDeserializer1);
      try { 
        stdDelegatingDeserializer2._reportFailedNullCoerce(deserializationContext0, true, jsonGenerator_Feature0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce JSON to Null value for type `com.fasterxml.jackson.databind.JavaType` (enable `Feature.QUOTE_FIELD_NAMES` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, ObjectReader> converter0 = (Converter<String, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, ", copied ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Converter<Integer, HashMap<Object, Object>> converter0 = (Converter<Integer, HashMap<Object, Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Object, Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Object, Object>>(converter0);
      Class<Integer> class0 = Integer.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Converter<Short, Date> converter0 = (Converter<Short, Date>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>(converter0);
      Converter<Object, SimpleModule> converter1 = (Converter<Object, SimpleModule>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SimpleModule>(converter1, referenceType0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1.isDefaultDeserializer(numberDeserializers_IntegerDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Calendar> class0 = Calendar.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, simpleType0);
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, mapLikeType0, numberDeserializers_IntegerDeserializer0);
      Class<?> class1 = stdDelegatingDeserializer0.handledType();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      Class<?> class0 = numberDeserializers_ByteDeserializer0.handledType();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Class<?> class0 = dateDeserializers_CalendarDeserializer0.getValueClass();
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<CreatorProperty> class0 = CreatorProperty.class;
      JsonFormat.Value jsonFormat_Value0 = numberDeserializers_BooleanDeserializer0.findFormatOverrides(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0);
      assertFalse(jsonFormat_Value0.hasLenient());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class0 = Float.class;
      Float float0 = new Float(1.0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      Boolean boolean0 = numberDeserializers_FloatDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class1, jsonFormat_Feature0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Converter<Object, HashMap<BeanDeserializer, SimpleObjectIdResolver>> converter0 = (Converter<Object, HashMap<BeanDeserializer, SimpleObjectIdResolver>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<String> class0 = String.class;
      Class<BasicBeanDescription> class1 = BasicBeanDescription.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, (JavaType[]) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdDelegatingDeserializer<HashMap<BeanDeserializer, SimpleObjectIdResolver>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<BeanDeserializer, SimpleObjectIdResolver>>(converter0, resolvedRecursiveType0, dateDeserializers_CalendarDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      stdDelegatingDeserializer0.findContentNullStyle((DeserializationContext) null, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      NullValueProvider nullValueProvider0 = numberDeserializers_BooleanDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, atomicBooleanDeserializer0);
      assertSame(nullValueProvider0, atomicBooleanDeserializer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, Short> converter0 = (Converter<String, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>(converter0);
      long long0 = stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      long long0 = dateDeserializers_CalendarDeserializer0._parseLongPrimitive((DeserializationContext) null, "3");
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<ChronoField, ObjectReader> converter0 = (Converter<ChronoField, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      int int0 = stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, HashMap<NullNode, Calendar>> converter0 = (Converter<String, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      float float0 = stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Converter<Byte, ObjectIdResolver> converter0 = (Converter<Byte, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Converter<Object, CreatorProperty> converter0 = (Converter<Object, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CreatorProperty>(converter0, javaType0, dateDeserializers_DateDeserializer0);
      BigDecimal bigDecimal0 = new BigDecimal((-2013L));
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StdDelegatingDeserializer<Class<SettableBeanProperty>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<SettableBeanProperty>>((Converter<?, Class<SettableBeanProperty>>) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertSame(bigInteger0, number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Converter<NullNode, Class<SettableBeanProperty>> converter0 = (Converter<NullNode, Class<SettableBeanProperty>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Class<SettableBeanProperty>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<SettableBeanProperty>>(converter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertEquals((byte)10, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short short0 = new Short((short)1949);
      Class<Short> class0 = Short.TYPE;
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      Byte byte0 = new Byte((byte)111);
      boolean boolean0 = StdDeserializer._neitherNull(numberDeserializers_ShortDeserializer0, byte0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = StdDeserializer._neitherNull((Object) null, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Converter<Date, ObjectReader> converter0 = (Converter<Date, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("INF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_ShortDeserializer0._isPosInf("wI%A/{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("host-name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_ShortDeserializer0._isNaN("7;ju9-4,}(38Fm$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_FloatDeserializer0._isEmptyOrTextualNull("AnnotationIntrospector returned key deserializer definition of type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      String string0 = stringDeserializer0._coercedTypeDesc();
      assertEquals("for type `java.lang.String`", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Object object0 = numberDeserializers_IntegerDeserializer0._coerceTextualNull(defaultDeserializationContext0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        StdDeserializer.parseDouble("' (code ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDeserializer.parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StdDelegatingDeserializer<SimpleObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleObjectIdResolver>((Converter<?, SimpleObjectIdResolver>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792345));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      StdDelegatingDeserializer<Class<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<BuilderBasedDeserializer>>((Converter<?, Class<BuilderBasedDeserializer>>) null);
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty(jsonParser0, defaultDeserializationContext0, defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"JSON\" (class com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl), not marked as ignorable
         //  at [Source: UNKNOWN; line: 1, column: 1] (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      try { 
        dateDeserializers_DateDeserializer0.handleMissingEndArrayForSingle(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: Attempted to unwrap 'java.util.Date' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Converter<BuilderBasedDeserializer, ObjectIdResolver> converter0 = (Converter<BuilderBasedDeserializer, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatFeature((DeserializationContext) null, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>((Converter<Object, HashMap<NullNode, Calendar>>) null, mapType0, numberDeserializers_IntegerDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, mapType0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, (JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Object, SimpleObjectIdResolver> converter0 = (Converter<Object, SimpleObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SimpleObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleObjectIdResolver>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findConvertingContentDeserializer(defaultDeserializationContext_Impl0, beanProperty_Bogus0, numberDeserializers_BooleanDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Converter<ChronoField, HashMap<NullNode, Calendar>> converter0 = (Converter<ChronoField, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Converter<ChronoLocalDate, ObjectReader> converter0 = (Converter<ChronoLocalDate, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNumberForScalarCoercion((DeserializationContext) null, jsonParserDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNullForScalarCoercion(defaultDeserializationContext_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyNullForPrimitiveCoercion(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl0, true);
      StringReader stringReader0 = new StringReader("true");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-582), 940, true);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -582
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 1994, dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, 78);
      try { 
        dateDeserializers_CalendarDeserializer0._verifyEndArrayForSingle(uTF8DataInputJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.node.ValueNode");
      try { 
        dateDeserializers_CalendarDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"com.fasterxml.jackson.databind.node.ValueNode\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StdDelegatingDeserializer<Long> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Long>((Converter<?, Long>) null);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce(deserializationContext0, true, deserializationFeature0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792345));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      try { 
        dateDeserializers_CalendarDeserializer0._parseString(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.String`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      try { 
        numberDeserializers_ShortDeserializer0._parseShortPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `short`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Byte, List<BuilderBasedDeserializer>> converter0 = (Converter<Byte, List<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<BuilderBasedDeserializer>>(converter0);
      Converter<Object, ObjectIdResolver> converter1 = (Converter<Object, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ObjectIdResolver>(converter1, javaType0, stdDelegatingDeserializer0);
      try { 
        stdDelegatingDeserializer1._parseLongPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"JSON\": not a valid long value
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Class<Long> class0 = Long.class;
      Long long0 = new Long((-128L));
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      try { 
        numberDeserializers_LongDeserializer0._parseLongPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Long`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Module, ObjectReader> converter0 = (Converter<Module, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"JSON\": not a valid int value
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser(" ~2_F;*5*un7]rYS");
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._parseIntPrimitive(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser1._parseFloatPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      try { 
        dateDeserializers_CalendarDeserializer0._parseFloatPrimitive(defaultDeserializationContext0, "q2lni_f_RZ^^~LEt{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.Calendar` from String \"q2lni_f_RZ^^~LEt{\": not a valid float value
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._parseFloatPrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Byte, ObjectIdResolver> converter0 = (Converter<Byte, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0);
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext0, "9jF@\"[^ ,");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.lang.Object` from String \"9jF@\"[^ ,\": not a valid double value (as String to convert)
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      try { 
        numberDeserializers_IntegerDeserializer0._parseDateFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `int`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDate("null", defaultDeserializationContext_Impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Converter<ObjectReader, ObjectReader> converter0 = (Converter<ObjectReader, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stdDelegatingDeserializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 67, (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, 3);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8DataInputJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, filteringParserDelegate0, injectableValues_Std0);
      try { 
        stdDelegatingDeserializer0._parseDate(filteringParserDelegate0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 3286, 3286);
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0._parseBytePrimitive(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      Converter<String, List<BuilderBasedDeserializer>> converter0 = (Converter<String, List<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<BuilderBasedDeserializer>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanFromInt(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Converter<Float, Integer> converter0 = (Converter<Float, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      MockFile mockFile0 = new MockFile("JSON", "");
      File file0 = MockFile.createTempFile("/?~T@]spH?", "", (File) mockFile0);
      JsonParser jsonParser0 = jsonFactory0.createParser(file0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        numberDeserializers_BooleanDeserializer0._failDoubleToIntCoercion(jsonParser0, defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into JSON (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, (InjectableValues) null);
      try { 
        numberDeserializers_BooleanDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `boolean`
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Double, HashMap<NullNode, Calendar>> converter0 = (Converter<Double, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      try { 
        stdDelegatingDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: UNKNOWN; line: -1, column: -1]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._coerceTextualNull(defaultDeserializationContext_Impl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl0, false);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 1, (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, 0);
      try { 
        numberDeserializers_IntegerDeserializer0._coerceIntegral(uTF8DataInputJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Integer, HashMap<Object, Object>> converter0 = (Converter<Integer, HashMap<Object, Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Object, Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Object, Object>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceEmptyString(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_BooleanDeserializer0._intOverflow(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = dateDeserializers_CalendarDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, numberDeserializers_IntegerDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
      assertNotNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Nulls nulls0 = Nulls.FAIL;
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, numberDeserializers_IntegerDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("&ZG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Converter<ChronoField, HashMap<Object, Object>> converter0 = (Converter<ChronoField, HashMap<Object, Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Object, Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Object, Object>>(converter0);
      JavaType javaType0 = stdDelegatingDeserializer0.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StdDelegatingDeserializer<Class<SettableBeanProperty>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<SettableBeanProperty>>((Converter<?, Class<SettableBeanProperty>>) null);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber((Number) null);
      assertNotNull(number0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      BigDecimal bigDecimal0 = new BigDecimal(4774L);
      Number number0 = dateDeserializers_CalendarDeserializer0._nonNullNumber(bigDecimal0);
      assertEquals((byte) (-90), number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_BooleanDeserializer0._intOverflow(2147483662L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_BooleanDeserializer0._intOverflow((-2147483658L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<Object, String>) null, (JavaType) null, dateDeserializers_CalendarDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(32778);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Converter<BuilderBasedDeserializer, Boolean> converter0 = (Converter<BuilderBasedDeserializer, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      JavaType javaType0 = TypeFactory.unknownType();
      Converter<Object, ObjectIdResolver> converter1 = (Converter<Object, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ObjectIdResolver>(converter1, javaType0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._shortOverflow((-1889171186));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)2047);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      boolean boolean0 = numberDeserializers_ShortDeserializer0._byteOverflow(575);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_ShortDeserializer0._byteOverflow(255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short) (-128));
      Class<Short> class0 = Short.class;
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      boolean boolean0 = numberDeserializers_ShortDeserializer0._byteOverflow((-904));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 244, (-1796792402));
      StdDelegatingDeserializer<HashMap<Double, InputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Double, InputStream>>((Converter<?, HashMap<Double, InputStream>>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, Short> converter0 = (Converter<String, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null, "`c!m;lu&E7U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Nulls nulls0 = Nulls.SKIP;
      NullValueProvider nullValueProvider0 = dateDeserializers_CalendarDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, numberDeserializers_IntegerDeserializer0);
      assertNotNull(nullValueProvider0);
      assertEquals(AccessPattern.ALWAYS_NULL, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Nulls nulls0 = Nulls.AS_EMPTY;
      Class<InputStream> class0 = InputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdDelegatingDeserializer<PropertyName> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<PropertyName>((Converter<Object, PropertyName>) null, simpleType0, dateDeserializers_CalendarDeserializer0);
      NullValueProvider nullValueProvider0 = dateDeserializers_CalendarDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = dateDeserializers_CalendarDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      JsonSetter.Value jsonSetter_Value0 = JsonSetter.Value.construct(nulls0, nulls1);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultSetterInfo(jsonSetter_Value0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader0 = objectMapper1.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>((Converter<?, ObjectReader>) null);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, propertyMetadata0);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      JavaType javaType0 = TypeFactory.unknownType();
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, javaType0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) collectionType0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("+]L0']tL{,~%q@7,4_F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("-INF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Nulls nulls0 = Nulls.FAIL;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Converter<Object, Long> converter0 = (Converter<Object, Long>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(110);
      StdDelegatingDeserializer<Long> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Long>(converter0, placeholderForType0, primitiveArrayDeserializers_LongDeser0);
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce(deserializationContext0, false, nulls0, "wku6!_g?=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce wku6!_g?= to Null value as content of type `long[]` (disable `Nulls.FAIL` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<SettableBeanProperty, ObjectReader> converter0 = (Converter<SettableBeanProperty, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      stdDelegatingDeserializer0._verifyStringForScalarCoercion(defaultDeserializationContext0, "JSON");
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Object, BuilderBasedDeserializer> converter0 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(3061);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0, placeholderForType0, numberDeserializers_IntegerDeserializer0);
      stdDelegatingDeserializer0._verifyNullForScalarCoercion(defaultDeserializationContext0, "String \"null\"");
      assertEquals(237020304, defaultDeserializationContext0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      numberDeserializers_IntegerDeserializer0._verifyNullForPrimitiveCoercion(defaultDeserializationContext0, "z9");
      assertTrue(numberDeserializers_IntegerDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      numberDeserializers_IntegerDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Object object0 = numberDeserializers_IntegerDeserializer0._coerceTextualNull(defaultDeserializationContext0, false);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._coerceNullToken((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Object object0 = dateDeserializers_CalendarDeserializer0._coerceNullToken((DeserializationContext) null, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      LongNode longNode0 = LongNode.valueOf((-1956L));
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(longNode0);
      BigInteger bigInteger0 = (BigInteger)numberDeserializers_IntegerDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((byte)92, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<NullNode, Short> converter0 = (Converter<NullNode, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>(converter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, false);
      StringReader stringReader0 = new StringReader(",A*T.8FY}:Lgp\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeWrappedValue(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      Converter<Double, HashMap<NullNode, Calendar>> converter0 = (Converter<Double, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Converter<Object, ObjectIdResolver> converter0 = (Converter<Object, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<CollectionType> class0 = CollectionType.class;
      MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0, mapLikeType0, dateDeserializers_CalendarDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(deserializationContext0, "INF");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      double double0 = dateDeserializers_CalendarDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      Converter<Object, ClassNameIdResolver> converter0 = (Converter<Object, ClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ClassNameIdResolver>(converter0, (JavaType) null, untypedObjectDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._isEmptyOrTextualNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792345));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._parseString(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = untypedObjectDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      Date date0 = numberDeserializers_BooleanDeserializer0._parseDate("null", defaultDeserializationContext_Impl0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>((Converter<?, HashMap<NullNode, Calendar>>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDate("z", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, 2, (-1796792402));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseDateFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Converter<ObjectReader, ObjectReader> converter0 = (Converter<ObjectReader, ObjectReader>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>(converter0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stdDelegatingDeserializer0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 67, (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, 3);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(uTF8DataInputJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserDelegate0, tokenFilter0, false, false);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDate(filteringParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Converter<Boolean, SimpleModule> converter0 = (Converter<Boolean, SimpleModule>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>(converter0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-rHM-@t}FK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>((Converter<?, ObjectIdResolver>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "Non-blocking source not (yet?) support for this format (%s)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>((Converter<?, ObjectIdResolver>) null);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>((Converter<?, ObjectIdResolver>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "Invalid 'any-getter' annotation on method ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Converter<Date, ObjectIdResolver> converter0 = (Converter<Date, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-INF");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Date, SimpleModule> converter0 = (Converter<Date, SimpleModule>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>(converter0);
      Converter<Object, Float> converter1 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Float>(converter1, (JavaType) null, stdDelegatingDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseDoublePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Converter<Integer, HashMap<NullNode, Calendar>> converter0 = (Converter<Integer, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-uF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, HashMap<NullNode, Calendar>> converter0 = (Converter<String, HashMap<NullNode, Calendar>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>(converter0);
      float float0 = stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "NaN");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>((Converter<?, HashMap<NullNode, Calendar>>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive((DeserializationContext) null, "Illegal unquoted character (");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>((Converter<?, HashMap<NullNode, Calendar>>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "N6c>iTkJ:q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      float float0 = dateDeserializers_CalendarDeserializer0._parseFloatPrimitive((DeserializationContext) null, "Infinity");
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Converter<Date, ChronoField> converter0 = (Converter<Date, ChronoField>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoField> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoField>(converter0);
      StdDelegatingDeserializer<HashMap<NullNode, Calendar>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<HashMap<NullNode, Calendar>>((Converter<Object, HashMap<NullNode, Calendar>>) null, javaType0, stdDelegatingDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      float float0 = stdDelegatingDeserializer1._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-INF");
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, beanDeserializerFactory0, true);
      StringReader stringReader0 = new StringReader(":@@M");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0.handleSingleElementUnwrapped(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Long> class0 = Long.class;
      Long long0 = new Long((-128L));
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLongPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StdDelegatingDeserializer<ObjectReader> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectReader>((Converter<?, ObjectReader>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive((DeserializationContext) null, "com.fasterxml.jackson.databind.module.SimpleValueInstantiators");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int int0 = dateDeserializers_CalendarDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "72");
      assertEquals(72, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._parseShortPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Integer, List<BuilderBasedDeserializer>> converter0 = (Converter<Integer, List<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<BuilderBasedDeserializer>>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._parseBooleanFromInt(jsonParser0, defaultDeserializationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, javaType0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 32767, false);
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseBooleanPrimitive(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultDeserializer(stdDelegatingDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0.isDefaultKeyDeserializer((KeyDeserializer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      Class<?> class0 = numberDeserializers_LongDeserializer0.getValueClass();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StdDelegatingDeserializer<SimpleModule> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleModule>((Converter<?, SimpleModule>) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1149072958));
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer((DeserializationContext) null, placeholderForType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._failDoubleToIntCoercion((JsonParser) null, defaultDeserializationContext_Impl0, "}(Cw!^Vf%{h8Cc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(booleanNode0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.handleMissingEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<CreatorProperty, ObjectIdResolver> converter0 = (Converter<CreatorProperty, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "NaN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Converter<BeanDeserializer, DataInputStream> converter0 = (Converter<BeanDeserializer, DataInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<DataInputStream>(converter0);
      StdDelegatingDeserializer<DataInputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<DataInputStream>(stdDelegatingDeserializer0);
      assertFalse(stdDelegatingDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_FloatDeserializer0._hasTextualNull("host-name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Byte, List<BuilderBasedDeserializer>> converter0 = (Converter<Byte, List<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<List<BuilderBasedDeserializer>>(converter0);
      Converter<Object, ObjectIdResolver> converter1 = (Converter<Object, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ObjectIdResolver>(converter1, javaType0, stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseLongPrimitive(defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, ObjectIdResolver> converter0 = (Converter<Object, ObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectIdResolver>(converter0, (JavaType) null, primitiveArrayDeserializers_BooleanDeser0);
      Class<?> class0 = stdDelegatingDeserializer0.handledType();
      assertFalse(class0.isEnum());
  }
}
