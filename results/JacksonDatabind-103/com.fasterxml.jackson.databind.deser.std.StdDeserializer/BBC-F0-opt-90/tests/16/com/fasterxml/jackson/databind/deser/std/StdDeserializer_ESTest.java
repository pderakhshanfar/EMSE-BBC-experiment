/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 21:46:13 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.format.TextStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      boolean boolean0 = stringDeserializer0._intOverflow(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-32768));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Converter<Boolean, String> converter0 = (Converter<Boolean, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Converter<Boolean, Float> converter0 = (Converter<Boolean, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("9[(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("%d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Converter<Calendar, TextStyle> converter0 = (Converter<Calendar, TextStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive((DeserializationContext) null, "className");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>((Converter<?, TextStyle>) null);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((double) 3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, false);
      PipedReader pipedReader0 = new PipedReader(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDateFromArray(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Converter<ByteArrayInputStream, Float> converter0 = (Converter<ByteArrayInputStream, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      Converter<Short, Short> converter1 = (Converter<Short, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Short>(converter1);
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Converter<String, String> converter0 = (Converter<String, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      Converter<Double, ByteArrayInputStream> converter1 = (Converter<Double, ByteArrayInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ByteArrayInputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ByteArrayInputStream>(converter1);
      boolean boolean0 = stdDelegatingDeserializer1.isDefaultDeserializer(stdDelegatingDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Character character0 = Character.valueOf('a');
      NumberDeserializers.CharacterDeserializer numberDeserializers_CharacterDeserializer0 = new NumberDeserializers.CharacterDeserializer(class0, character0);
      Converter<Object, Module> converter0 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Integer> class1 = Integer.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      JavaType[] javaTypeArray0 = new JavaType[1];
      CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaType0, javaTypeArray0, javaType0);
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0, collectionType0, numberDeserializers_CharacterDeserializer0);
      Class<?> class2 = stdDelegatingDeserializer0.handledType();
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      Class<?> class0 = stdDelegatingDeserializer0.getValueClass();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Object, TypeIdResolver> converter0 = (Converter<Object, TypeIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<TypeIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TypeIdResolver>(converter0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Byte> class0 = Byte.class;
      JsonFormat.Value jsonFormat_Value0 = stdDelegatingDeserializer0.findFormatOverrides(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0);
      assertNull(jsonFormat_Value0.timeZoneAsString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Converter<JavaType, MinimalClassNameIdResolver> converter0 = (Converter<JavaType, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<SimpleModule> class0 = SimpleModule.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      Boolean boolean0 = stdDelegatingDeserializer0.findFormatFeature(deserializationContext0, beanProperty_Bogus0, class0, jsonFormat_Feature0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      dateDeserializers_DateDeserializer0.findContentNullStyle(deserializationContext0, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Converter<Module, Float> converter0 = (Converter<Module, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Converter<Boolean, Float> converter0 = (Converter<Boolean, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      long long0 = stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      int int0 = primitiveArrayDeserializers_LongDeser0._parseIntPrimitive((DeserializationContext) null, "0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      int int0 = numberDeserializers_BooleanDeserializer0._parseIntPrimitive((DeserializationContext) null, "-8");
      assertEquals((-8), int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>((Converter<?, TextStyle>) null);
      float float0 = stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = new Double(323.68973);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      double double1 = numberDeserializers_DoubleDeserializer0._parseDoublePrimitive((DeserializationContext) null, "0");
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Converter<String, String> converter0 = (Converter<String, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertEquals((short)1, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      TextStyle textStyle0 = TextStyle.SHORT;
      boolean boolean0 = StdDeserializer._neitherNull(textStyle0, deserializationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Converter<Long, Float> converter0 = (Converter<Long, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Converter<Object, Float> converter0 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0, (JavaType) null, (JsonDeserializer<?>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-INF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Converter<InputStream, BeanDeserializer> converter0 = (Converter<InputStream, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("*byLCame");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Converter<LongNode, InputStream> converter0 = (Converter<LongNode, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isNaN("6-;K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Converter<JavaType, HashMap<Boolean, TextStyle>> converter0 = (Converter<JavaType, HashMap<Boolean, TextStyle>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Boolean, TextStyle>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Boolean, TextStyle>>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isEmptyOrTextualNull("com.fasterxml.jackson.core.json.WriterBasedJsonGenerator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        StdDeserializer.parseDouble("?S7C1e~n5s!S,~_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDeserializer.parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Converter<BeanDeserializer, Float> converter0 = (Converter<BeanDeserializer, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("kEJJ+&eta70pRd*Z_V");
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0.handleMissingEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Converter<Object, Float> converter0 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<TextStyle> class0 = TextStyle.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      Class<String> class0 = String.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer(deserializationContext0, simpleType0, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        stringDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, (JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<?, BeanDeserializer>) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findConvertingContentDeserializer((DeserializationContext) null, beanProperty_Bogus0, numberDeserializers_BooleanDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Converter<String, Calendar> converter0 = (Converter<String, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Date>((Converter<Object, Date>) null, (JavaType) null, stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1.deserializeWithType((JsonParser) null, deserializationContext0, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Converter<Module, Float> converter0 = (Converter<Module, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyStringForScalarCoercion((DeserializationContext) null, "XjAlO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("not a valid 64-bit long for creating `java.util.Date`");
      // Undeclared exception!
      try { 
        stringDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._verifyNullForScalarCoercion((DeserializationContext) null, "9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._verifyNullForPrimitiveCoercion(deserializationContext0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "#)^q:%qc+Zbv", false);
      StringReader stringReader0 = new StringReader("tTE\u0004H<b80cc(OaiH`");
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2384, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-1224), 44, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(jsonParserSequence0, (DeserializationContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1224
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "no@ a Gal2d fl>Jt=za$le", true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Object> class0 = Object.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-928), pipedReader0, objectReader0, charsToNameCanonicalizer0, charArray0, 48, 0, true);
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, (Integer) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (byte[])\"\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        stringDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, false, jsonGenerator_Feature0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce JSON to Null value for type `java.lang.String` (disable `Feature.IGNORE_UNKNOWN` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseLongPrimitive(deserializationContext0, "~iV$S_8sY(E8S~2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte) (-55), (-1643));
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0._parseIntPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0._parseFloatPrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializationConfig0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2400), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      try { 
        numberDeserializers_BooleanDeserializer0._parseDoublePrimitive(defaultDeserializationContext0, "ng`DitC?2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `boolean` from String \"ng`DitC?2\": not a valid double value (as String to convert)
         //  at [Source: (com.fasterxml.jackson.databind.DeserializationConfig); line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_ByteDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Converter<Object, Float> converter0 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanFromInt((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Converter<Object, MinimalClassNameIdResolver> converter0 = (Converter<Object, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3998));
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0, placeholderForType0, stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberDeserializers_IntegerDeserializer0, false);
      PipedReader pipedReader0 = new PipedReader(1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        numberDeserializers_IntegerDeserializer0._failDoubleToIntCoercion(readerBasedJsonParser0, defaultDeserializationContext_Impl0, "0wPqR@\"N<K15");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into 0wPqR@\"N<K15 (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0._coerceTextualNull((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<Object, Float>) null, (JavaType) null, numberDeserializers_IntegerDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceNullToken((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<?, BeanDeserializer>) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        stdDelegatingDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: (String)\"Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0._coerceEmptyString((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDate("mADG![uC%", (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseIntPrimitive((DeserializationContext) null, "Z;1R-Ux+tQR?\"{%-&E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Class<?> class0 = numberDeserializers_BooleanDeserializer0.handledType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = Integer.getInteger("Ow*0!,<H?(", (-986));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      JavaType javaType0 = numberDeserializers_IntegerDeserializer0.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Converter<Date, String> converter0 = (Converter<Date, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber((Number) null);
      assertEquals(0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Converter<InputStream, BeanDeserializer> converter0 = (Converter<InputStream, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Converter<Object, CreatorProperty> converter1 = (Converter<Object, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<HashMap> class0 = HashMap.class;
      Class<Double> class1 = Double.class;
      Class<Object> class2 = Object.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class2);
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<CreatorProperty>(converter1, mapType0, stdDelegatingDeserializer0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Number number0 = stdDelegatingDeserializer1._nonNullNumber(bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      boolean boolean0 = stringDeserializer0._intOverflow(2147483658L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      boolean boolean0 = stringDeserializer0._intOverflow((-2147483648L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._intOverflow((-9223372036854775808L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Converter<Float, Float> converter0 = (Converter<Float, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(Integer.MAX_VALUE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Converter<Module, Float> converter0 = (Converter<Module, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      Converter<Object, Module> converter1 = (Converter<Object, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Module>(converter1, javaType0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._shortOverflow(32767);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-2097625487));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Converter<Object, Float> converter0 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<String>((Converter<Object, String>) null, resolvedRecursiveType0, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._byteOverflow(32768);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-144));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT;
      boolean boolean0 = StdDeserializer._neitherNull(textStyle0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<LongNode> class0 = LongNode.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 262144);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0.handleUnknownProperty(jsonParser0, (DeserializationContext) null, defaultDeserializationContext_Impl0, "not a valid 64-bit long for creating `java.util.Date`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<SimpleModule, BeanDeserializer> converter0 = (Converter<SimpleModule, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      Nulls nulls0 = Nulls.SKIP;
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short) (-37));
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, numberDeserializers_ShortDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nullValueProvider0.getNullAccessPattern());
      assertNotNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9);
      StdDelegatingDeserializer<NamedType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<NamedType>((Converter<Object, NamedType>) null, placeholderForType0, numberDeserializers_IntegerDeserializer0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = numberDeserializers_IntegerDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NullValueProvider nullValueProvider0 = numberDeserializers_IntegerDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Nulls nulls0 = Nulls.AS_EMPTY;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Long> class0 = Long.class;
      Long long0 = new Long(8);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      NullValueProvider nullValueProvider0 = numberDeserializers_IntegerDeserializer0._findNullProvider((DeserializationContext) null, beanProperty_Bogus0, nulls0, numberDeserializers_LongDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
      assertNotNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      Nulls nulls0 = Nulls.FAIL;
      Converter<Object, NamedType> converter0 = (Converter<Object, NamedType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(9);
      StdDelegatingDeserializer<NamedType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<NamedType>(converter0, placeholderForType0, numberDeserializers_IntegerDeserializer0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Converter<Float, BeanDeserializer> converter0 = (Converter<Float, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Nulls nulls0 = Nulls.FAIL;
      Converter<PropertyName, Boolean> converter1 = (Converter<PropertyName, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>(converter1);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, nulls0, stdDelegatingDeserializer1);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Converter<ByteArrayInputStream, PropertyName> converter0 = (Converter<ByteArrayInputStream, PropertyName>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<PropertyName> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<PropertyName>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer stdDelegatingDeserializer1 = (StdDelegatingDeserializer)stdDelegatingDeserializer0.findContentNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, stdDelegatingDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, stdDelegatingDeserializer1.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-11));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      NullValueProvider nullValueProvider0 = numberDeserializers_IntegerDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, (PropertyMetadata) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(numberDeserializers_ByteDeserializer0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      Class<LongNode> class0 = LongNode.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<Object, Float>) null, simpleType0, primitiveArrayDeserializers_LongDeser0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<Float> class0 = Float.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null, (Object) null, (Object) null);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<Object, Float>) null, arrayType0, numberDeserializers_IntegerDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<Object, BeanDeserializer>) null, javaType0, stringDeserializer0);
      TextStyle textStyle0 = TextStyle.SHORT;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce((DeserializationContext) null, false, textStyle0, "com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      String string0 = primitiveArrayDeserializers_LongDeser0._coercedTypeDesc();
      assertEquals("as content of type `long[]`", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = typeFactory0.constructArrayType(javaType0);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>((Converter<?, SettableBeanProperty>) null);
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<Object, BeanDeserializer>) null, arrayType0, stdDelegatingDeserializer0);
      TextStyle textStyle0 = TextStyle.SHORT;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._reportFailedNullCoerce(defaultDeserializationContext_Impl0, true, textStyle0, "com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Object object0 = stdDelegatingDeserializer0._coerceNullToken(deserializationContext0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Object object0 = stdDelegatingDeserializer0._coerceNullToken((DeserializationContext) null, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<SimpleModule, BeanDeserializer> converter0 = (Converter<SimpleModule, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 8233);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(arrayNode0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._deserializeWrappedValue(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Converter<LongNode, BeanDeserializer> converter0 = (Converter<LongNode, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      double double0 = numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDate("", defaultDeserializationContext_Impl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.util.Date
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseString(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      double double0 = numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "2.2250738585072012e-308");
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, (Integer) null);
      Date date0 = numberDeserializers_IntegerDeserializer0._parseDate("null", (DeserializationContext) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ByteDeserializer0._parseDate(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "No FormatFeatures defined for parser of type ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "I+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      double double0 = numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      double double0 = numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-3");
      assertEquals((-3.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Converter<ByteArrayInputStream, PropertyName> converter0 = (Converter<ByteArrayInputStream, PropertyName>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<PropertyName> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<PropertyName>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader(1164);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>((Converter<?, TextStyle>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-Infinit.y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Converter<Float, TextStyle> converter0 = (Converter<Float, TextStyle>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "N8-;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "IX#zGGgDt<p]c$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      StdDelegatingDeserializer<TextStyle> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TextStyle>((Converter<?, TextStyle>) null);
      float float0 = stdDelegatingDeserializer0._parseFloatPrimitive(deserializationContext0, "NaN");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      float float0 = numberDeserializers_BooleanDeserializer0._parseFloatPrimitive((DeserializationContext) null, "INF");
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      float float0 = primitiveArrayDeserializers_LongDeser0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-INF");
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      StringReader stringReader0 = new StringReader("?$#`");
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) stringReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectMapper0, charsToNameCanonicalizer0, (char[]) null, 1, Integer.MAX_VALUE, true);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLongPrimitive(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      int int0 = numberDeserializers_BooleanDeserializer0._parseIntPrimitive((DeserializationContext) null, "9");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<BuilderBasedDeserializer, MinimalClassNameIdResolver> converter0 = (Converter<BuilderBasedDeserializer, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseShortPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0._parseBooleanPrimitive(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultDeserializer(primitiveArrayDeserializers_LongDeser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_StringKD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      Class<?> class0 = numberDeserializers_LongDeserializer0.getValueClass();
      assertEquals("long", class0.toString());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      StdDelegatingDeserializer<Date> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Date>((Converter<Object, Date>) null, (JavaType) null, dateDeserializers_CalendarDeserializer0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer((DeserializationContext) null, (JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Converter<JavaType, MinimalClassNameIdResolver> converter0 = (Converter<JavaType, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0);
      JsonParser jsonParser0 = jsonFactory0.createParser((byte[]) null, (-380287495), (-380287495));
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      double double0 = numberDeserializers_BooleanDeserializer0._parseDoublePrimitive((DeserializationContext) null, "NaN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Converter<ByteArrayInputStream, PropertyName> converter0 = (Converter<ByteArrayInputStream, PropertyName>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<PropertyName> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<PropertyName>(converter0);
      StdDelegatingDeserializer<PropertyName> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<PropertyName>(stdDelegatingDeserializer0);
      assertFalse(stdDelegatingDeserializer1.equals((Object)stdDelegatingDeserializer0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)2031);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      boolean boolean0 = numberDeserializers_ShortDeserializer0._hasTextualNull("DFTV+BJy@q~Y}Ik[q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Converter<Float, Float> converter0 = (Converter<Float, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      long long0 = stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "9");
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Converter<Date, Float> converter0 = (Converter<Date, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[7];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 838, (-1313));
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._failDoubleToIntCoercion(jsonParser0, (DeserializationContext) null, "Didn't read enough from reader");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }
}
