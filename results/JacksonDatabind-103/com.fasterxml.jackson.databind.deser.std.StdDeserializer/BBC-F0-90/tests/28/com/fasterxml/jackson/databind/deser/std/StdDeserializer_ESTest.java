/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:03:56 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long((-3690L));
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      boolean boolean0 = numberDeserializers_LongDeserializer0._intOverflow(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Converter<TypeIdResolver, JsonGenerator.Feature> converter0 = (Converter<TypeIdResolver, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-32768));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, (JavaType) null, primitiveArrayDeserializers_BooleanDeser0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Class<Boolean> class0 = Boolean.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, simpleType0, dateDeserializers_CalendarDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      boolean boolean0 = stringDeserializer0._isIntNumber("0^8&Si|\"O|\"(wNu?*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._isIntNumber("9!x*Qy{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._isIntNumber("%IE =1FZl@fw]Z<8E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = new Boolean(false);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, boolean0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "J\"08tMtVy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      dateDeserializers_DateDeserializer0._verifyNullForPrimitive(deserializationContext0);
      assertEquals(AccessPattern.CONSTANT, dateDeserializers_DateDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDateFromArray(filteringParserDelegate0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("2.2250738585072012e-308");
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Class<Calendar> class0 = Calendar.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class0);
      boolean boolean0 = numberDeserializers_IntegerDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.instance(true);
      Converter<Object, Double> converter0 = (Converter<Object, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<String> class0 = String.class;
      CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0, collectionLikeType0, untypedObjectDeserializer_Vanilla0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultDeserializer(stdDelegatingDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, javaType0);
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>((Converter<Object, InputStream>) null, javaType0, untypedObjectDeserializer0);
      Class<?> class0 = stdDelegatingDeserializer0.handledType();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, (JavaType) null, numberDeserializers_BooleanDeserializer0);
      Class<?> class0 = stdDelegatingDeserializer0.handledType();
      assertEquals("boolean", class0.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1986);
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, placeholderForType0, numberDeserializers_NumberDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      stdDelegatingDeserializer0.findContentNullStyle(defaultDeserializationContext_Impl0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int int0 = numberDeserializers_BooleanDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      float float1 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Converter<BuilderBasedDeserializer, Class<FilterInputStream>> converter0 = (Converter<BuilderBasedDeserializer, Class<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Class<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<FilterInputStream>>(converter0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigDecimal0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StdDelegatingDeserializer<ObjectNode> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectNode>((Converter<?, ObjectNode>) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      boolean boolean0 = StdDeserializer._neitherNull(primitiveArrayDeserializers_BooleanDeser0, primitiveArrayDeserializers_BooleanDeser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0._isPosInf("Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = Integer.valueOf(2047);
      Class<Integer> class0 = Integer.class;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      boolean boolean0 = numberDeserializers_IntegerDeserializer0._isPosInf("UGH=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Object, BuilderBasedDeserializer> converter0 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0, (JavaType) null, numberDeserializers_BooleanDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-INF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("J\"08tMtVy");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>((Converter<Object, Short>) null, (JavaType) null, primitiveArrayDeserializers_ByteDeser0);
      boolean boolean0 = stdDelegatingDeserializer0._isNaN("NaN");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0._isNaN("_withValueTypeSerializer");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, javaType0);
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0, javaType0, untypedObjectDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._isEmptyOrTextualNull(": (");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        StdDeserializer.parseDouble("0HGVh2=t~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDeserializer.parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, (JavaType) null, (JsonDeserializer<?>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer0.handleMissingEndArrayForSingle((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      // Undeclared exception!
      try { 
        stringDeserializer0.findFormatOverrides(defaultDeserializationContext_Impl0, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<List> class0 = List.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0.findConvertingContentDeserializer(defaultDeserializationContext_Impl0, (BeanProperty) null, numberDeserializers_NumberDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = new Boolean("overflow, value cannot be represented as 8-bit value");
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, boolean0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._verifyStringForScalarCoercion(defaultDeserializationContext_Impl0, "overflow, value cannot be represented as 8-bit value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
      // Undeclared exception!
      try { 
        numberDeserializers_BigDecimalDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyNullForScalarCoercion(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_CalendarDeserializer0._verifyNullForPrimitiveCoercion(defaultDeserializationContext_Impl0, "INF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 1, 1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader(1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2997), pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      Converter<Object, JsonGenerator.Feature> converter0 = (Converter<Object, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0, javaType0, numberDeserializers_BooleanDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stdDelegatingDeserializer0, true);
      StringReader stringReader0 = new StringReader("n$W`");
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 3, (-839), true);
      try { 
        numberDeserializers_BooleanDeserializer0._verifyEndArrayForSingle(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n$W': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: -835]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<Object, BeanDeserializer>) null, javaType0, numberDeserializers_IntegerDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Double double0 = new Double(9.223372036854776E18);
      IOContext iOContext0 = new IOContext(bufferRecycler0, double0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1396, (-1209564060), false);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseShortPrimitive(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<LinkedList<Boolean>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<Boolean>>((Converter<?, LinkedList<Boolean>>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Converter<BeanDeserializer, Integer> converter0 = (Converter<BeanDeserializer, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseLongPrimitive(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory0.createParser("#u<.xCH#wxT");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseIntPrimitive(jsonParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ByteDeserializer0._parseDate((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Converter<TypeNameIdResolver, BeanDeserializer> converter0 = (Converter<TypeNameIdResolver, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanFromInt(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      // Undeclared exception!
      try { 
        stringDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<Object, BeanDeserializer>) null, javaType0, numberDeserializers_IntegerDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockDate mockDate0 = new MockDate(2, 48, (-2645), 1, (-3378), 2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockDate0, true);
      StringReader stringReader0 = new StringReader("1rMpS#dNRyjhWV@G'");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 115, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      try { 
        dateDeserializers_SqlDateDeserializer0._failDoubleToIntCoercion(readerBasedJsonParser0, defaultDeserializationContext_Impl0, "rDZ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into rDZ (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FactoryBasedEnumDeserializer factoryBasedEnumDeserializer0 = new FactoryBasedEnumDeserializer((Class<?>) null, (AnnotatedMethod) null);
      // Undeclared exception!
      try { 
        factoryBasedEnumDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(true);
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0._coerceTextualNull(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      // Undeclared exception!
      try { 
        stringDeserializer0._coerceEmptyString(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Converter<TypeIdResolver, HashMap<Long, Float>> converter0 = (Converter<TypeIdResolver, HashMap<Long, Float>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Long, Float>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Long, Float>>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      TextNode textNode0 = TextNode.valueOf("MNa^-lwU8-*'zGh]b&Z");
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(textNode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromArray(filteringParserDelegate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0.handleSingleElementUnwrapped(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      JavaType javaType0 = jsonNodeDeserializer_ObjectDeserializer0.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      Number number0 = numberDeserializers_IntegerDeserializer0._nonNullNumber((Number) null);
      assertEquals(0, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long((-3690L));
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      boolean boolean0 = numberDeserializers_LongDeserializer0._intOverflow(2147483679L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Converter<Integer, InputStream> converter0 = (Converter<Integer, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(2842L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Converter<Object, JsonGenerator.Feature> converter0 = (Converter<Object, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0, mapLikeType0, numberDeserializers_BooleanDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(3028);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Converter<BuilderBasedDeserializer, JsonGenerator.Feature> converter0 = (Converter<BuilderBasedDeserializer, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(Integer.MAX_VALUE);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>((Converter<Object, JsonGenerator.Feature>) null, (JavaType) null, numberDeserializers_BooleanDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-2147483645));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      boolean boolean0 = stringDeserializer0._byteOverflow(3280);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>((Converter<Object, InputStream>) null, (JavaType) null, numberDeserializers_BigIntegerDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-2541));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      boolean boolean0 = StdDeserializer._neitherNull(beanDeserializerFactory0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      byte[] byteArray0 = new byte[3];
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberDeserializers_FloatDeserializer0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (byte)0, 5, true);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0.handleUnknownProperty(uTF8StreamJsonParser0, defaultDeserializationContext_Impl0, (Object) null, "sV0@Zj!NP2|.1$g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Converter<Float, Integer> converter0 = (Converter<Float, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext_Impl0, mockDate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, javaType0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Nulls nulls0 = Nulls.SKIP;
      NullValueProvider nullValueProvider0 = untypedObjectDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, nulls0, untypedObjectDeserializer0);
      assertEquals(AccessPattern.ALWAYS_NULL, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(0.0F);
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyMetadata propertyMetadata0 = beanProperty_Bogus0.getMetadata();
      NullValueProvider nullValueProvider0 = numberDeserializers_FloatDeserializer0.findValueNullProvider(defaultDeserializationContext_Impl0, (SettableBeanProperty) null, propertyMetadata0);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(primitiveArrayDeserializers_FloatDeser0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._isIntNumber("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      boolean boolean0 = stringDeserializer0._isIntNumber("-Infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      String string0 = primitiveArrayDeserializers_ShortDeser0._coercedTypeDesc();
      assertEquals("as content of type `short[]`", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      try { 
        numberDeserializers_BigDecimalDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, true, jsonGenerator_Feature0, "C%WND~Fe9s9:t^S;hT;W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce C%WND~Fe9s9:t^S;hT;W to Null value for type `java.math.BigDecimal` (enable `Feature.QUOTE_FIELD_NAMES` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stringDeserializer0._reportFailedNullCoerce(deserializationContext0, false, mapperFeatureArray0[0], "Infinity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Object object0 = dateDeserializers_DateDeserializer0._coerceNullToken(defaultDeserializationContext_Impl0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._coerceNullToken((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$PrimitiveOrWrapperDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, (int) (byte) (-1), (-2145));
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      try { 
        numberDeserializers_IntegerDeserializer0._coerceIntegral(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: (byte[])\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._deserializeWrappedValue(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float((float) 3);
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      float float1 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "INF");
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, simpleType0, primitiveArrayDeserializers_BooleanDeser0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Date date0 = stdDelegatingDeserializer0._parseDate("null", defaultDeserializationContext_Impl0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("Cannot coerce Number (%s) %s (enable `%s.%s` to allow)");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<Short> class0 = Short.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, InputStream> converter1 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<InputStream>(converter1, simpleType0, stdDelegatingDeserializer0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Converter<Float, Integer> converter0 = (Converter<Float, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("2143");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      jsonParserSequence0.nextLongValue(0L);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      String string0 = stdDelegatingDeserializer0._parseString(jsonParserSequence0, defaultDeserializationContext_Impl0);
      assertEquals("2143", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("[wm]&0)@gzhHzK*haM");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseString(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Date date0 = stringDeserializer0._parseDate("", defaultDeserializationContext_Impl0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Converter<Object, InputStream> converter0 = (Converter<Object, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<InputStream>(converter0, simpleType0, dateDeserializers_CalendarDeserializer0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDate("df8/", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateDeserializers_DateDeserializer0, false);
      PipedReader pipedReader0 = new PipedReader(2400);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1727, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 0, 1727, true);
      // Undeclared exception!
      try { 
        dateDeserializers_TimestampDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      double double0 = stringDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-INF");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "NUMBER_INT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      double double0 = stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      double double0 = stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "Infinit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-NF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(469);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseDoublePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      float float0 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-Infinity");
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Class<Float> class0 = Float.class;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float((-1707.778F));
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      float float1 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "NaN");
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(Float.NaN);
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "Invalid input: JSON Pointer expression must start with '/': \"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Float float0 = new Float(Float.NaN);
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "NawN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float((-1913.39F));
      Class<Float> class0 = Float.TYPE;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-NF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 1, 1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("2143");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      jsonParserSequence0.nextLongValue(0L);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      Boolean boolean0 = Boolean.valueOf(true);
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser(primitiveArrayDeserializers_LongDeser0, primitiveArrayDeserializers_LongDeser0, boolean0);
      long[] longArray0 = primitiveArrayDeserializers_LongDeser1.handleSingleElementUnwrapped(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "2sgL;#]zx_FCX");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>((Converter<Object, JsonGenerator.Feature>) null, (JavaType) null, numberDeserializers_IntegerDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[4];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseBooleanPrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0.isDefaultDeserializer(numberDeserializers_BooleanDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      Class<String> class0 = String.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, numberDeserializers_NumberDeserializer0);
      boolean boolean0 = dateDeserializers_CalendarDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Converter<Object, JsonGenerator.Feature> converter0 = (Converter<Object, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Object> class0 = Object.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0, resolvedRecursiveType0);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0, mapLikeType0, numberDeserializers_BooleanDeserializer0);
      String string0 = stdDelegatingDeserializer0._coercedTypeDesc();
      assertEquals("for type `boolean`", string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Class<?> class0 = numberDeserializers_NumberDeserializer0.getValueClass();
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Converter<BuilderBasedDeserializer, BuilderBasedDeserializer> converter0 = (Converter<BuilderBasedDeserializer, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, (JavaType) null, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, (JavaType) null, beanProperty_Std0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      ObjectNode objectNode0 = arrayNode0.addObject();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectNode0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        stringDeserializer0._failDoubleToIntCoercion(readerBasedJsonParser0, (DeserializationContext) null, "wxf>V~V.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<Object, Integer>) null, javaType0, numberDeserializers_BooleanDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      double double0 = stringDeserializer0._parseDoublePrimitive(deserializationContext0, "NaN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Converter<BuilderBasedDeserializer, JsonGenerator.Feature> converter0 = (Converter<BuilderBasedDeserializer, JsonGenerator.Feature>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JsonGenerator.Feature>(converter0);
      StdDelegatingDeserializer<JsonGenerator.Feature> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<JsonGenerator.Feature>(stdDelegatingDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, stdDelegatingDeserializer1.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.primitiveInstance;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0, (JavaType) null, numberDeserializers_ByteDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._hasTextualNull("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
