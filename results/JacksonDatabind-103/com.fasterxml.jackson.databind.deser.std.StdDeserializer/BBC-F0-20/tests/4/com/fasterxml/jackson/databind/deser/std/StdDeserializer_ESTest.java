/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 08:44:24 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.std.AtomicBooleanDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsExternalTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.DataInput;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Converter<Double, LinkedList<BuilderBasedDeserializer>> converter0 = (Converter<Double, LinkedList<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Converter<Short, LinkedList<BuilderBasedDeserializer>> converter0 = (Converter<Short, LinkedList<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-2147483648L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(32767);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Converter<POJONode, SequenceInputStream> converter0 = (Converter<POJONode, SequenceInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("0W,DQ#Xx*Nn&*,Xc__");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long(9);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      Converter<Object, Float> converter0 = (Converter<Object, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Double, Double> converter1 = (Converter<Double, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Double>(converter1);
      Converter<Object, Double> converter2 = (Converter<Object, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate(converter2, (JavaType) null, primitiveArrayDeserializers_ShortDeser0);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer3 = stdDelegatingDeserializer0.withDelegate(converter0, (JavaType) null, stdDelegatingDeserializer2);
      String string0 = stdDelegatingDeserializer3._coercedTypeDesc();
      assertEquals("as content of type `short[]`", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      // Undeclared exception!
      try { 
        numberDeserializers_NumberDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, " dNT&m_ s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>((Converter<?, Calendar>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNullForPrimitiveCoercion(defaultDeserializationContext_Impl0, " to ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      Converter<BuilderBasedDeserializer, Object> converter0 = (Converter<BuilderBasedDeserializer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      Converter<POJONode, Object> converter0 = (Converter<POJONode, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, primitiveArrayDeserializers_ByteDeser0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Converter<Calendar, Module> converter0 = (Converter<Calendar, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0.isDefaultDeserializer(stdDelegatingDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Converter<BuilderBasedDeserializer, ReferenceType> converter0 = (Converter<BuilderBasedDeserializer, ReferenceType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ReferenceType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ReferenceType>(converter0);
      Class<?> class0 = stdDelegatingDeserializer0.getValueClass();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>((Converter<?, SequenceInputStream>) null);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      Boolean boolean0 = stdDelegatingDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0, jsonFormat_Feature0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Converter<Double, SettableBeanProperty> converter0 = (Converter<Double, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      AtomicBooleanDeserializer atomicBooleanDeserializer0 = new AtomicBooleanDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer stdDelegatingDeserializer1 = (StdDelegatingDeserializer)atomicBooleanDeserializer0.findContentNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, stdDelegatingDeserializer0);
      assertFalse(stdDelegatingDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      float float0 = primitiveArrayDeserializers_ShortDeser0._parseFloatPrimitive((DeserializationContext) null, "2.2250738585072012e-308");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Converter<POJONode, Object> converter0 = (Converter<POJONode, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Converter<Date, ReferenceType> converter0 = (Converter<Date, ReferenceType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ReferenceType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ReferenceType>(converter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[7] = (byte) (-92);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertEquals((short) (-23552), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Converter<Date, ReferenceType> converter0 = (Converter<Date, ReferenceType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ReferenceType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ReferenceType>(converter0);
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<JavaType> class0 = JavaType.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Short short0 = new Short((short) (-827));
      boolean boolean0 = StdDeserializer._neitherNull(simpleType0, short0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2190, 2190, 2190, 43, (-1610743646));
      boolean boolean0 = StdDeserializer._neitherNull((Object) null, mockDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Converter<InputStream, SettableBeanProperty> converter0 = (Converter<InputStream, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("-Infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Converter<Object, SequenceInputStream> converter0 = (Converter<Object, SequenceInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>((Converter<?, SequenceInputStream>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("R^\"e5KJk[>b2|6[r%k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0._isEmptyOrTextualNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_IntegerDeserializer0._isEmptyOrTextualNull("`.ps6kBL%-~&wXXsI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Converter<BeanDeserializer, Module> converter0 = (Converter<BeanDeserializer, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Nulls nulls0 = Nulls.SET;
      Converter<ChronoLocalDate, Long> converter1 = (Converter<ChronoLocalDate, Long>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Long> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Long>(converter1);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, stdDelegatingDeserializer1);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      String string0 = dateDeserializers_TimestampDeserializer0._coercedTypeDesc();
      assertEquals("for type `java.sql.Timestamp`", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        StdDeserializer.parseDouble(" m0h{,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Converter<Double, Byte> converter0 = (Converter<Double, Byte>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Byte> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Byte>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0.handleMissingEndArrayForSingle((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      FactoryBasedEnumDeserializer factoryBasedEnumDeserializer0 = new FactoryBasedEnumDeserializer(class0, (AnnotatedMethod) null);
      Class<Date> class1 = Date.class;
      // Undeclared exception!
      try { 
        factoryBasedEnumDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>((Converter<?, SequenceInputStream>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonDeserializer> class0 = JsonDeserializer.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Double double0 = new Double(87.371632784796);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      Class<POJONode> class1 = POJONode.class;
      FactoryBasedEnumDeserializer factoryBasedEnumDeserializer0 = new FactoryBasedEnumDeserializer(class1, (AnnotatedMethod) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        factoryBasedEnumDeserializer0.findConvertingContentDeserializer(defaultDeserializationContext_Impl0, beanProperty_Bogus0, numberDeserializers_DoubleDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Float, Module> converter0 = (Converter<Float, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0);
      Class<InputStream> class0 = InputStream.class;
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0, (Object) defaultDeserializationContext_Impl0, (Object) class0);
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, javaType0);
      AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(collectionType0, (TypeIdResolver) null, "R~C<J9d2EaOry}#%", true, arrayType0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.deserializeWithType((JsonParser) null, defaultDeserializationContext_Impl0, asExternalTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyStringForScalarCoercion((DeserializationContext) null, "only \"true\" or \"false\" recognized");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Double, Module> converter0 = (Converter<Double, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      // Undeclared exception!
      try { 
        stringDeserializer0._verifyNullForScalarCoercion((DeserializationContext) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      // Undeclared exception!
      try { 
        stringArrayDeserializer0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedReader pipedReader0 = new PipedReader(1);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, (TokenFilter) null, false, false);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(filteringParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(jsonParserSequence0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: Attempted to unwrap 'java.lang.Integer' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Converter<Byte, Float> converter0 = (Converter<Byte, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      try { 
        stdDelegatingDeserializer0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        numberDeserializers_FloatDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, true, jsonParser_Feature0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce null to Null value for type `java.lang.Float` (enable `Feature.ALLOW_UNQUOTED_FIELD_NAMES` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._parseLongPrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      // Undeclared exception!
      try { 
        stringDeserializer0._parseIntPrimitive((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._parseFloatPrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>((Converter<?, LinkedList<BuilderBasedDeserializer>>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDate((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, defaultDeserializationContext_Impl0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, (-32768), (DataInput) null, objectMapper0, byteQuadsCanonicalizer0, (-32768));
      // Undeclared exception!
      try { 
        numberDeserializers_BooleanDeserializer0._parseBytePrimitive(uTF8DataInputJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      FactoryBasedEnumDeserializer factoryBasedEnumDeserializer0 = new FactoryBasedEnumDeserializer(class0, (AnnotatedMethod) null);
      // Undeclared exception!
      try { 
        factoryBasedEnumDeserializer0._parseBooleanFromInt((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Long long0 = new Long((-1L));
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, long0);
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LinkedList<PropertyName> linkedList0 = new LinkedList<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, linkedList0, true);
      StringReader stringReader0 = new StringReader("e1cQD)f'ok|F!");
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 841, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      try { 
        numberDeserializers_IntegerDeserializer0._failDoubleToIntCoercion(jsonParserDelegate0, defaultDeserializationContext_Impl0, "q8^#dA");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into q8^#dA (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Converter<BeanDeserializer, JavaType> converter0 = (Converter<BeanDeserializer, JavaType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JavaType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JavaType>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      // Undeclared exception!
      try { 
        stringDeserializer0._coerceTextualNull((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      try { 
        stdDelegatingDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Converter<Long, LinkedList<BuilderBasedDeserializer>> converter0 = (Converter<Long, LinkedList<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceEmptyString((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[2];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-1), (-1));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      // Undeclared exception!
      try { 
        uUIDDeserializer0._badChar("`.ps6kBL%-~&wXXsI", 73, (DeserializationContext) null, 'V');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UUIDDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      JavaType javaType0 = stdDelegatingDeserializer0.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      Number number0 = numberDeserializers_LongDeserializer0._nonNullNumber((Number) null);
      assertNotNull(number0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Converter<Date, ReferenceType> converter0 = (Converter<Date, ReferenceType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ReferenceType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ReferenceType>(converter0);
      byte[] byteArray0 = new byte[9];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>((Converter<?, LinkedList<BuilderBasedDeserializer>>) null);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(2147483665L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Converter<Module, LinkedList<BuilderBasedDeserializer>> converter0 = (Converter<Module, LinkedList<BuilderBasedDeserializer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<BuilderBasedDeserializer>>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-9223372036854775808L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(32787);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>((Converter<?, Float>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(1484);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Converter<BeanDeserializer, Float> converter0 = (Converter<BeanDeserializer, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-168003863));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Converter<Date, SequenceInputStream> converter0 = (Converter<Date, SequenceInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(257);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdDelegatingDeserializer<SequenceInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SequenceInputStream>((Converter<Object, SequenceInputStream>) null, resolvedRecursiveType0, numberDeserializers_IntegerDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-2220));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0.handleUnknownProperty((JsonParser) null, (DeserializationContext) null, (Object) null, "w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>((Converter<?, Module>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext_Impl0, jsonFactory0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Nulls nulls0 = Nulls.SKIP;
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(true);
      NullValueProvider nullValueProvider0 = numberDeserializers_FloatDeserializer0._findNullProvider((DeserializationContext) null, beanProperty_Bogus0, nulls0, untypedObjectDeserializer_Vanilla0);
      assertEquals(AccessPattern.ALWAYS_NULL, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4698);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Integer> class0 = Integer.TYPE;
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) class0, (Object) typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.AS_EMPTY;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, arrayType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      NullValueProvider nullValueProvider0 = numberDeserializers_FloatDeserializer0._findNullProvider((DeserializationContext) null, beanProperty_Std0, nulls0, primitiveArrayDeserializers_ShortDeser0);
      assertNotNull(nullValueProvider0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4698);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      Class<Integer> class0 = Integer.TYPE;
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) class0, (Object) typeBindings0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      Nulls nulls0 = Nulls.FAIL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std((PropertyName) null, arrayType0, (PropertyName) null, (AnnotatedMember) null, propertyMetadata0);
      NullValueProvider nullValueProvider0 = numberDeserializers_FloatDeserializer0._findNullProvider((DeserializationContext) null, beanProperty_Std0, nulls0, primitiveArrayDeserializers_ShortDeser0);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Integer integer0 = new Integer(65534);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.construct((Boolean) null, "FAIL_ON_SELF_REFERENCES", integer0, "not a valid 64-bit long for creating `java.util.Date`");
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findValueNullProvider(defaultDeserializationContext_Impl0, (SettableBeanProperty) null, propertyMetadata0);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("2.2250738585072012e-308");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("+G#t;t*A1B%f28}SoX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("-Infinity");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringArrayDeserializer stringArrayDeserializer0 = StringArrayDeserializer.instance;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      // Undeclared exception!
      try { 
        stringArrayDeserializer0._reportFailedNullCoerce((DeserializationContext) null, true, jsonGenerator_Feature0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._reportFailedNullCoerce((DeserializationContext) null, false, (Enum<?>) null, " m0h{,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      numberDeserializers_ShortDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._coerceNullToken((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      Object object0 = stringDeserializer0._coerceNullToken((DeserializationContext) null, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      PipedReader pipedReader0 = new PipedReader(2087);
      JsonParser jsonParser0 = jsonFactory0.createParser((Reader) pipedReader0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0._deserializeWrappedValue(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Converter<JsonFactory.Feature, Object> converter0 = (Converter<JsonFactory.Feature, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "INF");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Date date0 = stringDeserializer0._parseDate("", defaultDeserializationContext_Impl0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2666);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2{", true);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 8);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Float> class1 = Float.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1921957386), pipedReader0, objectReader0, charsToNameCanonicalizer0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._deserializeFromEmpty(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._parseString(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      Date date0 = stringDeserializer0._parseDate("null", (DeserializationContext) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDate("PEiu", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 0, (-1984137059));
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ByteDeser0._parseDateFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Converter<POJONode, Object> converter0 = (Converter<POJONode, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-u79fJ~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Converter<BuilderBasedDeserializer, Object> converter0 = (Converter<BuilderBasedDeserializer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "NaN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Converter<POJONode, Object> converter0 = (Converter<POJONode, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "Infinity");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Converter<Long, Object> converter0 = (Converter<Long, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "NRN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "InputStream.read() returned 0 characters when trying to read ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Converter<BeanDeserializer, Object> converter0 = (Converter<BeanDeserializer, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive(filteringParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      // Undeclared exception!
      try { 
        stringDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-nity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      float float0 = stringDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-INF");
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (-4672), 48);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      // Undeclared exception!
      try { 
        stringDeserializer0._parseFloatPrimitive(jsonParserSequence0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLongPrimitive(filteringParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_ShortDeser0, (Boolean) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser1._parseIntPrimitive((DeserializationContext) null, ".I,8\"k@tR56b-z0 ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_ShortDeser0, (Boolean) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser1._parseIntPrimitive((DeserializationContext) null, "|icDKW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<?, BeanDeserializer>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseShortPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanPrimitive(jsonParserSequence0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(stack0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      Converter<Short, Module> converter0 = (Converter<Short, Module>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Module> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Module>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultDeserializer(primitiveArrayDeserializers_ByteDeser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      Class<Boolean> class0 = Boolean.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      boolean boolean0 = primitiveArrayDeserializers_ShortDeser0.isDefaultKeyDeserializer(stdKeyDeserializer_StringKD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-2371));
      Class<?> class1 = coreXMLDeserializers_Std0.getValueClass();
      assertEquals("class com.fasterxml.jackson.core.JsonFactory$Feature", class1.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._failDoubleToIntCoercion((JsonParser) null, defaultDeserializationContext_Impl0, "e1cQD)f'oy|F!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      boolean boolean0 = dateDeserializers_DateDeserializer0._isNaN("Cannot create TypeBindings for class ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Object>((Converter<?, Object>) null);
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Object>(stdDelegatingDeserializer0);
      assertFalse(stdDelegatingDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      boolean boolean0 = stdDelegatingDeserializer0._hasTextualNull("B_!|g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseLongPrimitive(deserializationContext0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }
}
