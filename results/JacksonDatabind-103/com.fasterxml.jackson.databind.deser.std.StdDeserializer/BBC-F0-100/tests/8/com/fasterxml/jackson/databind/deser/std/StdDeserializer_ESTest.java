/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 20:37:08 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.ByteBufferDeserializer;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.EnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;
import com.fasterxml.jackson.databind.deser.std.MapDeserializer;
import com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer;
import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UUIDDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleKeyDeserializers;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Annotations;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.ObjectBuffer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutput;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.text.DateFormat;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.time.temporal.ChronoUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Converter<Float, BuilderBasedDeserializer> converter0 = (Converter<Float, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("5");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, false);
      filteringParserDelegate0.nextLongValue((-2147483648L));
      stdDelegatingDeserializer0._parseIntPrimitive(filteringParserDelegate0, (DeserializationContext) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNullForScalarCoercion((DeserializationContext) null, "true");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      long long0 = numberDeserializers_DoubleDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "5");
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Converter<SimpleObjectIdResolver, TypeIdResolver> converter0 = (Converter<SimpleObjectIdResolver, TypeIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<TypeIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TypeIdResolver>(converter0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "tQF");
      Converter<Object, TypeIdResolver> converter1 = (Converter<Object, TypeIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<TypeNameIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<TypeNameIdResolver>((Converter<Object, TypeNameIdResolver>) null, (JavaType) null, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<TypeIdResolver> stdDelegatingDeserializer2 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, stdDelegatingDeserializer1);
      StdDelegatingDeserializer<TypeIdResolver> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<TypeIdResolver>(stdDelegatingDeserializer2);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BigInteger bigInteger0 = BigInteger.ZERO;
      numberDeserializers_IntegerDeserializer0._nonNullNumber(bigInteger0);
      Converter<JavaType, Byte> converter2 = (Converter<JavaType, Byte>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Byte> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<Byte>(converter2);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer4.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Converter<ResolvedRecursiveType, Calendar> converter0 = (Converter<ResolvedRecursiveType, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      stdDelegatingDeserializer0._parseFloatPrimitive(defaultDeserializationContext0, "0");
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("NaN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Converter<ResolvedRecursiveType, Calendar> converter0 = (Converter<ResolvedRecursiveType, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      stdDelegatingDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, (PropertyMetadata) null);
      boolean boolean0 = stdDelegatingDeserializer0._isPosInf("NaN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      PropertyMetadata propertyMetadata1 = propertyMetadata0.withDefaultValue("-c4!");
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._unwrapSingle;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withRequired((Boolean) null);
      Nulls nulls0 = Nulls.FAIL;
      Nulls nulls1 = Nulls.SKIP;
      PropertyMetadata propertyMetadata3 = propertyMetadata2.withNulls(nulls0, nulls1);
      nullifyingDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, propertyMetadata3);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0.handleUnknownProperty((JsonParser) null, (DeserializationContext) null, (Object) null, "=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Converter<SettableBeanProperty, Calendar> converter0 = (Converter<SettableBeanProperty, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonGenerator_Feature0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory4);
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory2, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = 'r';
      charArray0[2] = '-';
      charArray0[3] = 'N';
      charArray0[4] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 522, (Reader) null, objectMapper1, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.skipChildren();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      try { 
        primitiveArrayDeserializers_BooleanDeser0._verifyEndArrayForSingle(filteringParserDelegate0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Converter<Object, BuilderBasedDeserializer> converter0 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      stdDelegatingDeserializer0.findFormatOverrides(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0);
      stdDelegatingDeserializer0._isIntNumber("");
      Converter<ChronoUnit, String> converter1 = (Converter<ChronoUnit, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<String>(converter1);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<String>(stdDelegatingDeserializer1);
      Class<?> class1 = stdDelegatingDeserializer2.getValueClass();
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      Converter<JavaType, Boolean> converter0 = (Converter<JavaType, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      stdDelegatingDeserializer0._isNegInf("JSON");
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer._instance;
      JsonParser jsonParser0 = jsonFactory0.createParser("=c$XmR");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Byte> class0 = Byte.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonNodeDeserializer_ObjectDeserializer0.findFormatFeature(defaultDeserializationContext0, beanProperty_Bogus0, class0, jsonFormat_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext_Impl1.copy();
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ObjectDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      String string0 = "=";
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("JSON");
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory2.disable(jsonParser_Feature1);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-11);
      try { 
        nullifyingDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, true, jsonParser_Feature1, "enable");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce enable to Null value for type `java.lang.Object` (enable `Feature.STRICT_DUPLICATE_DETECTION` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      Converter<Object, LinkedList<FilterInputStream>> converter0 = (Converter<Object, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(110, 110);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      TypeFactory typeFactory2 = typeFactory1.withClassLoader((ClassLoader) null);
      Class<Calendar> class0 = Calendar.class;
      CollectionLikeType collectionLikeType0 = typeFactory2.constructCollectionLikeType(class0, class0);
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0, collectionLikeType0, nullifyingDeserializer0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce(defaultDeserializationContext0, true, chronoUnit0, ":35jb");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce :35jb to Null value for type `java.lang.Object` (enable `ChronoUnit.ERAS` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<TypeIdResolver, LinkedList<FilterInputStream>> converter0 = (Converter<TypeIdResolver, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Nulls nulls0 = Nulls.AS_EMPTY;
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, nulls0, numberDeserializers_ByteDeserializer0);
      Converter<Short, JsonDeserializer<SettableBeanProperty>> converter1 = (Converter<Short, JsonDeserializer<SettableBeanProperty>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JsonDeserializer<SettableBeanProperty>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<JsonDeserializer<SettableBeanProperty>>(converter1);
      StdDelegatingDeserializer<JsonDeserializer<SettableBeanProperty>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<JsonDeserializer<SettableBeanProperty>>(stdDelegatingDeserializer1);
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-175));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      numberDeserializers_IntegerDeserializer0.findContentNullStyle(defaultDeserializationContext_Impl0, beanProperty_Bogus0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      String string0 = numberDeserializers_FloatDeserializer0._coercedTypeDesc();
      assertEquals("for type `float`", string0);
      
      float float0 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive((DeserializationContext) null, "NaN");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0.findDeserializer(defaultDeserializationContext0, (JavaType) null, beanProperty_Bogus0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "Z2o\" c\\eR^";
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Class<Boolean> class0 = Boolean.class;
      Class<InputStream> class1 = InputStream.class;
      TypeBindings typeBindings0 = TypeBindings.create(class1, (List<JavaType>) null);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(resolvedRecursiveType0, resolvedRecursiveType0);
      ArrayType arrayType0 = ArrayType.construct((JavaType) collectionLikeType0, typeBindings0, (Object) typeBindings0, (Object) collectionLikeType0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0.findDeserializer((DeserializationContext) null, arrayType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 679, 85);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 679
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Converter<Date, BuilderBasedDeserializer> converter0 = (Converter<Date, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)95;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      Class<?> class0 = numberDeserializers_IntegerDeserializer0.handledType();
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Boolean, LinkedList<FilterInputStream>> converter0 = (Converter<Boolean, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<FilterInputStream, Float> converter1 = (Converter<FilterInputStream, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter1);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Float>(stdDelegatingDeserializer0);
      Class<LongNode> class0 = LongNode.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate((Converter<Object, Float>) null, resolvedRecursiveType0, stdDelegatingDeserializer0);
      ResolvedRecursiveType resolvedRecursiveType1 = (ResolvedRecursiveType)stdDelegatingDeserializer2._delegateType;
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<SettableBeanProperty>((Converter<Object, SettableBeanProperty>) null, resolvedRecursiveType1, stdDelegatingDeserializer2);
      stdDelegatingDeserializer3._parseDoublePrimitive(defaultDeserializationContext_Impl0, "2.2250738585072012e-308");
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      assertTrue(stringDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      long long0 = numberDeserializers_DoubleDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "tsue";
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/ps=^8]`Y$%=R");
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<List> class0 = List.class;
      Class<Date> class1 = Date.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class1);
      CollectionType collectionType1 = collectionType0.withStaticTyping();
      Byte byte0 = new Byte((byte)4);
      CollectionType collectionType2 = collectionType1.withValueHandler(byte0);
      CollectionType collectionType3 = collectionType2.withContentTypeHandler(class0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0.findDeserializer(defaultDeserializationContext0, collectionType3, beanProperty_Bogus0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Converter<LongNode, Calendar> converter0 = (Converter<LongNode, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      Converter<Object, LinkedList<FilterInputStream>> converter1 = (Converter<Object, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(2);
      placeholderForType0.actualType();
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1, (JavaType) null, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._isIntNumber("29.7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Class<Module> class0 = Module.class;
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializationContext deserializationContext0 = null;
      stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, nullifyingDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      stdDelegatingDeserializer0._isIntNumber("Uac+");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      Class<Long> class0 = Long.class;
      // Undeclared exception!
      try { 
        uUIDDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Short, SettableBeanProperty> converter0 = (Converter<Short, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive((DeserializationContext) null, "N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Converter<JavaType, Boolean> converter0 = (Converter<JavaType, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      stdDelegatingDeserializer0._byteOverflow(255);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      assertFalse(numberDeserializers_FloatDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-32768));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Converter<ChronoUnit, SimpleObjectIdResolver> converter0 = (Converter<ChronoUnit, SimpleObjectIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SimpleObjectIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SimpleObjectIdResolver>(converter0);
      Class<ChronoUnit> class0 = ChronoUnit.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, stdDelegatingDeserializer0);
      stdDelegatingDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      stdDelegatingDeserializer0.getKnownPropertyNames();
      stdDelegatingDeserializer0.getDelegatee();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      BuilderBasedDeserializer builderBasedDeserializer0 = null;
      POJOPropertiesCollector pOJOPropertiesCollector0 = mock(POJOPropertiesCollector.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdKeyDeserializer_DelegatingKD0.deserializeKey("", defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.TokenBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_FloatDeserializer0._isEmptyOrTextualNull("null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(57);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Converter<Object, Boolean> converter0 = (Converter<Object, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0, placeholderForType0, dateDeserializers_SqlDateDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(57);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      boolean boolean1 = numberDeserializers_FloatDeserializer0._isEmptyOrTextualNull("null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Converter<Double, Boolean> converter0 = (Converter<Double, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Nulls nulls0 = Nulls.AS_EMPTY;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      Converter<SettableBeanProperty, LinkedList<FilterInputStream>> converter1 = (Converter<SettableBeanProperty, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl1.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "I5,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive((DeserializationContext) null, "INTEGER");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Converter<LongNode, Boolean> converter0 = (Converter<LongNode, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>(stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._byteOverflow((-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-Infikity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._unwrapSingle;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      try { 
        primitiveArrayDeserializers_BooleanDeser0._verifyEndArrayForSingle(jsonParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Converter<Double, LinkedList<FilterInputStream>> converter0 = (Converter<Double, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0);
      ChronoUnit chronoUnit0 = ChronoUnit.DAYS;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce((DeserializationContext) null, true, chronoUnit0, ":35jFb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(numberDeserializers_BigIntegerDeserializer0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-INF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      TypeFactory.defaultInstance();
      Converter<Long, BuilderBasedDeserializer> converter0 = (Converter<Long, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>((Converter<?, LinkedList<FilterInputStream>>) null);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      String string0 = ":35jb\\";
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce((DeserializationContext) null, true, chronoUnit0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      Converter<Short, SettableBeanProperty> converter0 = (Converter<Short, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<SettableBeanProperty>(stdDelegatingDeserializer1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
      ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      ObjectMapper objectMapper2 = objectMapper1.enable(jsonGenerator_FeatureArray0);
      Class<JavaType> class0 = JavaType.class;
      ObjectMapper objectMapper3 = objectMapper2.addMixIn(class0, class0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._reportFailedNullCoerce(deserializationContext0, false, serializationFeature0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._reportFailedNullCoerce(defaultDeserializationContext0, false, (Enum<?>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Date, SettableBeanProperty> converter0 = (Converter<Date, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SettableBeanProperty>(stdDelegatingDeserializer0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Double, BeanDeserializer> converter1 = (Converter<Double, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<BeanDeserializer>(converter1);
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<BeanDeserializer>(stdDelegatingDeserializer2);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer3.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      JsonNodeDeserializer jsonNodeDeserializer1 = new JsonNodeDeserializer();
      Boolean boolean0 = jsonNodeDeserializer1._supportsUpdates;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser1 = new PrimitiveArrayDeserializers.BooleanDeser(primitiveArrayDeserializers_BooleanDeser0, jsonNodeDeserializer0, (Boolean) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberDeserializers_ShortDeserializer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)49;
      pipedOutputStream0.write(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(741);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)114;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-55), pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 3, (-386), false);
      try { 
        primitiveArrayDeserializers_BooleanDeser1._verifyEndArrayForSingle(uTF8StreamJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00FF\u0011\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.databind.deser.std.NumberDeserializers$ShortDeserializer); line: 1, column: -384]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      TypeFactory.defaultInstance();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow(32767);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      assertTrue(numberDeserializers_LongDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<Short, BuilderBasedDeserializer> converter0 = (Converter<Short, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("-INF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeFactory.defaultInstance();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("-");
      assertTrue(boolean0);
      
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[7];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_FeatureArray0[4] = jsonFormat_Feature4;
      JsonFormat.Feature jsonFormat_Feature5 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      jsonFormat_FeatureArray0[5] = jsonFormat_Feature5;
      JsonFormat.Feature jsonFormat_Feature6 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_FeatureArray0[6] = jsonFormat_Feature6;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      Boolean boolean1 = jsonFormat_Features0.get(jsonFormat_Feature0);
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer(stdDelegatingDeserializer0, stdDelegatingDeserializer0, boolean1);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stringArrayDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createNonBlockingByteArrayParser();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0.handleUnknownProperty(jsonParser0, deserializationContext0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty((JsonParser) null, defaultDeserializationContext0, (Object) null, "P}&`9#c|\"%\"l8S]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer.getInstance();
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      nullifyingDeserializer0._parseIntPrimitive(defaultDeserializationContext0, "3412");
      NullifyingDeserializer nullifyingDeserializer1 = new NullifyingDeserializer();
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-4483));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-2147483678L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      Boolean boolean0 = new Boolean((String) null);
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_IntDeser0, boolean0);
      primitiveArrayDeserializers_DoubleDeser1.withResolved(primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser1 = new PrimitiveArrayDeserializers.IntDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser1.findConvertingContentDeserializer(defaultDeserializationContext0, (BeanProperty) null, primitiveArrayDeserializers_DoubleDeser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Float> class0 = Float.class;
      Float float0 = new Float(0.0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer1 = new NumberDeserializers.FloatDeserializer(class0, float0);
      numberDeserializers_FloatDeserializer1._parseFloatPrimitive(defaultDeserializationContext_Impl0, "-INF");
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean0 = new Boolean("-INF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      nullifyingDeserializer0._parseFloatPrimitive(defaultDeserializationContext0, "INF");
      nullifyingDeserializer0._shortOverflow(73);
      Converter<Float, BuilderBasedDeserializer> converter0 = (Converter<Float, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      assertTrue(numberDeserializers_LongDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      nullifyingDeserializer0._parseFloatPrimitive(defaultDeserializationContext0, "INF");
      nullifyingDeserializer0._shortOverflow(73);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      assertEquals(AccessPattern.CONSTANT, numberDeserializers_LongDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Class<Float> class0 = Float.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2831);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      FromStringDeserializer.Std fromStringDeserializer_Std1 = new FromStringDeserializer.Std(class0, 10);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std1._parseDoublePrimitive(deserializationContext0, "Inf*nt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Class<Short> class0 = Short.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, Integer.MAX_VALUE);
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      fromStringDeserializer_Std0._parseDoublePrimitive(defaultDeserializationContext0, "-INF");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      assertEquals(AccessPattern.ALWAYS_NULL, byteBufferDeserializer0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._unwrapSingle;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      byte[] byteArray0 = new byte[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser1.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      Converter<Long, BuilderBasedDeserializer> converter0 = (Converter<Long, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Float, FilterInputStream> converter1 = (Converter<Float, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FilterInputStream>(converter1);
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<FilterInputStream>(stdDelegatingDeserializer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      JsonParser jsonParser0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(57);
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ArrayType arrayType0 = ArrayType.construct((JavaType) placeholderForType0, typeBindings0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) arrayType0);
      TypeFactory typeFactory0 = objectReader0.getTypeFactory();
      Class<HashMap> class0 = HashMap.class;
      typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      try { 
        Byte.decode("JSON");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSON\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(numberDeserializers_BigIntegerDeserializer0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short)78);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      try { 
        numberDeserializers_ShortDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      Float float0 = new Float((-722.2F));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      Converter<ChronoUnit, LinkedList<FilterInputStream>> converter0 = (Converter<ChronoUnit, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      Converter<Calendar, LinkedList<FilterInputStream>> converter1 = (Converter<Calendar, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Nulls nulls0 = Nulls.AS_EMPTY;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext0, (BeanProperty) null, nulls0, dateDeserializers_TimestampDeserializer0);
      assertNotNull(nullValueProvider0);
      
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer0);
      Converter<Long, Boolean> converter2 = (Converter<Long, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Boolean>(converter2);
      boolean boolean0 = stdDelegatingDeserializer2._isNegInf("+l,`v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.disable(jsonGenerator_Feature0);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2861));
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "-Infikity");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      stdDelegatingDeserializer0._isIntNumber(",3>^+>H*-@E8e&");
      Converter<ChronoUnit, List<PropertyName>> converter0 = (Converter<ChronoUnit, List<PropertyName>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<List<PropertyName>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<List<PropertyName>>(converter0);
      StdDelegatingDeserializer<List<PropertyName>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<List<PropertyName>>(stdDelegatingDeserializer2);
      stdDelegatingDeserializer3.getValueType();
      Converter<Object, ChronoLocalDate> converter1 = (Converter<Object, ChronoLocalDate>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoLocalDate> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<ChronoLocalDate>(converter1, (JavaType) null, stdDelegatingDeserializer3);
      assertFalse(stdDelegatingDeserializer4.isCachable());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Converter<Object, FilterInputStream> converter0 = (Converter<Object, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Converter<InputStream, FilterInputStream> converter1 = (Converter<InputStream, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FilterInputStream>(converter1);
      numberDeserializers_BooleanDeserializer0.findContentNullProvider((DeserializationContext) null, beanProperty_Bogus0, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<FilterInputStream>(converter0, mapLikeType0, numberDeserializers_BooleanDeserializer0);
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<FilterInputStream>(stdDelegatingDeserializer1);
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Class<Integer> class2 = Integer.class;
      Integer integer0 = new Integer((-1939742968));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class2, integer0);
      boolean boolean0 = numberDeserializers_IntegerDeserializer0.isCachable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      nullifyingDeserializer0.findContentNullProvider(defaultDeserializationContext0, beanProperty_Bogus0, numberDeserializers_BigIntegerDeserializer0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._coerceTextualNull(defaultDeserializationContext0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      nullifyingDeserializer0._shortOverflow((-194));
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = new SimpleAbstractTypeResolver();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      // Undeclared exception!
      try { 
        StdDeserializer.parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory1.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<Integer> class0 = Integer.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-1291));
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      defaultDeserializationContext_Impl0.with(deserializerFactory0);
      FromStringDeserializer.Std fromStringDeserializer_Std1 = new FromStringDeserializer.Std(class0, 13);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      fromStringDeserializer_Std1._parseDoublePrimitive(defaultDeserializationContext0, "NaN");
      fromStringDeserializer_Std1._deserializeFromEmptyString();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4, pipedReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, (-32768), (-128), false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      JsonParser jsonParser0 = jsonParserSequence0.skipChildren();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Converter<Object, ChronoUnit> converter0 = (Converter<Object, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-1004));
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow((-462));
      Converter<BuilderBasedDeserializer, LinkedList<FilterInputStream>> converter1 = (Converter<BuilderBasedDeserializer, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      stdDelegatingDeserializer0._isIntNumber("0,");
      Converter<Long, InputStream> converter2 = (Converter<Long, InputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<InputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<InputStream>(converter2);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory4 = jsonFactory3.enable(jsonGenerator_Feature0);
      jsonFactory4.disable(jsonParser_Feature0);
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseShortPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Class<TypeNameIdResolver> class0 = TypeNameIdResolver.class;
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultDeserializationContext_Impl1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      Class<List> class1 = List.class;
      ObjectReader objectReader1 = objectReader0.forType(class1);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[6];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_MISSING_VALUES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      ObjectReader objectReader2 = objectReader1.withoutFeatures(jsonParser_FeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, objectReader2, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.handleUnexpectedToken((Class<?>) class0, jsonToken0, (JsonParser) readerBasedJsonParser0, "61V", (Object[]) jsonParser_FeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Converter<ChronoUnit, FilterInputStream> converter0 = (Converter<ChronoUnit, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FilterInputStream>(converter0);
      Converter<Object, FilterInputStream> converter1 = (Converter<Object, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.class;
      Double double0 = new Double((-2891.581984));
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class0, double0);
      stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, numberDeserializers_DoubleDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      Converter<Date, Double> converter2 = (Converter<Date, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Double>(converter2);
      StdDeserializer._neitherNull(beanDeserializerFactory0, (Object) null);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer1 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      assertFalse(numberDeserializers_DoubleDeserializer1.equals((Object)numberDeserializers_DoubleDeserializer0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer.getInstance();
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer1 = new NullifyingDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator(".f%2>xG77# 7M[bl");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((ContextAttributes) null);
      Class<String> class0 = String.class;
      ObjectReader objectReader1 = objectReader0.withView(class0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectReader1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-71);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, (int) (byte) (-71), (int) (byte) (-89));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Converter<Object, LongNode> converter0 = (Converter<Object, LongNode>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Short, FilterInputStream> converter1 = (Converter<Short, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<FilterInputStream>(converter1);
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<FilterInputStream>(stdDelegatingDeserializer0);
      Converter<Object, FilterInputStream> converter2 = (Converter<Object, FilterInputStream>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<FilterInputStream> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate(converter2, (JavaType) null, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<LongNode> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<LongNode>(converter0, (JavaType) null, stdDelegatingDeserializer2);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stdDelegatingDeserializer2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = '$';
      charArray0[2] = 'Z';
      charArray0[3] = 'B';
      charArray0[4] = 'S';
      charArray0[5] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 68, stringReader0, objectMapper1, charsToNameCanonicalizer0, charArray0, 68, 1, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0.handleSingleElementUnwrapped(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Converter<Object, Calendar> converter0 = (Converter<Object, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0, (JavaType) null, (JsonDeserializer<?>) null);
      stdDelegatingDeserializer0._isPosInf("INF");
      Converter<ChronoUnit, SettableBeanProperty> converter1 = (Converter<ChronoUnit, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SettableBeanProperty>(converter1);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<SettableBeanProperty>(stdDelegatingDeserializer1);
      Converter<FilterInputStream, ChronoUnit> converter2 = (Converter<FilterInputStream, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<ChronoUnit>(converter2);
      assertEquals(AccessPattern.DYNAMIC, stdDelegatingDeserializer3.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonFactory0.disable(jsonGenerator_Feature0);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2861));
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "-Infinity");
      fromStringDeserializer_Std0._deserializeFromEmptyString();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      assertFalse(byteBufferDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      float float0 = numberDeserializers_FloatDeserializer0._parseFloatPrimitive((DeserializationContext) null, "Infinity");
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      NullifyingDeserializer nullifyingDeserializer1 = NullifyingDeserializer.instance;
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-3383));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Class<Float> class0 = Float.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 2831);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      FromStringDeserializer.Std fromStringDeserializer_Std1 = new FromStringDeserializer.Std(class0, 10);
      fromStringDeserializer_Std1._parseDoublePrimitive(deserializationContext0, "Infinity");
      fromStringDeserializer_Std0._deserializeFromEmptyString();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Date, BeanDeserializer> converter0 = (Converter<Date, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      Float float0 = new Float(1159.025F);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer1 = new NullifyingDeserializer();
      boolean boolean0 = nullifyingDeserializer1._shortOverflow((-4483));
      Converter<Byte, LinkedList<FilterInputStream>> converter0 = (Converter<Byte, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      PropertyName propertyName0 = beanProperty_Bogus0.getFullName();
      JavaType javaType0 = TypeFactory.unknownType();
      ArrayType arrayType0 = ArrayType.construct(javaType0, (TypeBindings) null);
      PropertyName propertyName1 = PropertyName.construct("not a valid float value");
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(arrayType0);
      valueInstantiator_Base0.getIncompleteParameter();
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      JapaneseDate japaneseDate0 = MockJapaneseDate.now((ZoneId) zoneOffset0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
      CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName1, (TypeDeserializer) null, (Annotations) null, (AnnotatedParameter) null, (-4483), japaneseDate0, propertyMetadata0);
      SettableBeanProperty settableBeanProperty0 = creatorProperty0.withNullProvider(dateDeserializers_DateDeserializer0);
      PropertyMetadata propertyMetadata1 = PropertyMetadata.STD_OPTIONAL;
      Nulls nulls0 = Nulls.FAIL;
      PropertyMetadata propertyMetadata2 = propertyMetadata1.withNulls(nulls0, nulls0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findValueNullProvider(defaultDeserializationContext_Impl0, settableBeanProperty0, propertyMetadata2);
      assertNotNull(nullValueProvider0);
      
      boolean boolean1 = stdDelegatingDeserializer0._isIntNumber("/*QLXp47k");
      assertTrue(boolean1 == boolean0);
      
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean2 = numberDeserializers_LongDeserializer0.isCachable();
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Boolean boolean0 = jsonNodeDeserializer0._supportsUpdates;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser1 = new PrimitiveArrayDeserializers.BooleanDeser(primitiveArrayDeserializers_BooleanDeser0, primitiveArrayDeserializers_BooleanDeser0, (Boolean) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser1._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = new JsonNodeDeserializer.ArrayDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow(3533);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      // Undeclared exception!
      try { 
        stringArrayDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      typeBindings0.toString();
      Class<Long> class0 = Long.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      typeBindings0.toString();
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>((Converter<Object, Calendar>) null, javaType0, jsonNodeDeserializer0);
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Calendar>(stdDelegatingDeserializer0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[3];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'i';
      charArray0[2] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectMapper1, charsToNameCanonicalizer1, charArray0, (-1927), 1, false);
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseBooleanPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer1 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer1._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, numberDeserializers_FloatDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      Class<Short> class0 = Short.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 73);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "Inf*nt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer1 = NullifyingDeserializer.instance;
      nullifyingDeserializer1._shortOverflow((-3265));
      Converter<LongNode, LinkedList<FilterInputStream>> converter0 = (Converter<LongNode, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      nullifyingDeserializer1._shortOverflow(1489);
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Object, Calendar> converter1 = (Converter<Object, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<LongNode> class0 = LongNode.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      JavaType javaType0 = resolvedRecursiveType0.withStaticTyping();
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter1, javaType0, (JsonDeserializer<?>) null);
      String string0 = "not a valid int value";
      stdDelegatingDeserializer0._isPosInf("not a valid int value");
      Converter<List<PropertyName>, SettableBeanProperty> converter2 = (Converter<List<PropertyName>, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SettableBeanProperty>(converter2);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<SettableBeanProperty>(stdDelegatingDeserializer1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._parseDoublePrimitive(defaultDeserializationContext_Impl0, "not a valid int value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Boolean boolean0 = jsonNodeDeserializer0._supportsUpdates;
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, (Boolean) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser1.handleSingleElementUnwrapped((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._verifyEndArrayForSingle((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = new JsonNodeDeserializer.ArrayDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._verifyEndArrayForSingle((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((float) 3);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._coerceTextualNull(defaultDeserializationContext_Impl0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<Byte, BeanDeserializer> converter0 = (Converter<Byte, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      stdDelegatingDeserializer0._isIntNumber("+`n8mBgY>H/%?XYukQ");
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      Converter<Object, Integer> converter1 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Integer>(converter1);
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Integer>(stdDelegatingDeserializer1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      String string0 = "overflow, value cannot be represented as 16-bit value";
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-533));
      placeholderForType0.actualType();
      try { 
        defaultDeserializationContext_Impl0.resolveSubType(placeholderForType0, "overflow, value cannot be represented as 16-bit value");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not resolve type id 'overflow, value cannot be represented as 16-bit value' as a subtype of $-532: problem: (java.lang.NullPointerException) null
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidTypeIdException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      StdDeserializer._neitherNull(numberDeserializers_BigIntegerDeserializer0, deserializerFactoryConfig0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "RUsyLUwIb");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      dateDeserializers_SqlDateDeserializer0._coercedTypeDesc();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      stringDeserializer0.getValueClass();
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      File file0 = MockFile.createTempFile("v]R/~8-hb;r^2RE-IO", "a,Qhx{9c8;MsAB{");
      MockFile mockFile0 = new MockFile(file0, "v]R/~8-hb;r^2RE-IO");
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ContextAttributes contextAttributes1 = contextAttributes0.withPerCallAttribute("v]R/~8-hb;r^2RE-IO", file0);
      HashMap<BuilderBasedDeserializer, Short> hashMap0 = new HashMap<BuilderBasedDeserializer, Short>();
      HashMap<BuilderBasedDeserializer, Short> hashMap1 = new HashMap<BuilderBasedDeserializer, Short>(hashMap0);
      ContextAttributes contextAttributes2 = contextAttributes1.withSharedAttributes(hashMap1);
      objectMapper0.writer(contextAttributes2);
      try { 
        jsonFactory1.createParser((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Converter<SimpleModule, BeanDeserializer> converter0 = (Converter<SimpleModule, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      Converter<Object, BeanDeserializer> converter1 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(78);
      placeholderForType0.actualType();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, numberDeserializers_DoubleDeserializer0);
      Class<?> class0 = stdDelegatingDeserializer1.getValueClass();
      assertFalse(class0.isArray());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 128);
      ObjectMapper objectMapper0 = new ObjectMapper();
      Converter<List<PropertyName>, String> converter0 = (Converter<List<PropertyName>, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ObjectReader objectReader1 = objectReader0.withValueToUpdate(deserializerFactoryConfig0);
      TypeFactory typeFactory0 = objectReader1.getTypeFactory();
      typeFactory0.constructRawMapLikeType(class0);
      Class<List> class1 = List.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate((Converter<Object, String>) null, collectionType0, fromStringDeserializer_Std0);
      stdDelegatingDeserializer1._nonNullNumber((Number) null);
      ObjectMapper objectMapper1 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Converter<ChronoLocalDate, BeanDeserializer> converter0 = (Converter<ChronoLocalDate, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer1 = NullifyingDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer2 = new NullifyingDeserializer();
      boolean boolean0 = nullifyingDeserializer0._shortOverflow(45);
      assertFalse(boolean0);
      
      Converter<Calendar, LinkedList<FilterInputStream>> converter1 = (Converter<Calendar, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      Converter<Boolean, LinkedList<FilterInputStream>> converter2 = (Converter<Boolean, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter2);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Nulls nulls0 = Nulls.SKIP;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer1._findNullProvider(defaultDeserializationContext0, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
      assertNotNull(nullValueProvider0);
      
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer1);
      Boolean boolean1 = new Boolean(true);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<FilterInputStream, BeanDeserializer> converter0 = (Converter<FilterInputStream, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, (JsonDeserializer<?>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BeanDeserializer>(stdDelegatingDeserializer0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      stdDelegatingDeserializer1._verifyNullForPrimitive(defaultDeserializationContext_Impl1);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl2 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl3 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl1, "not a valid double value (as String to convert)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<Boolean, BeanDeserializer> converter0 = (Converter<Boolean, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer1 = new NullifyingDeserializer();
      boolean boolean0 = nullifyingDeserializer1._shortOverflow((-3265));
      assertFalse(boolean0);
      
      Converter<LongNode, LinkedList<FilterInputStream>> converter1 = (Converter<LongNode, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      Converter<InputStream, LinkedList<FilterInputStream>> converter2 = (Converter<InputStream, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter2);
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer2._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
      assertNotNull(nullValueProvider0);
      
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer1);
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonFactory jsonFactory0 = new JsonFactory();
      Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      Converter<Object, BeanDeserializer> converter1 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<ChronoUnit> class0 = ChronoUnit.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 0);
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<Boolean> class1 = Boolean.class;
      // Undeclared exception!
      try { 
        nullifyingDeserializer0.findFormatFeature((DeserializationContext) null, (BeanProperty) null, class1, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "Failed auto-detect: could not read more than ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Failed auto-detect: could not read more than ");
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(iOContext0);
      FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(formatFeature0).getMask();
      ObjectReader objectReader1 = objectReader0.without(formatFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, pipedReader0, objectReader1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideStdFeatures(33, 1419);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(objectMapper0, chronoUnit0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2655));
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Class<Double> class1 = Double.class;
      FromStringDeserializer.Std fromStringDeserializer_Std1 = new FromStringDeserializer.Std(class1, 3533);
      try { 
        StdDeserializer.parseDouble("<?,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateDeserializers_TimestampDeserializer0, true);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<String> class0 = String.class;
      TypeBindings.create(class0, (JavaType[]) null);
      PipedReader pipedReader0 = new PipedReader();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow(3);
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      Converter<ChronoUnit, BuilderBasedDeserializer> converter0 = (Converter<ChronoUnit, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0);
      stdDelegatingDeserializer0._isNaN("NaN");
      EnumDeserializer enumDeserializer0 = null;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(sequenceInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader(2);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<SimpleModule> class0 = SimpleModule.class;
      objectMapper0.readerFor(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._failDoubleToIntCoercion((JsonParser) null, defaultDeserializationContext_Impl0, "AGZFrh|HP'aUnUnkSm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<BuilderBasedDeserializer, BeanDeserializer> converter0 = (Converter<BuilderBasedDeserializer, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
      JsonInclude.Value jsonInclude_Value0 = BeanProperty.EMPTY_INCLUDE;
      ObjectMapper objectMapper2 = objectMapper1.setDefaultPropertyInclusion(jsonInclude_Value0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectMapper objectMapper3 = objectMapper2.enable(deserializationFeature0, deserializationFeatureArray0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      Integer integer0 = new Integer((-411));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(integer0);
      JsonParser jsonParser0 = objectMapper3.treeAsTokens(valueNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._failDoubleToIntCoercion(jsonParser0, defaultDeserializationContext0, "ZVI#V\"Xu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Class<Date> class0 = Date.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 125, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        nullifyingDeserializer0._failDoubleToIntCoercion(jsonParser0, defaultDeserializationContext_Impl0, "*S-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into *S- (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      Class<ChronoUnit> class0 = ChronoUnit.class;
      SimpleValueInstantiators simpleValueInstantiators1 = simpleValueInstantiators0.addValueInstantiator(class0, (ValueInstantiator) null);
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators1);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<BuilderBasedDeserializer, BeanDeserializer> converter0 = (Converter<BuilderBasedDeserializer, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig3 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig4 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-1));
      assertFalse(boolean0);
      
      Converter<Float, LinkedList<FilterInputStream>> converter1 = (Converter<Float, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      Nulls nulls0 = Nulls.DEFAULT;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer1._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, dateDeserializers_TimestampDeserializer0);
      assertNull(nullValueProvider0);
      
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer1);
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Boolean, String> converter0 = (Converter<Boolean, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      int int0 = FromStringDeserializer.Std.STD_JAVA_TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("3IQW@?");
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow(126);
      Converter<SettableBeanProperty, LinkedList<FilterInputStream>> converter1 = (Converter<SettableBeanProperty, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._parseLongPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Converter<Object, ChronoUnit> converter0 = (Converter<Object, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Byte, BeanDeserializer> converter1 = (Converter<Byte, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter1);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("<?,");
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[0];
      ObjectMapper objectMapper1 = objectMapper0.enable(mapperFeatureArray0);
      objectMapper1.findAndRegisterModules();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
      objectMapper0.configure(deserializationFeature0, true);
      objectMapper0.getDeserializationContext();
      Boolean boolean1 = new Boolean("JSON");
      boolean boolean2 = nullifyingDeserializer0._shortOverflow(Integer.MAX_VALUE);
      assertFalse(boolean2 == boolean0);
      
      Converter<String, LinkedList<FilterInputStream>> converter2 = (Converter<String, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter2);
      boolean boolean3 = stdDelegatingDeserializer1._isIntNumber("h!6L:d&z&^XNexyt");
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow(2147483645);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      StringArrayDeserializer stringArrayDeserializer0 = new StringArrayDeserializer();
      // Undeclared exception!
      try { 
        stringArrayDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS");
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      numberDeserializers_NumberDeserializer0.handledType();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      String string0 = "Infinity";
      int int0 = (-355);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonFactory jsonFactory0 = new JsonFactory();
      Converter<String, BeanDeserializer> converter0 = (Converter<String, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(11);
      Class<Integer> class0 = Integer.class;
      TypeBindings.create(class0, (JavaType[]) null);
      stdDelegatingDeserializer0._isIntNumber("");
      PipedReader pipedReader0 = new PipedReader();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow(0);
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      assertEquals(AccessPattern.CONSTANT, primitiveArrayDeserializers_CharDeser0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<BuilderBasedDeserializer, BeanDeserializer> converter0 = (Converter<BuilderBasedDeserializer, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      stdDelegatingDeserializer0._isIntNumber("<?,");
      PipedReader pipedReader0 = new PipedReader();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow((-1));
      Converter<Double, LinkedList<FilterInputStream>> converter1 = (Converter<Double, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      Nulls nulls0 = Nulls.FAIL;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, numberDeserializers_BigIntegerDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-1986776734));
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>((Converter<?, LinkedList<FilterInputStream>>) null);
      boolean boolean1 = stdDelegatingDeserializer0._isIntNumber(":*sfsg7TfC:ICn");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%[./,L-hzgP1jAX90");
      Integer integer0 = new Integer((-1417));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow(Integer.MIN_VALUE);
      Converter<Float, LinkedList<FilterInputStream>> converter0 = (Converter<Float, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter0);
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer0);
      stdDelegatingDeserializer0._isIntNumber("%[./,L-hzgP1jAX90");
      Class<Calendar> class1 = Calendar.class;
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = null;
      try {
        dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Default constructor for java.util.Calendar is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type
         //
         verifyException("com.fasterxml.jackson.databind.util.ClassUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._verifyNullForScalarCoercion((DeserializationContext) null, "AGZFrh|HP'aUnUnkSm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._verifyNullForScalarCoercion(defaultDeserializationContext_Impl0, "T)w#7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      Nulls nulls0 = Nulls.AS_EMPTY;
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>((Converter<?, LinkedList<FilterInputStream>>) null);
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer1._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, numberDeserializers_FloatDeserializer0);
      assertNotNull(nullValueProvider0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Nulls nulls0 = Nulls.AS_EMPTY;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>((Converter<?, LinkedList<FilterInputStream>>) null);
      stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, nullifyingDeserializer0);
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((double) 0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, float0, true);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl1, defaultDeserializationContext_Impl0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(45, (String) null, (-3382), 2, Integer.MAX_VALUE, (-2182), (-3382), 1, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<BuilderBasedDeserializer, BeanDeserializer> converter0 = (Converter<BuilderBasedDeserializer, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("<?,");
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean1 = nullifyingDeserializer0._shortOverflow((-1));
      assertTrue(boolean1 == boolean0);
      
      Converter<Double, LinkedList<FilterInputStream>> converter1 = (Converter<Double, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer1._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, numberDeserializers_BigIntegerDeserializer0);
      assertNotNull(nullValueProvider0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
      
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer1);
      boolean boolean2 = new Boolean(false);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = new JsonNodeDeserializer.ArrayDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      primitiveArrayDeserializers_BooleanDeser0._coerceNullToken(defaultDeserializationContext_Impl0, false);
      Boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._unwrapSingle;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory3.createParser("l%K");
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseDate(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Boolean, String> converter0 = (Converter<Boolean, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      int int0 = FromStringDeserializer.Std.STD_JAVA_TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("3IQW@?");
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow(126);
      Converter<SettableBeanProperty, LinkedList<FilterInputStream>> converter1 = (Converter<SettableBeanProperty, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 126);
      fromStringDeserializer_Std0._deserializeFromEmptyString();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      Converter<Object, Byte> converter2 = (Converter<Object, Byte>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Byte> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Byte>(converter2);
      StdDelegatingDeserializer<Byte> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Byte>(stdDelegatingDeserializer1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer2._parseDate(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Boolean, String> converter0 = (Converter<Boolean, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      int int0 = FromStringDeserializer.Std.STD_JAVA_TYPE;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("3IQW@?");
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow(126);
      Converter<SettableBeanProperty, LinkedList<FilterInputStream>> converter1 = (Converter<SettableBeanProperty, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withDeserializerModifier(beanDeserializerModifier0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      Boolean boolean0 = Boolean.TRUE;
      Converter<InputStream, BuilderBasedDeserializer> converter2 = (Converter<InputStream, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter2);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer1);
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(192);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseDateFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((-722.2F));
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      nullifyingDeserializer0._shortOverflow((-1608));
      Integer integer0 = new Integer(2);
      Class<Integer> class0 = Integer.class;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, (Integer) 3);
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer1 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer1._parseDateFromArray((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      ObjectBuffer objectBuffer0 = defaultDeserializationContext_Impl0.leaseObjectBuffer();
      defaultDeserializationContext_Impl0.returnObjectBuffer(objectBuffer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("<?,");
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig2 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig2);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean1 = nullifyingDeserializer0._shortOverflow((-1));
      assertTrue(boolean1 == boolean0);
      
      Converter<Calendar, LinkedList<FilterInputStream>> converter1 = (Converter<Calendar, LinkedList<FilterInputStream>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(converter1);
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>(stdDelegatingDeserializer1);
      boolean boolean2 = stdDelegatingDeserializer2._isIntNumber("8[[<D40HRsvdcY+");
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._shortOverflow(3533);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl1.with(beanDeserializerFactory1);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext0, "(OmK-S]ZH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      DeserializationContext deserializationContext0 = null;
      Class<Boolean> class0 = Boolean.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatFeature((DeserializationContext) null, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      Boolean boolean0 = Boolean.TRUE;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      Class<LongNode> class0 = LongNode.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0.findFormatFeature(defaultDeserializationContext0, (BeanProperty) null, class0, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      ObjectReader objectReader0 = objectMapper2.readerForUpdating(numberDeserializers_BigIntegerDeserializer0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      try { 
        StdDeserializer.parseDouble("JSON");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory1.createParser((Reader) pipedReader0);
      JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseIntPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(3403L);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      jsonFactory0.enable(jsonGenerator_Feature0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      Converter<Integer, Calendar> converter1 = (Converter<Integer, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Calendar>(converter1);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Converter<Calendar, Object> converter2 = (Converter<Calendar, Object>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Object> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<Object>(converter2);
      Converter<Object, BuilderBasedDeserializer> converter3 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter3);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer3);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      StringReader stringReader0 = new StringReader("o;c2l[e");
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) stringReader0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer4._parseIntPrimitive(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%[./,L-hzgP1jAX90");
      Integer integer0 = new Integer((-1417));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1686);
      StdDeserializer._neitherNull(bufferedInputStream0, bufferedInputStream0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "%[./,L-hzgP1jAX90");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%[./,L-hzgP1jAX90");
      Integer integer0 = new Integer((-1417));
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = new NumberDeserializers.IntegerDeserializer(class0, integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[0];
      pipedOutputStream0.write(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1686);
      StdDeserializer._neitherNull(bufferedInputStream0, bufferedInputStream0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLong((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2861));
      ObjectMapper objectMapper0 = new ObjectMapper();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "-Infinity");
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      Class<Float> class1 = Float.class;
      Float float0 = new Float((double) 1);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class1, float0);
      JsonParser jsonParser0 = jsonFactory1.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseBytePrimitive(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateDeserializers_TimestampDeserializer0, true);
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0, (JavaType) null, dateDeserializers_TimestampDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBytePrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, nullifyingDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Converter<BeanDeserializer, Boolean> converter1 = (Converter<BeanDeserializer, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>(converter1);
      stdDelegatingDeserializer1._byteOverflow(2342);
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      MockDate mockDate0 = new MockDate((-2040707037), (-3158), 2342, 2342, 95);
      try { 
        uUIDDeserializer0._deserializeEmbedded(mockDate0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Don't know how to convert embedded Object of type org.evosuite.runtime.mock.java.util.MockDate into java.util.UUID
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 48);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("");
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      boolean boolean0 = nullifyingDeserializer0._shortOverflow(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = new NumberDeserializers.BigIntegerDeserializer();
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      int int0 = 65535;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      deserializerFactoryConfig0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_BigIntegerDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory1 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Boolean boolean0 = jsonNodeDeserializer0._supportsUpdates;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser1 = new PrimitiveArrayDeserializers.BooleanDeser(primitiveArrayDeserializers_BooleanDeser0, primitiveArrayDeserializers_BooleanDeser0, (Boolean) null);
      primitiveArrayDeserializers_BooleanDeser1._coercedTypeDesc();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser1._verifyEndArrayForSingle(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer.createRoot();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = true;
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      boolean boolean1 = false;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      objectMapper3.getDeserializationContext();
      int int0 = 63;
      Integer integer0 = new Integer(63);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<?, BeanDeserializer>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer2 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer1, dateFormat0, "");
      dateDeserializers_SqlDateDeserializer1._coercedTypeDesc();
      dateDeserializers_SqlDateDeserializer2.withDateFormat(dateFormat0, "Missing field (broken JDK (de)serialization?)");
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(2147483647L);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl0, "USE_STDBEAN_NAMING");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer.getInstance();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      pipedReader0.markSupported();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(readerBasedJsonParser0);
      jsonParserDelegate0.getCurrentValue();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      jsonParserDelegate0.getCurrentValue();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      numberDeserializers_DoubleDeserializer0._coercedTypeDesc();
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive((DeserializationContext) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.NumberInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "true";
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._coerceNullToken((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, nullifyingDeserializer0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      stdDelegatingDeserializer0._isIntNumber("Uac+");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      // Undeclared exception!
      try { 
        uUIDDeserializer0._badChar("}m?6YUZ_+QsAc_05#'", 2000, (DeserializationContext) null, ';');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.UUIDDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 303, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.STRICT_DUPLICATE_DETECTION;
      ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, false);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
      ObjectMapper objectMapper3 = objectMapper2.enable(serializationFeature0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      Integer integer0 = new Integer(63);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handleUnknownProperty(filteringParserDelegate0, deserializationContext0, integer0, "0!Q6|[K\u0005JAcSe'.v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(false);
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      primitiveArrayDeserializers_DoubleDeser0.isDefaultKeyDeserializer((KeyDeserializer) null);
      primitiveArrayDeserializers_DoubleDeser0._constructEmpty();
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)78;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        numberDeserializers_IntegerDeserializer0._parseInteger((JsonParser) null, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$IntegerDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      MockDateFormat.getTimeInstance();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Converter<Calendar, BeanDeserializer> converter0 = (Converter<Calendar, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      stdDelegatingDeserializer0._isIntNumber("Uac+");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      DeserializerFactory deserializerFactory1 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = null;
      try {
        defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 128);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "INF");
      fromStringDeserializer_Std0._deserializeFromEmptyString();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.primitiveInstance;
      assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>((Converter<Object, Boolean>) null, (JavaType) null, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._byteOverflow(Integer.MAX_VALUE);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      boolean boolean1 = numberDeserializers_FloatDeserializer0._isEmptyOrTextualNull("uY6#KkL*bc[|w");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature5;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Converter<Boolean, Boolean> converter0 = (Converter<Boolean, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      stdDelegatingDeserializer0._byteOverflow(2);
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      // Undeclared exception!
      try { 
        uUIDDeserializer0._deserializeEmbedded((Object) null, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.FromStringDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = new NumberDeserializers.NumberDeserializer();
      Class<Boolean> class0 = Boolean.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 58);
      fromStringDeserializer_Std0._firstHyphenOrUnderscore("T)w#7");
      Class<Short> class1 = Short.class;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T)w#7");
      Short short0 = new Short((short)2599);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class1, short0);
      numberDeserializers_ShortDeserializer0._isIntNumber("T)w#7");
      Class<Double> class2 = Double.class;
      Double double0 = new Double((-1));
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = new NumberDeserializers.DoubleDeserializer(class2, double0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      numberDeserializers_DoubleDeserializer0._coerceNullToken(defaultDeserializationContext0, true);
      numberDeserializers_DoubleDeserializer0._isNaN("T)w#7");
      UntypedObjectDeserializer.Vanilla.instance(false);
      MapDeserializer mapDeserializer0 = null;
      try {
        mapDeserializer0 = new MapDeserializer((MapDeserializer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(3403L);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory1.enable(jsonFactory_Feature0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._coerceNullToken(defaultDeserializationContext_Impl0, true);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
      ObjectReader objectReader0 = objectMapper1.readerForUpdating(numberDeserializers_BigIntegerDeserializer0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>(stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._byteOverflow((-137));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Boolean>(stdDelegatingDeserializer0);
      Converter<Object, Boolean> converter0 = (Converter<Object, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate(converter0, (JavaType) null, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer2._byteOverflow((-615));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, numberDeserializers_DoubleDeserializer0, untypedObjectDeserializer0);
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes((CharacterEscapes) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-48);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
      ObjectMapper objectMapper2 = objectMapper1.copy();
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._deserializeFromEmpty(jsonParserSequence0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 128);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory1.disable(jsonFactory_Feature1);
      jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      nullifyingDeserializer0._parseDate("null", (DeserializationContext) null);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0._coerceEmptyString((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_TimestampDeserializer0._parseDate("o;c2l[e", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      MockDateFormat.getTimeInstance();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_SqlDateDeserializer0._parseDate(")", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 128);
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      jsonFactory1.disable(jsonFactory_Feature1);
      jsonFactory0.setCodec((ObjectCodec) null);
      jsonFactory3.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      primitiveArrayDeserializers_FloatDeser0._coerceNullToken(defaultDeserializationContext_Impl0, false);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 128);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "INF");
      fromStringDeserializer_Std0._deserializeFromEmptyString();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(deserializationContext0, "INF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MockDateFormat.getTimeInstance();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 42, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilter tokenFilter1 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter1, true, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      try { 
        stdDelegatingDeserializer0._coerceIntegral(readerBasedJsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber(",3>^+>H*-@E8e&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Float float0 = new Float((float) 0);
      Float float1 = new Float((-722.2F));
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      boolean boolean0 = nullifyingDeserializer0._shortOverflow((-194));
      StdDelegatingDeserializer<LinkedList<FilterInputStream>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LinkedList<FilterInputStream>>((Converter<?, LinkedList<FilterInputStream>>) null);
      boolean boolean1 = stdDelegatingDeserializer0._isIntNumber("2J4Ifi11KE1^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader();
      Converter<Object, BeanDeserializer> converter0 = (Converter<Object, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0, (JavaType) null, primitiveArrayDeserializers_ShortDeser0);
      Converter<Short, BeanDeserializer> converter1 = (Converter<Short, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BeanDeserializer>(converter1);
      stdDelegatingDeserializer1._isIntNumber("%[./,L-hzgP1jAX90");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      long[] longArray0 = new long[0];
      primitiveArrayDeserializers_LongDeser0._concat(longArray0, longArray0);
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[5];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_FeatureArray0[4] = jsonFormat_Feature4;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      Boolean boolean0 = jsonFormat_Features0.get(jsonFormat_Feature0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, boolean0);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFormat_Feature3, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, true);
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
      ObjectMapper objectMapper3 = objectMapper2.disable(jsonGenerator_FeatureArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2021), pipedReader0, objectMapper3, charsToNameCanonicalizer1);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._deserializeFromArray(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = new JsonNodeDeserializer.ArrayDeserializer();
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      primitiveArrayDeserializers_BooleanDeser0._coerceNullToken(defaultDeserializationContext_Impl0, false);
      Boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._unwrapSingle;
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser1 = new PrimitiveArrayDeserializers.DoubleDeser(primitiveArrayDeserializers_DoubleDeser0, primitiveArrayDeserializers_DoubleDeser0, (Boolean) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonNodeDeserializer_ArrayDeserializer0, true);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      ObjectMapper objectMapper1 = new ObjectMapper((JsonFactory) null);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser(primitiveArrayDeserializers_LongDeser0, primitiveArrayDeserializers_BooleanDeser0, (Boolean) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser1.handleMissingEndArrayForSingle(readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'G';
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      primitiveArrayDeserializers_CharDeser0._coerceNullToken(defaultDeserializationContext0, false);
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '/';
      charArray0[5] = 'W';
      primitiveArrayDeserializers_CharDeser0._concat(charArray0, charArray0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Converter<Boolean, BeanDeserializer> converter0 = (Converter<Boolean, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      stdDelegatingDeserializer0._isIntNumber("not a valid double value (as String to convert)");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer1 = new DateDeserializers.DateDeserializer(dateDeserializers_DateDeserializer0, (DateFormat) null, "N");
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseFloatPrimitive(deserializationContext0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._verifyNullForPrimitiveCoercion(deserializationContext0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Converter<Boolean, BeanDeserializer> converter0 = (Converter<Boolean, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_IntDeser0._verifyNullForPrimitiveCoercion(defaultDeserializationContext0, ":u,;eEo\"5K{]eQW+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer2 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer1, dateFormat0, "ry?SnRlpH");
      dateDeserializers_SqlDateDeserializer2.withDateFormat(dateFormat0, "Missing field (broken JDK (de)serialization?)");
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(2147483647L);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory4 = jsonFactory3.disable(jsonFactory_Feature0);
      jsonFactory4.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory5 = jsonFactory4.setCodec((ObjectCodec) null);
      jsonFactory5.createParser((Reader) pipedReader0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Converter<Integer, Calendar> converter1 = (Converter<Integer, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Calendar>(converter1);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer1._coerceEmptyString(defaultDeserializationContext_Impl0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature5;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "NaN", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[7];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      jsonParser_FeatureArray0[1] = jsonParser_Feature1;
      JsonParser.Feature jsonParser_Feature2 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[2] = jsonParser_Feature2;
      JsonParser.Feature jsonParser_Feature3 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[3] = jsonParser_Feature3;
      JsonParser.Feature jsonParser_Feature4 = JsonParser.Feature.IGNORE_UNDEFINED;
      jsonParser_FeatureArray0[4] = jsonParser_Feature4;
      JsonParser.Feature jsonParser_Feature5 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonParser_FeatureArray0[5] = jsonParser_Feature5;
      JsonParser.Feature jsonParser_Feature6 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      jsonParser_FeatureArray0[6] = jsonParser_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-21));
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte) (-83);
      byteArray1[3] = (byte)69;
      byteArray1[4] = (byte)69;
      byteArray1[5] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 7, byteArrayInputStream0, objectMapper1, byteQuadsCanonicalizer1, byteArray1, 3, (byte) (-99), false);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(uTF8StreamJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer();
      dateDeserializers_SqlDateDeserializer1.withDateFormat(dateFormat0, "com.fasterxml.jackson.core.io.CharacterEscapes");
      Converter<Boolean, Double> converter0 = (Converter<Boolean, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow((-2147483648L));
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory1 = BeanDeserializerFactory.instance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer1 = NumberDeserializers.LongDeserializer.wrapperInstance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = new SimpleAbstractTypeResolver();
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("NaN");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-5);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      boolean boolean0 = false;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, true);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stringDeserializer0._parseDoublePrimitive(filteringParserDelegate0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      String string0 = "not a valid double value (as String to convert)";
      Converter<Boolean, BeanDeserializer> converter0 = (Converter<Boolean, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'J';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeWrappedValue(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      objectMapper0.disableDefaultTyping();
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      MapperFeature mapperFeature1 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
      MapperFeature mapperFeature2 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      MapperFeature mapperFeature3 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
      mapperFeatureArray0[0] = mapperFeature2;
      mapperFeatureArray0[1] = mapperFeature2;
      MapperFeature mapperFeature4 = MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES;
      mapperFeatureArray0[2] = mapperFeature4;
      mapperFeatureArray0[3] = mapperFeature1;
      mapperFeatureArray0[4] = mapperFeature0;
      mapperFeatureArray0[5] = mapperFeature0;
      mapperFeatureArray0[6] = mapperFeature3;
      mapperFeatureArray0[7] = mapperFeature1;
      mapperFeatureArray0[8] = mapperFeature0;
      objectMapper0.enable(mapperFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.CUSTOM;
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive(deserializationContext0, "com.fasterxml.jackson.databind.ser.SerializerFactory");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = stringDeserializer0._nonNullNumber(bigInteger0);
      assertSame(number0, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      NumberDeserializers.NumberDeserializer numberDeserializers_NumberDeserializer0 = NumberDeserializers.NumberDeserializer.instance;
      Converter<Boolean, String> converter0 = (Converter<Boolean, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      int int0 = FromStringDeserializer.Std.STD_URI;
      stdDelegatingDeserializer0._nonNullNumber(3);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(serializedString0);
      ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(defaultPrettyPrinter0);
      MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[0] = mapperFeature0;
      MapperFeature mapperFeature1 = MapperFeature.USE_STATIC_TYPING;
      mapperFeatureArray0[1] = mapperFeature1;
      MapperFeature mapperFeature2 = MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING;
      mapperFeatureArray0[2] = mapperFeature2;
      MapperFeature mapperFeature3 = MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES;
      mapperFeatureArray0[3] = mapperFeature3;
      MapperFeature mapperFeature4 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      mapperFeatureArray0[4] = mapperFeature4;
      MapperFeature mapperFeature5 = MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL;
      mapperFeatureArray0[5] = mapperFeature5;
      MapperFeature mapperFeature6 = MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS;
      mapperFeatureArray0[6] = mapperFeature6;
      MapperFeature mapperFeature7 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      mapperFeatureArray0[7] = mapperFeature7;
      ObjectMapper objectMapper2 = objectMapper1.enable(mapperFeatureArray0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper3 = objectMapper2.setDefaultPropertyInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      String string0 = "2.2250738585072012e-308";
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._parseLongPrimitive(deserializationContext0, "2.2250738585072012e-308");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JsonNodeDeserializer jsonNodeDeserializer0 = new JsonNodeDeserializer();
      Class<Long> class0 = Long.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
      JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature2;
      JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature3;
      JsonGenerator.Feature jsonGenerator_Feature4 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature4;
      JsonGenerator.Feature jsonGenerator_Feature5 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature5;
      JsonGenerator.Feature jsonGenerator_Feature6 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature6;
      ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "*xTk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      MockDateFormat.getTimeInstance();
      Float float0 = new Float((-2516.708F));
      Class<Float> class0 = Float.class;
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer1 = new NumberDeserializers.FloatDeserializer(class0, float0);
      numberDeserializers_FloatDeserializer1._isEmptyOrTextualNull("");
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.getDeserializationContext();
      Class<Byte> class0 = Byte.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(defaultDeserializationContext0, "N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")T");
      Converter<BuilderBasedDeserializer, ChronoUnit> converter0 = (Converter<BuilderBasedDeserializer, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(converter0).convert(any(com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer.class));
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoUnit>(converter0);
      stdDelegatingDeserializer0.convertValue(untypedObjectDeserializer_Vanilla0);
      stdDelegatingDeserializer0._isNaN("com.fasterxml.jackson.databind.node.BinaryNode");
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JavaType javaType0 = TypeFactory.unknownType();
      EnumSetDeserializer enumSetDeserializer0 = null;
      try {
        enumSetDeserializer0 = new EnumSetDeserializer(javaType0, untypedObjectDeserializer_Vanilla0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Type [simple type, class java.lang.Object] not Java Enum type
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.EnumSetDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[5];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_FeatureArray0[4] = jsonFormat_Feature4;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      Boolean boolean0 = jsonFormat_Features0.get(jsonFormat_Feature0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, boolean0);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      jsonNodeDeserializer_ArrayDeserializer0.supportsUpdate((DeserializationConfig) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      ObjectMapper objectMapper2 = objectMapper1.findAndRegisterModules();
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
      ObjectMapper objectMapper3 = objectMapper2.setSerializationInclusion(jsonInclude_Include0);
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser0._parseShortPrimitive((JsonParser) null, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer2 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer1, dateFormat0, "ry?SnRlpH");
      dateDeserializers_SqlDateDeserializer2.withDateFormat(dateFormat0, "Missing field (broken JDK (de)serialization?)");
      Converter<LongNode, Double> converter0 = (Converter<LongNode, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(2147483647L);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      SimpleAbstractTypeResolver simpleAbstractTypeResolver1 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLong((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleKeyDeserializers simpleKeyDeserializers0 = new SimpleKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>((Converter<?, BeanDeserializer>) null);
      stdDelegatingDeserializer0._isIntNumber("<?,");
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig1);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      BeanDeserializerFactory beanDeserializerFactory2 = BeanDeserializerFactory.instance;
      beanDeserializerFactory1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      SimpleKeyDeserializers simpleKeyDeserializers1 = new SimpleKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(simpleKeyDeserializers1);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl1, "] -- unresolved forward-reference?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Converter<String, BeanDeserializer> converter0 = (Converter<String, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      stdDelegatingDeserializer0.resolve(defaultDeserializationContext0);
      DeserializerFactoryConfig deserializerFactoryConfig1 = new DeserializerFactoryConfig();
      SimpleValueInstantiators simpleValueInstantiators1 = new SimpleValueInstantiators();
      stdDelegatingDeserializer0._isIntNumber("not a valid double value (as String to convert)");
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      longArray0[1] = 1535L;
      primitiveArrayDeserializers_LongDeser0._concat(longArray0, longArray0);
      ByteBufferDeserializer byteBufferDeserializer0 = new ByteBufferDeserializer();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_LongDeser0, (Boolean) null);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser2 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser1, primitiveArrayDeserializers_FloatDeser1, (Boolean) null);
      Class<Boolean> class0 = Boolean.class;
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, (Boolean) null);
      assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 303, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParserSequence0, tokenFilter0, true, false);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, true, true);
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanFromInt(jsonParserSequence0, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateDeserializers_TimestampDeserializer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Converter<Object, Integer> converter0 = (Converter<Object, Integer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>(converter0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultDeserializationContext defaultDeserializationContext0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      BufferRecycler bufferRecycler1 = jsonFactory2._getBufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, false);
      PipedReader pipedReader0 = new PipedReader(571);
      ObjectMapper objectMapper1 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext3 = new IOContext(bufferRecycler1, pipedReader0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext3, 3, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanFromInt(readerBasedJsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[5];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_FeatureArray0[4] = jsonFormat_Feature4;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      Boolean boolean0 = jsonFormat_Features0.get(jsonFormat_Feature0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, boolean0);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      Boolean boolean1 = jsonNodeDeserializer_ArrayDeserializer0.supportsUpdate((DeserializationConfig) null);
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_FloatDeser0, boolean1);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      PipedReader pipedReader0 = new PipedReader();
      jsonFactory3.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext_Impl0, "USE_STD_BEAN_NAMING");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      dateDeserializers_SqlDateDeserializer1.withDateFormat(dateFormat0, "com.fasterxml.jackson.core.io.CharacterEscapes");
      Converter<Boolean, Double> converter0 = (Converter<Boolean, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow((-2147483648L));
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLong((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser(primitiveArrayDeserializers_LongDeser0, primitiveArrayDeserializers_LongDeser0, (Boolean) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      File file0 = MockFile.createTempFile("0vf[", "'bNZG");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory2.createGenerator(file0, jsonEncoding0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature1, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 5;
      byteArrayBuilder0.append(5);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0._parseString(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = NumberDeserializers.BooleanDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_BooleanDeserializer0._hasTextualNull("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      UntypedObjectDeserializer untypedObjectDeserializer1 = new UntypedObjectDeserializer(untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0, untypedObjectDeserializer0);
      Converter<String, String> converter0 = (Converter<String, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      Converter<Object, String> converter1 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer1 = stdDelegatingDeserializer0.withDelegate(converter1, (JavaType) null, untypedObjectDeserializer0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer2 = new StdDelegatingDeserializer<String>(stdDelegatingDeserializer1);
      stdDelegatingDeserializer2._hasTextualNull("q^");
      Converter<Long, BuilderBasedDeserializer> converter2 = (Converter<Long, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter2);
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(stdDelegatingDeserializer3);
      Class<Long> class0 = Long.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, stdDelegatingDeserializer1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsArrayTypeDeserializer asArrayTypeDeserializer0 = new AsArrayTypeDeserializer((JavaType) null, classNameIdResolver0, "", false, (JavaType) null);
      MapEntryDeserializer mapEntryDeserializer0 = null;
      try {
        mapEntryDeserializer0 = new MapEntryDeserializer((JavaType) null, stdKeyDeserializer_DelegatingKD0, untypedObjectDeserializer0, asArrayTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.MapEntryDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        uUIDDeserializer0._deserialize("E`q", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser1 = new PrimitiveArrayDeserializers.LongDeser(primitiveArrayDeserializers_LongDeser0, primitiveArrayDeserializers_LongDeser0, (Boolean) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonFactory_Feature0);
      JsonFactory.Feature jsonFactory_Feature1 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      File file0 = MockFile.createTempFile("0vf[", "'bNZG");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      jsonFactory2.createGenerator(file0, jsonEncoding0);
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature1, false);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      int int0 = 13;
      byteArrayBuilder0.append(13);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ObjectMapper objectMapper2 = objectMapper1.setSubtypeResolver(stdSubtypeResolver0);
      ObjectMapper objectMapper3 = objectMapper2.copy();
      DeserializationContext deserializationContext0 = objectMapper3.getDeserializationContext();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0.handleMissingEndArrayForSingle(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Class<Long> class0 = Long.class;
      Long.getLong("U2");
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = new NumberDeserializers.LongDeserializer(class0, (Long) null);
      boolean boolean0 = numberDeserializers_LongDeserializer0.isDefaultDeserializer(primitiveArrayDeserializers_BooleanDeser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = StringDeserializer.instance;
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Byte> class0 = Byte.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl1 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      deserializationContext0.checkUnresolvedObjectId();
      DefaultDeserializationContext defaultDeserializationContext1 = defaultDeserializationContext0.with(beanDeserializerFactory0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<Object, String>) null, (JavaType) null, nullifyingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeFromEmpty((JsonParser) null, defaultDeserializationContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.std;
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>((Converter<?, Short>) null);
      Converter<Object, Short> converter0 = (Converter<Object, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Converter<Object, ChronoUnit> converter1 = (Converter<Object, ChronoUnit>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType(16384);
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<ChronoUnit>(converter1, placeholderForType0, untypedObjectDeserializer_Vanilla0);
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer2 = stdDelegatingDeserializer1.withDelegate((Converter<Object, ChronoUnit>) null, placeholderForType0, stdDelegatingDeserializer0);
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer3 = new StdDelegatingDeserializer<ChronoUnit>(stdDelegatingDeserializer2);
      stdDelegatingDeserializer0.isDefaultDeserializer(stdDelegatingDeserializer3);
      stdDelegatingDeserializer0.withDelegate(converter0, (JavaType) null, numberDeserializers_ByteDeserializer0);
      Converter<Object, String> converter2 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer4 = new StdDelegatingDeserializer<String>(converter2, placeholderForType0, stdDelegatingDeserializer2);
      stdDelegatingDeserializer4._intOverflow(16384);
      Class<Object> class0 = Object.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-1328));
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      int int0 = 3363;
      int int1 = 4471;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyStringForScalarCoercion(defaultDeserializationContext0, "%s (for POJO property '%s')");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberDeserializers.BigIntegerDeserializer numberDeserializers_BigIntegerDeserializer0 = NumberDeserializers.BigIntegerDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      numberDeserializers_BigIntegerDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext0);
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      String string0 = "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser";
      // Undeclared exception!
      try { 
        stringDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$CharDeser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, dateDeserializers_TimestampDeserializer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = objectMapper0.setFilterProvider((FilterProvider) null);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      ObjectMapper objectMapper2 = objectMapper1.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "JSON");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2210));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-277), (Reader) null, objectMapper2, charsToNameCanonicalizer1);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        dateDeserializers_TimestampDeserializer0.deserialize((JsonParser) readerBasedJsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      DateDeserializers.TimestampDeserializer dateDeserializers_TimestampDeserializer0 = new DateDeserializers.TimestampDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>((Converter<?, Double>) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findContentNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, dateDeserializers_TimestampDeserializer0);
      assertNotNull(nullValueProvider0);
      
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(9223372036854775807L);
      assertTrue(boolean0);
      
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser0 = new PrimitiveArrayDeserializers.ByteDeser();
      Boolean boolean1 = Boolean.TRUE;
      PrimitiveArrayDeserializers.ByteDeser primitiveArrayDeserializers_ByteDeser1 = new PrimitiveArrayDeserializers.ByteDeser(primitiveArrayDeserializers_ByteDeser0, numberDeserializers_ByteDeserializer0, boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      Locale locale0 = Locale.CANADA;
      DateFormat dateFormat0 = MockDateFormat.getDateInstance(0, locale0);
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer2 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer1, dateFormat0, "F:");
      dateDeserializers_SqlDateDeserializer0.withDateFormat(dateFormat0, "null");
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>((Converter<?, Double>) null);
      stdDelegatingDeserializer0._intOverflow(0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      PipedReader pipedReader0 = new PipedReader();
      JsonFactory jsonFactory0 = new JsonFactory();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory1 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      beanDeserializerFactory1.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory1);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer1 = new DateDeserializers.SqlDateDeserializer(dateDeserializers_SqlDateDeserializer0, dateFormat0, "");
      dateDeserializers_SqlDateDeserializer1.withDateFormat(dateFormat0, "com.fasterxml.jackson.core.io.CharacterEscapes");
      Converter<Boolean, Double> converter0 = (Converter<Boolean, Double>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Double> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Double>(converter0);
      stdDelegatingDeserializer0._intOverflow(0L);
      NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = NumberDeserializers.ByteDeserializer.wrapperInstance;
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      // Undeclared exception!
      try { 
        numberDeserializers_LongDeserializer0._parseLong((JsonParser) null, defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.NumberDeserializers$LongDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFormat.Feature[] jsonFormat_FeatureArray0 = new JsonFormat.Feature[5];
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SORTED_MAP_ENTRIES;
      jsonFormat_FeatureArray0[0] = jsonFormat_Feature0;
      JsonFormat.Feature jsonFormat_Feature1 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      jsonFormat_FeatureArray0[1] = jsonFormat_Feature1;
      JsonFormat.Feature jsonFormat_Feature2 = JsonFormat.Feature.WRITE_DATES_WITH_ZONE_ID;
      jsonFormat_FeatureArray0[2] = jsonFormat_Feature2;
      JsonFormat.Feature jsonFormat_Feature3 = JsonFormat.Feature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
      jsonFormat_FeatureArray0[3] = jsonFormat_Feature3;
      JsonFormat.Feature jsonFormat_Feature4 = JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY;
      jsonFormat_FeatureArray0[4] = jsonFormat_Feature4;
      JsonFormat.Features jsonFormat_Features0 = JsonFormat.Features.construct(jsonFormat_FeatureArray0, jsonFormat_FeatureArray0);
      Boolean boolean0 = jsonFormat_Features0.get(jsonFormat_Feature0);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser1 = new PrimitiveArrayDeserializers.FloatDeser(primitiveArrayDeserializers_FloatDeser0, primitiveArrayDeserializers_FloatDeser0, boolean0);
      primitiveArrayDeserializers_FloatDeser1._constructEmpty();
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      JsonNodeDeserializer.ArrayDeserializer jsonNodeDeserializer_ArrayDeserializer0 = JsonNodeDeserializer.ArrayDeserializer._instance;
      Boolean boolean1 = jsonNodeDeserializer_ArrayDeserializer0.supportsUpdate((DeserializationConfig) null);
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser1 = new PrimitiveArrayDeserializers.ShortDeser(primitiveArrayDeserializers_ShortDeser0, primitiveArrayDeserializers_FloatDeser0, boolean1);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonParser_Feature0);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      PipedReader pipedReader0 = new PipedReader();
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) pipedReader0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with((DeserializerFactory) null);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_ShortDeser1.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      primitiveArrayDeserializers_ShortDeser0._constructEmpty();
      PrimitiveArrayDeserializers.LongDeser primitiveArrayDeserializers_LongDeser0 = new PrimitiveArrayDeserializers.LongDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Byte byte0 = new Byte((byte)81);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byte0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Current token (%s) not numeric, can not use numeric value accessors");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
      ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '/';
      charArray0[2] = ')';
      charArray0[3] = 'O';
      charArray0[4] = 'o';
      charArray0[5] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectMapper1, charsToNameCanonicalizer1, charArray0, 0, (byte)81, true);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(0, 3194);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_LongDeser0.handleSingleElementUnwrapped(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>((Converter<?, BuilderBasedDeserializer>) null);
      DateDeserializers.SqlDateDeserializer dateDeserializers_SqlDateDeserializer0 = new DateDeserializers.SqlDateDeserializer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      ObjectMapper objectMapper0 = new ObjectMapper();
      Locale locale0 = Locale.JAPANESE;
      ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      // Undeclared exception!
      try { 
        dateDeserializers_SqlDateDeserializer0._parseLongPrimitive(jsonParser0, deserializationContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Float float0 = new Float(0.0);
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
      numberDeserializers_FloatDeserializer0._isEmptyOrTextualNull("o2QD@>[q`z");
      PrimitiveArrayDeserializers.CharDeser primitiveArrayDeserializers_CharDeser0 = new PrimitiveArrayDeserializers.CharDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte)9;
      jsonFactory0.createParser(byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withAdditionalDeserializers((Deserializers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.BasicDeserializerFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 9);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Class<Boolean> class1 = Boolean.class;
      FromStringDeserializer.Std fromStringDeserializer_Std1 = new FromStringDeserializer.Std(class1, 4);
      // Undeclared exception!
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(deserializationContext0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Class<BeanDeserializer> class0 = BeanDeserializer.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 48);
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("");
      primitiveArrayDeserializers_FloatDeser0._constructEmpty();
      nullifyingDeserializer0._shortOverflow(1);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType javaType0 = typeFactory0.constructType((Type) class0, (TypeBindings) null);
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<Object, Boolean>) null, javaType0, nullifyingDeserializer0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coerceEmptyString((DeserializationContext) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer._instance;
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      JavaType javaType0 = TypeFactory.unknownType();
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0, javaType0, jsonNodeDeserializer_ObjectDeserializer0);
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDoublePrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = new JsonNodeDeserializer.ObjectDeserializer();
      Converter<Double, Float> converter0 = (Converter<Double, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Float>(stdDelegatingDeserializer0);
      Converter<Object, Float> converter1 = null;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      placeholderForType0.getInterfaces();
      // Undeclared exception!
      try { 
        placeholderForType0.withContentValueHandler((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("0");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, (-1466), false);
      readerBasedJsonParser0.nextBooleanValue();
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer((EnumDeserializer) null, (Boolean) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 303, pipedReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) readerBasedJsonParser0, (JsonParser) readerBasedJsonParser0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("2.2250738585072012e-308");
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = '/';
      charArray0[2] = '#';
      jsonFactory2.createParser(charArray0, 1, 1);
      StdDelegatingDeserializer<ChronoUnit> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoUnit>((Converter<?, ChronoUnit>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeWrappedValue(jsonParserSequence0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Converter<String, BeanDeserializer> converter0 = (Converter<String, BeanDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<BeanDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BeanDeserializer>(converter0);
      JsonParser jsonParser0 = null;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      stdDelegatingDeserializer0.getEmptyValue((DeserializationContext) defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._deserializeWrappedValue((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = NumberDeserializers.BigDecimalDeserializer.instance;
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.primitiveInstance;
      PrimitiveArrayDeserializers.IntDeser primitiveArrayDeserializers_IntDeser0 = new PrimitiveArrayDeserializers.IntDeser();
      boolean boolean0 = false;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Short short0 = new Short((short)1621);
      IOContext iOContext0 = new IOContext(bufferRecycler0, short0, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
      readerBasedJsonParser0.disable(jsonParser_Feature0);
      JsonFactory jsonFactory0 = new JsonFactory();
      // Undeclared exception!
      try { 
        jsonFactory0.createParser((byte[]) null, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }
}
