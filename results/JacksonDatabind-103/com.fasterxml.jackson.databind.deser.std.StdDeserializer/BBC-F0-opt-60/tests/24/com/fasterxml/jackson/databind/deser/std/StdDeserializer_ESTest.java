/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 03:06:05 GMT 2021
 */

package com.fasterxml.jackson.databind.deser.std;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.BeanProperty;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BuilderBasedDeserializer;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.NullValueProvider;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.std.DateDeserializers;
import com.fasterxml.jackson.databind.deser.std.FactoryBasedEnumDeserializer;
import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;
import com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer;
import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer;
import com.fasterxml.jackson.databind.deser.std.NumberDeserializers;
import com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers;
import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer;
import com.fasterxml.jackson.databind.deser.std.StringDeserializer;
import com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.TypeResolutionContext;
import com.fasterxml.jackson.databind.introspect.VirtualAnnotatedMember;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.SubtypeResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.AccessPattern;
import com.fasterxml.jackson.databind.util.Converter;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDeserializer_ESTest extends StdDeserializer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Converter<Short, CollectionLikeType> converter0 = (Converter<Short, CollectionLikeType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<CollectionLikeType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CollectionLikeType>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-2147483648L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Converter<Double, String> converter0 = (Converter<Double, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      Converter<Object, Class<Object>> converter1 = (Converter<Object, Class<Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Class<Object>> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<Class<Object>>(converter1, (JavaType) null, stdDelegatingDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer1._shortOverflow((-32768));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>((Converter<?, Calendar>) null);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-128));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("0h66I293S|%D3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Converter<Integer, String> converter0 = (Converter<Integer, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("39q+s$Z[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(false);
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0, (JavaType) null, untypedObjectDeserializer_Vanilla0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("%{njJFl{4V8W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Converter<ObjectIdResolver, Boolean> converter0 = (Converter<ObjectIdResolver, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "%F,%eGJ<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 56, 56);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      primitiveArrayDeserializers_BooleanDeser0._verifyNumberForScalarCoercion(defaultDeserializationContext0, jsonParser0);
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      StdKeyDeserializer.DelegatingKD stdKeyDeserializer_DelegatingKD0 = new StdKeyDeserializer.DelegatingKD(class0, dateDeserializers_DateDeserializer0);
      boolean boolean0 = dateDeserializers_DateDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_DelegatingKD0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Converter<Object, Short> converter0 = (Converter<Object, Short>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultDeserializer(stdDelegatingDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Class<?> class0 = numberDeserializers_DoubleDeserializer0.handledType();
      assertFalse(class0.isInterface());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      Class<?> class0 = numberDeserializers_DoubleDeserializer0.handledType();
      assertEquals("class java.lang.Double", class0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Converter<SettableBeanProperty, Boolean> converter0 = (Converter<SettableBeanProperty, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      Class<Calendar> class0 = Calendar.class;
      JsonFormat.Value jsonFormat_Value0 = stdDelegatingDeserializer0.findFormatOverrides(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0);
      assertNull(jsonFormat_Value0.timeZoneAsString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<ObjectIdGenerators.IntSequenceGenerator, LongNode> converter0 = (Converter<ObjectIdGenerators.IntSequenceGenerator, LongNode>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LongNode> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LongNode>(converter0);
      Converter<Object, BuilderBasedDeserializer> converter1 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter1, javaType0, stdDelegatingDeserializer0);
      Class<Byte> class0 = Byte.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
      Boolean boolean0 = stdDelegatingDeserializer1.findFormatFeature(defaultDeserializationContext_Impl0, beanProperty_Bogus0, class0, jsonFormat_Feature0);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Converter<Object, ObjectMapper.DefaultTyping> converter0 = (Converter<Object, ObjectMapper.DefaultTyping>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectMapper.DefaultTyping> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectMapper.DefaultTyping>(converter0);
      stdDelegatingDeserializer0.findContentNullStyle((DeserializationContext) null, (BeanProperty) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0.findContentNullProvider((DeserializationContext) null, (BeanProperty) null, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Converter<TypeIdResolver, CreatorProperty> converter0 = (Converter<TypeIdResolver, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CreatorProperty>(converter0);
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer1.findContentNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, stdDelegatingDeserializer0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      long long0 = stdDelegatingDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "6");
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Converter<Boolean, SettableBeanProperty> converter0 = (Converter<Boolean, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int int0 = stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Converter<Date, String> converter0 = (Converter<Date, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      int int0 = stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "6");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      float float0 = primitiveArrayDeserializers_DoubleDeser0._parseFloatPrimitive((DeserializationContext) null, "2.2250738585072012e-308");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      double double0 = dateDeserializers_DateDeserializer0._parseDoublePrimitive((DeserializationContext) null, "0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Converter<Short, CollectionLikeType> converter0 = (Converter<Short, CollectionLikeType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<CollectionLikeType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CollectionLikeType>(converter0);
      BigDecimal bigDecimal0 = new BigDecimal((-339));
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigDecimal0);
      assertSame(number0, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Converter<MinimalClassNameIdResolver, Calendar> converter0 = (Converter<MinimalClassNameIdResolver, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigInteger0);
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Converter<Module, HashMap<Double, Integer>> converter0 = (Converter<Module, HashMap<Double, Integer>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<HashMap<Double, Integer>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<HashMap<Double, Integer>>(converter0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Number number0 = stdDelegatingDeserializer0._nonNullNumber(bigDecimal0);
      assertSame(bigDecimal0, number0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer._instance;
      Double double0 = new Double(0.0);
      boolean boolean0 = StdDeserializer._neitherNull(double0, jsonNodeDeserializer_ObjectDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = StdDeserializer._neitherNull((Object) null, dateDeserializers_CalendarDeserializer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, (JavaType) null);
      boolean boolean0 = untypedObjectDeserializer0._isPosInf("\bX0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("JSON");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Converter<Object, ObjectMapper.DefaultTyping> converter0 = (Converter<Object, ObjectMapper.DefaultTyping>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectMapper.DefaultTyping> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectMapper.DefaultTyping>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isNaN("f ]<R<XW'jkq&+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Converter<Class<Object>, Float> converter0 = (Converter<Class<Object>, Float>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Float> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Float>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isEmptyOrTextualNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_LongDeserializer0._isEmptyOrTextualNull("BzQnat;gW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      Converter<Object, NamedType> converter0 = (Converter<Object, NamedType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      StdDelegatingDeserializer<NamedType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<NamedType>(converter0, javaType0, jsonNodeDeserializer_ObjectDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._hasTextualNull("null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        StdDeserializer.parseDouble("com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDeserializer.parseDouble((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StdDelegatingDeserializer<Integer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Integer>((Converter<?, Integer>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.handledType();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      try { 
        dateDeserializers_DateDeserializer0.handleUnknownProperty(jsonParser0, defaultDeserializationContext0, (Object) null, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized field \"JSON\" (class java.util.Date), not marked as ignorable
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 107] (through reference chain: java.util.Date[\"JSON\"])
         //
         verifyException("com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) '^', (int) '^');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      try { 
        dateDeserializers_DateDeserializer0.handleMissingEndArrayForSingle(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected token (null), expected END_ARRAY: Attempted to unwrap 'java.util.Date' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.findFormatOverrides((DeserializationContext) null, (BeanProperty) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>((Converter<?, Boolean>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PropertyName propertyName0 = new PropertyName("[S", "com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer");
      Class<TypeIdResolver> class0 = TypeIdResolver.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      JavaType[] javaTypeArray0 = new JavaType[0];
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaTypeArray0);
      TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
      VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class0, "com.fasterxml.jackson.databind.ser.impl.IndexedStringListSerializer", simpleType0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, simpleType0, propertyName0, virtualAnnotatedMember0, propertyMetadata0);
      Class<Byte> class1 = Byte.class;
      JsonFormat.Feature jsonFormat_Feature0 = JsonFormat.Feature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findFormatFeature(defaultDeserializationContext_Impl0, beanProperty_Std0, class1, jsonFormat_Feature0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.BeanProperty$Std", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0.findDeserializer((DeserializationContext) null, (JavaType) null, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, (JavaType) null, (BeanProperty) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null JavaType passed
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = UntypedObjectDeserializer.Vanilla.instance(true);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.findConvertingContentDeserializer(defaultDeserializationContext_Impl0, (BeanProperty) null, untypedObjectDeserializer_Vanilla0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedReader pipedReader0 = new PipedReader();
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver((JavaType) null, typeFactory0);
      AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, classNameIdResolver0, "com.fasterxml.jackson.databind.DatabindContext", true, (JavaType) null);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.deserializeWithType(readerBasedJsonParser0, defaultDeserializationContext_Impl0, asPropertyTypeDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyNumberForScalarCoercion(defaultDeserializationContext_Impl0, jsonParser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0._verifyNullForScalarCoercion(defaultDeserializationContext_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._verifyNullForPrimitiveCoercion((DeserializationContext) null, "FmQy\"._ PRYfY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyNullForPrimitive((DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[6];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 73, 73);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Stack<PropertyName> stack0 = new Stack<PropertyName>();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stack0, true);
      PipedReader pipedReader0 = new PipedReader(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
      try { 
        dateDeserializers_DateDeserializer0._verifyEndArrayForSingle(readerBasedJsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext0, 47, dataInputStream0, objectMapper0, byteQuadsCanonicalizer0, 1761);
      try { 
        dateDeserializers_DateDeserializer0._verifyEndArrayForSingle(uTF8DataInputJsonParser0, deserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u06E1' (code 1761 / 0x6e1)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._reportFailedNullCoerce((DeserializationContext) null, false, objectMapper_DefaultTyping0, "OverdLow: numeric value (%+) out o5 range ofGint (%d -%d)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 114, 114);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      try { 
        dateDeserializers_DateDeserializer0._parseString(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.String`
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UntypedObjectDeserializer.Vanilla untypedObjectDeserializer_Vanilla0 = new UntypedObjectDeserializer.Vanilla(false);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      // Undeclared exception!
      try { 
        untypedObjectDeserializer_Vanilla0._parseShortPrimitive(jsonParser0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      try { 
        dateDeserializers_DateDeserializer0._parseLongPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `java.util.Date` from String \"JSON\": not a valid long value
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = new JsonNodeDeserializer.ObjectDeserializer();
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._parseLongPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.node.ObjectNode`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseIntPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `boolean[]` from String \"JSON\": not a valid int value
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseIntPrimitive((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 56, 56);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.TYPE;
      Class<Module> class1 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) arrayType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0, referenceType0, primitiveArrayDeserializers_BooleanDeser0);
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `double`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseFloatPrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      try { 
        primitiveArrayDeserializers_DoubleDeser0._parseFloatPrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `double[]` from String \"JSON\": not a valid float value
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, CreatorProperty> converter0 = (Converter<Object, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-451953306));
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CreatorProperty>(converter0, placeholderForType0, primitiveArrayDeserializers_BooleanDeser0);
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive((DeserializationContext) null, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'x', (int) 'x');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Class<CollectionLikeType> class0 = CollectionLikeType.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-130));
      try { 
        fromStringDeserializer_Std0._parseDoublePrimitive(defaultDeserializationContext0, "JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot deserialize value of type `com.fasterxml.jackson.databind.type.CollectionLikeType` from String \"JSON\": not a valid double value (as String to convert)
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      try { 
        dateDeserializers_DateDeserializer0._parseDateFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.util.Date`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseDate(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `boolean[]`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'p', (int) 'p');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `com.fasterxml.jackson.databind.node.ObjectNode`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<MinimalClassNameIdResolver, Calendar> converter0 = (Converter<MinimalClassNameIdResolver, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      try { 
        stdDelegatingDeserializer0._parseBooleanPrimitive(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Object`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseBooleanFromInt((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._isIntNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Short short0 = new Short((short) (-3382));
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._isEmptyOrTextualNull((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdDelegatingDeserializer<Short> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Short>((Converter<?, Short>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._failDoubleToIntCoercion((JsonParser) null, defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      try { 
        numberDeserializers_ShortDeserializer0._deserializeWrappedValue(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Short`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      try { 
        dateDeserializers_DateDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.util.Date`
         //  at [Source: (char[])\"\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'x', (int) 'x');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      try { 
        numberDeserializers_DoubleDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input when binding data into `java.lang.Double`
         //  at [Source: (char[])\"\u0000\u0000\u0000\u0000\u0000\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._coercedTypeDesc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._coerceTextualNull((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._coerceIntegral((JsonParser) null, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      try { 
        dateDeserializers_DateDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      primitiveArrayDeserializers_BooleanDeser0._verifyNullForPrimitiveCoercion(defaultDeserializationContext0, "Failed to parse JSON String as XML: ");
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, (JsonParser) null, injectableValues_Std0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      Object object0 = stdDelegatingDeserializer0._coerceEmptyString(defaultDeserializationContext0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      JsonParser jsonParser0 = jsonFactory0.createParser((char[]) null, 114, 114);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseString(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      Converter<Object, SettableBeanProperty> converter0 = (Converter<Object, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0, (JavaType) null, primitiveArrayDeserializers_DoubleDeser0);
      Class<?> class0 = stdDelegatingDeserializer0.handledType();
      assertEquals(1041, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Converter<Calendar, JavaType> converter0 = (Converter<Calendar, JavaType>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<JavaType> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<JavaType>(converter0);
      JavaType javaType0 = stdDelegatingDeserializer0.getValueType();
      assertNull(javaType0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      Number number0 = numberDeserializers_DoubleDeserializer0._nonNullNumber((Number) null);
      assertNotNull(number0);
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StdDelegatingDeserializer<ObjectMapper.DefaultTyping> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectMapper.DefaultTyping>((Converter<?, ObjectMapper.DefaultTyping>) null);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(9223372036854775807L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Converter<Long, ObjectMapper.DefaultTyping> converter0 = (Converter<Long, ObjectMapper.DefaultTyping>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectMapper.DefaultTyping> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectMapper.DefaultTyping>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow(2147483647L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Converter<ObjectIdGenerators.IntSequenceGenerator, ObjectMapper.DefaultTyping> converter0 = (Converter<ObjectIdGenerators.IntSequenceGenerator, ObjectMapper.DefaultTyping>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ObjectMapper.DefaultTyping> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ObjectMapper.DefaultTyping>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._intOverflow((-9223372036854775808L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(99);
      StdDelegatingDeserializer<Class<Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<Object>>((Converter<Object, Class<Object>>) null, placeholderForType0, dateDeserializers_DateDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(56319);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      Converter<Object, Class<Object>> converter0 = (Converter<Object, Class<Object>>) mock(Converter.class, new ViolatedAssumptionAnswer());
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Boolean> class0 = Boolean.class;
      ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
      StdDelegatingDeserializer<Class<Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<Object>>(converter0, arrayType0, dateDeserializers_DateDeserializer0);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow(32767);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StdDelegatingDeserializer<Class<Object>> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Class<Object>>((Converter<?, Class<Object>>) null);
      boolean boolean0 = stdDelegatingDeserializer0._shortOverflow((-304357030));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>((Converter<?, Calendar>) null);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow(3594);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      boolean boolean0 = dateDeserializers_CalendarDeserializer0._byteOverflow(255);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>((Converter<?, Calendar>) null);
      boolean boolean0 = stdDelegatingDeserializer0._byteOverflow((-2715));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._verifyEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.handleUnknownProperty(jsonParser0, defaultDeserializationContext_Impl0, (Object) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      LongNode longNode0 = new LongNode(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, true);
      PipedReader pipedReader0 = new PipedReader(2);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(byteArrayInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, pipedReader0, objectReader0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        nullifyingDeserializer0.handleUnknownProperty(readerBasedJsonParser0, (DeserializationContext) null, jsonFactory0, "-oOq77Rw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<String, MinimalClassNameIdResolver> converter0 = (Converter<String, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0);
      PropertyName propertyName0 = PropertyName.USE_DEFAULT;
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<HashMap> class0 = HashMap.class;
      Class<BeanDeserializer> class1 = BeanDeserializer.class;
      MapType mapType0 = typeFactory0.constructMapType(class0, class1, class0);
      PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;
      BeanProperty.Std beanProperty_Std0 = new BeanProperty.Std(propertyName0, mapType0, propertyName0, (AnnotatedMember) null, propertyMetadata0);
      Converter<MinimalClassNameIdResolver, CreatorProperty> converter1 = (Converter<MinimalClassNameIdResolver, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<CreatorProperty>(converter1);
      Nulls nulls0 = Nulls.SKIP;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, beanProperty_Std0, nulls0, stdDelegatingDeserializer1);
      assertEquals(AccessPattern.ALWAYS_NULL, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, stdDelegatingDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      Converter<ObjectMapper.DefaultTypeResolverBuilder, MinimalClassNameIdResolver> converter0 = (Converter<ObjectMapper.DefaultTypeResolverBuilder, MinimalClassNameIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>(converter0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Nulls nulls0 = Nulls.AS_EMPTY;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, (JsonDeserializer<?>) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Nulls nulls0 = Nulls.AS_EMPTY;
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider((DeserializationContext) null, (BeanProperty) null, nulls0, numberDeserializers_DoubleDeserializer0);
      assertNotNull(nullValueProvider0);
      assertEquals(AccessPattern.CONSTANT, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<?, MinimalClassNameIdResolver>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.primitiveInstance;
      Nulls nulls0 = Nulls.FAIL;
      NullValueProvider nullValueProvider0 = stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, beanProperty_Bogus0, nulls0, numberDeserializers_ShortDeserializer0);
      assertEquals(AccessPattern.DYNAMIC, nullValueProvider0.getNullAccessPattern());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PropertyName> class0 = PropertyName.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer((JavaType) null, simpleType0);
      ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
      FactoryBasedEnumDeserializer factoryBasedEnumDeserializer0 = new FactoryBasedEnumDeserializer(class0, (AnnotatedMethod) null, simpleType0, valueInstantiator_Base0, (SettableBeanProperty[]) null);
      StdDelegatingDeserializer<MinimalClassNameIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<MinimalClassNameIdResolver>((Converter<Object, MinimalClassNameIdResolver>) null, (JavaType) null, factoryBasedEnumDeserializer0);
      Nulls nulls0 = Nulls.FAIL;
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._findNullProvider(defaultDeserializationContext_Impl0, (BeanProperty) null, nulls0, untypedObjectDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      NullValueProvider nullValueProvider0 = dateDeserializers_DateDeserializer0.findValueNullProvider((DeserializationContext) null, (SettableBeanProperty) null, (PropertyMetadata) null);
      assertNull(nullValueProvider0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      Class<BuilderBasedDeserializer> class0 = BuilderBasedDeserializer.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayList<PropertyName> arrayList0 = new ArrayList<PropertyName>();
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(arrayList0);
      assertNotNull(objectReader0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("+O>lq\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("-cAINF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Converter<Date, String> converter0 = (Converter<Date, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isIntNumber("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PrimitiveArrayDeserializers.ShortDeser primitiveArrayDeserializers_ShortDeser0 = new PrimitiveArrayDeserializers.ShortDeser();
      String string0 = primitiveArrayDeserializers_ShortDeser0._coercedTypeDesc();
      assertEquals("as content of type `short[]`", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
      try { 
        numberDeserializers_FloatDeserializer0._reportFailedNullCoerce(defaultDeserializationContext_Impl0, false, objectMapper_DefaultTyping0, "Overflow: numeric value (%s) out of range of int (%d -%d)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce Overflow: numeric value (%s) out of range of int (%d -%d) to Null value for type `float` (disable `DefaultTyping.OBJECT_AND_NON_CONCRETE` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) '^', (int) '^');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer._instance;
      jsonNodeDeserializer_ObjectDeserializer0._verifyStringForScalarCoercion(defaultDeserializationContext0, "JSON");
      assertNotSame(defaultDeserializationContext_Impl0, defaultDeserializationContext0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'd', (int) 'd');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      Converter<Float, ChronoLocalDate> converter0 = (Converter<Float, ChronoLocalDate>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<ChronoLocalDate> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<ChronoLocalDate>(converter0);
      stdDelegatingDeserializer0._verifyNullForScalarCoercion(defaultDeserializationContext0, "w`{s~:WoFy}%|+1D");
      assertNotSame(defaultDeserializationContext0, defaultDeserializationContext_Impl0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<ObjectIdGenerators.IntSequenceGenerator, LongNode> converter0 = (Converter<ObjectIdGenerators.IntSequenceGenerator, LongNode>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<LongNode> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<LongNode>(converter0);
      stdDelegatingDeserializer0._verifyNullForPrimitive(defaultDeserializationContext_Impl0);
      assertEquals(AccessPattern.DYNAMIC, stdDelegatingDeserializer0.getEmptyAccessPattern());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, 56, 56);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, String> converter0 = (Converter<Object, String>) mock(Converter.class, new ViolatedAssumptionAnswer());
      Class<Double> class0 = Double.TYPE;
      Class<Module> class1 = Module.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
      MapType mapType0 = MapType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, (JavaType[]) null, (JavaType) simpleType0, (JavaType) arrayType0);
      ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) mapType0, (JavaType[]) null, (JavaType) mapType0);
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>(converter0, referenceType0, primitiveArrayDeserializers_BooleanDeser0);
      Object object0 = stdDelegatingDeserializer0._coerceEmptyString(defaultDeserializationContext0, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-497), (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Object object0 = dateDeserializers_DateDeserializer0._coerceTextualNull(defaultDeserializationContext0, true);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-497), (Reader) null, objectMapper0, charsToNameCanonicalizer0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, readerBasedJsonParser0, injectableValues_Std0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      Object object0 = dateDeserializers_DateDeserializer0._coerceTextualNull(defaultDeserializationContext0, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._coerceNullToken((DeserializationContext) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.LongDeserializer numberDeserializers_LongDeserializer0 = NumberDeserializers.LongDeserializer.wrapperInstance;
      Object object0 = numberDeserializers_LongDeserializer0._coerceNullToken(defaultDeserializationContext_Impl0, false);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Converter<JavaType, Boolean> converter0 = (Converter<JavaType, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      FloatNode floatNode0 = new FloatNode(1486.55F);
      JsonParser jsonParser0 = objectReader0.treeAsTokens(floatNode0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BigInteger bigInteger0 = (BigInteger)stdDelegatingDeserializer0._coerceIntegral(jsonParser0, defaultDeserializationContext_Impl0);
      assertEquals((short)1486, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_ShortDeserializer0._deserializeWrappedValue(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[5];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'x', (int) 'x');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.wrapperInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_DoubleDeserializer0._deserializeFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      UntypedObjectDeserializer untypedObjectDeserializer0 = new UntypedObjectDeserializer(javaType0, javaType0);
      boolean boolean0 = untypedObjectDeserializer0._isPosInf("Infinity");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Converter<Integer, Boolean> converter0 = (Converter<Integer, Boolean>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Boolean> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Boolean>(converter0);
      boolean boolean0 = stdDelegatingDeserializer0._isNegInf("-INF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      Date date0 = numberDeserializers_FloatDeserializer0._parseDate("", deserializationContext0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._deserializeFromEmpty(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = StdDeserializer.parseDouble("2.2250738585072012e-308");
      assertEquals(2.2250738585072014E-308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.wrapperInstance;
      Date date0 = numberDeserializers_FloatDeserializer0._parseDate("null", (DeserializationContext) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseDate(": class `x%ects ", defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseDateFromArray(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_BooleanDeser0._parseDate(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseDoublePrimitive((DeserializationContext) null, "-cAINF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = dateDeserializers_DateDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "NaN");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "IS@Z,`$v *?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive((DeserializationContext) null, "No current node");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = dateDeserializers_DateDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "INF");
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Converter<Object, TypeIdResolver> converter0 = (Converter<Object, TypeIdResolver>) mock(Converter.class, new ViolatedAssumptionAnswer());
      NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
      StdDelegatingDeserializer<TypeIdResolver> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<TypeIdResolver>(converter0, (JavaType) null, numberDeserializers_IntegerDeserializer0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      double double0 = stdDelegatingDeserializer0._parseDoublePrimitive(defaultDeserializationContext_Impl0, "-Infinity");
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = NumberDeserializers.FloatDeserializer.primitiveInstance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createParser("c~>");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      // Undeclared exception!
      try { 
        numberDeserializers_FloatDeserializer0._parseDoublePrimitive(jsonParserDelegate0, (DeserializationContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      float float0 = jsonNodeDeserializer_ObjectDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-Infinity");
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_DoubleDeser0._parseFloatPrimitive((DeserializationContext) null, "N^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      float float0 = dateDeserializers_DateDeserializer0._parseFloatPrimitive(defaultDeserializationContext_Impl0, "INF");
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseFloatPrimitive((DeserializationContext) null, "I0]Y>v=_9@6-n}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseFloatPrimitive((DeserializationContext) null, "-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      Converter<Object, CreatorProperty> converter0 = (Converter<Object, CreatorProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-451953306));
      StdDelegatingDeserializer<CreatorProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<CreatorProperty>(converter0, placeholderForType0, primitiveArrayDeserializers_BooleanDeser0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseFloatPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'j', (int) 'j');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = new JsonNodeDeserializer.ObjectDeserializer();
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._parseLongPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      PrimitiveArrayDeserializers.FloatDeser primitiveArrayDeserializers_FloatDeser0 = new PrimitiveArrayDeserializers.FloatDeser();
      // Undeclared exception!
      try { 
        primitiveArrayDeserializers_FloatDeser0._parseIntPrimitive((DeserializationContext) null, "Cannot coerce Number (%s) %s (enable `%s.%s` to allow)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.std.StdDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseIntPrimitive(defaultDeserializationContext_Impl0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'p', (int) 'p');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeDeserializer.ObjectDeserializer jsonNodeDeserializer_ObjectDeserializer0 = JsonNodeDeserializer.ObjectDeserializer.getInstance();
      // Undeclared exception!
      try { 
        jsonNodeDeserializer_ObjectDeserializer0._parseBytePrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, (SubtypeResolver) null, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, injectableValues_Std0);
      PrimitiveArrayDeserializers.BooleanDeser primitiveArrayDeserializers_BooleanDeser0 = new PrimitiveArrayDeserializers.BooleanDeser();
      boolean boolean0 = primitiveArrayDeserializers_BooleanDeser0._parseBooleanFromInt(jsonParser0, defaultDeserializationContext0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) 'T', (int) 'T');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Converter<MinimalClassNameIdResolver, Calendar> converter0 = (Converter<MinimalClassNameIdResolver, Calendar>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<Calendar> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<Calendar>(converter0);
      // Undeclared exception!
      try { 
        stdDelegatingDeserializer0._parseBooleanPrimitive(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      boolean boolean0 = numberDeserializers_ShortDeserializer0.isDefaultDeserializer(dateDeserializers_DateDeserializer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StdDelegatingDeserializer<String> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<String>((Converter<?, String>) null);
      Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class0);
      boolean boolean0 = stdDelegatingDeserializer0.isDefaultKeyDeserializer(stdKeyDeserializer_StringKD0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringDeserializer stringDeserializer0 = new StringDeserializer();
      Class<?> class0 = stringDeserializer0.getValueClass();
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = new DateDeserializers.DateDeserializer();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanProperty.Bogus beanProperty_Bogus0 = new BeanProperty.Bogus();
      JavaType javaType0 = beanProperty_Bogus0.getType();
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.findDeserializer(defaultDeserializationContext_Impl0, javaType0, (BeanProperty) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DeserializerCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = NumberDeserializers.ShortDeserializer.wrapperInstance;
      try { 
        numberDeserializers_ShortDeserializer0._failDoubleToIntCoercion(jsonParser0, defaultDeserializationContext_Impl0, "q2\"=c=");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce a floating-point value ('null') into q2\"=c= (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[1];
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0, (int) '^', (int) '^');
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0.handleMissingEndArrayForSingle(jsonParser0, defaultDeserializationContext_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PrimitiveArrayDeserializers.DoubleDeser primitiveArrayDeserializers_DoubleDeser0 = new PrimitiveArrayDeserializers.DoubleDeser();
      float float0 = primitiveArrayDeserializers_DoubleDeser0._parseFloatPrimitive((DeserializationContext) null, "NaN");
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Converter<Boolean, SettableBeanProperty> converter0 = (Converter<Boolean, SettableBeanProperty>) mock(Converter.class, new ViolatedAssumptionAnswer());
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<SettableBeanProperty>(converter0);
      StdDelegatingDeserializer<SettableBeanProperty> stdDelegatingDeserializer1 = new StdDelegatingDeserializer<SettableBeanProperty>(stdDelegatingDeserializer0);
      assertFalse(stdDelegatingDeserializer1.isCachable());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NumberDeserializers.DoubleDeserializer numberDeserializers_DoubleDeserializer0 = NumberDeserializers.DoubleDeserializer.primitiveInstance;
      boolean boolean0 = numberDeserializers_DoubleDeserializer0._hasTextualNull("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DateDeserializers.DateDeserializer dateDeserializers_DateDeserializer0 = DateDeserializers.DateDeserializer.instance;
      // Undeclared exception!
      try { 
        dateDeserializers_DateDeserializer0._parseLongPrimitive(defaultDeserializationContext_Impl0, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JavaType javaType0 = TypeFactory.unknownType();
      Converter<Object, BuilderBasedDeserializer> converter0 = (Converter<Object, BuilderBasedDeserializer>) mock(Converter.class, new ViolatedAssumptionAnswer());
      DateDeserializers.CalendarDeserializer dateDeserializers_CalendarDeserializer0 = new DateDeserializers.CalendarDeserializer();
      StdDelegatingDeserializer<BuilderBasedDeserializer> stdDelegatingDeserializer0 = new StdDelegatingDeserializer<BuilderBasedDeserializer>(converter0, javaType0, dateDeserializers_CalendarDeserializer0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MapperFeature mapperFeature0 = MapperFeature.SORT_PROPERTIES_ALPHABETICALLY;
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      try { 
        stdDelegatingDeserializer0._reportFailedNullCoerce(deserializationContext0, true, mapperFeature0, "NaN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot coerce NaN to Null value for type `java.util.Calendar` (enable `MapperFeature.SORT_PROPERTIES_ALPHABETICALLY` to allow)
         //
         verifyException("com.fasterxml.jackson.databind.exc.MismatchedInputException", e);
      }
  }
}
