/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:29:15 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.util.LRUMap;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URI;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "y.->";
      JsonMappingException jsonMappingException0 = new JsonMappingException("y.->");
      int int0 = 2308;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("JSON", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, "JSON");
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTimeoutException0);
      batchUpdateException0.getNextException();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) null);
      batchUpdateException0.getUpdateCounts();
      sQLSyntaxErrorException0.addSuppressed(batchUpdateException0);
      sQLSyntaxErrorException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      jsonMappingException0.clearLocation();
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) "", "");
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((int[]) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("x}NB#rX", batchUpdateException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException1, (Object) "x}NB#rX", 17);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1000);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      sQLTransientException0.printStackTrace((PrintWriter) mockPrintWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "-";
      JsonMappingException jsonMappingException0 = new JsonMappingException("-");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      linkedList0.add(jsonMappingException_Reference0);
      int int0 = 2984;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2984);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2984);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException0, (-942));
      ObjectMapper objectMapper0 = new ObjectMapper();
      boolean boolean0 = new Boolean(true);
      objectMapper0.createArrayNode();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) jsonMappingException2, 2984);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) jsonMappingException0, "-");
      // Undeclared exception!
      try { 
        jsonMappingException5.prependPath((Object) jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("y.->");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((Object) "y.->", 2308);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      linkedList0.add((JsonMappingException.Reference) null);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      Integer integer0 = new Integer(2960);
      String string0 = "Cannot construct AnnotatedMethod with null Method";
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) integer0, "Cannot construct AnnotatedMethod with null Method");
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "y.->";
      MockFileWriter mockFileWriter0 = new MockFileWriter("y.->");
      JsonMappingException jsonMappingException0 = new JsonMappingException("y.->");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "y.->", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      Double double0 = new Double(1000);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Unexpected IOException (of type %s): %s");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "Unexpected IOException (of type %s): %s", 1000);
      jsonMappingException1.getProcessor();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) arrayNode0, "Unexpected IOException (of type %s): %s");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "!,cjT!?Whu)m8&Z";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("!,cjT!?Whu)m8&Z", sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "!,cjT!?Whu)m8&Z", true);
      String string1 = "dzk}SP&)++>j2";
      MockFile mockFile0 = new MockFile("dzk}SP&)++>j2", "dzk}SP&)++>j2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, (ObjectCodec) null, mockFileWriter0);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(writerBasedJsonGenerator0, (TokenFilter) null, true, false);
      JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "dzk}SP&)++>j2");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, " with ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      SQLException sQLException0 = new SQLException("", "");
      jsonMappingException0.initCause(sQLException0);
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper1);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "", (String) null);
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) beanDeserializerFactory0, "");
      ((JsonMappingException)invalidFormatException0)._processor = (Closeable) jsonParser0;
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "", invalidFormatException0);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("05tJnd");
      jsonMappingException0.getPathReference((StringBuilder) null);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 4);
      jsonMappingException1._buildMessage();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON");
      MockFile mockFile0 = new MockFile("JSON");
      MockFile mockFile1 = new MockFile(mockFile0, "[]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((Writer) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "[]");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(filteringParserDelegate0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sQLNonTransientException0.spliterator();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1023);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      byteArrayBuilder0.completeAndCoalesce(1023);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayBuilder0, "Unmatched second part of surrogate pair (0x", jsonLocation0);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("->");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", 0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(mockFileWriter0, "->", jsonMappingException1);
      jsonMappingException2.getOriginalMessage();
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getLocalizedMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      char[] charArray0 = new char[1];
      charArray0[0] = 'd';
      jsonFactory0.createParser(charArray0, 0, (-4750));
      jsonFactory0.configure(jsonFactory_Feature0, false);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonParser jsonParser0 = jsonFactory0.createParser((InputStream) byteArrayInputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "->", (Throwable) sQLFeatureNotSupportedException0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "JSON", (Throwable) sQLClientInfoException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("K*OFSl|8");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLWarning sQLWarning0 = new SQLWarning("d", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "&KMQ=aPZp/|o6{%YIX", (Throwable) sQLWarning0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      String string0 = "";
      int int0 = 2;
      StackTraceElement stackTraceElement0 = new StackTraceElement("d", "", "", 2);
      stackTraceElementArray0[0] = stackTraceElement0;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(")C3\":IF%:}=(-v1I)b`", "W*HUpvOz\"@z@?", (Throwable) null);
      JsonMappingException.from(deserializationContext0, "^Dm/1r&UaUW{Kd'", (Throwable) sQLNonTransientException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      JsonMappingException.from(deserializationContext0, "5Hy?l+o", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("^Dm/1r&UaUW{Kd'", 0);
      jsonMappingException_Reference1.getDescription();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper0.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper1.createArrayNode();
      TreeTraversingParser treeTraversingParser0 = (TreeTraversingParser)arrayNode0.traverse((ObjectCodec) objectMapper1);
      JsonMappingException.from((JsonParser) treeTraversingParser0, "");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLWarning sQLWarning0 = new SQLWarning((String) null, jsonMappingException0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(treeTraversingParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      SQLDataException sQLDataException0 = new SQLDataException(": ", "%XLzQVz1q4(p(V", 500);
      JsonMappingException jsonMappingException1 = new JsonMappingException((String) null, jsonLocation0, sQLDataException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      String string0 = null;
      JsonMappingException.from(deserializationContext0, (String) null, (Throwable) null);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException(sQLTimeoutException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) sQLTimeoutException0, 117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("");
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLNonTransientException0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "(Q8&OYkH");
      jsonMappingException_Reference0.getIndex();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = new JsonMappingException("java.lang.String[\"\"]");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) bufferedInputStream0, (-384));
      JsonMappingException jsonMappingException3 = new JsonMappingException(bufferedInputStream0, "", jsonMappingException1);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      SQLException sQLException0 = new SQLException();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "", (Throwable) jsonMappingException2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      linkedList0.add(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-958));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException1.getPathReference(stringBuilder0);
      jsonMappingException2._appendPathDesc(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      linkedList0.listIterator();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-958));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException2);
      JsonMappingException.from(deserializationContext0, "Property '%s' (type %s) has no injectable value id configured", (Throwable) sQLTimeoutException0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._from = (Object) "";
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
      jsonMappingException1.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.cachedSerializersCount();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(deserializationContext0, (String) null, (Throwable) null);
      jsonMappingException1._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) defaultSerializerProvider_Impl0, 0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransactionRollbackException0.forEach(consumer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, jsonMappingException_Reference0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      sQLTransactionRollbackException0.addSuppressed(jsonMappingException0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      sQLTransactionRollbackException0.addSuppressed(jsonMappingException0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(sQLTransactionRollbackException0, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("$'PP@)g");
      mockPrintStream0.write(8232);
      mockPrintStream0.append('`');
      mockPrintStream0.println("$'PP@)g");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      int int0 = (-456);
      StackTraceElement stackTraceElement0 = new StackTraceElement("$'PP@)g", "$'PP@)g", "Zc<'?-|i^,59!G/g2", (-456));
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = "";
      StackTraceElement stackTraceElement1 = new StackTraceElement("u7 Re{Z)`]^fi=6w", "", "\rJuKN2ar\".L", (-456));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "u7 Re{Z)`]^fi=6w", " (through reference chain: ", (-456));
      stackTraceElementArray0[2] = stackTraceElement2;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.writeReplace();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = new JsonMappingException("java.lang.String[\"\"]");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) bufferedInputStream0, (-384));
      JsonMappingException jsonMappingException3 = new JsonMappingException(bufferedInputStream0, "", jsonMappingException1);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", jsonMappingException2);
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      MockPrintStream mockPrintStream0 = new MockPrintStream("$'PP@)g");
      mockPrintStream0.write(8232);
      mockPrintStream0.append('`');
      mockPrintStream0.println("$'PP@)g");
      sQLNonTransientConnectionException0.printStackTrace((PrintStream) mockPrintStream0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("$'PP@)g", "$'PP@)g", "Zc<'?-|i^,59!G/g2", (-456));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("u7 Re{Z)`]^fi=6w", "", "\rJuKN2ar\".L", (-456));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "u7 Re{Z)`]^fi=6w", " (through reference chain: ", (-456));
      stackTraceElementArray0[2] = stackTraceElement2;
      sQLNonTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, "");
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = "";
      Object object0 = jsonMappingException_Reference0.writeReplace();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath(object0, 8232);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLException sQLException0 = new SQLException("sT54&}Yy>", (String) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.JsonMappingException", sQLException0);
      jsonMappingException0._path = null;
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.getPathReference();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jackson.databind.JsonMappingException");
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, 1678);
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException1.getPath();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      defaultDeserializationContext_Impl0.checkUnresolvedObjectId();
      String string0 = null;
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      Class<JsonProcessingException> class1 = JsonProcessingException.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) simpleType0;
      javaTypeArray0[1] = (JavaType) simpleType0;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaTypeArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3142);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3142);
      ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, typeBindings0, (Object) class1, (Object) bufferedInputStream0);
      TypeBindings typeBindings1 = arrayType0.getBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings1);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("T&W*FW4!z`8s");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "lwz@]Ft%b-VcI&~u");
      jsonMappingException0.prependPath((Object) jsonMappingException1, "T&W*FW4!z`8s");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      linkedList0.add(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-958));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.getDeserializationContext();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "");
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException2._appendPathDesc(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-61);
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, 2148, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "9");
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      bufferedOutputStream0.flush();
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = '*';
      charArray0[2] = '_';
      charArray0[3] = 'Q';
      charArray0[4] = '$';
      charArray0[5] = 'T';
      charArray0[6] = 'J';
      charArray0[7] = '.';
      mockPrintStream0.println(charArray0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) bufferedOutputStream0, "]A\"-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0._fieldName = "kU2FC@J2f:eU";
      jsonMappingException_Reference0.setFieldName("kU2FC@J2f:eU");
      jsonMappingException_Reference0.getFrom();
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) null);
      jsonMappingException0.getMessage();
      jsonMappingException0.getProcessor();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getConfig();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "Btd>a2-s)$";
      JsonLocation jsonLocation0 = new JsonLocation((Object) null, (-1125L), 0L, 310, 3561);
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("Btd>a2-s)$", jsonLocation0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Class<DataInputStream> class0 = DataInputStream.class;
      Class<ByteArrayOutputStream> class1 = ByteArrayOutputStream.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class java.io.DataInputStream with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("->", false);
      mockFileWriter0.write("vk,. V,pKZ", 0, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      jsonMappingException_Reference0.getFrom();
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "->", 0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(mockFileWriter0, "->", jsonMappingException1);
      jsonMappingException2.getOriginalMessage();
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("f|`aL");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.toString();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2391);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      TypeBindings.emptyBindings();
      JavaType javaType0 = null;
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = null;
      javaTypeArray0[2] = null;
      javaTypeArray0[3] = null;
      javaTypeArray0[4] = null;
      javaTypeArray0[5] = null;
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.getTypeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.read();
      sequenceInputStream0.available();
      sequenceInputStream0.available();
      JsonMappingException jsonMappingException0 = new JsonMappingException(sequenceInputStream0, "");
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.prependPath((Object) "", "");
      jsonMappingException0.getPathReference();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      jsonMappingException0.initCause(sQLRecoverableException0);
      jsonMappingException0.fillInStackTrace();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "", 1037);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("_KGqZ0Eub2/uB", "_KGqZ0Eub2/uB", "", (-1));
      stackTraceElementArray0[0] = stackTraceElement0;
      String string0 = "5S.P";
      StackTraceElement stackTraceElement1 = new StackTraceElement("5S.P", "", "", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string1 = null;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement("G!ULm", (String) null, "", 1037);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) byteArrayInputStream0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
      SQLException sQLException0 = new SQLException();
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON", (Throwable) sQLException0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("I");
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '}';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory0.createGenerator((DataOutput) null, jsonEncoding0);
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) jsonEncoding0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      jsonParser_FeatureArray0[0] = jsonParser_Feature0;
      objectMapper0.disable(jsonParser_FeatureArray0);
      JsonMappingException.from(serializerProvider0, "String \"%s\"", (Throwable) jsonMappingException0);
      File file0 = MockFile.createTempFile("JSON", "3@|", (File) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "JSON");
      objectMapper1.writeValue(file0, (Object) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper1);
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("->");
      jsonMappingException0.getPath();
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, 2618);
      jsonMappingException_Reference0.setDescription("->");
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getProcessor();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(2618, 34);
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      // Undeclared exception!
      try { 
        typeFactory1.constructArrayType((JavaType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = new JsonMappingException("", jsonMappingException0);
      jsonMappingException2.clearLocation();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException2);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException1.getSuppressed();
      jsonMappingException1._buildMessage();
      jsonMappingException_Reference0.setDescription("");
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException3.toString();
      jsonMappingException1.prependPath((Object) "", (-1300));
      jsonMappingException_Reference0.getFrom();
      jsonMappingException2._appendPathDesc((StringBuilder) null);
      jsonMappingException_Reference0.setIndex((-1300));
      JsonMappingException jsonMappingException4 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) jsonMappingException0);
      jsonMappingException2.getProcessor();
      jsonMappingException3.getPathReference();
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException4, 32768);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, jsonMappingException_Reference1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException((Object) null, class0);
      invalidFormatException0.getMessage();
      ((JsonMappingException)invalidFormatException0)._appendPathDesc((StringBuilder) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
      jsonMappingException0.getMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) invalidFormatException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("n");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("n");
      jsonMappingException_Reference0._fieldName = "n";
      jsonMappingException_Reference0._fieldName = "n";
      jsonMappingException_Reference0.setDescription("n");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setFieldName("n");
      jsonMappingException0.prependPath((Object) "n", 2715);
      jsonMappingException_Reference0.setFieldName("n");
      jsonMappingException_Reference0._desc = "n";
      jsonMappingException_Reference0.toString();
      jsonMappingException0.toString();
      jsonMappingException0.prependPath((Object) "com.fasterxml.jackson.databind.JsonMappingException: n (through reference chain: java.lang.String[2715])", "n");
      jsonMappingException0.getProcessor();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonFactory_Feature0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "com.fasterxml.jackson.databind.JsonMappingException: n (through reference chain: java.lang.String[2715])", (Throwable) jsonMappingException0);
      JsonMappingException.from(serializerProvider0, "");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = " (through reference chain: ";
      StringReader stringReader0 = new StringReader(" (through reference chain: ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, 93);
      jsonMappingException_Reference0._desc = null;
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.toString();
      SQLException sQLException0 = new SQLException((String) null);
      sQLException0.getSuppressed();
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      stringReader0.read(charBuffer0);
      charArray0[1] = 'g';
      charArray0[2] = 'l';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 93, 41);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, " LF/A|D!q4IkY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)61, (byte)0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(byteArrayInputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      LinkedList<JsonMappingException.Reference> linkedList0 = new LinkedList<JsonMappingException.Reference>();
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getPath();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, 2960);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[\"\"]", string0);
      assertNotNull(string0);
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) jsonMappingException0, (-958));
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(jsonMappingException2);
      JsonMappingException.from(deserializationContext0, "Property '%s' (type %s) has no injectable value id configured", (Throwable) sQLTimeoutException0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[2960])", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[?]->com.fasterxml.jackson.databind.JsonMappingException$Reference[2960])", sQLTimeoutException0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      JsonMappingException jsonMappingException0 = new JsonMappingException("n>dL");
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-1704));
      Class<Integer> class0 = Integer.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JavaType javaType0 = TypeFactory.unknownType();
      JavaType[] javaTypeArray0 = new JavaType[2];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = javaType0;
      MapType mapType0 = MapType.construct((Class<?>) class0, typeBindings0, javaType0, javaTypeArray0, javaTypeArray0[1], (JavaType) placeholderForType0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      mapType0.withKeyTypeHandler(byteArrayOutputStream0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-4349));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      jsonLocation0.sourceDescription();
      jsonMappingException0.getProcessor();
      jsonMappingException0.prependPath((Object) tokenFilterContext0, 529);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("Uf<h[DXDGvy7");
      jsonMappingException0.prependPath((Object) "Uf<h[DXDGvy7", 86);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      Class<FilteringParserDelegate> class1 = FilteringParserDelegate.class;
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class1, javaType0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class2 = Vector.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class2, (JavaType) resolvedRecursiveType0);
      StringBuilder stringBuilder0 = new StringBuilder(86);
      // Undeclared exception!
      try { 
        collectionType0.getGenericSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }
}
