/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:58:42 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext((JsonParser) null);
      Class<JsonParserSequence> class1 = JsonParserSequence.class;
      objectMapper0.readValues((JsonParser) null, class1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.clearLocation();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, ")");
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException0.clearLocation();
      jsonMappingException_Reference0.getDescription();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, ")");
      jsonMappingException2.getLocalizedMessage();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.disable(jsonFactory_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) jsonFactory0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("q{$W}^p,IaOeH9(uz0", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "|TGD=T.(Nt:L^", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException1.addSuppressed(sQLDataException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      jsonMappingException1.clearLocation();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sequenceInputStream0, 1114111);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) jsonMappingException2, "|TGD=T.(Nt:L^");
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArrayDeque<ObjectReader> arrayDeque0 = new ArrayDeque<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(arrayDeque0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, 1114111, 1114111);
      dataFormatReaders_Match0.createParserWithMatch();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "com.fasterxml.jackson.core.type.WritableTypeId$Inclusion");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createNonBlockingByteArrayParser();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("q{$W}^p,IaOeH9(uz0", (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      String string0 = "a^OP%2tf(TpvN>r";
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation(mockFile0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "a^OP%2tf(TpvN>r", jsonLocation0);
      jsonMappingException0.getMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      // Undeclared exception!
      try { 
        objectMapper0._newReader((DeserializationConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-3630));
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      JsonParserDelegate jsonParserDelegate1 = new JsonParserDelegate(jsonParserDelegate0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate1, "B`A&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(1114129);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("L", "k!Af!YlDjCeSs)%N+!v", 1000);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "k!Af!YlDjCeSs)%N+!v");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(jsonMappingException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "L", (Throwable) sQLTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("k!Af!YlDjCeSs)%N+!v", "k!Af!YlDjCeSs)%N+!v");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "otJ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Throwable throwable0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException("otJ", (JsonLocation) null, (Throwable) null);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(35);
      StringBuilder stringBuilder0 = null;
      jsonMappingException0.getPathReference((StringBuilder) null);
      // Undeclared exception!
      try { 
        placeholderForType0.getGenericSignature((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(1114111);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 5, objectMapper0, pipedOutputStream0);
      uTF8JsonGenerator0.getSchema();
      ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      jsonFactory0.createParser("OGxUH%#\"~E[-fd");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, Integer.MAX_VALUE, (Reader) null, objectReader0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonParser jsonParser0 = readerBasedJsonParser0.enable(jsonParser_Feature0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "");
      jsonMappingException0.getLocalizedMessage();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.getDescription();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-24));
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("->", "->");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 3322);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) bufferedWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException0.addSuppressed(sQLDataException0);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) byteArrayOutputStream0, 980);
      jsonMappingException_Reference1.getDescription();
      // Undeclared exception!
      try { 
        jsonMappingException1.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("[rVf0,>s[PwoPL$T$v");
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) pipedWriter0, (-2));
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParserDelegate0, "&e{-C]2", jsonMappingException0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, 0);
      jsonMappingException2._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, jsonMappingException_Reference0);
      jsonMappingException2.getProcessor();
      jsonMappingException1.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(76);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, "]");
      int int0 = 980;
      jsonMappingException_Reference0.setIndex(76);
      SQLDataException sQLDataException0 = new SQLDataException();
      PipedReader pipedReader0 = new PipedReader(76);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, "", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("q.rinC(WZ'@L]>`w", " with 2 type parameters: class expects ", (-422));
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "q.rinC(WZ'@L]>`w");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(" with 2 type parameters: class expects ", "q.rinC(WZ'@L]>`w");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sequenceInputStream0, 0);
      jsonMappingException_Reference1.setIndex((-1));
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(sequenceInputStream0, "JSON", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      jsonMappingException1.getProcessor();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, 797);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      byteArrayBuilder0.completeAndCoalesce(2);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(dataOutputStream0);
      jsonMappingException_Reference1.getDescription();
      jsonMappingException0.toString();
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(1114111);
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException1.addSuppressed(sQLDataException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLDataException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(9);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", hashMap0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      sQLClientInfoException0.getSuppressed();
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLClientInfoException0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(918);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charArrayWriter0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2), objectMapper0, pipedOutputStream0);
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "JSON", (Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", (-24));
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "[aKNNbD3]_WyzM");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("^$i", "com.fasterxml.jackson.databind.deser.std.StackTraceElementDeserializer", hashMap0, jsonMappingException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0, sQLClientInfoException0);
      BiFunction<Object, Object, ClientInfoStatus> biFunction0 = (BiFunction<Object, Object, ClientInfoStatus>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(hashMap0, ")");
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("]", "]");
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", (int[]) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]", "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) batchUpdateException0, (-600));
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "]");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.getDescription();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-1);
      JsonParser jsonParser0 = jsonFactory0.createParser("JSON");
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("JSON", "JSON", map0);
      Map<String, ClientInfoStatus> map1 = sQLClientInfoException1.getFailedProperties();
      SQLClientInfoException sQLClientInfoException2 = new SQLClientInfoException("JSON", map1);
      JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      System.setCurrentTimeMillis(0L);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0.getIndex();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException(" (through reference chain: ", "");
      SQLDataException sQLDataException0 = new SQLDataException("Non-hex character '%c' (value 0x%s), not valid for UUID String", "Y.I;*FZd  %", 2882, sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "(!d/4ye", 2882);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Y.I;*FZd  %");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) sQLSyntaxErrorException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, 797);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(dataOutputStream0);
      jsonMappingException_Reference1.getDescription();
      jsonMappingException0.toString();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "@))(gXfA-dto^x");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultDeserializationContext_Impl0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext0, 318);
      jsonMappingException0.getPath();
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes.instance();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ObjectMapper.findModules();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      JsonMappingException.from((JsonParser) jsonParserDelegate0, "JSON");
      JsonMappingException.from(jsonParser0, "(was ");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper1);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-33);
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-33);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      sQLClientInfoException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLClientInfoException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) lineNumberReader0, "JSON");
      System.setCurrentTimeMillis((byte) (-33));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) deserializerFactoryConfig0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-117);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "@))(gXfA-dto^x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Broken surrogate pair: first char 0x", (String) null, 0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "INCONCLUSIVE");
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(797);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.from((JsonGenerator) null, "UNKNOWN[?]");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      SQLDataException sQLDataException0 = new SQLDataException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "]", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException1.addSuppressed(jsonMappingException0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 0);
      jsonMappingException2.getPath();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null fieldName");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Cannot pass null fieldName", "Cannot pass null fieldName", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot pass null fieldName", sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Cannot pass null fieldName", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.getProcessor();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<LinkedHashSet> class0 = LinkedHashSet.class;
      Class<ReaderBasedJsonParser> class1 = ReaderBasedJsonParser.class;
      typeFactory0.constructRawCollectionLikeType(class1);
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      CollectionType collectionType1 = collectionType0.withTypeHandler("Cannot pass null fieldName");
      CollectionType collectionType2 = collectionType1.withStaticTyping();
      Class<Object> class2 = Object.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class2, (JavaType) collectionType2, (JavaType) collectionType1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Cannot pass null fieldName");
      StringBuilder stringBuilder1 = mapLikeType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = collectionType2.getGenericSignature(stringBuilder1);
      jsonMappingException0._appendPathDesc(stringBuilder2);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = "Broken surrogate pair: first char 0x";
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Broken surrogate pair: first char 0x", "Broken surrogate pair: first char 0x", sQLWarning0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Broken surrogate pair: first char 0x", sQLWarning0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(980);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 2673);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(980);
      SQLDataException sQLDataException0 = new SQLDataException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, ")", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      jsonMappingException1.addSuppressed(sQLDataException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("vZjE%i;sNM", "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", 0, hashMap0, sQLDataException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", map0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLClientInfoException1);
      StringReader stringReader0 = new StringReader("");
      JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) stringReader0, 980);
      jsonMappingException1.getPath();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference1.getFieldName();
      int[] intArray0 = new int[9];
      intArray0[0] = 1804;
      intArray0[1] = 65534;
      intArray0[2] = (-1961);
      intArray0[3] = 797;
      intArray0[4] = (-3011);
      intArray0[5] = 128;
      intArray0[6] = (-2090);
      intArray0[7] = 2807;
      intArray0[8] = (-3757);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "com.fasterxml.jackson.databind.cfg.MapperConfig", intArray0);
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) jsonMappingException_Reference1, 2807);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      jsonFactory1.disable(jsonFactory_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGeneratorDelegate0, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.getCharacterEscapes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      Object object0 = jsonMappingException_Reference0.writeReplace();
      JsonLocation jsonLocation0 = new JsonLocation(object0, 0L, 0L, 797, 797);
      JsonMappingException jsonMappingException0 = new JsonMappingException("UNKNOWN[?]", jsonLocation0);
      jsonMappingException0.getPath();
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null fieldName");
      SQLRecoverableException sQLRecoverableException1 = new SQLRecoverableException("Cannot pass null fieldName", "Cannot pass null fieldName", sQLRecoverableException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("Cannot pass null fieldName", sQLRecoverableException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Cannot pass null fieldName", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.getProcessor();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      typeFactory0.constructRawCollectionLikeType(class0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Cannot pass null fieldName");
      jsonMappingException0.prependPath((Object) mockPrintStream0, (-2453));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0.toString();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("\"?{4}tA74h{>Sz", "Cannot pass null fieldName");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"Cannot pass null fieldName\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      SQLDataException sQLDataException0 = new SQLDataException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "]", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, 980);
      jsonMappingException2.getPath();
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      SQLDataException sQLDataException0 = new SQLDataException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLDataException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "]", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, jsonMappingException_Reference0);
      jsonMappingException1.getOriginalMessage();
      jsonMappingException1.addSuppressed(jsonMappingException0);
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "(was java.sql.SQLDataException)", 0);
      jsonMappingException2.getPath();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(".\"a.8Qut*D(@]D", "C{", (-1916));
      Integer integer0 = new Integer(1670);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "C{");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      jsonMappingException_Reference0._desc = ".\"a.8Qut*D(@]D";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0._desc = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      sQLFeatureNotSupportedException0.getSuppressed();
      jsonMappingException0.getProcessor();
      jsonMappingException0.getLocalizedMessage();
      File file0 = MockFile.createTempFile(".\"a.8Qut*D(@]D (through reference chain: )", ".\"a.8Qut*D(@]D");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      mockFileOutputStream0.release();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      dataOutputStream0.writeLong(1670);
      jsonMappingException_Reference0.getDescription();
      dataOutputStream0.writeChars("E9L");
      jsonMappingException0.prependPath((Object) dataOutputStream0, "");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      JavaType javaType0 = TypeFactory.unknownType();
      Class<String> class0 = String.class;
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      ArrayType arrayType1 = arrayType0.withValueHandler(dataOutputStream0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-750));
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      StringBuilder stringBuilder2 = arrayType1.getErasedSignature(stringBuilder1);
      jsonMappingException1.getPathReference(stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "]");
      jsonMappingException_Reference0.setIndex(980);
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty";
      SQLDataException sQLDataException0 = new SQLDataException();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.AnnotationIntrospector$ReferenceProperty", sQLDataException0);
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getOriginalMessage();
      Object object0 = new Object();
      jsonMappingException0.prependPath(object0, "WRITE_EMPTY_JSON_ARRAYS");
      jsonMappingException0.addSuppressed(sQLDataException0);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(valueInstantiators_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) byteArrayOutputStream0, 980);
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "3jB9EH-&9lsfi}*hF0");
      JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, "");
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<DataOutputStream> class0 = DataOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = null;
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      jsonMappingException0.addSuppressed(batchUpdateException0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "sd PwKdzeh]R?2AmH5]";
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "sd PwKdzeh]R?2AmH5]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException(",", (Throwable) null);
      jsonMappingException0.getStackTrace();
      jsonMappingException0._buildMessage();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0);
      jsonMappingException_Reference0._fieldName = ":l4$d";
      jsonMappingException_Reference0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "");
      jsonMappingException1._processor = null;
      jsonMappingException1.getMessage();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, object0, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "", (Throwable) null);
      String string1 = "G!oYUe}W12,s~Mxs\"f#";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "G!oYUe}W12,s~Mxs\"f#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._desc = null;
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setDescription("MJ\tK$C<%cg");
      jsonMappingException_Reference0.writeReplace();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._fieldName = null;
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.setFieldName("\" 2)#JG.a\"&BH;IRmS");
      jsonMappingException_Reference0.setFieldName("UNKNOWN[\"\"]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      SQLWarning sQLWarning0 = new SQLWarning("; expected Class<Converter>", "}[e@<@;4Q:");
      MockThrowable mockThrowable0 = new MockThrowable("[L48l],4@s8B8jW", sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "|Cl1b3Vh_ea^WsU1S[C", (Throwable) mockThrowable0);
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, (-2090));
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Broken surrogate pair: first char 0x", "Broken surrogate pair: first char 0x", 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Broken surrogate pair: first char 0x", (Throwable) sQLSyntaxErrorException0);
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 797);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setIndex(0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("R}'dpmAp`yu%sK30Cpg", "");
      SQLDataException sQLDataException0 = new SQLDataException("RUUTke$[Mqv;+Rt 0E", "", 0, sQLTransientException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("(!d/4ye", "?BZ", sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLSyntaxErrorException0, 0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "@))(gXfA-dto^x");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      JsonMappingException.fromUnexpectedIOE(invalidFormatException0);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      String string0 = "^zK<";
      ContextAttributes.Impl contextAttributes_Impl0 = (ContextAttributes.Impl)ContextAttributes.getEmpty();
      DeserializationConfig deserializationConfig0 = null;
      try {
        deserializationConfig0 = new DeserializationConfig((DeserializationConfig) null, contextAttributes_Impl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.MapperConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLRecoverableException0.forEach(consumer0);
      sQLDataException0.initCause(sQLRecoverableException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1281;
      intArray0[2] = (-1000);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", intArray0, sQLRecoverableException0);
      BatchUpdateException batchUpdateException1 = new BatchUpdateException(batchUpdateException0);
      batchUpdateException1.getNextException();
      SQLWarning sQLWarning0 = new SQLWarning("M", "M", (Throwable) null);
      sQLWarning0.spliterator();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLWarning0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "{qeS", "", (-780));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "{qeS", "{qeS", 0);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("", "$YRc]T9`y<ZBb&`]6", "{qeS", (-780));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("{qeS", "", "", 0);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("", "J!", "", 0);
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("'Ps\"0D", "fpwt|!x]Fr", "$YRc]T9`y<ZBb&`]6", (-1000));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("'Ps\"0D", "$YRc]T9`y<ZBb&`]6", (String) null, (-1477));
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("{[u^MHld[;>Q'J11", "J!", (String) null, 0);
      stackTraceElementArray0[7] = stackTraceElement7;
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string1);
      assertNotNull(string1);
      
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 3266);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-33);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("JSON", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "JSON", (Throwable) sQLClientInfoException0);
      assertNotNull(jsonMappingException0);
  }
}
