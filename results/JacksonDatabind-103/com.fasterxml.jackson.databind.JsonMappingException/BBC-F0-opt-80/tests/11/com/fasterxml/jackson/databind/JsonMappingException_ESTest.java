/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:22:26 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.json.async.NonBlockingJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.math.BigDecimal;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "", "");
      jsonMappingException0.toString();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream0, sequenceInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory1, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1321), sequenceInputStream1, objectMapper1, byteQuadsCanonicalizer0, byteArray0, 3, 900, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) uTF8StreamJsonParser0, "");
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      int int0 = 1355;
      Integer integer0 = new Integer(1355);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      String string0 = "";
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.setFieldName("");
      int int1 = 2047;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      Class<MockRandomAccessFile> class0 = MockRandomAccessFile.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";sGXU[Jm,Pw!%1&/");
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) mockPrintWriter0);
      try { 
        objectMapper0._configAndWriteValue(jsonGenerator0, objectReader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectReader[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.core.JsonFactory[\"characterEscapes\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) "", "");
      LinkedHashSet<ObjectReader> linkedHashSet0 = new LinkedHashSet<ObjectReader>();
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(linkedHashSet0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)67;
      byteArray0[4] = (byte) (-31);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat(byteArray0, (int) (byte)17, (int) (byte)14);
      dataFormatReaders_Match0.createParserWithMatch();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "ETy6yQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("qXd'F^#01fK?R1");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException1.getPathReference();
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      deserializerFactoryConfig0.keyDeserializers();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      String string0 = "o{<?I]$";
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("o{<?I]$", class0, "o{<?I]$");
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("");
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "K+1cyc", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "O=oYg_w-] o~(Abl_r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "GKEN*9{", "GKEN*9{");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;
      hashMap0.put("^JO(m7GH", clientInfoStatus0);
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "UNKNOWN[?]", (-139), jsonMappingException0);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, sQLTransientException0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", map0);
      Class<JsonParserDelegate> class0 = JsonParserDelegate.class;
      sQLTransientException0.getSuppressed();
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdNativeValueException(sQLClientInfoException1, class0);
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "->";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "->");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("->");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, 6);
      JsonParser jsonParser0 = arrayNode0.traverse();
      arrayNode0.elements();
      JsonMappingException.from(jsonParser0, "", (Throwable) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, ",<H>.ctGQfm?#TJ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLException sQLException0 = new SQLException("/SbI*hBs-)\u0006q*\"Xl");
      SQLTransientException sQLTransientException0 = new SQLTransientException("/SbI*hBs-)\u0006q*\"Xl", sQLException0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (JsonMappingException.Reference) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonMappingException0.prependPath((Object) null, "/SbI*hBs-)\u0006q*\"Xl");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      System.setCurrentTimeMillis((-795L));
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, 41);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException1.getPath();
      jsonMappingException1.toString();
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("", clientInfoStatus0);
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put("]}S2\"IOZ3_P", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("", "", hashMap0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      StringReader stringReader0 = new StringReader("l9$l$_$Y(RgxuR");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0, 3);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pushbackReader0, "`_da$F%!zyk.pfD$=m\"", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0);
      jsonMappingException_Reference0._index = 3421;
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)82;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", 191);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      int int0 = (-2118);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      String string0 = "k>iE!tE4NYoa\\m";
      Class<MockFileReader> class1 = MockFileReader.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("k>iE!tE4NYoam", class1, "");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(jsonMappingException1);
      jsonMappingException1.addSuppressed(sQLNonTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, (-2118));
      jsonMappingException_Reference0.getDescription();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) class0, (-2118));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("8y0v>cJnQ\"G2l", class0, "");
      jsonMappingException0.addSuppressed(jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-2118));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) pipedInputStream0, "");
      jsonMappingException0._buildMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertNotSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      arrayNode0.add((-3695));
      JsonParser jsonParser1 = arrayNode0.traverse((ObjectCodec) objectMapper0);
      jsonMappingException1.getSuppressed();
      jsonMappingException0.prependPath((Object) objectMapper0, 745);
      jsonMappingException0.getProcessor();
      JsonMappingException jsonMappingException2 = new JsonMappingException(jsonParser1, "gF");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", (String) null, hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, 0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, (String) null, (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-2118));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(23);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(byteArrayOutputStream0, "com.fasterxml.jackson.databind.JsonMappingException[?]");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "com.fasterxml.jackson.databind.JsonMappingException[?]");
      jsonMappingException0._appendPathDesc(stringBuilder0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[?]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "KKXRab{u17Xe*;5");
      JsonParser jsonParser0 = null;
      JsonMappingException.from((JsonParser) null, "D1");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "KKXRab{u17Xe*;5", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getLocalizedMessage();
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "", (Throwable) jsonMappingException1);
      jsonMappingException2.getProcessor();
      JsonMappingException.from(jsonParser0, "");
      String string0 = jsonMappingException2.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.disable(jsonGenerator_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature1);
      // Undeclared exception!
      try { 
        jsonFactory3.createParser((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 127;
      intArray0[1] = 92;
      intArray0[2] = 128;
      intArray0[3] = 43;
      intArray0[4] = 35;
      intArray0[5] = (-1);
      intArray0[6] = (-2416);
      intArray0[7] = 13;
      intArray0[8] = (-1151);
      JsonLocation jsonLocation0 = new JsonLocation("W", (-681L), 92, (-382));
      JsonMappingException jsonMappingException0 = new JsonMappingException("W", jsonLocation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("W", "W", 128, jsonMappingException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, sQLNonTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(batchUpdateException0, "W");
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-2118));
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(23);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("}RS0Y%9v4D 9S$uslm!", "com.fasterxml.jackson.databind.JsonMappingException[\"\"]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"com.fasterxml.jackson.databind.JsonMappingException[\"\"]\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      MockPrintStream mockPrintStream0 = new MockPrintStream("+xrN/BOVJ=#H@8l%@");
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference("+xrN/BOVJ=#H@8l%@", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k*=V~}opGUGq");
      MockThrowable mockThrowable0 = new MockThrowable();
      StackTraceElement stackTraceElement0 = new StackTraceElement("k*=V~}opGUGq", "Default constructor for ", "OH?g", 34);
      mockThrowable0.setOriginForDelegate(stackTraceElement0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (Object) "k*=V~}opGUGq", (-3522));
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was org.evosuite.runtime.mock.java.lang.MockThrowable) (through reference chain: java.lang.String[?])", string0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      jsonMappingException0.getMessage();
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "L-F^`%6sxPbf9b[s)#", (Throwable) mockThrowable0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "OH?g", 34);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "OH?g", (Throwable) mockThrowable0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "Default constructor for ", (Throwable) jsonMappingException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "OH?g", (Throwable) jsonMappingException1);
      jsonMappingException_Reference0.getDescription();
      String string1 = jsonMappingException3.getPathReference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[?]", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zecuGF,-y1U'CHJ/,X");
      SQLException sQLException0 = new SQLException((String) null, (String) null, (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "zecuGF,-y1U'CHJ/,X", (Throwable) sQLException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 0);
      jsonMappingException_Reference0.getDescription();
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._index = 921;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(4905);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        pipedOutputStream0.connect((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      jsonMappingException0.getPath();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
      BufferRecycler bufferRecycler0 = jsonFactory2._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-957));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", (-3695), jsonMappingException1);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFactory2, "");
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.toString();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertEquals("", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.core.JsonFactory[\"\"]", string1);
      assertNotNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, bufferedOutputStream0);
      bufferedOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      mockPrintStream0.println(0.0F);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLTimeoutException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "7(.,4o", sQLNonTransientConnectionException0);
      jsonMappingException0.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(sQLTimeoutException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.addSuppressed(sQLTimeoutException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.getFieldName();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl0.getGenerator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.core.TreeCodec", "", sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(jsonParser0, "", jsonMappingException0);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-2118));
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(23);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        pipedOutputStream0.connect((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("SeI/r$b[lGU<b");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "V?D]", objectArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filterOutputStream0, "-;Oj,qjC%2");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filterOutputStream0, 55);
      mockPrintStream0.println((-3052.945F));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.JsonMappingException: -;Oj,qjC%2 (through reference chain: java.io.FilterOutputStream[55])", sQLIntegrityConstraintViolationException0.toString());
      
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      
      jsonMappingException_Reference0.toString();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      // Undeclared exception!
      try { 
        jsonMappingException2._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BigDecimal bigDecimal0 = new BigDecimal((-759L));
      jsonNodeFactory0.numberNode(bigDecimal0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.TreeCodec");
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLIntegrityConstraintViolationException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("r<WKH=XBO}");
      sQLTransientException0.setNextException(sQLNonTransientException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BigDecimal bigDecimal0 = new BigDecimal((-759L));
      ValueNode valueNode0 = jsonNodeFactory0.numberNode(bigDecimal0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "", (Throwable) jsonMappingException0);
      jsonMappingException1.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.TreeCodec");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException(jsonMappingException1);
      sQLIntegrityConstraintViolationException1.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException1.addSuppressed(sQLIntegrityConstraintViolationException1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: UNKNOWN; line: -1, column: -1]", sQLIntegrityConstraintViolationException1.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParser0, "");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      List<JsonMappingException.Reference> list0 = jsonMappingException2.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
      
      arrayNode0.add((JsonNode) valueNode0);
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("com.fasterxml.jackson.databind.node.TreeTraversingParser[\"\"]", string0);
      assertNotNull(string0);
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertEquals("", string1);
      
      jsonMappingException2.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BigDecimal bigDecimal0 = new BigDecimal((-759L));
      jsonNodeFactory0.numberNode(bigDecimal0);
      JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.cachedSerializersCount();
      jsonNodeFactory0.numberNode((short) (-1662));
      JsonMappingException jsonMappingException1 = new JsonMappingException("com.fasterxml.jackson.core.TreeCodec");
      jsonMappingException0.getProcessor();
      JsonMappingException.from(jsonParser0, "i@;7$RK*?PJra}.!");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Object object0 = jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFrom();
      object0.toString();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFrom();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "";
      MockIOException mockIOException0 = new MockIOException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", mockIOException0);
      mockIOException0.getMessage();
      int int0 = (-613);
      sQLNonTransientException0.addSuppressed(mockIOException0);
      String string1 = "->";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "->");
      mockIOException0.getCause();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) mockIOException0, (-613));
      jsonMappingException0.getPathReference();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0);
      jsonMappingException_Reference0._index = 3421;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(sQLWarning0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLWarning
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BigDecimal bigDecimal0 = new BigDecimal((-759L));
      jsonNodeFactory0.numberNode(bigDecimal0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.cachedSerializersCount();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException1.getMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser1 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser1, "com.fasterxml.jackson.databind.ext.Java7Support");
      NonBlockingJsonParser nonBlockingJsonParser0 = (NonBlockingJsonParser)jsonMappingException2.getProcessor();
      assertFalse(nonBlockingJsonParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, bufferedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      bufferedOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "k4oaw");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "k4oaw", (Throwable) jsonMappingException0);
      jsonMappingException1.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "8n?#QOQf[{@<T@");
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature1, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("k4oaw");
      jsonMappingException_Reference0.setDescription("k4oaw");
      jsonMappingException2.getMessage();
      jsonFactory0.createNonBlockingByteArrayParser();
      jsonMappingException2.getPathReference();
      jsonMappingException1.getPath();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "k4oaw");
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertSame(stringBuilder1, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      JsonParser jsonParser0 = arrayNode0.traverse();
      BigDecimal bigDecimal0 = new BigDecimal((-759L));
      jsonNodeFactory0.numberNode(bigDecimal0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "com.fasterxml.jackson.core.TreeCodec", (Throwable) jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.cachedSerializersCount();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "M;yz=^D6", (Throwable) jsonMappingException1);
      jsonMappingException0.getProcessor();
      String string0 = jsonMappingException1.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("SeI/r$b[lGU<b");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "V?D]", objectArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(filterOutputStream0, "-;Oj,qjC%2");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) filterOutputStream0, 55);
      mockPrintStream0.println((-3052.945F));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException1.printStackTrace();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(jsonMappingException1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.append('h');
      sQLIntegrityConstraintViolationException0.printStackTrace((PrintWriter) mockPrintWriter0);
      jsonMappingException0.addSuppressed(sQLIntegrityConstraintViolationException0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: -;Oj,qjC%2 (through reference chain: java.io.FilterOutputStream[55])", sQLIntegrityConstraintViolationException0.getMessage());
      
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.toString();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = jsonMappingException1.getPathReference();
      assertEquals("UNKNOWN[?]->java.io.FilterOutputStream[55]", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, (String) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientException0.forEach(consumer0);
      sQLNonTransientException0.fillInStackTrace();
      sQLNonTransientException0.getStackTrace();
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLNonTransientException0);
      sQLTransientException0.setNextException(sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) null, "^-HG|8)446%2(|K4yE3");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("java.sql.SQLNonTransientException (through reference chain: UNKNOWN[\"^-HG|8)446%2(|K4yE3\"])", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BS^%`tL\"'oB$k1&Lr");
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "");
      jsonMappingException_Reference0._desc = "BS^%`tL\"'oB$k1&Lr";
      jsonMappingException_Reference0.getIndex();
      stringReader0.mark(2463);
      MockIOException mockIOException0 = new MockIOException("Y:9e3Rt=y`[x#y2Y");
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = null;
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException_Reference0, jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DeserializationContext deserializationContext0 = null;
      String string0 = "date";
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "date");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("Bc).@K{xQF: A|m1h", 0L, 0, 0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Bc).@K{xQF: A|m1h", "1U@|!");
      JsonMappingException jsonMappingException0 = new JsonMappingException("Bc).@K{xQF: A|m1h", jsonLocation0, sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      
      jsonMappingException_Reference0.setDescription("UNKNOWN[?]");
      sQLFeatureNotSupportedException0.fillInStackTrace();
      jsonMappingException_Reference0.setDescription("8^,");
      jsonMappingException_Reference0.setFieldName("(/");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals("(/", jsonMappingException_Reference0.getFieldName());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper1, bufferedOutputStream0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      bufferedOutputStream0.write(byteArrayBuilder0.NO_BYTES);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(uTF8JsonGenerator0, "k4oaw");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "k4oaw", (Throwable) jsonMappingException0);
      jsonMappingException1.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "8n?#QOQf[{@<T@");
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory0.configure(jsonGenerator_Feature1, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("k4oaw");
      jsonMappingException_Reference0.setDescription("k4oaw");
      jsonMappingException2.getMessage();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException3 = JsonMappingException.from(jsonParser0, "!1JWivX<");
      assertNotSame(jsonMappingException3, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      int int0 = 1355;
      Integer integer0 = new Integer(1355);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      String string0 = "";
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException_Reference0.setFieldName("");
      int int1 = 2047;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      Class<MockRandomAccessFile> class0 = MockRandomAccessFile.class;
      ObjectReader objectReader0 = objectMapper0.readerFor(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.toString();
      int int0 = (-2439);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-2439));
      ObjectMapper objectMapper0 = new ObjectMapper();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-2439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3646);
      intArray0[1] = (-5213);
      intArray0[2] = 1064;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-147);
      intArray0[6] = 0;
      intArray0[7] = 498;
      intArray0[8] = 0;
      String string0 = "cX},";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, (String) null, hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) ")", 0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, "Problem with definition of ", "[]");
      deserializerFactoryConfig0.deserializers();
      invalidFormatException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "[]", invalidFormatException0);
      jsonMappingException0.getPathReference();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      int int0 = (-3695);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("[]", (-3695));
      jsonMappingException_Reference0.toString();
      jsonMappingException0.getSuppressed();
      jsonMappingException0.prependPath((Object) deserializerFactoryConfig0, (-3695));
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.getProcessor();
      jsonMappingException1.getProcessor();
      PlaceholderForType placeholderForType0 = new PlaceholderForType((-3695));
      Class<MockPrintWriter> class1 = MockPrintWriter.class;
      JavaType[] javaTypeArray0 = new JavaType[5];
      placeholderForType0.actualType();
      javaTypeArray0[0] = null;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      // Undeclared exception!
      try { 
        TypeBindings.create(class1, javaTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class org.evosuite.runtime.mock.java.io.MockPrintWriter with 5 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      DeserializationContext deserializationContext0 = objectMapper1.getDeserializationContext();
      String string0 = "";
      JsonMappingException.from(deserializationContext0, "");
      DeserializerFactory deserializerFactory0 = null;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = null;
      try {
        defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl((DeserializerFactory) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null DeserializerFactory
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "gXU.Z`[|6";
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "gXU.Z`[|6");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("k&K(bRsao`gZ");
      Throwable throwable0 = jsonMappingException0.fillInStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, 3373);
      jsonMappingException0.getMessage();
      jsonMappingException_Reference0._from = (Object) "k&K(bRsao`gZ";
      jsonMappingException_Reference0._desc = "k&K(bRsao`gZ";
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._from = (Object) throwable0;
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0.getMessage();
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) "k&K(bRsao`gZ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("IqyEou'0k&k:S:g");
      ObjectOutputStream objectOutputStream0 = null;
      try {
        objectOutputStream0 = new ObjectOutputStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLException sQLException0 = new SQLException("Property '%s' (type %s) has no injectable value id configured", "Property '%s' (type %s) has no injectable value id configured", 2);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 469);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      bufferedInputStream0.markSupported();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream1, bufferedInputStream1);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) dataInputStream0, "Property '%s' (type %s) has no injectable value id configured");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 68);
      jsonMappingException0.prependPath((Object) pipedInputStream0, 68);
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedInputStream0);
      jsonMappingException_Reference0.toString();
      jsonMappingException_Reference0.setDescription("[}j)0PV");
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.getIndex();
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "");
      JsonMappingException.from(serializerProvider0, "JSON");
      jsonMappingException0.getProcessor();
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -1
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedReader> class0 = BufferedReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("WRITE_ONLY", class0, (String) null);
      jsonMappingException0.getPath();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      defaultSerializerProvider_Impl1.getGenerator();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, (String) null);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'o';
      charArray0[2] = ':';
      charArray0[3] = 'v';
      charArray0[4] = '9';
      charArray0[5] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(charArrayReader0, (-504));
      jsonMappingException_Reference0.setIndex((-504));
      jsonMappingException_Reference0.setIndex((-504));
      MockFileWriter mockFileWriter0 = new MockFileWriter("/]0%~)3.WMz>eCc}", true);
      jsonMappingException_Reference0._from = (Object) mockFileWriter0;
      String string0 = "=N =P<+6A52";
      jsonMappingException_Reference0.setDescription("=N =P<+6A52");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charArrayReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-378);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("Invalid configuration: values of type %s cannot be merged");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, (String) null);
      SQLException sQLException0 = new SQLException((String) null, (String) null, sQLTimeoutException0);
      sQLTimeoutException0.addSuppressed(sQLException0);
      sQLTimeoutException0.fillInStackTrace();
      sQLTimeoutException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLTimeoutException0);
      jsonMappingException0.getPath();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLException0, 6);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      sQLTimeoutException0.getStackTrace();
      JsonGenerator jsonGenerator0 = null;
      JsonMappingException.from((JsonGenerator) null, (String) null, (Throwable) sQLException0);
      jsonMappingException_Reference0.setDescription((String) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.parseDate("\"y(XqJ?C9&_Kp,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "2";
      MockIOException mockIOException0 = new MockIOException();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("2", mockIOException0);
      mockIOException0.getMessage();
      int int0 = (-613);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      sQLNonTransientException0.addSuppressed(mockIOException0);
      String string1 = "->";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "->");
      mockIOException0.getCause();
      JsonMappingException jsonMappingException0 = new JsonMappingException("->", mockIOException0);
      jsonMappingException0.getPathReference();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.getDefaultPropertyInclusion(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "qSfPGE";
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "qSfPGE", (Throwable) null);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1697);
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class com.fasterxml.jackson.core.json.UTF8DataInputJsonParser with 2 type parameters: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate((JsonGenerator) null, tokenFilter0, true, true);
      String string0 = "F0qUJlKoW(|%hUA%";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("com.fasterxml.jackson.databind.JsonMappingException");
      JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "F0qUJlKoW(|%hUA%", (Throwable) sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        filteringGeneratorDelegate0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("AnnotationIntrospector.");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLWarning0);
      jsonMappingException_Reference0._index = 3421;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(sQLWarning0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLWarning: AnnotationIntrospector.
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      int int0 = 4905;
      jsonMappingException_Reference0.setIndex(4905);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int1 = (-2302);
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<UTF8StreamJsonParser> class0 = UTF8StreamJsonParser.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      invalidFormatException0.clearLocation();
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      invalidFormatException0.getLocalizedMessage();
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.copy();
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '5';
      charArray0[2] = '(';
      charArray0[3] = 'x';
      charArray0[4] = '%';
      charArray0[5] = 'T';
      jsonFactory1.createParser(charArray0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = " (through reference chain: ";
      SQLException sQLException0 = new SQLException(" (through reference chain: ");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLException0);
      int int0 = (-30);
      sQLException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, (Object) sQLTimeoutException0, (-30));
      jsonMappingException0.prependPath((Object) sQLException0, " (through reference chain: ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("$~#72X+[T'W0<RZS", "com.fasterxml.jackson.databind.node.BigIntegerNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"com.fasterxml.jackson.databind.node.BigIntegerNode\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException("3AEa&S", jsonLocation0, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("3AEa&S", jsonMappingException0);
      jsonLocation0.toString();
      PipedWriter pipedWriter0 = new PipedWriter();
      char[] charArray0 = new char[4];
      char char0 = '$';
      // Undeclared exception!
      try { 
        pipedWriter0.append((CharSequence) "[Source: UNKNOWN; line: -1, column: -1]", 1692, 500);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
