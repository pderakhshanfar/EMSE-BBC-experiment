/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 23:45:45 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.LRUMap;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      objectMapper0.createArrayNode();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
      JsonFactory jsonFactory1 = jsonFactory0.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      File file0 = MockFile.createTempFile("JSON", "JSON");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator(file0, jsonEncoding0);
      try { 
        objectMapper0._configAndWriteValue(jsonGenerator0, jsonFactory0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.core.JsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException("");
      MockIOException mockIOException1 = new MockIOException("");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<MockPrintStream> class0 = MockPrintStream.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "");
      jsonMappingException_Reference0.getDescription();
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NullNode nullNode0 = NullNode.instance;
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "/", (Throwable) sQLRecoverableException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0, 55);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException1.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[ClassStack (self-refs: ");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[ClassStack (self-refs: ", "[ClassStack (self-refs: ", 2112);
      JsonMappingException jsonMappingException0 = new JsonMappingException("[ClassStack (self-refs: ");
      jsonMappingException0.getCause();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultSerializerProvider_Impl0, "RB1%WqrU@J");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "[ClassStack (self-refs: ", 2112);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) defaultSerializerProvider_Impl1, 2112);
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      jsonMappingException5.prependPath((JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) sQLNonTransientConnectionException0, "[ClassStack (self-refs: ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (JsonMappingException.Reference) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2745);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException5, (Object) pipedInputStream0, 3475);
      // Undeclared exception!
      try { 
        jsonMappingException2.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", (String) null);
      jsonMappingException0.prependPath((Object) class0, 5108);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0.toString();
      System.setCurrentTimeMillis(5108);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Throwable throwable0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "RB1WqJ", "+Nfbd<mJQ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      filteringParserDelegate0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "OY7jDe./5].$_OMoT");
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("com.fasterxml.jackson.databind.JsonMappingException", "o/8y_d#'uNzt|i~", (Throwable) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o/8y_d#'uNzt|i~");
      sQLNonTransientException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(deserializationContext0, "", (Throwable) sQLNonTransientException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "OY7jDe./5].$_OMoT", "", (-18));
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("9>kgdZOedS6m07| m", "o/8y_d#'uNzt|i~", "9>kgdZOedS6m07| m", 1000);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("com.fasterxml.jackson.databind.JsonMappingException", "", "[]", (-18));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement(" Q71QI", "OY7jDe./5].$_OMoT", " Q71QI", (-128));
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("o/8y_d#'uNzt|i~", "OY7jDe./5].$_OMoT", "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", (-18));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("com.fasterxml.jackson.databind.JsonMappingException", "write a null", " Q71QI", (-2899));
      stackTraceElementArray0[5] = stackTraceElement5;
      StackTraceElement stackTraceElement6 = new StackTraceElement("write a null", "/nrqJIfza", " Q71QI", 414);
      stackTraceElementArray0[6] = stackTraceElement6;
      StackTraceElement stackTraceElement7 = new StackTraceElement("", "", "com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer$TableInfo", (-1292));
      stackTraceElementArray0[7] = stackTraceElement7;
      StackTraceElement stackTraceElement8 = new StackTraceElement(")%", "OY7jDe./5].$_OMoT", "/nrqJIfza", 185);
      stackTraceElementArray0[8] = stackTraceElement8;
      sQLNonTransientException0.setStackTrace(stackTraceElementArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "VR^");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(jsonMappingException0);
      sQLRecoverableException0.getSuppressed();
      jsonMappingException0.addSuppressed(sQLRecoverableException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "VR^", (Throwable) jsonMappingException0);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      jsonMappingException1.fillInStackTrace();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException1);
      JsonMappingException.from((JsonGenerator) null, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) null, "");
      Integer integer0 = new Integer((-2620));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException2.getMessage();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NullNode.getInstance();
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigIntegerNode bigIntegerNode0 = BigIntegerNode.valueOf(bigInteger0);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      List<JsonNode> list0 = arrayNode0.findParents("q2,[S`]$3X3-^`-vq7");
      List<JsonNode> list1 = bigIntegerNode0.findValues("4%T", list0);
      ArrayNode arrayNode1 = new ArrayNode(jsonNodeFactory0, list1);
      JsonParser jsonParser0 = arrayNode1.traverse();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "ow", (Throwable) sQLTransactionRollbackException0);
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLException sQLException0 = new SQLException("{");
      JsonMappingException jsonMappingException0 = new JsonMappingException("{");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-122);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<CharArrayWriter> class0 = CharArrayWriter.class;
      defaultDeserializationContext_Impl0.weirdStringException("{", class0, "{");
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("date-time");
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "r}kfd5WE3C;9", jsonLocation0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("g@^jAOw4_", "g@^jAOw4_", jsonMappingException0);
      SQLException sQLException0 = new SQLException("g@^jAOw4_", sQLTransactionRollbackException0);
      PipedReader pipedReader0 = new PipedReader(1536);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) pipedReader0, 26);
      jsonMappingException0.getLocalizedMessage();
      SQLException sQLException1 = new SQLException();
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonParser) null, "Null value for creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS` enabled");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException2);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("r}kfd5WE3C;9\n at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: java.io.PipedReader[26])", "Null value for creator property '%s' (index %d); `DeserializationFeature.FAIL_ON_NULL_FOR_CREATOR_PARAMETERS` enabled");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      jsonMappingException_Reference0.writeReplace();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("g@^jAOw4_");
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) sQLException0, 26);
      // Undeclared exception!
      try { 
        jsonMappingException1.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NullNode nullNode0 = NullNode.getInstance();
      JsonMappingException jsonMappingException0 = new JsonMappingException("date-time");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(nullNode0, "date-time");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "5eX", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedOutputStream0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.BufferedOutputStream[?]", string0);
      assertNotNull(string0);
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("java.io.BufferedOutputStream[?]", "", 5133);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("java.io.BufferedOutputStream[?]", "->", sQLSyntaxErrorException0);
      JsonMappingException.wrapWithPath((Throwable) sQLIntegrityConstraintViolationException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException("no default constructor found");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("no default constructor found", "no default constructor found", 2112, sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "no default constructor found", (Throwable) sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultSerializerProvider_Impl0, "RB1%WqrU@J");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransactionRollbackException0, (Object) sQLTransactionRollbackException0, (-701));
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLTransactionRollbackException[?]", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      NullNode nullNode0 = NullNode.getInstance();
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(nullNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "cfAwAQlP");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonParser0, (-1132));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile(") not suitable, must be java.lang.String", ") not suitable, must be java.lang.String");
      MockFileReader mockFileReader0 = new MockFileReader(file0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, mockFileReader0, objectReader0, charsToNameCanonicalizer1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(" (through reference chain: ", "HM0", hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, ") not suitable, must be java.lang.String", sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      SQLTransientException sQLTransientException0 = new SQLTransientException("no default constructor found");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("no default constructor found", "no default constructor found", 2112, sQLTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "no default constructor found", (Throwable) sQLNonTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultSerializerProvider_Impl0, "RB1%WqrU@J");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (JsonMappingException.Reference) null);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) defaultSerializerProvider_Impl1, (-2799));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (JsonMappingException.Reference) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      jsonMappingException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException.from((JsonGenerator) null, (String) null);
      jsonMappingException3.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonFactory_Feature0, true);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'B';
      charArray0[2] = 'n';
      charArray0[3] = 'E';
      charArray0[4] = '`';
      charArray0[5] = 'J';
      charArray0[6] = '=';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0, (-831), (int) 'J');
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "");
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      StringReader stringReader0 = new StringReader("i:Q0&C(E+$\"LK,");
      jsonMappingException0.toString();
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: \n at [Source: (char[])\"FBnE`J=\"; line: 1, column: 0]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      NullNode.getInstance();
      SQLException sQLException0 = new SQLException("", (Throwable) null);
      PipedReader pipedReader0 = new PipedReader(5);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-518));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3508, pipedReader0, objectMapper0, charsToNameCanonicalizer1);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) readerBasedJsonParser0, (-2957));
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLException) (through reference chain: com.fasterxml.jackson.core.json.ReaderBasedJsonParser[?])", string0);
      
      SQLException sQLException1 = new SQLException();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException1);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.getMessage());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(sQLException1, 0);
      JsonMappingException.Reference jsonMappingException_Reference3 = (JsonMappingException.Reference)jsonMappingException_Reference2.writeReplace();
      assertEquals(0, jsonMappingException_Reference3.getIndex());
      
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "S*", hashMap0, jsonMappingException1);
      JsonMappingException.wrapWithPath((Throwable) sQLException1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "regex", (Throwable) sQLClientInfoException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setFieldName("92UNI[bxn");
      jsonMappingException_Reference0.getDescription();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("UNKNOWN[\"92UNI[bxn\"]", string0);
      
      String string1 = jsonMappingException1._buildMessage();
      assertEquals("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): regex", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((String) null, hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) sQLClientInfoException0, 1507);
      jsonMappingException0.getLocalizedMessage();
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "(was java.sql.SQLClientInfoException) (through reference chain: java.sql.SQLClientInfoException[1507])");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(">ccvneRg=j7{@Mmp", ">ccvneRg=j7{@Mmp");
      jsonMappingException_Reference0.writeReplace();
      HashMap<String, ClientInfoStatus> hashMap1 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("->", "BF1L3pd8\"XD&", hashMap1, sQLException0);
      JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      Object object0 = jsonMappingException1.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("date-time");
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "r}kfd5WE3C;9", jsonLocation0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      jsonMappingException0.prependPath((Object) lineNumberReader0, 1000);
      jsonMappingException0.prependPath((Object) jsonLocation0, "");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) lineNumberReader0, "");
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) null, 101);
      assertNotSame(jsonMappingException2, jsonMappingException1);
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("date-}time");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      System.setCurrentTimeMillis((-1155L));
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "date-}time");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("date-time");
      JsonLocation jsonLocation0 = JsonLocation.NA;
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "r}kfd5WE3C;9", jsonLocation0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("r}kfd5WE3C;9", hashMap0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, "3Uo\"HF{iKzB5VqfQ");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "XQ";
      Map<String, ClientInfoStatus> map0 = null;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("XQ", (Map<String, ClientInfoStatus>) null, sQLFeatureNotSupportedException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("(N");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      JsonMappingException.from((JsonParser) null, "8]Z", (Throwable) sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "(N", sQLFeatureNotSupportedException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, ",contentFilter=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("6(N", 3041);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockThrowable mockThrowable0 = new MockThrowable("6(N");
      int[] intArray0 = new int[8];
      intArray0[0] = 3041;
      intArray0[1] = 3041;
      intArray0[2] = 3041;
      intArray0[3] = 3041;
      intArray0[4] = 3041;
      intArray0[5] = 3041;
      intArray0[6] = 3041;
      intArray0[7] = 3041;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLException sQLException0 = new SQLException("", batchUpdateException0);
      SQLException sQLException1 = new SQLException();
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      MockFile mockFile0 = new MockFile("(w:Rg K.|M#r2HX#MG", "UNKNOWN");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      JsonGenerator jsonGenerator0 = jsonFactory1.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(jsonMappingException0);
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", sQLFeatureNotSupportedException0.getMessage());
      
      jsonMappingException_Reference0.writeReplace();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      assertEquals(3041, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ObjectReader objectReader0 = objectMapper0._newReader(deserializationConfig0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(baseSettings0, (-966));
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      StringReader stringReader0 = new StringReader("date-time");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "date-time");
      jsonMappingException_Reference0.writeReplace();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(lineNumberReader0);
      SQLDataException sQLDataException0 = new SQLDataException("", "date-time", 37);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) mockIOException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(stringReader0, "Cannot pass null fieldName", jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "Cannot pass null fieldName");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6(N");
      mockPrintStream0.print('K');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectMapper1, (-2575));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("6(N", (String) null);
      sQLInvalidAuthorizationSpecException0.printStackTrace((PrintWriter) mockPrintWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ObjectReader objectReader0 = objectMapper0._newReader(deserializationConfig0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      ShortNode shortNode0 = ShortNode.valueOf((short)248);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext(jsonParser0);
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (short)248, (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) sQLWarning0);
      assertNotNull(jsonMappingException0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q", (Map<String, ClientInfoStatus>) null, sQLNonTransientException0);
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("I:ed", (Map<String, ClientInfoStatus>) null, sQLClientInfoException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6(N");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 0);
      jsonMappingException_Reference0.setDescription("4/qv");
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      ObjectReader objectReader0 = objectMapper0._newReader(deserializationConfig0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, tokenFilter0);
      ShortNode shortNode0 = ShortNode.valueOf((short)248);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader1.createDeserializationContext(jsonParser0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4~");
      SQLWarning sQLWarning0 = new SQLWarning((String) null, (String) null, (short)248, (Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, (String) null, (Throwable) sQLWarning0);
      JsonMappingException.from(jsonParser0, "1");
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string0 = jsonMappingException1.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): N/A\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, ",$-0,^qcpX14[5:+lD~", sQLClientInfoException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(fileDescriptor0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileDescriptor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1189, objectMapper0, mockFileOutputStream0, byteArray0, (byte)29, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "Cannot pass null fieldName", (Throwable) sQLClientInfoException1);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonGenerator0, 423);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertEquals(423, jsonMappingException_Reference1.getIndex());
      
      JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, (String) null);
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("Cannot pass null fieldName", string0);
      
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      NullNode nullNode0 = NullNode.getInstance();
      JsonParser jsonParser0 = objectMapper1.treeAsTokens(nullNode0);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) jsonParserDelegate0, "cfeAwA|QlP");
      assertNotNull(jsonMappingException0);
      
      jsonMappingException0.getPathReference();
      jsonMappingException0.getProcessor();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("date-time");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "date-time");
      jsonMappingException_Reference0.writeReplace();
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(lineNumberReader0);
      SQLDataException sQLDataException0 = new SQLDataException("", "date-time", 37);
      MockIOException mockIOException0 = new MockIOException(sQLDataException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "", (Throwable) mockIOException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException(stringReader0, "Cannot pass null fieldName", jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      int[] intArray0 = new int[8];
      intArray0[0] = 782;
      intArray0[1] = 782;
      intArray0[2] = 1880;
      intArray0[3] = 360;
      intArray0[4] = 1880;
      intArray0[5] = 782;
      intArray0[6] = (-1905);
      intArray0[7] = 1880;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("9iO6F[o?^~M91^?x9", "Sq^a", intArray0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(1953);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      batchUpdateException0.setNextException(sQLClientInfoException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("9iO6F[o?^~M91^?x9", "9iO6F[o?^~M91^?x9", 782, batchUpdateException0);
      SQLWarning sQLWarning0 = new SQLWarning("", (String) null, 1880, sQLNonTransientConnectionException0);
      sQLWarning0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) sQLWarning0);
      jsonMappingException0.fillInStackTrace();
      sQLWarning0.addSuppressed(sQLNonTransientConnectionException0);
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, (Object) null, (-425));
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, ".nhI");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JavaType javaType0 = null;
      BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<JsonParserSequence> class0 = JsonParserSequence.class;
      Class<ObjectInputStream> class1 = ObjectInputStream.class;
      MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class0);
      MapLikeType mapLikeType1 = mapLikeType0.withKeyTypeHandler(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        basicClassIntrospector0.forSerialization((SerializationConfig) null, mapLikeType1, (ClassIntrospector.MixInResolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "char[]", 0, 0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(355);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("char[]", (String) null, sQLRecoverableException0);
      sQLTransientException0.fillInStackTrace();
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      charArrayWriter0.writeTo(charArrayWriter1);
      hashMap0.put("char[]", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("char[]", "char[]", hashMap0, sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter1, "char[]", sQLClientInfoException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("char[]", jsonMappingException0);
      jsonMappingException1._buildMessage();
      jsonMappingException0.prependPath((Object) null, "(was ");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("char[] (through reference chain: UNKNOWN[\"(was \"])", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, objectMapper0, pipedOutputStream0, byteArray0, 78, true);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("JSON");
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("com.fasterxml.jackson.databind.introspect.AnnotatedClass", "JSON");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLTimeoutException0);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException0._appendPathDesc(stringBuilder0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "com.fasterxml.jackson.databind.introspect.AnnotatedClass", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      jsonLocation0.toString();
      jsonLocation0.sourceDescription();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
      jsonLocation0.toString();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPath();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "[Source: UNKNOWN; line: -1, column: -1]", false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1202, objectReader0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.overrideFormatFeatures(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No FormatFeatures defined for generator of type com.fasterxml.jackson.core.json.UTF8JsonGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Closeable closeable0 = null;
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      sQLTransientException0.getLocalizedMessage();
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, " (through reference chain: ", sQLTransientException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransientException0, 0);
      jsonMappingException0.getStackTrace();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
      StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
      RootNameLookup rootNameLookup0 = new RootNameLookup();
      ConfigOverrides configOverrides0 = new ConfigOverrides();
      DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
      DeserializationConfig deserializationConfig1 = null;
      try {
        deserializationConfig1 = new DeserializationConfig(deserializationConfig0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.cfg.BaseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._fieldName = null;
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(5323);
      byte[] byteArray0 = new byte[4];
      byteQuadsCanonicalizer1.addName("_qdn2<h", 1, (-1), (-345));
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)67;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-272), (InputStream) null, objectReader0, byteQuadsCanonicalizer1, byteArray0, 3704, (-272), true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("[]", jsonLocation0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(3041);
      jsonMappingException_Reference0.getDescription();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("", "':_Wo", 5133);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
      assertEquals(3041, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = null;
      jsonMappingException_Reference0._fieldName = null;
      jsonMappingException_Reference0.toString();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.setAttribute(jsonMappingException_Reference0, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("&#\"LT%|!-$");
      int[] intArray0 = new int[5];
      intArray0[0] = (-1917);
      intArray0[1] = (-1917);
      intArray0[2] = 500;
      intArray0[3] = (-1917);
      intArray0[4] = 500;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("&#\"LT%|!-$", "", (-1917), batchUpdateException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("WRi%#!+ClNTK!e p^", (String) null, sQLInvalidAuthorizationSpecException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, (String) null, sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException2 = new JsonMappingException("WRi%#!+ClNTK!e p^", jsonLocation0, jsonMappingException1);
      jsonMappingException1.prependPath((Object) "", (-1917));
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      LRUMap<Object, JavaType> lRUMap0 = new LRUMap<Object, JavaType>(500, 500);
      jsonLocation0.sourceDescription();
      TypeFactory typeFactory1 = typeFactory0.withCache(lRUMap0);
      Class<ReaderBasedJsonParser> class0 = ReaderBasedJsonParser.class;
      ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
      ArrayType arrayType1 = arrayType0.withStaticTyping();
      StringBuilder stringBuilder0 = new StringBuilder("regex");
      arrayType1.toCanonical();
      StringBuilder stringBuilder1 = arrayType1.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = jsonMappingException2.getPathReference(stringBuilder1);
      assertSame(stringBuilder2, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "fI", 0, (Throwable) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLFeatureNotSupportedException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = new JsonMappingException((String) null, sQLFeatureNotSupportedException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException_Reference0.setIndex((-425));
      jsonMappingException_Reference0.toString();
      PlaceholderForType placeholderForType0 = new PlaceholderForType(4313);
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      placeholderForType0.isTypeOrSubTypeOf(class0);
      MapType mapType0 = typeFactory0.constructMapType((Class<? extends Map>) class0, (JavaType) placeholderForType0, (JavaType) placeholderForType0);
      StringBuilder stringBuilder0 = new StringBuilder("\"mw\"k/qN6p))p>7zrv");
      StringBuilder stringBuilder1 = mapType0.getErasedSignature(stringBuilder0);
      typeFactory0.constructRawMapType(class0);
      StringBuilder stringBuilder2 = placeholderForType0.getErasedSignature(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
      jsonMappingException0.getMessage();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.databind.ObjectMapper$DefaultTypeResolverBuilder", (Throwable) sQLFeatureNotSupportedException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "char[]", 0, 0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>(355);
      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_UNKNOWN;
      hashMap0.put((String) null, clientInfoStatus0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("char[]", (String) null, sQLRecoverableException0);
      sQLTransientException0.fillInStackTrace();
      ClientInfoStatus clientInfoStatus1 = ClientInfoStatus.REASON_UNKNOWN_PROPERTY;
      hashMap0.put("char[]", clientInfoStatus1);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("char[]", "char[]", hashMap0, sQLTransientException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayWriter1, "char[]", sQLClientInfoException0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("char[]", jsonMappingException0);
      jsonMappingException1._buildMessage();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) byteArrayOutputStream0, 0);
      assertNotSame(jsonMappingException2, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("date-time");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringReader0, "date-time");
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(lineNumberReader0);
      assertEquals((-1), jsonMappingException_Reference2.getIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0, sQLClientInfoException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileOutputStream0, ",$-0,^qcpX14[5:+lD~", sQLClientInfoException1);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileDescriptor0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)0;
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1189, objectMapper0, mockFileOutputStream0, byteArray0, (byte)29, false);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.disable(jsonGenerator_Feature0);
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(jsonGenerator0, false);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, "Cannot pass null fieldName", (Throwable) sQLClientInfoException1);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 0, false);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.useDefaultPrettyPrinter();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("dw<nsdRhr", (String) null, 3);
      SQLNonTransientException sQLNonTransientException1 = new SQLNonTransientException(sQLNonTransientException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("dw<nsdRhr", sQLNonTransientException1);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "dw<nsdRhr", (Throwable) sQLFeatureNotSupportedException0);
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      jsonMappingException0.prependPath((Object) "", (-3599));
      jsonMappingException0.prependPath((Object) "", "nX_&-[euB`9AQNpg");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      sQLFeatureNotSupportedException0.getLocalizedMessage();
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (Object) jsonMappingException0, "nX_&-[euB`9AQNpg");
      LineNumberReader lineNumberReader0 = null;
      try {
        lineNumberReader0 = new LineNumberReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("\"X5?pN9{rrE", "(was ");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "\"X5?pN9{rrE", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, "");
      jsonMappingException0.getPath();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProvider();
      JsonMappingException jsonMappingException1 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException1.prependPath((Object) objectMapper1, "");
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonParser_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setCodec(objectMapper1);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature1);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(738);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) objectOutputStream0);
      JsonMappingException.from(jsonGenerator0, (String) null);
      JsonMappingException.from(jsonGenerator0, (String) null);
      SerializerProvider serializerProvider1 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(serializerProvider1, "vaI21g!41/Rqu8`", (Throwable) jsonMappingException0);
      JsonMappingException jsonMappingException3 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "JSON", (Throwable) null);
      assertNotSame(jsonMappingException3, jsonMappingException2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory2 = jsonFactory1.setCharacterEscapes(jsonpCharacterEscapes0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NUMERIC_LEADING_ZEROS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      CharacterEscapes.standardAsciiEscapesForJSON();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      jsonFactory3.enable(jsonParser_Feature0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((OutputStream) null, jsonEncoding0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectMapper0, charsToNameCanonicalizer0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, false, false);
      JsonLocation jsonLocation0 = filteringParserDelegate0.getTokenLocation();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      referenceType0.withContentTypeHandler(javaType0);
      Class<CharArrayReader> class1 = CharArrayReader.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      StringBuilder stringBuilder0 = new StringBuilder(") V:S/Ax}");
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = "UNKNOWN";
      MockFileWriter mockFileWriter0 = new MockFileWriter("UNKNOWN", true);
      String string1 = "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor$Serialization";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("UNKNOWN");
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockFileWriter0, "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor$Serialization", sQLNonTransientException0);
      sQLNonTransientException0.getLocalizedMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)113;
      Class<JsonMappingException.Reference> class0 = JsonMappingException.Reference.class;
      try { 
        objectMapper0.readValue(byteArray0, class0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B4' (code 180)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (byte[])\"\uFFFD\uFFFD)q\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q", (Map<String, ClientInfoStatus>) null, sQLNonTransientException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("6(N");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintWriter0, 0);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-91);
      JsonParser jsonParser0 = jsonFactory1.createParser(byteArray0);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, jsonParser0, jsonParser0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonParserSequence0, "JSON");
      Object object0 = jsonMappingException_Reference0.getFrom();
      assertNotNull(object0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 1007);
      jsonMappingException_Reference0._fieldName = "]5,*TX}2B<YkYO";
      JsonMappingException jsonMappingException0 = new JsonMappingException("]5,*TX}2B<YkYO");
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      JsonMappingException.from(serializerProvider0, "Current token not START_OBJECT (needed to unwrap root name '%s'), but %s", (Throwable) jsonMappingException0);
      jsonMappingException_Reference0.setDescription(" (through reference chain: ");
      assertEquals(1007, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("c3r#/6.yW?2q;#!5-1");
      jsonMappingException_Reference0.setFieldName("");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, true);
      int int0 = (-191);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null, 37);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
