/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:26:09 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatFeature;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Type;
import java.net.URI;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("' of class ", "htE", (-2398));
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, " =~E'F", sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) filteringParserDelegate0, (JsonParser) filteringParserDelegate0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "?:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      jsonFactory0.createParser("JSON");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLFeatureNotSupportedException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(")TD=P{>E!;vQ]l", "");
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "", (Throwable) sQLFeatureNotSupportedException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      Object object0 = new Object();
      String string0 = null;
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath(object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLClientInfoException0);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLClientInfoException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sQLSyntaxErrorException0, 0);
      jsonMappingException_Reference0._index = 2;
      jsonMappingException_Reference1.toString();
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonLocation jsonLocation0 = new JsonLocation("rxT~9oFGZ6o'wX", 1L, (byte) (-50), (byte) (-37), (byte) (-97));
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayInputStream0, "rxT~9oFGZ6o'wX", jsonLocation0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("$FN[V}L1sT]NQ", jsonMappingException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "h", sQLFeatureNotSupportedException0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "", (-680), (long[]) null, sQLTransientException0);
      JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0._index = 0;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayBuilder0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(objectOutputStream0);
      JsonLocation jsonLocation0 = new JsonLocation(bufferedOutputStream0, 1, (-4310), 33);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedWriter0, ";B", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      jsonNodeFactory0.numberNode(1074L);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, class0, jsonToken0, "Problem binding JSON into Map.Entry: more than one entry in JSON (second field: '%s')");
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, ")", (Throwable) sQLTransientConnectionException0);
      jsonMappingException0._buildMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Cannot pass null fieldName");
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, ")");
      jsonNodeFactory0.numberNode((byte) (-127));
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("y<", "", (Throwable) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '';
      charArray0[3] = '~';
      charArray0[4] = '#';
      charArray0[5] = '&';
      charArray0[6] = 'x';
      charArray0[7] = 'o';
      charArray0[8] = 'w';
      JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "", sQLNonTransientException0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "@<b qs");
      jsonMappingException1.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      MockIOException mockIOException0 = new MockIOException(sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("G", 1031);
      jsonMappingException_Reference0.getDescription();
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(sequenceInputStream0, 931);
      jsonMappingException_Reference1.setDescription("G");
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      arrayNode0.traverse();
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException0 = new JsonMappingException("long");
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '.';
      charArray0[2] = '\'';
      charArray0[3] = '{';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 451, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 451, 17, false);
      JsonParser jsonParser0 = readerBasedJsonParser0.overrideStdFeatures(451, (-26));
      SQLWarning sQLWarning0 = new SQLWarning("Unexpected IOException (of type %s): %s", "Unexpected IOException (of type %s): %s", (-26));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "Unexpected IOException (of type %s): %s", (Throwable) sQLWarning0);
      jsonMappingException0.getPathReference();
      System.setCurrentTimeMillis(2048L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Unexpected IOException (of type %s): %s", "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Unexpected IOException (of type %s): %s
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (String) null);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", sQLTransactionRollbackException0);
      SQLException sQLException0 = new SQLException("", "", 151, sQLFeatureNotSupportedException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      int int0 = (-26);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, (-26));
      // Undeclared exception!
      try { 
        jsonMappingException1.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SQLException sQLException0 = new SQLException("22<?G", "22<?G");
      Object object0 = new Object();
      sQLException0.spliterator();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      String string0 = null;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("uL|wZOD/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SQLException sQLException0 = new SQLException((String) null, (String) null);
      Object object0 = new Object();
      sQLException0.spliterator();
      JsonMappingException.wrapWithPath((Throwable) sQLException0, (JsonMappingException.Reference) null);
      String string0 = "%8O}@l&W%bdL";
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream0, "%8O}@l&W%bdL");
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      MockFile mockFile0 = new MockFile("%8O}@l&W%bdL", "");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setDescription("0c)=@q7^W?s");
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) "0c)=@q7^W?s", "0c)=@q7^W?s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[?]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<DataInputStream> class0 = DataInputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("(was ", class0, "");
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException.wrapWithPath((Throwable) invalidFormatException0, (Object) jsonMappingException_Reference1, "");
      MockIOException mockIOException0 = new MockIOException("", invalidFormatException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.fromUnexpectedIOE(mockIOException0);
      jsonMappingException0._buildMessage();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "");
      PlaceholderForType placeholderForType0 = new PlaceholderForType(100);
      StringBuilder stringBuilder0 = new StringBuilder(100);
      StringBuilder stringBuilder1 = placeholderForType0.getErasedSignature(stringBuilder0);
      ((JsonMappingException)invalidFormatException0)._appendPathDesc(stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[?]");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      MockIOException mockIOException0 = new MockIOException("", jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1._buildMessage();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "B7o~[A#]{.`gu<v(`");
      jsonMappingException_Reference0.getFrom();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLException sQLException0 = new SQLException((Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException0.getSuppressed();
      jsonMappingException0.prependPath((Object) sQLException0, "B");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0._index = 0;
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "B", (Throwable) jsonMappingException1);
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException2.prependPath((Object) "(was java.sql.SQLException) (through reference chain: java.sql.SQLException[\"B\"]->UNKNOWN[0]->UNKNOWN[0])", 1729);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(18);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yDf(9{wS.mT5t4");
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      MockThrowable mockThrowable0 = new MockThrowable();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(mockThrowable0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "yDf(9{wS.mT5t4", (Throwable) batchUpdateException0);
      JsonMappingException.from((JsonGenerator) null, "", (Throwable) batchUpdateException0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_TRAILING_COMMA;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)4;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte)4, (int) (byte)4);
      String string0 = "/e1R";
      JsonMappingException.from(jsonParser0, string0, (Throwable) jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNKNOWN");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      jsonMappingException0._buildMessage();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UNKNOWN");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        JsonParserSequence.createFlattened(true, (JsonParser) null, (JsonParser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null KeyDeserializers", "", (-2795));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null KeyDeserializers", "XG}", 0, sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLRecoverableException0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putPOJO("", "Cannot pass null KeyDeserializers");
      Integer integer0 = new Integer((-671));
      ObjectNode objectNode2 = objectNode1.put("", integer0);
      ArrayNode arrayNode0 = objectNode2.putArray((String) null);
      arrayNode0.traverse();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(objectNode1, 4);
      jsonMappingException_Reference0.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultDeserializationContext_Impl0, (-26));
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y15^8");
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0, (-2750));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]mt$OH>m-=MM9An $C", "->", (-2750));
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, (Object) outputStreamWriter0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 40);
      int int0 = 56;
      jsonMappingException_Reference0._index = 56;
      jsonMappingException_Reference0.getIndex();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      String string0 = "";
      Class<MockFileInputStream> class0 = MockFileInputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedReader0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(")", ")", (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, (String) null, sQLNonTransientException0);
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0._desc = "s|B)A";
      jsonMappingException_Reference0.setDescription("s|B)A");
      int int0 = (-3249);
      jsonMappingException_Reference0._index = (-3249);
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference0, (-3249));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLDataException sQLDataException0 = new SQLDataException("dxYsXMYwAIEy#|l|", "|DOHsb hh(28% Fc?ek");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLDataException0, (Object) sQLDataException0, 41);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES;
      objectMapper0.configure(deserializationFeature0, true);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "|DOHsb hh(28% Fc?ek", (Throwable) jsonMappingException0);
      MockFile mockFile0 = new MockFile("dxYsXMYwAIEy#|l|", "|DOHsb hh(28% Fc?ek");
      boolean boolean0 = true;
      mockFile0.getCanonicalPath();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0, "', '");
      jsonMappingException_Reference0.setFieldName("|DOHsb hh(28% Fc?ek");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("w'E4mQ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "uL|wZOD/");
      jsonMappingException_Reference0.getFieldName();
      String string0 = "com.fasterxml.jackson.databind.deser.std.StringDeserializer";
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 0;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setDescription("G");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      MockIOException mockIOException0 = new MockIOException("", invalidFormatException0);
      JsonMappingException.fromUnexpectedIOE(mockIOException0);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) "Cannot deserialize value of type `java.lang.String` from String \"\": ", "G");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      MockIOException mockIOException0 = new MockIOException("", invalidFormatException0);
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) "Cannot deserialize value of type `java.lang.String` from String \"\": ", "G");
      jsonMappingException0.getPathReference();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "w>+C@TzT-a6~j/Y@");
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLException sQLException0 = new SQLException((String) null, "Yw");
      Object object0 = new Object();
      sQLException0.spliterator();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, object0, 93);
      jsonMappingException0.printStackTrace();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "Yw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, "uL|wZOD/");
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
      String string0 = "com.fasterxml.jackson.databind.deser.std.StringDeserializer";
      PipedWriter pipedWriter0 = new PipedWriter();
      int int0 = 0;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<BufferedWriter> class0 = BufferedWriter.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNativeValueException(beanDeserializerFactory0, class0);
      jsonMappingException0.prependPath((Object) defaultDeserializationContext_Impl0, (-26));
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
      ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
      TextNode textNode0 = arrayNode0.textNode("");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(textNode0, (-1275));
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(451);
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLException sQLException0 = new SQLException((Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLException0, jsonMappingException_Reference0);
      jsonMappingException0.fillInStackTrace();
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException0.getSuppressed();
      jsonMappingException0.prependPath((Object) sQLException0, "B");
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference();
      jsonMappingException_Reference0._index = 0;
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "B", (Throwable) jsonMappingException1);
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException2.prependPath((Object) "(was java.sql.SQLException) (through reference chain: java.sql.SQLException[\"B\"]->UNKNOWN[0])", 1729);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      MockIOException mockIOException0 = new MockIOException("");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "", mockIOException0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayBuilder0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArrayBuilder0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) byteArrayBuilder0;
      objectArray0[5] = (Object) byteArrayBuilder0;
      objectArray0[6] = (Object) byteArrayBuilder0;
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format("", objectArray0);
      mockIOException0.printStackTrace(printWriter0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null, sQLTransientConnectionException0);
      jsonMappingException0.prependPath((Object) jsonMappingException_Reference0, (-1762));
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException0.toString();
      jsonMappingException0.getPath();
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.JsonMappingException:  (through reference chain: com.fasterxml.jackson.databind.JsonMappingException$Reference[?])");
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "SWn1~DATFxdG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("Cannot pass null KeyDeserializers", "", (-2795));
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Cannot pass null KeyDeserializers", "XG}", 0, sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLRecoverableException0);
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      ObjectNode objectNode1 = objectNode0.putPOJO("", "Cannot pass null KeyDeserializers");
      Integer integer0 = new Integer((-671));
      ObjectNode objectNode2 = objectNode1.put("", integer0);
      ArrayNode arrayNode0 = objectNode2.putArray((String) null);
      JsonParser jsonParser0 = arrayNode0.traverse();
      JsonMappingException.from(jsonParser0, "UNKNOWN");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "LqO1n!PnB`2EdW@qI}", (Throwable) sQLWarning0);
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "Unexpected IOException (of type %s): %s");
      jsonMappingException1.initCause(jsonMappingException0);
      JsonFactory jsonFactory0 = new JsonFactory();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
      JsonMappingException.from(jsonParser0, "");
      BeanDeserializerModifier beanDeserializerModifier1 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
      beanDeserializerFactory0.withDeserializerModifier(beanDeserializerModifier1);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected IOException (of type %s): %s");
      jsonMappingException0.getPathReference(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.toString();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonLocation jsonLocation0 = new JsonLocation("com.fasterxml.jackson.databind.module.SimpleSerializers", (-1495L), (-1), (-1));
      JsonMappingException jsonMappingException0 = new JsonMappingException("com.fasterxml.jackson.databind.module.SimpleSerializers", jsonLocation0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException1.printStackTrace();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException0.getPath();
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.toString();
      String string0 = "!o$n%N1I-x5J+.";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("!o$n%N1I-x5J+.", "J\"G'Guf'a=zpm%Hr");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // J\"G'Guf'a=zpm%Hr
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.missingTypeIdException((JavaType) null, "<TfA#y\"6me%8:bcO");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "<TfA#y\"6me%8:bcO", (Throwable) jsonMappingException0);
      jsonMappingException0.getLocalizedMessage();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl1.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "<TfA#y\"6me%8:bcO");
      JsonParser jsonParser0 = null;
      JsonMappingException.from((JsonParser) null, "", (Throwable) jsonMappingException1);
      boolean boolean0 = false;
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("<TfA#y\"6me%8:bcO", "", false, 'O', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "com.fasterxml.jackson.core.JsonFactory$Feature");
      JsonMappingException.from((JsonParser) null, "string value", (Throwable) jsonMappingException0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "V+-B!7x`8");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl1.setAttribute(object0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("hyhx,d8jgGwQeS%Z}", (-1));
      jsonMappingException_Reference0.setDescription("");
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "XG}");
      MockIOException mockIOException0 = new MockIOException("XG}", jsonMappingException0);
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.serializerInstance((Annotated) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y15^8");
      mockFileOutputStream0.getChannel();
      mockFileOutputStream0.close();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0, (-2750));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]mt$OH>m-=MM9An $C", "->", (-2750));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null, jsonMappingException1);
      SQLException sQLException0 = new SQLException("y15^8", sQLNonTransientException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "y15^8", (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("^0z.-7d|7N0");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = "wXrP>_uh01";
      DeserializationContext deserializationContext0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "wXrP>_uh01", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 41);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 41);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackInputStream0, 41);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0._from = (Object) "com.fasterxml.jackson.databind.JsonMappingException";
      jsonMappingException_Reference0.setDescription("com.fasterxml.jackson.databind.JsonMappingException");
      jsonMappingException_Reference0._fieldName = "com.fasterxml.jackson.databind.JsonMappingException";
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      jsonMappingException_Reference0.getFieldName();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-2047);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Byte byte0 = new Byte((byte)0);
      Class<Integer> class0 = Integer.class;
      defaultDeserializationContext_Impl0.weirdNumberException(byte0, class0, "!17KM");
      Class<PushbackReader> class1 = PushbackReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class1, "2<m#btj!", "2<m#btj!");
      jsonMappingException0.getPathReference();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("!17KM", "Unexpected IOException (of type %s): %s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Unexpected IOException (of type %s): %s
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0);
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "z(MI", (Throwable) sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      String string0 = "";
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", "", 3);
      JsonMappingException.from(serializerProvider0, "Cannot pass null fieldName", (Throwable) sQLFeatureNotSupportedException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "UNKNOWN");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      Class<CharArrayReader> class0 = CharArrayReader.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException((String) null, class0, (String) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.getProcessor();
      JavaType javaType0 = TypeFactory.unknownType();
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, javaType0);
      ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("U\",58u<Dl", "U\",58u<Dl", 0, jsonMappingException0);
      AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLNonTransientConnectionException0);
      defaultDeserializationContext_Impl0.hasValueDeserializerFor(arrayType0, atomicReference0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      deserializerFactoryConfig0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "nTA.u,Zy");
      jsonMappingException1.getSuppressed();
      jsonMappingException0.prependPath((Object) deserializerFactoryConfig0, "nTA.u,Zy");
      jsonMappingException1.getProcessor();
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
