/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:24:40 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver;
import com.fasterxml.jackson.databind.module.SimpleDeserializers;
import com.fasterxml.jackson.databind.module.SimpleValueInstantiators;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("/qUg0\":q\"");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) null, "JSON");
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException_Reference1.setDescription("JSON");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference1);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException2.getMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      jsonMappingException2.getMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (Object) null, "JSON");
      BooleanNode booleanNode0 = BooleanNode.FALSE;
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, (JsonMappingException.Reference) null);
      jsonMappingException2.prependPath((JsonMappingException.Reference) null);
      jsonMappingException2.prependPath(jsonMappingException_Reference1);
      jsonMappingException1.prependPath(jsonMappingException_Reference1);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("V");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference3 = new JsonMappingException.Reference();
      jsonMappingException1.prependPath(jsonMappingException_Reference3);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "t+y&\\#f,t";
      JsonMappingException jsonMappingException0 = new JsonMappingException("t+y&#f,t");
      jsonMappingException0.prependPath((Object) "t+y&#f,t", "t+y&#f,t");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "t+y&#f,t");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter1, "<");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException_Reference0.toString();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = new JsonMappingException("t+y&#f,t", jsonMappingException0);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, true);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1);
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      objectMapper1.convertValue((Object) objectMapper0, class0);
      int int0 = (-1958);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) string0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLNonTransientException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      System.setCurrentTimeMillis(0L);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "", "");
      JsonParser jsonParser0 = null;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      jsonMappingException0.getPath();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "?bqwh'Ia|'zF", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("uEzVUW", "uEzVUW");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) "uEzVUW", "uEzVUW");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("A");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) typeBindings0, "A");
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      JsonFactory jsonFactory1 = new JsonFactory(objectReader0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("A (through reference chain: com.fasterxml.jackson.databind.type.TypeBindings[\"A\"])", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = '#';
      charArray0[2] = ' ';
      charArray0[3] = '0';
      charArray0[4] = '\'';
      charArray0[5] = '(';
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0, 1708, (-1));
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException.from((JsonParser) filteringParserDelegate0, "", (Throwable) jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0);
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.io.PipedInputStream[?]", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ARRAY;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      TypeBindings.emptyBindings();
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLTransientException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) byteArrayInputStream0, "");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals(2, list0.size());
      
      String string0 = jsonMappingException1.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("[");
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      sQLTransientConnectionException0.getSuppressed();
      typeBindings0.getTypeParameters();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, (Object) typeBindings0, "[");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, "y`OzG+-rZ$a9MXWx");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException[\"y`OzG+-rZ$a9MXWx\"]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      TypeBindings.emptyBindings();
      Charset.defaultCharset();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("java.rmi.server.UnicastRemoteObject", (String) null, 3231, hashMap0);
      SQLTransientException sQLTransientException0 = new SQLTransientException(sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLTransientException0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("UNKNOWN[?]");
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException("8|G8-85x;G4n%|[2");
      jsonMappingException0.getPathReference();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonMappingException0, (-1160));
      jsonMappingException_Reference0.setIndex(921);
      jsonMappingException_Reference0.getDescription();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = null;
      try {
        defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl((DefaultSerializerProvider.Impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.SerializerProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "}`H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.copy();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "String \"%s\"");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) pipedOutputStream0, "String \"%s\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      jsonFactory0.copy();
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "k|eDCX|C%", (Throwable) sQLTransactionRollbackException0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonMappingException0.getPath();
      ReaderBasedJsonParser readerBasedJsonParser0 = (ReaderBasedJsonParser)jsonMappingException0.getProcessor();
      assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonFactory jsonFactory2 = jsonFactory0.copy();
      jsonFactory2.setRootValueSeparator("JSON");
      char[] charArray0 = new char[0];
      JsonParser jsonParser0 = jsonFactory1.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      sQLTransactionRollbackException0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "k|eDCX|C%", (Throwable) sQLTransactionRollbackException0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      jsonMappingException0.getPath();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, false);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON", (Throwable) sQLTransactionRollbackException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("k|eDCX|C%", 3156);
      jsonMappingException_Reference0.setFieldName("2UbXzW#xn|");
      jsonMappingException_Reference0.getFieldName();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      jsonMappingException_Reference0.toString();
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0);
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
      jsonFactory1.configure(jsonGenerator_Feature1, false);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 't';
      charArray0[2] = 'J';
      charArray0[3] = '2';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLTransactionRollbackException0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertFalse(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "w}}tw#9'JNLgk'3B0$");
      jsonMappingException0._buildMessage();
      Class<DataOutputStream> class0 = DataOutputStream.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(jsonMappingException0, class0);
      jsonMappingException0.prependPath((Object) defaultDeserializationContext0, 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("w}}tw#9'JNLgk'3B0$");
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string1 = invalidFormatException0.toString();
      assertEquals("com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.io.DataOutputStream` from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type `com.fasterxml.jackson.databind.JsonMappingException`: incompatible types", string1);
      
      String string2 = jsonMappingException0._buildMessage();
      assertEquals("w}}tw#9'JNLgk'3B0$ (through reference chain: com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$Impl[0])", string2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, 3156);
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getFieldName();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "", (Throwable) sQLException0);
      jsonMappingException_Reference0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLException0, (Object) "", (-4580));
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
      
      String string1 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.io.PipedWriter[\"\"]", string1);
      assertNotNull(string1);
      assertEquals(3156, jsonMappingException_Reference0.getIndex());
      assertEquals("", jsonMappingException_Reference0.getFieldName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      char[] charArray0 = new char[7];
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "2ko`", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      jsonFactory1.copy();
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "UNKNOWN[?]", (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      char[] charArray0 = new char[7];
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
      jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonGenerator_Feature0, false);
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0);
      SQLDataException sQLDataException0 = new SQLDataException("-Xw");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "J", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "", jsonMappingException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTransientException sQLTransientException0 = new SQLTransientException("");
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ARRAY;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'mCZz|bC}m`5p2&g\"P<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      TypeBindings.emptyBindings();
      SQLDataException sQLDataException0 = new SQLDataException("");
      sQLTransientException0.getLocalizedMessage();
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, (String) null, sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertTrue(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("->", "UNKNOWN[?]", 0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) dataInputStream0, (int) (byte)34);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("UNKNOWN[?]->java.io.DataInputStream[34]", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Y7");
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.SCALAR;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFormat_Shape0, "Y7");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      TypeBindings.emptyBindings();
      SQLDataException sQLDataException0 = new SQLDataException("ICzHR.lo");
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "ICzHR.lo", sQLDataException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory jsonFactory1 = jsonFactory0.setCodec((ObjectCodec) null);
      JsonParser jsonParser0 = jsonFactory1.createParser((InputStream) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "Y7");
      jsonMappingException1._buildMessage();
      jsonMappingException0.prependPath((Object) list0, "2Y@7~");
      assertFalse(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'S';
      charArray0[2] = '0';
      charArray0[3] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, charArrayReader0, objectMapper0, charsToNameCanonicalizer0, charArray0, 1, 3156, false);
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) readerBasedJsonParser0);
      JsonLocation jsonLocation0 = dupDetector0.findLocation();
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException((JavaType) null, "(was ", "");
      JsonMappingException jsonMappingException1 = new JsonMappingException("", jsonLocation0, jsonMappingException0);
      Object object0 = jsonMappingException1.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k|eDCX|C%");
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "k|eDCX|C%", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.getPath();
      jsonMappingException0.toString();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      String string0 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", (String) null, (byte) (-2));
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, "");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) jsonMappingException_Reference1, 10);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("UNKNOWN[?]", string0);
      
      char[] charArray0 = new char[7];
      charArray0[6] = 'R';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN[?]", "[]", 10);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) inputStreamReader0, (int) (byte)34);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)126;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      String string0 = "iHUlGI_bn=Ew\\uC]:,";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, string0, 32768);
      JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayInputStream0, (int) (byte) (-2));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("->", false);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0, (byte) (-2));
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertEquals((-2), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[0];
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      sQLNonTransientException0.printStackTrace();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Cannot deserialize Class ", "", intArray0, sQLNonTransientException0);
      MockIOException mockIOException0 = new MockIOException("", batchUpdateException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) sQLNonTransientException0, "fMX)");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-36), (byte) (-58));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pipedInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sequenceInputStream0, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.JsonMappingException", (Throwable) null);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.JsonMappingException");
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '@';
      charArray0[2] = '/';
      charArray0[3] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) charArrayReader0, 1000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockPrintWriter mockPrintWriter0 = new MockPrintWriter("awt.+<");
          Object[] objectArray0 = new Object[4];
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "awt.+<");
          objectArray0[0] = (Object) mockPrintWriter0;
          objectArray0[1] = (Object) mockPrintWriter0;
          objectArray0[2] = (Object) "awt.+<";
          objectArray0[3] = (Object) "awt.+<";
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "awt.+<");
          PrintWriter printWriter0 = mockPrintWriter0.format("awt.+<", objectArray0);
          JsonMappingException jsonMappingException0 = new JsonMappingException(printWriter0, "awt.+<");
          jsonMappingException0._appendPathDesc((StringBuilder) null);
          JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
          jsonMappingException_Reference0.setIndex((-675));
          mockPrintWriter0.println(0.0);
          SQLWarning sQLWarning0 = new SQLWarning("COLOR", jsonMappingException0);
          String string0 = "";
          JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, "");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor117.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(defaultSerializerProvider_Impl0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl2 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "Invalid type definition for type %s: %s");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) defaultSerializerProvider_Impl0, 1);
      StringBuilder stringBuilder0 = new StringBuilder();
      jsonMappingException1._appendPathDesc(stringBuilder0);
      assertEquals("com.fasterxml.jackson.databind.ser.DefaultSerializerProvider$Impl[1]", stringBuilder0.toString());
      
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference((Object) null, 109);
      jsonMappingException_Reference1.setFieldName("");
      assertEquals(109, jsonMappingException_Reference1.getIndex());
      
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      SQLException sQLException0 = new SQLException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "UNKNOWN[?]", (Throwable) sQLException0);
      String string1 = jsonMappingException_Reference0.toString();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNotNull(string1);
      
      PlaceholderForType placeholderForType0 = new PlaceholderForType(6);
      StringBuilder stringBuilder0 = new StringBuilder(74);
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      StringBuilder stringBuilder2 = placeholderForType0.getGenericSignature(stringBuilder1);
      jsonMappingException0.getPathReference(stringBuilder2);
      String string2 = jsonMappingException0._buildMessage();
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, 3156);
      jsonMappingException_Reference0.setFieldName("");
      assertEquals(3156, jsonMappingException_Reference0.getIndex());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      TypeReference<PipedInputStream> typeReference0 = (TypeReference<PipedInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", typeReference0);
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("UNKNOWN[?]", "U=", (byte)34);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) sQLNonTransientConnectionException0, (int) (byte)34);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LA<", "LA<");
      JsonMappingException jsonMappingException0 = new JsonMappingException("LA<", (JsonLocation) null, sQLTransientConnectionException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("LA<", string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransientConnectionException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      charArray0[4] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException2 = new JsonMappingException(charArrayReader0, "[]");
      List<JsonMappingException.Reference> list0 = jsonMappingException1.getPath();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLException sQLException0 = new SQLException("", "", 0);
      sQLException0.fillInStackTrace();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, (String) null, (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("M|Hd7B?'>w/r");
      JsonMappingException jsonMappingException0 = new JsonMappingException("FAIL_ON_EMPTY_BEANS", sQLSyntaxErrorException0);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withValueInstantiators(simpleValueInstantiators0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(deserializerFactory0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLSyntaxErrorException0.forEach(consumer0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "", (Throwable) jsonMappingException0);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k|eDCX|C%");
      JsonMappingException jsonMappingException0 = new JsonMappingException("k|eDCX|C%", (Throwable) null);
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SimpleDeserializers simpleDeserializers0 = new SimpleDeserializers();
      DeserializerFactoryConfig deserializerFactoryConfig1 = deserializerFactoryConfig0.withAdditionalDeserializers(simpleDeserializers0);
      SimpleValueInstantiators simpleValueInstantiators0 = new SimpleValueInstantiators();
      DeserializerFactoryConfig deserializerFactoryConfig2 = deserializerFactoryConfig1.withValueInstantiators(simpleValueInstantiators0);
      SimpleAbstractTypeResolver simpleAbstractTypeResolver0 = new SimpleAbstractTypeResolver();
      DeserializerFactoryConfig deserializerFactoryConfig3 = deserializerFactoryConfig2.withAbstractTypeResolver(simpleAbstractTypeResolver0);
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig3);
      beanDeserializerFactory0.withAdditionalDeserializers(simpleDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "k|eDCX|C%");
      jsonMappingException1._buildMessage();
      StringWriter stringWriter0 = new StringWriter();
      Class<MockFileReader> class0 = MockFileReader.class;
      InvalidFormatException invalidFormatException0 = (InvalidFormatException)defaultDeserializationContext_Impl0.weirdNativeValueException(stringWriter0, class0);
      invalidFormatException0.prependPath((Object) "k|eDCX|C%", 4851);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription((String) null);
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException0._buildMessage();
      Object object0 = new Object();
      jsonMappingException0.toString();
      ((JsonMappingException)invalidFormatException0)._buildMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LA<", "LA<");
      JsonMappingException jsonMappingException0 = new JsonMappingException("LA<", (JsonLocation) null, sQLTransientConnectionException0);
      jsonMappingException0.getMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransientConnectionException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(mockIOException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransientConnectionException1);
      JsonMappingException.from((JsonGenerator) null, "com.fasterxml.jackson.databind.JsonMappingException$Reference", (Throwable) null);
      // Undeclared exception!
      try { 
        jsonMappingException1.initCause(sQLTransientConnectionException0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with java.sql.SQLTransientConnectionException: LA<
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      JsonFactory jsonFactory2 = jsonFactory1.copy();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory3 = jsonFactory2.setInputDecorator(inputDecorator0);
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((DataOutput) null);
      jsonFactory0.createGenerator((DataOutput) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((Throwable) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) sQLTransientConnectionException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "", (Throwable) jsonMappingException0);
      // Undeclared exception!
      try { 
        jsonMappingException0.initCause(jsonMappingException1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't overwrite cause with com.fasterxml.jackson.databind.JsonMappingException: 
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("jz{g.305L~'5z", (JsonLocation) null);
      jsonMappingException0.toString();
      jsonMappingException0.getPathReference();
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.ANY;
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonFormat_Shape0, 0);
      // Undeclared exception!
      try { 
        jsonMappingException1.printStackTrace((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockThrowable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(32767);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, "Zq_");
      jsonMappingException_Reference0._desc = "t4'vd(LtZYn:/!J'";
      jsonMappingException_Reference0.setFieldName("Zq_");
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference("Zq_");
      jsonMappingException_Reference0.setFieldName("Zq_");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(integer0, "Zq_");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Zq_");
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      jsonMappingException0.prependPath((Object) filteringParserDelegate0, 584);
      assertEquals(0, filteringParserDelegate0.getMatchCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException("Y-");
      JsonFormat.Shape jsonFormat_Shape0 = JsonFormat.Shape.SCALAR;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(jsonFormat_Shape0, "Y-");
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      Class<MockFileWriter> class0 = MockFileWriter.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      resolvedRecursiveType0.getInterfaces();
      // Undeclared exception!
      try { 
        TypeBindings.create((Class<?>) class0, (JavaType) resolvedRecursiveType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot create TypeBindings for class org.evosuite.runtime.mock.java.io.MockFileWriter with 1 type parameter: class expects 0
         //
         verifyException("com.fasterxml.jackson.databind.type.TypeBindings", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "sNx_v}7n715\"q[.";
      JsonMappingException jsonMappingException0 = new JsonMappingException("sNx_v}7n715\"q[.");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("", 1989);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, "");
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference1.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference0, false);
      int int0 = 0;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        iOContext0.releaseTokenBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      String string0 = "J@d ";
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "");
      defaultSerializerProvider_Impl0.copy();
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("J@d ", "J@d ", 51, sQLTransientException0);
      SQLTransientException sQLTransientException1 = new SQLTransientException(sQLTransactionRollbackException0);
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "J@d ", (Throwable) sQLTransientException1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("J@d ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockPrintStream0);
      // Undeclared exception!
      try { 
        defaultSerializerProvider_Impl0.reportMappingProblem((Throwable) sQLTransientException1, "Q)MWWx", (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DatabindContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("LA<", "LA<");
      JsonMappingException jsonMappingException0 = new JsonMappingException("LA<", (JsonLocation) null, sQLTransientConnectionException0);
      jsonMappingException0.getMessage();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTransientConnectionException0, "com.fasterxml.jackson.databind.JsonMappingException$Reference");
      MockIOException mockIOException0 = new MockIOException((Throwable) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) inputStreamReader0, (-2312));
      JsonMappingException jsonMappingException2 = JsonMappingException.fromUnexpectedIOE(jsonMappingException1);
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
      ObjectReader objectReader0 = objectMapper1.reader(contextAttributes0);
      String string0 = "";
      try { 
        objectReader0.readValues("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No value type configured for ObjectReader
         //  at [Source: (String)\"\"; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.databind.exc.InvalidDefinitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, (String) null);
      jsonMappingException0.getPathReference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.with(beanDeserializerFactory0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ")");
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedWriter0, 3156);
      jsonMappingException_Reference0.setFieldName("");
      jsonMappingException_Reference0.getFieldName();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      SQLException sQLException0 = new SQLException();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider0, "", (Throwable) sQLException0);
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("", jsonMappingException_Reference0.getFieldName());
      assertNotNull(string0);
      assertEquals("java.io.PipedWriter[\"\"]", string0);
      assertEquals(3156, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 3689);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      String string0 = "[simple type, class ";
      MockFile mockFile0 = new MockFile("[simple type, class ");
      try { 
        jsonFactory1.createParser((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = ';';
      charArray0[2] = 'W';
      charArray0[3] = '2';
      charArray0[4] = '?';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ObjectReader[] objectReaderArray0 = new ObjectReader[2];
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper1);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider defaultSerializerProvider0 = defaultSerializerProvider_Impl0.copy();
      ObjectMapper objectMapper2 = new ObjectMapper(jsonFactory0, defaultSerializerProvider0, (DefaultDeserializationContext) null);
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
      ObjectReader objectReader0 = objectMapper2.reader(deserializationFeature0);
      objectReaderArray0[0] = objectReader0;
      ObjectReader objectReader1 = new ObjectReader(objectReader0, jsonFactory0);
      objectReaderArray0[1] = objectReader1;
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders(objectReaderArray0);
      DataFormatReaders.Match dataFormatReaders_Match0 = dataFormatReaders0.findFormat((InputStream) null);
      dataFormatReaders_Match0.getReader();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1176);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, charArrayReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-2954), 3, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) readerBasedJsonParser0, "|.p>4Z~6.+");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Vector> class0 = Vector.class;
      Class<PushbackReader> class1 = PushbackReader.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class0, (JavaType) simpleType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(collectionType0, simpleType0);
      StringBuilder stringBuilder0 = new StringBuilder(1335);
      StringBuilder stringBuilder1 = collectionType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = referenceType0.getErasedSignature(stringBuilder1);
      jsonMappingException0._appendPathDesc(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'G';
      charArray0[2] = 'l';
      charArray0[3] = 'Y';
      charArray0[4] = '*';
      charArray0[5] = 'N';
      charArray0[6] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(charArrayReader0, "IGNORE_UNKNOWN");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setRootValueSeparator("");
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonFactory jsonFactory3 = jsonFactory2.copy();
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'H';
      charArray0[2] = 'B';
      charArray0[3] = 'd';
      charArray0[4] = '(';
      charArray0[5] = 's';
      charArray0[6] = 'A';
      charArray0[7] = '(';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "AnnotationIntrospector returned key deserializer definition of type ", (Throwable) sQLTransactionRollbackException0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory3);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
      JsonMappingException.from(serializerProvider0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "JSON");
      String string0 = jsonMappingException1.getLocalizedMessage();
      assertEquals("JSON", string0);
      
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, jsonParser0, jsonParser0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParserSequence0, ": ");
      assertSame(jsonMappingException2, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k|eDCX|C%");
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "k|eDCX|C%", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalDeserializers(deserializers_Base0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      boolean boolean0 = true;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, deserializers_Base0, true);
      int int0 = 390;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byte byte0 = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 5785, 22);
      String string0 = "J(WEw#D";
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(byteArrayInputStream0, "J(WEw#D");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }
}
