/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 18:37:59 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.Closeable;
import java.io.DataOutput;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pushbackReader0, 1892);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getFieldName();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(fileDescriptor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      Class<ObjectOutputStream> class1 = ObjectOutputStream.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      InvalidTypeIdException invalidTypeIdException0 = (InvalidTypeIdException)defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "", "");
      ((JsonMappingException)invalidTypeIdException0)._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException((Closeable) null, "com.fasterxml.jackson.databind.cfg.MapperConfig");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) null);
      jsonMappingException0.toString();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "-g(^E-");
      jsonMappingException0.getProcessor();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      Class<ObjectOutputStream> class1 = ObjectOutputStream.class;
      Vector<JavaType> vector0 = new Vector<JavaType>();
      TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "", "");
      jsonMappingException0.getPathReference((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      MockThrowable mockThrowable0 = new MockThrowable(">Q&'g8 2>-5t{1}", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">Q&'g8 2>-5t{1}", intArray0, mockThrowable0);
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      jsonMappingException0.getPathReference();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      jsonMappingException0.getMessage();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) sQLRecoverableException0);
      jsonMappingException0.getLocalizedMessage();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "RAA}h", jsonMappingException0);
      SQLDataException sQLDataException0 = new SQLDataException((String) null, (String) null, (-92), sQLTimeoutException0);
      JsonMappingException.from((JsonParser) null, (String) null, (Throwable) sQLDataException0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0._buildMessage();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) jsonMappingException_Reference0, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileOutputStream0, "-g(^E-");
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("N#uY0J", class0, "o.M nK7S");
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M}[5#<BRTv'5i", "M}[5#<BRTv'5i");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" (through reference chain: ");
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, " (through reference chain: ", (Throwable) sQLNonTransientException0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M}[5#<BRTv'5i", "M}[5#<BRTv'5i");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLException sQLException0 = new SQLException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M}[5#<BRTv'5i", "M}[5#<BRTv'5i");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLRecoverableException0, "-Infinity");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      Class<BufferedWriter> class0 = BufferedWriter.class;
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
      JsonMappingException jsonMappingException0 = defaultSerializerProvider_Impl0.invalidTypeIdException(resolvedRecursiveType0, "-g(^E-", "Illegal character point (0x");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(typeBindings0, 0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("", (String) null, 1654);
      JsonMappingException.wrapWithPath((Throwable) sQLFeatureNotSupportedException0, jsonMappingException_Reference0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      int[] intArray0 = new int[5];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) batchUpdateException0, jsonMappingException_Reference0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      jsonMappingException0.getPathReference(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning("Z", ") ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BooleanNode booleanNode0 = BooleanNode.TRUE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      Class<ObjectOutputStream> class0 = ObjectOutputStream.class;
      ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectReader0, charsToNameCanonicalizer0, charArray0, 33, 1, false);
      JsonMappingException jsonMappingException0 = new JsonMappingException(readerBasedJsonParser0, "n,aY", sQLWarning0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, false, false);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException((String) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "UNKNOWN", (Throwable) sQLNonTransientException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.getDescription();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference(bigInteger0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("HKpq|}H", "HKpq|}H");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M}[5#<BRTv'5i", "M}[5#<BRTv'5i");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "M}[5#<BRTv'5i");
      // Undeclared exception!
      try { 
        jsonMappingException1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("M}[5#<BRTv'5i", "M}[5#<BRTv'5i");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("'null', 'true', 'false' or NaN", class0, "");
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("HKpq|}H", "HKpq|}H");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      jsonMappingException0.getPath();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (Object) deserializerFactoryConfig0, 1654);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("(was java.sql.SQLRecoverableException) (through reference chain: com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig[1654])", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeBindings typeBindings0 = TypeBindings.emptyBindings();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(typeBindings0, 0);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.databind.type.TypeBindings[0]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate$Param");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertEquals("java.io.PipedInputStream[\"com.fasterxml.jackson.databind.deser.impl.CreatorCandidate$Param\"]", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(" (through reference chain: ");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 3425);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, jsonMappingException_Reference0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLIntegrityConstraintViolationException0);
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("\n at [Source: UNKNOWN; line: -1, column: -1]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "UNKNOWN[?]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VQf!yp");
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringReader0, "-Infinity", (JsonLocation) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("UpLa[rg?k*%IV<!");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("com.fasterxml.jackson.databind.module.SimpleValueInstantiators");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("1YT0", "", 784, sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("1YT0", sQLTransientConnectionException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[5];
      MockThrowable mockThrowable0 = new MockThrowable(">Q&'g8 2>-5t{1}", (Throwable) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(">Q&'g8 2>-5t{1}", intArray0, mockThrowable0);
      SQLWarning sQLWarning0 = new SQLWarning(batchUpdateException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 3);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      StringReader stringReader0 = new StringReader("Invalid custom escape definitions; custom escape not found for character code 0x");
      jsonMappingException0.prependPath((Object) stringReader0, "Invalid custom escape definitions; custom escape not found for character code 0x");
      assertEquals(3, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "com.fasterxml.jackson.databind.deser.impl.ReadableObjectId", "R!e=n2cP 5bBl7");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "com.fasterxml.jackson.databind.cfg.MapperConfig", (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(8vWe/>PU@,'T!zi{pq", "");
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "[TXV|wQk)-RncM", (Throwable) sQLTransientConnectionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((DataOutput) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "", (Throwable) null);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("/U");
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedReader0, "", sQLWarning0);
      Object object0 = jsonMappingException0.getProcessor();
      assertSame(object0, pipedReader0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "y=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      SQLDataException sQLDataException0 = new SQLDataException("-g(^E-", sQLClientInfoException0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "-g(^E-", (Throwable) sQLDataException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonLocation jsonLocation0 = JsonLocation.NA;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("");
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("", "", 0, sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", jsonLocation0, sQLRecoverableException0);
      jsonMappingException0.prependPath((Object) sQLSyntaxErrorException0, (-1375));
      assertEquals("", sQLSyntaxErrorException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("'null', 'true', 'false' or NaN", class0, "");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1210);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter0, 1603);
      jsonMappingException_Reference0.setDescription("");
      assertEquals(1603, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setFieldName(": ");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(594);
      assertEquals(594, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("HKpq|}H", "HKpq|}H");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLRecoverableException0, (JsonMappingException.Reference) null);
      Object object0 = new Object();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, object0, "HKpq|}H");
      // Undeclared exception!
      try { 
        jsonMappingException1._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }
}
