/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:33:13 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.DupDetector;
import com.fasterxml.jackson.core.json.JsonReadContext;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.time.format.TextStyle;
import java.util.HashMap;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      String string0 = jsonMappingException_Reference0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN[0]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonMappingException0._appendPathDesc((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "JSON", (Throwable) sQLTransientException0);
      jsonMappingException0.prependPath((Object) jsonFactory0, "JSON");
      assertFalse(jsonFactory0.canHandleBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("\"DXEDuW8O#{FnU|X");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = jsonMappingException0.getPathReference(stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "Mismatching names (", (Throwable) sQLInvalidAuthorizationSpecException0);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      String string0 = jsonMappingException0.getMessage();
      assertEquals("JSON", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "\n");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextStyle textStyle0 = TextStyle.SHORT_STANDALONE;
      TextStyle textStyle1 = textStyle0.asStandalone();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) textStyle1, ")f+YWQT9%~B1Ky");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      MockFile mockFile0 = new MockFile("Unexpected IOException (of type com.fasterxml.jackson.databind.JsonMappingException): JSON (through reference chain: java.sql.SQLIntegrityConstraintViolationException[\"JSON\"])");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) objectOutputStream0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) defaultDeserializationContext_Impl0, (-219));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(dataOutputStream0, 992);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      StringBuilder stringBuilder0 = new StringBuilder(4);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference(stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "0XZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DataTruncation dataTruncation0 = new DataTruncation(66, false, false, 66, 66);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "$y'XsTH5q", (Throwable) dataTruncation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserSequence0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      MockIOException mockIOException0 = new MockIOException("com.fasterxml.jackson.databind.JsonMappingException");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(hashMap0, mockIOException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLClientInfoException0, jsonMappingException_Reference0);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("~");
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<Integer> class0 = Integer.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("", class0, "");
      JsonMappingException jsonMappingException1 = null;
      try {
        jsonMappingException1 = new JsonMappingException(jsonParserDelegate0, "", jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3HUJDS[");
      int[] intArray0 = new int[9];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Problem determining whether filter of type '%s' should filter out `null` values: (%s) %s", intArray0, (Throwable) null);
      JsonMappingException jsonMappingException0 = new JsonMappingException(mockPrintWriter0, "need JSON String that contains type id (for subtype of %s)", batchUpdateException0);
      Object object0 = jsonMappingException0.getProcessor();
      assertSame(mockPrintWriter0, object0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = null;
      try {
        jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      String string0 = jsonMappingException_Reference0.toString();
      assertEquals("UNKNOWN[?]", string0);
      assertNotNull(string0);
      
      String string1 = jsonMappingException_Reference0.getFieldName();
      assertNull(string1);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ShortNode shortNode0 = new ShortNode((short)224);
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(shortNode0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "UNKNOWN[?]");
      StringBuilder stringBuilder0 = jsonMappingException0.getPathReference((StringBuilder) null);
      assertNull(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("(was ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "e|m.}0cJ.tGBNG9tF", (Throwable) sQLNonTransientException0);
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: e|m.}0cJ.tGBNG9tF", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      DecimalNode decimalNode0 = DecimalNode.ZERO;
      JsonParser jsonParser0 = objectMapper0.treeAsTokens(decimalNode0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) filteringParserDelegate0, "JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(tokenFilter0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.contains(jsonMappingException_Reference0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      SQLWarning sQLWarning0 = new SQLWarning();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("", sQLWarning0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("", sQLNonTransientConnectionException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTimeoutException0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot pass null fieldName", "Cannot pass null fieldName");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayOutputStream0, ")f+YWQT9%~B1Ky");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException0, (-129));
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("Cannot pass null fieldName (through reference chain: com.fasterxml.jackson.databind.JsonMappingException[?]->java.io.ByteArrayOutputStream[\")f+YWQT9%~B1Ky\"])", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("No content to map due to end-of-input", 1000);
      jsonMappingException_Reference0.getDescription();
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("java.lang.String[1000]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("JSON");
      JsonMappingException jsonMappingException0 = new JsonMappingException("JSON");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLIntegrityConstraintViolationException0, "JSON");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(class0, "");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("com.fasterxml.jackson.core.JsonProcessingException[\"\"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot pass null fieldName", "Cannot pass null fieldName");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayOutputStream0, ")f+YWQT9%~B1Ky");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("Cannot pass null fieldName (through reference chain: java.io.ByteArrayOutputStream[\")f+YWQT9%~B1Ky\"])", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65517);
      PipedInputStream pipedInputStream0 = new PipedInputStream(55);
      JsonLocation jsonLocation0 = new JsonLocation(pipedInputStream0, 9223372036854775807L, 65517, 331, 65517);
      JsonMappingException jsonMappingException0 = new JsonMappingException(byteArrayOutputStream0, ")f+YWQT9%~B1Ky", jsonLocation0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (JsonLocation) null);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("(was ");
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLNonTransientException0);
      String string0 = jsonMappingException0._buildMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot pass null fieldName", "Cannot pass null fieldName");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayOutputStream0, ")f+YWQT9%~B1Ky");
      StringBuilder stringBuilder0 = new StringBuilder(11);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) stringBuilder0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("(was ");
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "e|m.}0cJ.tGBNG9tF", (Throwable) sQLNonTransientException0);
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, "Properties=[", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser jsonParser0 = jsonFactory0.createNonBlockingByteArrayParser();
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0, jsonEncoding0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "JSON", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException1, jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("Cannot pass null fieldName", "Cannot pass null fieldName");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65535);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayOutputStream0, ")f+YWQT9%~B1Ky");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdNumberException((Number) null, class0, (String) null);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, (String) null, (Throwable) jsonMappingException0);
      assertNotNull(jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(65533);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeatureArray0[3];
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileReader0, true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 39, objectReader0, dataOutputStream0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) uTF8JsonGenerator0, "");
      assertNotNull(jsonMappingException0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsonReadContext jsonReadContext0 = JsonReadContext.createRootContext(2048, 2048, (DupDetector) null);
      JsonLocation jsonLocation0 = jsonReadContext0.getStartLocation((Object) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Unexpected IOException (of type %s): %s", "Unexpected IOException (of type %s): %s", 0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(",o;AEOT%h", ",o;AEOT%h", sQLSyntaxErrorException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException(",o;AEOT%h", jsonLocation0, sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("l", "l");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientConnectionException0, (Object) byteArrayOutputStream0, "l");
      jsonMappingException0.prependPath((Object) jsonMappingException0, 91);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("(was ");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLNonTransientException0, (Object) sQLNonTransientException0, 1);
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("java.sql.SQLNonTransientException[1]", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      int int0 = jsonMappingException_Reference0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 0);
      jsonMappingException_Reference0.setFieldName("");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Integer integer0 = new Integer((-1141));
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0, 3548);
      jsonMappingException_Reference0.setIndex((-1141));
      assertEquals((-1141), jsonMappingException_Reference0.getIndex());
  }
}
