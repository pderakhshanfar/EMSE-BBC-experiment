/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:41:57 GMT 2021
 */

package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilterContext;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.InputDecorator;
import com.fasterxml.jackson.core.io.OutputDecorator;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8DataInputJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DataFormatReaders;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializerFactory;
import com.fasterxml.jackson.databind.deser.Deserializers;
import com.fasterxml.jackson.databind.deser.ValueInstantiators;
import com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.PlaceholderForType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsonMappingException_ESTest extends JsonMappingException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) sQLTransientConnectionException0, "");
      jsonMappingException2.prependPath((Object) "", "");
      String string0 = jsonMappingException0.getLocalizedMessage();
      assertEquals("(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"\"]->java.sql.SQLTransientConnectionException[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?])", string0);
      
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) "", (-59));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JsonMappingException jsonMappingException4 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) pipedInputStream0, (-59));
      Integer integer0 = new Integer((-59));
      JsonMappingException jsonMappingException5 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) integer0, "");
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException6 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"\"]->java.sql.SQLTransientConnectionException[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?])", (-59));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException7 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, (Object) integer0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, (Object) "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"\"]->java.sql.SQLTransientConnectionException[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?])", (-59));
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, jsonMappingException_Reference0);
      jsonMappingException4.prependPath(jsonMappingException_Reference0);
      jsonMappingException6.prependPath(jsonMappingException_Reference0);
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException8 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException3, (Object) jsonMappingException3, "(was java.sql.SQLTransientConnectionException) (through reference chain: java.lang.String[\"\"]->java.sql.SQLTransientConnectionException[\"\"]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?]->UNKNOWN[?])");
      jsonMappingException8.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, (Object) pipedInputStream0, (-59));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException6, (Object) jsonMappingException1, (-59));
      jsonMappingException7.prependPath(jsonMappingException_Reference0);
      JsonMappingException jsonMappingException9 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      jsonMappingException9.prependPath(jsonMappingException_Reference0);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException4, jsonMappingException_Reference0);
      jsonMappingException5.prependPath(jsonMappingException_Reference0);
      jsonMappingException3.prependPath(jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper();
      objectMapper1.getSerializerProviderInstance();
      ObjectMapper objectMapper2 = objectMapper0.copy();
      try { 
        objectMapper0.writeValueAsBytes(objectMapper2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Infinite recursion (StackOverflowError) (through reference chain: com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"]->com.fasterxml.jackson.databind.ObjectMapper[\"factory\"]->com.fasterxml.jackson.databind.MappingJsonFactory[\"codec\"])
         //
         verifyException("com.fasterxml.jackson.databind.ser.std.BeanSerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      defaultDeserializationContext_Impl0.getParser();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonMappingException jsonMappingException0 = null;
      try {
        jsonMappingException0 = new JsonMappingException(filteringParserDelegate0, "Cannot deserialize Class ", (Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayWriter0, "");
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException0._path;
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setDescription("");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      linkedList0.removeLast();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference1.writeReplace();
      linkedList0.add(jsonMappingException_Reference1);
      Random.setNextRandom((-214));
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonMappingException_Reference0, (-932));
      // Undeclared exception!
      try { 
        jsonMappingException1._buildMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream("OKeQbPn");
      jsonMappingException0.prependPath((Object) mockPrintStream0, "OKeQbPn");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("OKeQbPn", "OKeQbPn");
      jsonMappingException0.prependPath((Object) sQLNonTransientConnectionException0, "%jUwvU!(bYR@\"E (2*H");
      JsonMappingException jsonMappingException1 = new JsonMappingException("OKeQbPn");
      JsonMappingException jsonMappingException2 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference0);
      JsonMappingException jsonMappingException3 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) sQLTransientConnectionException0, "OKeQbPn");
      jsonMappingException3.prependPath((Object) "OKeQbPn", "");
      jsonMappingException1.getLocalizedMessage();
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException1.getPath();
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException2, (Object) "OKeQbPn", (-2109));
      SQLWarning sQLWarning0 = new SQLWarning("Longest collision chain in symbol table (of size ", "");
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "Longest collision chain in symbol table (of size ", (Throwable) jsonMappingException1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.util.JsonParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int0 = 34;
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl0, "jcL.$s");
      jsonMappingException0.prependPath((JsonMappingException.Reference) null);
      // Undeclared exception!
      try { 
        jsonMappingException0.getLocalizedMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      jsonMappingException_Reference0.setIndex(0);
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      Class<Object> class0 = Object.class;
      InjectableValues.Std injectableValues_Std1 = injectableValues_Std0.addValue((Class<?>) class0, (Object) jsonMappingException_Reference1);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std1);
      JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setOutputDecorator(outputDecorator0);
      JsonParser jsonParser0 = jsonFactory1.createParser("");
      JsonParser jsonParser1 = objectReader0._considerFilter(jsonParser0, false);
      JsonMappingException.from(jsonParser1, "");
      assertEquals(0, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, (ObjectCodec) null, (OutputStream) null);
      uTF8JsonGenerator0.getCharacterEscapes();
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setCharacterEscapes((CharacterEscapes) null);
      String string0 = "";
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonGenerator0, "");
      jsonMappingException0._buildMessage();
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[8];
      deserializationFeatureArray0[0] = deserializationFeature0;
      deserializationFeatureArray0[1] = deserializationFeature0;
      deserializationFeatureArray0[2] = deserializationFeature0;
      deserializationFeatureArray0[3] = deserializationFeature0;
      deserializationFeatureArray0[4] = deserializationFeature0;
      deserializationFeatureArray0[5] = deserializationFeature0;
      deserializationFeatureArray0[6] = deserializationFeature0;
      deserializationFeatureArray0[7] = deserializationFeature0;
      objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      DataFormatReaders dataFormatReaders0 = new DataFormatReaders((ObjectReader[]) null);
      // Undeclared exception!
      try { 
        dataFormatReaders0.findFormat((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.deser.DataFormatReaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      jsonMappingException_Reference0.writeReplace();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
      JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(filteringParserDelegate0);
      // Undeclared exception!
      try { 
        JsonMappingException.from((JsonParser) jsonParserDelegate0, "8=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.filter.FilteringParserDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLWarning0, (Object) sQLWarning0, 2000);
      // Undeclared exception!
      try { 
        jsonMappingException0._appendPathDesc((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0);
      jsonMappingException_Reference0._from = (Object) jsonMappingException_Reference1;
      jsonMappingException_Reference0.writeReplace();
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0._from, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("", (Throwable) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      jsonMappingException0.getPathReference();
      jsonMappingException0.getMessage();
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) charArrayWriter0, "");
      jsonMappingException1.prependPath((JsonMappingException.Reference) null);
      LinkedList<JsonMappingException.Reference> linkedList0 = jsonMappingException0._path;
      jsonMappingException0._path = linkedList0;
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setDescription("");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      linkedList0.removeLast();
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "");
      jsonMappingException_Reference1.writeReplace();
      linkedList0.add(jsonMappingException_Reference1);
      Random.setNextRandom((-214));
      // Undeclared exception!
      try { 
        jsonMappingException0.getMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator((InputDecorator) null);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory3 = jsonFactory2.disable(jsonParser_Feature0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'x';
      charArray0[1] = '*';
      JsonParser jsonParser0 = jsonFactory3.createParser(charArray0);
      Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
      Class<String> class1 = String.class;
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1442);
      TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) placeholderForType0);
      JavaType[] javaTypeArray0 = new JavaType[7];
      javaTypeArray0[0] = (JavaType) placeholderForType0;
      javaTypeArray0[1] = (JavaType) placeholderForType0;
      javaTypeArray0[2] = (JavaType) placeholderForType0;
      javaTypeArray0[3] = (JavaType) placeholderForType0;
      javaTypeArray0[4] = (JavaType) placeholderForType0;
      javaTypeArray0[5] = (JavaType) placeholderForType0;
      javaTypeArray0[6] = (JavaType) placeholderForType0;
      CollectionType collectionType0 = CollectionType.construct((Class<?>) class0, typeBindings0, (JavaType) placeholderForType0, javaTypeArray0, (JavaType) placeholderForType0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      defaultDeserializationContext_Impl0.wrongTokenException(jsonParser0, (JavaType) collectionType0, jsonToken0, "JSON");
      Class<UTF8DataInputJsonParser> class2 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("f8$(:<y", class2, "f8$(:<y");
      Object object0 = jsonMappingException0.getProcessor();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory1 = jsonFactory0.configure(jsonParser_Feature0, false);
      JsonParser jsonParser0 = jsonFactory1.createParser((byte[]) null, (-1), (-391));
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      JsonMappingException jsonMappingException1 = new JsonMappingException(jsonParser0, "MFJ|q-cmksA", jsonMappingException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from((JsonGenerator) null, "MFJ|q-cmksA");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, inputStreamReader0, objectMapper0, charsToNameCanonicalizer0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonParser jsonParser0 = readerBasedJsonParser0.disable(jsonParser_Feature0);
      inputStreamReader0.getEncoding();
      DefaultDeserializationContext defaultDeserializationContext0 = objectReader0.createDeserializationContext(jsonParser0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Gw3 }K|{ERItF /h");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(" (through reference chain: ", sQLTransactionRollbackException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "Gw3 }K|{ERItF /h", (Throwable) sQLSyntaxErrorException0);
      jsonMappingException0.getProcessor();
      jsonMappingException0.getLocalizedMessage();
      SQLTransientException sQLTransientException0 = new SQLTransientException((String) null, "Gw3 }K|{ERItF /h", (-587), jsonMappingException0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) pushbackInputStream0, 1382);
      SQLException sQLException0 = new SQLException("", "s3FU@M}tH", sQLSyntaxErrorException0);
      JsonMappingException.from(jsonParser0, "ASCII", (Throwable) sQLException0);
      JsonMappingException jsonMappingException2 = JsonMappingException.from(jsonParser0, "s3FU@M}tH");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.from((JsonGenerator) null, (String) null);
      jsonMappingException_Reference0.getFieldName();
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, (Object) null, 8233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<UTF8DataInputJsonParser> class0 = UTF8DataInputJsonParser.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdStringException("f8$(:<y", class0, "f8$(:<y");
      jsonMappingException0.getProcessor();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(deserializerFactoryConfig0, 180);
      String string0 = jsonMappingException_Reference0.getDescription();
      assertEquals("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig[180]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-313L));
      MockThrowable mockThrowable0 = new MockThrowable("[no message for ");
      mockThrowable0.getStackTrace();
      mockThrowable0.fillInStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockThrowable0, (JsonMappingException.Reference) null);
      StringWriter stringWriter0 = new StringWriter();
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, "[no message for ");
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      jsonMappingException0.prependPath((Object) bufferedWriter0, "Z8cfxU~G@uA|5");
      jsonMappingException0.getProcessor();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("^xUXD|_N");
      JsonFactory jsonFactory0 = new JsonFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, 6, (int) (byte)0);
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      TokenFilterContext tokenFilterContext0 = TokenFilterContext.createRootContext(tokenFilter0);
      JsonLocation jsonLocation0 = tokenFilterContext0.getStartLocation("^xUXD|_N");
      JsonMappingException jsonMappingException0 = new JsonMappingException(jsonParser0, "JSON", jsonLocation0);
      jsonMappingException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "");
      jsonMappingException0.getPath();
      String string0 = jsonMappingException0.getMessage();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("");
      SQLException sQLException0 = new SQLException("", sQLTimeoutException0);
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 1105, sQLException0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("");
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: ", string0);
      
      String string1 = jsonMappingException0.getLocalizedMessage();
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException.Reference jsonMappingException_Reference1 = (JsonMappingException.Reference)jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertNull(string0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      defaultSerializerProvider_Impl0.getGenerator();
      JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate((JsonGenerator) null);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) jsonGeneratorDelegate0, (String) null);
      jsonMappingException0.prependPath(jsonMappingException_Reference1);
      assertEquals((-1), jsonMappingException_Reference1.getIndex());
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis(83L);
      IOException iOException0 = null;
      // Undeclared exception!
      try { 
        JsonMappingException.fromUnexpectedIOE((IOException) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("77yIpP", "LKSNXe[h[[;", 65536);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      StringBuilder stringBuilder0 = new StringBuilder(65536);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) stringBuilder0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(printWriter0, 65536);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(bufferedWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.io.BufferedWriter[?]", "LKSNXe[h[[;", 65536, sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.prependPath((Object) stringBuilder0, "");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, jsonMappingException_Reference0);
      assertEquals(8233, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsonParser jsonParser0 = null;
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "hGUZG(\"G?pjC");
      jsonMappingException0.toString();
      jsonMappingException0.getLocalizedMessage();
      jsonMappingException0.getPathReference((StringBuilder) null);
      jsonMappingException0._appendPathDesc((StringBuilder) null);
      JsonFactory jsonFactory0 = new JsonFactory();
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory0.setInputDecorator(inputDecorator0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
      ObjectReader objectReader0 = null;
      try {
        objectReader0 = new ObjectReader((ObjectReader) null, tokenFilter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.ObjectReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException((String) null);
      SQLTransientException sQLTransientException0 = new SQLTransientException("DW~]u#1L09<", "", 599, sQLIntegrityConstraintViolationException0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 63);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) bufferedInputStream1, 18);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<FilteringParserDelegate> class0 = FilteringParserDelegate.class;
      defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "DW~]u#1L09<");
      StringReader stringReader0 = new StringReader("DW~]u#1L09<");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 63);
      // Undeclared exception!
      try { 
        jsonMappingException0.prependPath((Object) lineNumberReader0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("^xUXD|_N");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      jsonFactory1.configure(jsonParser_Feature0, true);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<JsonProcessingException> class0 = JsonProcessingException.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, (String) null, (String) null);
      jsonMappingException0.prependPath((Object) jsonFactory2, "JSON");
      jsonMappingException0.toString();
      JsonMappingException jsonMappingException1 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext_Impl0, "", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException1.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      Deserializers.Base deserializers_Base0 = new Deserializers.Base();
      deserializerFactoryConfig0.withAdditionalDeserializers(deserializers_Base0);
      StdKeyDeserializers stdKeyDeserializers0 = new StdKeyDeserializers();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withAdditionalKeyDeserializers(stdKeyDeserializers0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.copy();
      String string0 = ")";
      JsonMappingException jsonMappingException0 = JsonMappingException.from((DeserializationContext) defaultDeserializationContext0, ")");
      System.setCurrentTimeMillis(0L);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ")");
      jsonMappingException0.getPathReference(stringBuilder0);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?jlV(>-");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3026, sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) "", 3026);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<String> class0 = String.class;
      JsonMappingException jsonMappingException1 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "", "");
      jsonMappingException1.prependPath((Object) "", "");
      String string0 = jsonMappingException0.toString();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException: (was java.sql.SQLTransientException) (through reference chain: java.lang.String[3026])", string0);
      
      String string1 = jsonMappingException0.getPathReference();
      assertEquals("java.lang.String[3026]", string1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(was ", "(was ", 50);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      SQLTransientException sQLTransientException0 = new SQLTransientException("java.sql.SQLTransientConnectionException[?]", "(was ", 50, sQLInvalidAuthorizationSpecException0);
      jsonMappingException0.prependPath((Object) sQLTransientConnectionException0, "(was ");
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      assertEquals(8233, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("^xUXD|_N");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, 6, (int) (byte)0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      jsonFactory2.setCharacterEscapes((CharacterEscapes) null);
      StringBuilder stringBuilder0 = new StringBuilder((byte)0);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      jsonMappingException0.toString();
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("^xUXD|_N");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
      jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)0;
      JsonParser jsonParser0 = jsonFactory2.createParser(byteArray0, 6, (int) (byte)0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "JSON");
      StringBuilder stringBuilder0 = new StringBuilder((byte)0);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) jsonParser0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "?jV\\(>-";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?jV(>-");
      SQLTransientException sQLTransientException0 = new SQLTransientException("", "", 3026, sQLIntegrityConstraintViolationException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("");
      jsonMappingException_Reference0.setIndex((-1477));
      jsonMappingException_Reference0.getDescription();
      int int0 = 26;
      SQLTransientException sQLTransientException1 = new SQLTransientException("Wb]OvBSvhOMy_YA", "", 26, sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) null, "", (Throwable) sQLTransientException1);
      jsonMappingException0.prependPath((Object) sQLTransientException1, "(:Pd");
      JsonMappingException jsonMappingException1 = new JsonMappingException("java.lang.String[?]", (JsonLocation) null, sQLTransientException1);
      jsonMappingException1.prependPath(jsonMappingException_Reference0);
      jsonMappingException0.prependPath(jsonMappingException_Reference0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectOutputStream0, true);
      int int1 = 359;
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(pipedInputStream0, ")");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.getBuffer();
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u001E';
      charArray0[1] = 'm';
      charArray0[2] = '^';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 0, 0);
      JsonLocation jsonLocation0 = jsonParser0.getTokenLocation();
      SQLException sQLException0 = new SQLException("", "JSON", 500);
      JsonMappingException jsonMappingException0 = new JsonMappingException("osv.-/${w|d", jsonLocation0, sQLException0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JsonMappingException.from((JsonParser) null, "Cannot pass null fieldName", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      // Undeclared exception!
      try { 
        JsonMappingException.wrapWithPath((Throwable) null, jsonMappingException_Reference0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.writeReplace();
      String string0 = jsonMappingException_Reference0.getFieldName();
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "4f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "x`i]uLqPzB!V1[eSA0";
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("p_ <uuccpf-(za8>", "x`i]uLqPzB!V1[eSA0", 9);
      MockFile mockFile0 = new MockFile("x`i]uLqPzB!V1[eSA0", "r!)1%nd6");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(mockFileWriter0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientConnectionException0, jsonMappingException_Reference0);
      int int0 = 8233;
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException0, "INCONCLUSIVE");
      jsonMappingException_Reference1.setIndex(8233);
      jsonMappingException_Reference1.getDescription();
      DeserializationContext deserializationContext0 = null;
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonGenerator) null, "x`i]uLqPzB!V1[eSA0");
      jsonMappingException1._buildMessage();
      String string1 = "";
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      Class<PipedInputStream> class0 = PipedInputStream.class;
      // Undeclared exception!
      try { 
        defaultDeserializationContext_Impl0.instantiationException(class0, "initCause");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.DeserializationContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(was ", "(was ", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      int int0 = 8233;
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = new JsonMappingException("java.sql.SQLTransientConnectionException[?]");
      jsonMappingException1.clearLocation();
      // Undeclared exception!
      try { 
        jsonMappingException0.getPathReference((StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(2082);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pushbackReader0, "T]:(");
      jsonMappingException_Reference1.writeReplace();
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference0.setDescription("T]:(");
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append((CharSequence) "T]:(");
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ByteQuadsCanonicalizer.createRoot();
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, "");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) "T]:(", (-128));
      // Undeclared exception!
      try { 
        JsonMappingException.from((SerializerProvider) null, "JSON", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsonMappingException.from((JsonParser) null, "Cannot pass null fieldName", (Throwable) null);
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException("`['S1lJ:{,uqeV)5va,", map0, (Throwable) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException("`['S1lJ:{,uqeV)5va,", (Throwable) null);
      JsonMappingException jsonMappingException1 = new JsonMappingException((Closeable) null, "8:XX9", sQLClientInfoException1);
      Object object0 = new Object();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(object0, "");
      SQLWarning sQLWarning0 = new SQLWarning("", "", (-1119), sQLClientInfoException1);
      JsonMappingException.wrapWithPath((Throwable) sQLWarning0, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.setIndex(8233);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException_Reference0, "Unexpected IOException (of type %s): %s");
      JsonMappingException.Reference jsonMappingException_Reference2 = new JsonMappingException.Reference(pipedReader0);
      jsonMappingException_Reference2.getDescription();
      jsonMappingException_Reference0.setDescription("");
      jsonMappingException_Reference2.getIndex();
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference2.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(34);
      stringWriter0.append((CharSequence) "T]:(");
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonMappingException_Reference1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream1);
      JsonFactory jsonFactory0 = new JsonFactory();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ByteQuadsCanonicalizer.createRoot();
      JsonMappingException jsonMappingException0 = new JsonMappingException(pipedInputStream1, "Unexpected IOException (of type %s): %s");
      jsonMappingException_Reference1.setFieldName("");
      assertEquals(8233, jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setIndex(2082);
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(pushbackReader0, "T]:(");
      jsonMappingException_Reference1.getDescription();
      jsonMappingException_Reference0.setDescription("T]:(");
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference1.getIndex();
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(2);
      stringWriter0.append((CharSequence) "T]:(");
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ByteQuadsCanonicalizer.createRoot();
      JsonMappingException jsonMappingException0 = new JsonMappingException(stringWriter0, "java.io.PushbackReader[\"T]:(\"]");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(was ", "(was ", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      int int0 = 8233;
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException jsonMappingException1 = JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(jsonMappingException1, "O6U+U)");
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, jsonMappingException_Reference1);
      jsonMappingException0._buildMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFieldName();
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      JsonMappingException jsonMappingException0 = JsonMappingException.from(serializerProvider0, "", (Throwable) sQLIntegrityConstraintViolationException0);
      jsonMappingException0.prependPath((Object) "", 9);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1326);
      placeholderForType0.actualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "");
      String string0 = jsonMappingException0.getPathReference();
      assertEquals("", string0);
      
      JsonMappingException jsonMappingException1 = JsonMappingException.from((JsonParser) null, "");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null);
      JsonMappingException.wrapWithPath((Throwable) jsonMappingException1, jsonMappingException_Reference0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(1326);
      placeholderForType0.actualType();
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.invalidTypeIdException((JavaType) null, "", "");
      placeholderForType0.getErasedSignature();
      jsonMappingException0.getMessage();
      jsonMappingException0.getLocalizedMessage();
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(was ", "(was ", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      int int0 = 8233;
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      JsonMappingException.fromUnexpectedIOE(jsonMappingException0);
      jsonMappingException0._buildMessage();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("!`J ~WS]Gcb]N!fEI");
      sQLTransientConnectionException0.spliterator();
      StackTraceElement[] stackTraceElementArray0 = sQLTransientConnectionException0.getStackTrace();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      sQLTransientConnectionException0.forEach(consumer0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLTransientConnectionException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      jsonMappingException_Reference0._fieldName = "";
      jsonMappingException0.getStackTrace();
      jsonMappingException_Reference0._desc = "";
      jsonMappingException_Reference0.setIndex(1015);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException0.getPath();
      jsonMappingException0.getProcessor();
      jsonMappingException_Reference0.toString();
      Class<JsonMappingException> class0 = JsonMappingException.class;
      ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, (TypeBindings) null);
      Class<JsonParserSequence> class1 = JsonParserSequence.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = simpleType0.getGenericSignature(stringBuilder0);
      // Undeclared exception!
      try { 
        resolvedRecursiveType0.getGenericSignature(stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.type.ResolvedRecursiveType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("?jlV(>-");
      SQLTransientException sQLTransientException0 = new SQLTransientException("?jlV(>-", "J)Pfd'E=^v`Aa", 3026, sQLIntegrityConstraintViolationException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLTransientException0, (Object) sQLIntegrityConstraintViolationException0, 3026);
      jsonMappingException0.prependPath((Object) "J)Pfd'E=^v`Aa", "?jlV(>-");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockIOException mockIOException0 = new MockIOException();
      mockIOException0.getStackTrace();
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) mockIOException0, (Object) mockIOException0, "osv.-/${w|d");
      List<JsonMappingException.Reference> list0 = jsonMappingException0.getPath();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("(was ", "(was ", 0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(sQLTransientConnectionException0);
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLInvalidAuthorizationSpecException0, jsonMappingException_Reference0);
      int int0 = 8233;
      jsonMappingException_Reference0.setIndex(8233);
      jsonMappingException_Reference0.getDescription();
      // Undeclared exception!
      try { 
        JsonMappingException.from((DeserializationContext) null, "", (Throwable) jsonMappingException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      DeserializerFactory deserializerFactory0 = beanDeserializerFactory0.withConfig(deserializerFactoryConfig0);
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(deserializerFactory0);
      Class<MockFileOutputStream> class0 = MockFileOutputStream.class;
      JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.weirdKeyException(class0, "B", "!4");
      jsonMappingException0.prependPath((Object) beanDeserializerFactory0, "!4");
      assertFalse(deserializerFactory0.equals((Object)beanDeserializerFactory0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      MockFile mockFile0 = new MockFile("com.fasterxml.jackson.databind.JsonMappingException");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, mockFileOutputStream0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("JSON");
      DefaultPrettyPrinter defaultPrettyPrinter1 = new DefaultPrettyPrinter(defaultPrettyPrinter0);
      JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.setPrettyPrinter(defaultPrettyPrinter1);
      FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(jsonGenerator0, (TokenFilter) null, false, false);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonGenerator) filteringGeneratorDelegate0, "com.fasterxml.jackson.databind.JsonMappingException");
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<Map> class0 = Map.class;
      MapType mapType0 = typeFactory0.constructRawMapType(class0);
      MapType mapType1 = mapType0.withKeyValueHandler(objectMapper0);
      MapType mapType2 = mapType1.withKeyTypeHandler(uTF8JsonGenerator0);
      Class<ArrayDeque> class1 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class1);
      StringBuilder stringBuilder0 = new StringBuilder("+.Fun?");
      StringBuilder stringBuilder1 = collectionType0.getGenericSignature(stringBuilder0);
      StringBuilder stringBuilder2 = mapType2.getErasedSignature(stringBuilder1);
      jsonMappingException0._appendPathDesc(stringBuilder2);
      jsonMappingException0._appendPathDesc(stringBuilder0);
      JsonMappingException.from(jsonGenerator0, "+.Fun?", (Throwable) jsonMappingException0);
      String string0 = jsonMappingException0.getMessage();
      assertEquals("com.fasterxml.jackson.databind.JsonMappingException", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsonMappingException jsonMappingException0 = new JsonMappingException("f\"1yv>");
      jsonMappingException0.getProcessor();
      MockFile mockFile0 = new MockFile("P", "f\"1yv>");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(1024);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(integer0);
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0._from = (Object) "java.lang.Integer[?]";
      jsonMappingException_Reference0.setIndex(2176);
      jsonMappingException_Reference0._desc = "T]:(";
      jsonMappingException_Reference0._index = 2082;
      jsonMappingException_Reference0._index = 2082;
      jsonMappingException_Reference0.getDescription();
      jsonMappingException_Reference0.setDescription("java.lang.Integer[?]");
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.getIndex();
      jsonMappingException_Reference0.writeReplace();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Integer[?]");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringWriter1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std(hashMap0);
      ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8DataInputJsonParser uTF8DataInputJsonParser0 = new UTF8DataInputJsonParser(iOContext1, 3, dataInputStream0, objectReader0, byteQuadsCanonicalizer0, 2082);
      JsonMappingException.Reference jsonMappingException_Reference1 = new JsonMappingException.Reference(uTF8DataInputJsonParser0, 3605);
      JsonMappingException jsonMappingException0 = new JsonMappingException(dataInputStream0, (String) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(pipedInputStream0, ": ");
      String string0 = jsonMappingException_Reference0.getDescription();
      assertNotNull(string0);
      assertEquals("java.io.PipedInputStream[\": \"]", string0);
      assertEquals((-1), jsonMappingException_Reference0.getIndex());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      JsonFactory jsonFactory1 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonParser_Feature0);
      JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
      JsonFactory jsonFactory3 = jsonFactory2.setCharacterEscapes(jsonpCharacterEscapes0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      JsonParser jsonParser0 = jsonFactory3.createParser((Reader) mockFileReader0);
      SQLWarning sQLWarning0 = new SQLWarning("", "");
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(sQLWarning0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from(jsonParser0, "", (Throwable) sQLTimeoutException0);
      String string1 = jsonMappingException0.getPathReference();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference(stringWriter1, 41);
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonGenerator_Feature0);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory2 = jsonFactory1.setOutputDecorator(outputDecorator0);
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'm';
      charArray0[2] = '^';
      JsonParser jsonParser0 = jsonFactory2.createParser(charArray0, 0, 0);
      String string0 = "\\r$Fv+kt,";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("m{A'Y@KJV");
      SQLWarning sQLWarning0 = new SQLWarning("", "\r$Fv+kt,", sQLIntegrityConstraintViolationException0);
      JsonMappingException.from(jsonParser0, "JSON", (Throwable) sQLWarning0);
      PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(placeholderForType0, placeholderForType0);
      MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, collectionLikeType0, placeholderForType0);
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(mapLikeType0, placeholderForType0);
      // Undeclared exception!
      try { 
        referenceType0.withContentValueHandler(stringWriter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation should not be attempted on com.fasterxml.jackson.databind.type.PlaceholderForType
         //
         verifyException("com.fasterxml.jackson.databind.type.PlaceholderForType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsonMappingException jsonMappingException0 = JsonMappingException.from((JsonParser) null, "Cannot pass null fieldName", (Throwable) null);
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference((Object) null, 30);
      jsonMappingException_Reference0._index = 30;
      jsonMappingException_Reference0.getFieldName();
      jsonMappingException_Reference0.setDescription("Cannot pass null fieldName");
      JsonFactory jsonFactory0 = new JsonFactory();
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonGenerator_Feature0, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonParser_Feature0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      JsonParser jsonParser0 = jsonFactory3.createParser(byteArray0, (int) (byte)0, (int) (byte) (-56));
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonParser0, (String) null);
      assertFalse(jsonMappingException1.equals((Object)jsonMappingException0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
      SerializerProvider serializerProvider0 = objectMapper1.getSerializerProviderInstance();
      String string0 = "@/HN0,K";
      int[] intArray0 = new int[9];
      intArray0[0] = 57;
      intArray0[1] = 63;
      intArray0[2] = (-831);
      intArray0[3] = (-882);
      intArray0[4] = 0;
      intArray0[5] = (-1490);
      intArray0[6] = (-2562);
      intArray0[7] = 0;
      intArray0[8] = 89;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("@/HN0,K", "@/HN0,K");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("@/HN0,K", ")", intArray0, sQLTransactionRollbackException0);
      JsonMappingException.from(serializerProvider0, "@/HN0,K", (Throwable) batchUpdateException0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory1 = jsonFactory0.disable(jsonParser_Feature0);
      JsonParser.Feature jsonParser_Feature1 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
      JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature1, true);
      OutputDecorator outputDecorator0 = mock(OutputDecorator.class, new ViolatedAssumptionAnswer());
      jsonFactory2.setOutputDecorator(outputDecorator0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, " [truncated]");
      jsonMappingException0.getProcessor();
      JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "k%?6)N9gIU'y41:<8:f", (Throwable) jsonMappingException0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonGenerator_Feature0);
      JsonFactory jsonFactory2 = jsonFactory1.setRootValueSeparator("");
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory3 = jsonFactory2.configure(jsonFactory_Feature0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        jsonFactory3.createParser(byteArray0, 326, 711);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 326
         //
         verifyException("com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl1 = new DefaultSerializerProvider.Impl(defaultSerializerProvider_Impl0);
      JsonMappingException jsonMappingException0 = JsonMappingException.from((SerializerProvider) defaultSerializerProvider_Impl1, "!{[K`DY%u{pOg");
      jsonMappingException0.getPathReference();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      Class<ArrayDeque> class0 = ArrayDeque.class;
      CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      CollectionType collectionType1 = collectionType0.withContentValueHandler(sequenceInputStream1);
      Enumeration<MockFileInputStream> enumeration1 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      CollectionLikeType collectionLikeType0 = collectionType1.withValueHandler(sequenceInputStream2);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      StringBuilder stringBuilder1 = collectionLikeType0.getGenericSignature(stringBuilder0);
      jsonMappingException0._appendPathDesc(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "NCu\\!&z";
      JsonMappingException jsonMappingException0 = new JsonMappingException("NCu!&z");
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference("NCu!&z", "NCu!&z");
      jsonMappingException_Reference0.getFrom();
      jsonMappingException_Reference0.writeReplace();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("NCu!&z");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      JsonMappingException jsonMappingException0 = new JsonMappingException(" bYYFQU", (JsonLocation) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      // Undeclared exception!
      try { 
        beanDeserializerFactory0.withValueInstantiators((ValueInstantiators) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot pass null resolver
         //
         verifyException("com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JsonMappingException.Reference jsonMappingException_Reference0 = new JsonMappingException.Reference();
      jsonMappingException_Reference0.getFrom();
      int int0 = 63;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("FULL_MATCH", "FULL_MATCH", 63);
      File file0 = null;
      MockFileWriter mockFileWriter0 = null;
      try {
        mockFileWriter0 = new MockFileWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("[no message for ");
      JsonMappingException jsonMappingException0 = JsonMappingException.wrapWithPath((Throwable) sQLSyntaxErrorException0, (Object) "[no message for ", "[no message for ");
      jsonMappingException0.getProcessor();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING;
      JsonFactory jsonFactory1 = jsonFactory0.enable(jsonFactory_Feature0);
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
      JsonFactory jsonFactory2 = jsonFactory1.enable(jsonGenerator_Feature0);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      JsonFactory jsonFactory3 = jsonFactory2.enable(jsonParser_Feature0);
      MockFile mockFile0 = new MockFile(": ", "UNKNOWN");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      JsonGenerator jsonGenerator0 = jsonFactory3.createGenerator((File) mockFile0, jsonEncoding0);
      JsonMappingException jsonMappingException1 = JsonMappingException.from(jsonGenerator0, "bRm{51A#", (Throwable) jsonMappingException0);
      assertNotSame(jsonMappingException0, jsonMappingException1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`['S1lJ:{,uqeV)5va,", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, map0, sQLClientInfoException0);
      pipedOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLClientInfoException1);
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedOutputStream0, "x`i]uLqPzB!V1[eSA0", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("x`i]uLqPzB!V1[eSA0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "";
      String string1 = null;
      pipedOutputStream0.close();
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("`['S1lJ:{,uqeV)5va,", hashMap0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException((String) null, map0, sQLClientInfoException0);
      sQLClientInfoException1.addSuppressed(sQLClientInfoException0);
      pipedOutputStream0.close();
      JsonMappingException jsonMappingException0 = new JsonMappingException("", sQLClientInfoException1);
      JsonMappingException jsonMappingException1 = new JsonMappingException(pipedOutputStream0, "x`i]uLqPzB!V1[eSA0", jsonMappingException0);
      JsonMappingException.Reference jsonMappingException_Reference0 = null;
      try {
        jsonMappingException_Reference0 = new JsonMappingException.Reference("x`i]uLqPzB!V1[eSA0", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot pass null fieldName
         //
         verifyException("com.fasterxml.jackson.databind.JsonMappingException$Reference", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("v%]7&0/'derm/Gc", "com.fasterxml.jackson.annotation.JsonTypeInfo$None");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[0];
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      JsonMappingException jsonMappingException0 = new JsonMappingException("v%]7&0/'derm/Gc", sQLTimeoutException0);
      JsonMappingException jsonMappingException1 = JsonMappingException.wrapWithPath((Throwable) jsonMappingException0, (Object) sQLTimeoutException0, "G,,33Q<-<bBpo`X/{q");
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
      char[] charArray0 = new char[6];
      charArray0[0] = '8';
      charArray0[1] = 'F';
      charArray0[2] = '^';
      charArray0[3] = 'Y';
      charArray0[4] = 'H';
      charArray0[5] = 'p';
      jsonFactory0.createParser(charArray0, 43, 43);
      ObjectMapper objectMapper2 = new ObjectMapper(objectMapper1);
      DeserializationContext deserializationContext0 = objectMapper2.getDeserializationContext();
      JsonMappingException jsonMappingException2 = JsonMappingException.from(deserializationContext0, "G,,33Q<-<bBpo`X/{q");
      assertFalse(jsonMappingException2.equals((Object)jsonMappingException1));
  }
}
